{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u9898\u76ee\u6c47\u603b","text":""},{"location":"#leetcode","title":"Leetcode","text":"\u661f\u6807 \u96be\u5ea6 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u9898\u76ee L \u7b80\u5355 \u54c8\u5e0c\u8868 1. \u4e24\u6570\u4e4b\u548c L \u4e2d\u7b49 \u65e0 2. \u4e24\u6570\u76f8\u52a0 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 L \u56f0\u96be \u4e2d\u4f4d\u6570 4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 L \u4e2d\u7b49 \u56de\u6587 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 M \u4e2d\u7b49 \u6570\u5b66 6. Z \u5b57\u5f62\u53d8\u6362 M \u7b80\u5355 \u65e0 7. \u6574\u6570\u53cd\u8f6c M \u4e2d\u7b49 \u65e0 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) L \u7b80\u5355 \u56de\u6587 9. \u56de\u6587\u6570 M \u4e2d\u7b49 \u65e0 12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 M \u7b80\u5355 \u65e0 14. \u6700\u957f\u516c\u5171\u524d\u7f00 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 15. \u4e09\u6570\u4e4b\u548c L \u4e2d\u7b49 \u9012\u5f52 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 L \u4e2d\u7b49 \u65e0 18. \u56db\u6570\u4e4b\u548c M \u4e2d\u7b49 \u94fe\u8868 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 L \u56f0\u96be \u5806 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 L \u4e2d\u7b49 \u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 L \u56f0\u96be \u94fe\u8868 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 L \u56f0\u96be \u54c8\u5e0c\u8868 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 M \u4e2d\u7b49 \u65e0 36. \u6709\u6548\u7684\u6570\u72ec L \u4e2d\u7b49 \u6df1\u641c 39. \u7ec4\u5408\u603b\u548c L \u4e2d\u7b49 \u6df1\u641c 40. \u7ec4\u5408\u603b\u548c II L \u56f0\u96be \u6df1\u641c 42. \u63a5\u96e8\u6c34 M \u7b80\u5355 \u52a8\u6001\u89c4\u5212 53. \u6700\u5927\u5b50\u5e8f\u548c M \u4e2d\u7b49 \u65e0 55. \u8df3\u8dc3\u6e38\u620f M \u4e2d\u7b49 \u65e0 56. \u5408\u5e76\u533a\u95f4 M \u7b80\u5355 \u65e0 58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 62. \u4e0d\u540c\u8def\u5f84 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 64. \u6700\u5c0f\u8def\u5f84\u548c M \u7b80\u5355 \u65e0 66. \u52a0\u4e00 M \u7b80\u5355 \u65e0 67. \u4e8c\u8fdb\u5236\u6c42\u548c M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 L \u4e2d\u7b49 \u94fe\u8868 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II L \u7b80\u5355 \u94fe\u8868 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 M \u7b80\u5355 \u65e0 88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 H \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 91. \u89e3\u7801\u65b9\u6cd5 H \u56f0\u96be \u52a8\u6001\u89c4\u5212 639. \u89e3\u7801\u65b9\u6cd5 2 L \u4e2d\u7b49 \u6df1\u641c 93. \u590d\u539fIP\u5730\u5740 M \u4e2d\u7b49 \u4e8c\u53c9\u6811 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 L \u4e2d\u7b49 \u6700\u77ed\u8def\u5f84 127. \u5355\u8bcd\u63a5\u9f99 H \u56f0\u96be \u5e76\u67e5\u96c6 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 M \u4e2d\u7b49 \u4e8c\u53c9\u6811 129. \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c L \u4e2d\u7b49 \u6df1\u641c 131. \u5206\u5272\u56de\u6587\u4e32 M \u4e2d\u7b49 \u8d2a\u5fc3 134. \u52a0\u6cb9\u7ad9 M \u7b80\u5355 \u5f02\u6216 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 L \u4e2d\u7b49 \u94fe\u8868 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 M \u4e2d\u7b49 \u94fe\u8868 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 M \u56f0\u96be \u94fe\u8868 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 L \u4e2d\u7b49 \u65e0 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c H \u56f0\u96be \u65e0 164. \u6700\u5927\u95f4\u8ddd L \u7b80\u5355 \u6469\u5c14\u6295\u7968 169. \u591a\u6570\u5143\u7d20 M \u7b80\u5355 \u65e0 171. Excel\u8868\u5217\u5e8f\u53f7 L \u4e2d\u7b49 \u6570\u5b66 179. \u6700\u5927\u6570 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 L \u7b80\u5355 \u52a8\u6001\u89c4\u5212 198. \u6253\u5bb6\u52ab\u820d L \u4e2d\u7b49 \u5e76\u67e5\u96c6 200. \u5c9b\u5c7f\u6570\u91cf M \u4e2d\u7b49 \u4e0e 201. \u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e M \u7b80\u5355 \u94fe\u8868 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 M \u7b80\u5355 \u6570\u5b66 204. \u8ba1\u6570\u8d28\u6570 M \u7b80\u5355 \u54c8\u5e0c\u8868 205. \u540c\u6784\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u56fe\u73af 207. \u8bfe\u7a0b\u8868 L \u56f0\u96be \u524d\u7f00\u6811 212. \u5355\u8bcd\u641c\u7d22 II L \u4e2d\u7b49 \u5feb\u901f\u6392\u5e8f 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 M \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 221. \u6700\u5927\u6b63\u65b9\u5f62 L \u56f0\u96be \u6ce2\u5170\u8868\u8fbe\u5f0f 224. \u57fa\u672c\u8ba1\u7b97\u5668 L \u4e2d\u7b49 \u6469\u5c14\u6295\u7968 229. \u6c42\u4f17\u6570 II M \u7b80\u5355 \u6570\u5b66 231. 2\u7684\u5e42 H \u56f0\u96be \u53cc\u5411\u961f\u5217 239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c M \u7b80\u5355 \u54c8\u5e0c\u8868 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd L \u7b80\u5355 \u6570\u5b66 263. \u4e11\u6570 L \u4e2d\u7b49 \u6570\u5b66 264. \u4e11\u6570 II L \u4e2d\u7b49 \u6811\u72b6\u6570\u7ec4 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 L \u4e2d\u7b49 \u6570\u5b66 313. \u8d85\u7ea7\u4e11\u6570 L \u56f0\u96be \u6811\u72b6\u6570\u7ec4 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 H \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 322. \u96f6\u94b1\u5151\u6362 H \u56f0\u96be \u6811\u72b6\u6570\u7ec4 327. \u533a\u95f4\u548c\u7684\u4e2a\u6570 H \u56f0\u96be \u524d\u7f00\u6811 336. \u56de\u6587\u5bf9 M \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 378. \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20 L \u4e2d\u7b49 \u6392\u5e8f 386. \u5b57\u5178\u5e8f\u6392\u6570 L \u4e2d\u7b49 \u6570\u5b66 402. \u79fb\u6389K\u4f4d\u6570\u5b57 L \u4e2d\u7b49 \u65e0 406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 L \u7b80\u5355 \u65e0 414. \u7b2c\u4e09\u5927\u7684\u6570 M \u7b80\u5355 \u65e0 415. \u5b57\u7b26\u4e32\u76f8\u52a0 M \u4e2d\u7b49 \u6392\u5e8f 451. \u6839\u636e\u5b57\u7b26\u51fa\u73b0\u9891\u7387\u6392\u5e8f M \u4e2d\u7b49 \u54c8\u5e0c\u8868 454. \u56db\u6570\u76f8\u52a0 II L \u4e2d\u7b49 \u5355\u8c03\u6808 456. 132\u6a21\u5f0f L \u7b80\u5355 \u65e0 463. \u5c9b\u5c7f\u7684\u5468\u957f L \u4e2d\u7b49 \u65e0 468. \u9a8c\u8bc1IP\u5730\u5740 L \u56f0\u96be \u524d\u7f00\u6811 472. \u8fde\u63a5\u8bcd L \u4e2d\u7b49 \u65e0 495. \u63d0\u83ab\u653b\u51fb M \u7b80\u5355 \u6570\u5b66 504. \u4e03\u8fdb\u5236\u6570 L \u4e2d\u7b49 \u4e8c\u53c9\u6811 515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 L \u7b80\u5355 \u65e0 541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II L \u4e2d\u7b49 \u5e76\u67e5\u96c6 547. \u670b\u53cb\u5708 L \u7b80\u5355 \u65e0 605. \u79cd\u82b1\u95ee\u9898 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 L \u4e2d\u7b49 \u65e0 621. \u4efb\u52a1\u8c03\u5ea6\u5668 H \u4e2d\u7b49 \u65e0 649. Dota2 \u53c2\u8bae\u9662 L \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20 L \u4e2d\u7b49 \u5e76\u67e5\u96c6 684. \u5197\u4f59\u8fde\u63a5 L \u56f0\u96be \u5e76\u67e5\u96c6 685. \u5197\u4f59\u8fde\u63a5 II H \u4e2d\u7b49 \u5e76\u67e5\u96c6 714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39 L \u4e2d\u7b49 \u65e0 739. \u6bcf\u65e5\u6e29\u5ea6 L \u4e2d\u7b49 dijkstra 743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 L \u7b80\u5355 \u5806 767. \u91cd\u6784\u5b57\u7b26\u4e32 L \u56f0\u96be \u65e0 768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II L \u4e2d\u7b49 \u65e0 769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 H \u4e2d\u7b49 \u65e0 775. \u5168\u5c40\u5012\u7f6e\u4e0e\u5c40\u90e8\u5012\u7f6e H \u4e2d\u7b49 \u65e0 779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570 L \u4e2d\u7b49 \u6240\u6709\u8def\u5f84 797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 L \u4e2d\u7b49 \u65e0 838. \u63a8\u591a\u7c73\u8bfa L \u56f0\u96be \u5e76\u67e5\u96c6 839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 L \u4e2d\u7b49 \u65e0 848. \u5b57\u6bcd\u79fb\u4f4d L \u56f0\u96be \u9012\u5f52 854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u8d2a\u5fc3\u6cd5 870. \u4f18\u52bf\u6d17\u724c M \u7b80\u5355 \u4e8c\u53c9\u6811 872. \u53f6\u5b50\u76f8\u4f3c\u7684\u6811 L \u4e2d\u7b49 \u65e0 881. \u6551\u751f\u8247 L \u7b80\u5355 \u65e0 890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f L \u4e2d\u7b49 \u65e0 915. \u5206\u5272\u6570\u7ec4 L \u4e2d\u7b49 \u6808 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 L \u56f0\u96be \u5e76\u67e5\u96c6 924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad M \u56f0\u96be \u65e0 927. \u4e09\u7b49\u5206 M \u7b80\u5355 \u8d2a\u5fc3 944. \u5220\u5217\u9020\u5e8f L \u4e2d\u7b49 \u6808 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 L \u4e2d\u7b49 \u5feb\u901f\u6392\u5e8f 973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4 L \u4e2d\u7b49 \u65e0 1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811 L \u7b80\u5355 \u4f4d 1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801 L \u4e2d\u7b49 \u4e8c\u5206\u67e5\u627e 1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b L \u4e2d\u7b49 \u5b57\u7b26\u4e32 1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32 L \u4e2d\u7b49 \u5b57\u7b26\u4e32 1023. \u9a7c\u5cf0\u5f0f\u5339\u914d L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c L \u56f0\u96be \u4e8c\u53c9\u6811 1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811 L \u4e2d\u7b49 \u524d\u7f00\u548c 1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c L \u4e2d\u7b49 \u65e0 1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe L \u4e2d\u7b49 \u54c8\u5e0c\u8868 1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 H \u56f0\u96be \u5f85\u505a 1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 L \u4e2d\u7b49 \u65e0 1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613 L \u7b80\u5355 \u65e0 1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21 L \u56f0\u96be \u65e0 1178. \u731c\u5b57\u8c1c L \u56f0\u96be \u62d3\u6251\u6392\u5e8f 1203. \u9879\u76ee\u7ba1\u7406 L \u4e2d\u7b49 \u52a8\u6001\u89c4\u5212 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 L \u56f0\u96be \u54c8\u5e0c\u8868 1224. \u6700\u5927\u76f8\u7b49\u9891\u7387 L \u4e2d\u7b49 \u6df1\u641c 1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6 H \u4e2d\u7b49 \u5f85\u505a 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 L \u4e2d\u7b49 \u65e0 1314. \u77e9\u9635\u533a\u57df\u548c L \u4e2d\u7b49 \u5f85\u505a 1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c L \u4e2d\u7b49 \u65e0 1333. \u9910\u5385\u8fc7\u6ee4\u5668 L \u4e2d\u7b49 \u6700\u77ed\u8def\u5f84 1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 L \u4e2d\u7b49 \u6570\u5b66 1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2 L \u7b80\u5355 \u4f4d 1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f L \u7b80\u5355 \u6570\u5b66 1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929 L \u7b80\u5355 \u65e0 1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32 H \u4e2d\u7b49 \u4e8c\u53c9\u6811 1372. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u957f\u4ea4\u9519\u8def\u5f84 H \u4e2d\u7b49 \u65e0 1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4 H \u7b80\u5355 \u65e0 1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570 H \u4e2d\u7b49 \u6808 1381. \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u589e\u91cf\u64cd\u4f5c\u7684\u6808 L \u4e2d\u7b49 \u4e8c\u53c9\u6811 1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861 H \u4e2d\u7b49 \u65e0 1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d L \u7b80\u5355 \u65e0 1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee L \u7b80\u5355 \u6570\u5b66 1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 L \u4e2d\u7b49 \u6570\u5b66 1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570 L \u4e2d\u7b49 \u6570\u5b66 1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32 L \u4e2d\u7b49 \u65e0 1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217 L \u4e2d\u7b49 \u65e0 1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668 L \u4e2d\u7b49 \u54c8\u5e0c\u8868 1418. \u70b9\u83dc\u5c55\u793a\u8868 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1424. \u5bf9\u89d2\u7ebf\u904d\u5386 II L \u4e2d\u7b49 \u65e0 1452. \u6536\u85cf\u6e05\u5355 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1465. \u5207\u5272\u540e\u9762\u79ef\u6700\u5927\u7684\u86cb\u7cd5 L \u4e2d\u7b49 \u672a\u901a\u8fc7 1466. \u91cd\u65b0\u89c4\u5212\u8def\u7ebf"},{"location":"#lintcode","title":"lintcode","text":"\u96be\u5ea6 \u9898\u76ee \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5 \u7b80\u5355 368. \u8868\u8fbe\u5f0f\u6c42\u503c \u7b80\u5355 370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u7b80\u5355 423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 \u6808 \u7b80\u5355 424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"1. \u4e24\u6570\u4e4b\u548c","text":""},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":""},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9\n\n\u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9\n\u6240\u4ee5\u8fd4\u56de [0, 1]\n</code></pre>"},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#on2","title":"O(n^2)","text":"<p>\u4e24\u6b21\u904d\u5386\uff0c\u6c42\u89e3\u51fa\u6bcf\u4e24\u4e2a\u6570\u7684\u548c\u4e0etarget\u6bd4\u8f83\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u7ed3\u679c\u3002</p>"},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#on","title":"O(n)","text":"<p>\u5229\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u4f4d\u7f6e\u548c\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u628a<code>nums</code>\u4f9d\u6b21\u5b58\u50a8\u5230\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u5b58\u50a8\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad<code>target - nums[i]</code>\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c \u5982\u679c\u5728\uff0c\u8bf4\u660e\u4e4b\u524d\u5b58\u50a8\u8fc7<code>target - nums[i]</code>, \u8fd4\u56de\uff1b\u5426\u5219\uff0c\u5b58\u5230\u54c8\u5e0c\u8868\u4e2d<code>map[nums[i] = i</code>.</p>"},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#_3","title":"\u9898\u89e3","text":""},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#c","title":"C++","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; ans(2, -1);\n        map&lt;int, int&gt; hashMap;\n        for (int i = 0; i &lt; nums.size(); i++)\n        {\n            // pairs = (nums[i], target - nums[i])\n            // \u5982\u679cpairs[1]\u5728hashMap\u4e2d,\u8bf4\u660epairs[0]\u5df2\u7ecf\u88ab\u6dfb\u52a0\u8fc7\u4e86\uff0cpairs[0]\u5e94\u8be5\u5728pairs[1]\u524d\u9762\n            if (hashMap.count(target - nums[i]) &gt; 0)\n            {\n                ans[0] = hashMap[ target - nums[i] ];\n                ans[1] = i;\n                return ans;\n            }\n            // \u5982\u679c\u6ca1\u6709\uff0c\u5b58\u5230hashMap\u4e2d\n            hashMap[ nums[i] ] = i;\n        }\n\n        // \u5982\u679c\u90fd\u5b58\u5230hashMap\u4e2d\u8fd8\u662f\u6ca1\u6709\u5728\u5faa\u73af\u4e2dreturn, \u8bf4\u660e\u6ca1\u6709\n        return ans;      \n    }\n};\n</code></pre>"},{"location":"C%2B%2B/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/#python","title":"Python","text":"<pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        ans = [-1, -1]\n        hashMap = {}\n        for i, val in enumerate(nums):\n            if target-val in hashMap:\n                ans[0] = hashMap[target - val]\n                ans[1] = i\n                return ans\n            hashMap[val] = i\n\n        return ans\n</code></pre>"},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/","title":"100. \u76f8\u540c\u7684\u6811","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_1","title":"100. \u76f8\u540c\u7684\u6811","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u793a\u4f8b</p>"},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#c","title":"C++","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#python","title":"python","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#c_1","title":"C++","text":""},{"location":"C%2B%2B/100.%20%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91/#python_1","title":"python","text":""},{"location":"C%2B%2B/1019.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9/","title":"1019. \u94fe\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u8282\u70b9","text":""},{"location":"C%2B%2B/1019.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9/#1019","title":"1019. \u94fe\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u8282\u70b9","text":""},{"location":"C%2B%2B/1019.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u4ee5\u5934\u8282\u70b9 head \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5206\u522b\u7f16\u53f7\u4e3a\uff1anode_1, node_2, node_3, ... \u3002</p> <p>\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u80fd\u6709\u4e0b\u4e00\u4e2a\u66f4\u5927\u503c\uff08next larger value\uff09\uff1a\u5bf9\u4e8e node_i\uff0c\u5982\u679c\u5176 next_larger(node_i) \u662f node_j.val\uff0c\u90a3\u4e48\u5c31\u6709 j &gt; i \u4e14  node_j.val &gt; node_i.val\uff0c\u800c j \u662f\u53ef\u80fd\u7684\u9009\u9879\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 j\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u66f4\u5927\u503c\u4e3a 0 \u3002</p> <p>\u8fd4\u56de\u6574\u6570\u7b54\u6848\u6570\u7ec4 answer\uff0c\u5176\u4e2d answer[i] = next_larger(node_{i+1}) \u3002</p> <p>\u6ce8\u610f\uff1a\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u8bf8\u5982 [2,1,5] \u8fd9\u6837\u7684\u8f93\u5165\uff08\u4e0d\u662f\u8f93\u51fa\uff09\u662f\u94fe\u8868\u7684\u5e8f\u5217\u5316\u8868\u793a\uff0c\u5176\u5934\u8282\u70b9\u7684\u503c\u4e3a 2\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u503c\u4e3a 1\uff0c\u7b2c\u4e09\u4e2a\u8282\u70b9\u503c\u4e3a 5 \u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1a[2,1,5]\n\u8f93\u51fa\uff1a[5,5,0]\n\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1a[2,7,4,3,5]\n\u8f93\u51fa\uff1a[7,0,5,5,0]\n\n\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1a[1,7,5,1,9,2,5,1]\n\u8f93\u51fa\uff1a[7,9,9,9,0,5,0,0]\n</code></pre>"},{"location":"C%2B%2B/1019.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u66b4\u529b\u65b9\u6cd5\uff0cC++\u53ef\u4ee5\u901a\u8fc7\uff0c Python\u4e0d\u80fd\u901a\u8fc7\uff0c\u8d85\u51fa\u65f6\u95f4\u9650\u5236\u3002</p>"},{"location":"C%2B%2B/1019.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; nextLargerNodes(ListNode* head) {\n        vector&lt;int&gt; ans;\n        ListNode *iter = head;\n        while (iter != nullptr)\n        {\n            ListNode *next = iter-&gt;next;\n            while (next &amp;&amp; next-&gt;val &lt;= iter-&gt;val)\n            {\n                next = next-&gt;next;\n            }\n            if (next) ans.push_back(next-&gt;val);\n            else ans.push_back(0);\n            iter = iter-&gt;next;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/1019.%20%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9/#python","title":"python","text":""},{"location":"C%2B%2B/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":""},{"location":"C%2B%2B/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/#12","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":""},{"location":"C%2B%2B/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I\uff0c V\uff0c X\uff0c L\uff0cC\uff0cD \u548c M\u3002</p> <p>\u5b57\u7b26          \u6570\u503c I             1 V             5 X             10 L             50 C             100 D             500 M             1000</p> <p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a  XXVII, \u5373\u4e3a XX + V + II \u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII\uff0c\u800c\u662f IV\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p> <pre><code>I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002\nX \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 \nC \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002\n</code></pre> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: 3\n\u8f93\u51fa: \"III\"\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: 4\n\u8f93\u51fa: \"IV\"\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: 9\n\u8f93\u51fa: \"IX\"\n\n\u793a\u4f8b 4:\n\n\u8f93\u5165: 58\n\u8f93\u51fa: \"LVIII\"\n\u89e3\u91ca: L = 50, V = 5, III = 3.\n\n\n\u793a\u4f8b 5:\n\n\u8f93\u5165: 1994\n\u8f93\u51fa: \"MCMXCIV\"\n\u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4.\n</code></pre>"},{"location":"C%2B%2B/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u7528\u5217\u8868\u5b58\u50a8\u4ece\u5927\u5230\u5c0f\u9700\u8981\u89e3\u6790\u7684\u7f57\u9a6c\u6570\u5b57\u548c\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u904d\u5386\u4e00\u904d\u5373\u53ef\u89e3\u6790\u51fa\u6765\u3002</p>"},{"location":"C%2B%2B/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    string times(string s, int count)\n    {\n        // \u8fd4\u56des\u91cd\u590dcount\u6b21\u7684\u7ed3\u679c\n        string ans = \"\";\n        while (count --)\n        {\n            ans += s;\n        }\n        return ans;\n    }\n    string intToRoman(int num) {\n        vector&lt;pair&lt;int, string&gt;&gt; kv = {{1000, \"M\"},{900, \"CM\"},{500, \"D\"},{400, \"CD\"},\n                                        {100, \"C\"}, {90, \"XC\"}, {50, \"L\"},{40, \"XL\"},\n                                        {10, \"X\"},{9,\"IX\"}, {5, \"V\"},{4, \"IV\"}, {1, \"I\"}};\n        string ans = \"\";\n        int count = 0;\n        for (auto c : kv)\n        {\n            count = num / c.first;\n            if (count)\n            {\n                ans += times(c.second, count);\n                num -= c.first * count;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/12.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/#python","title":"python","text":"<pre><code>class Solution:\n    def intToRoman(self, num: int) -&gt; str:\n        kv = [(1000,'M'),(900,'CM'),(500,'D'),(400,'CD'),(100,'C'),\n              (90,'XC'),(50,'L'),(40,'XL'),(10,'X'),(9,'IX'),(5,'V'),\n              (4,'IV'),(1,'I')]\n        ans = \"\"\n        for k, v in kv:\n            c = num // k\n            if c:\n                ans += v * c\n                num -= k * c\n\n        return ans\n</code></pre>"},{"location":"C%2B%2B/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":""},{"location":"C%2B%2B/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/#13","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":""},{"location":"C%2B%2B/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26: I\uff0c V\uff0c X\uff0c L\uff0cC\uff0cD \u548c M\u3002</p> <p>\u5b57\u7b26          \u6570\u503c I             1 V             5 X             10 L             50 C             100 D             500 M             1000</p> <p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a  XXVII, \u5373\u4e3a XX + V + II \u3002</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII\uff0c\u800c\u662f IV\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p> <pre><code>I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002\nX \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 \nC \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002\n</code></pre> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: \"III\"\n\u8f93\u51fa: 3\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: \"IV\"\n\u8f93\u51fa: 4\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: \"IX\"\n\u8f93\u51fa: 9\n\n\u793a\u4f8b 4:\n\n\u8f93\u5165: \"LVIII\"\n\u8f93\u51fa: 58\n\u89e3\u91ca: L = 50, V= 5, III = 3.\n\n\u793a\u4f8b 5:\n\u8f93\u5165: \"MCMXCIV\"\n\u8f93\u51fa: 1994\n\u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4.\n</code></pre>"},{"location":"C%2B%2B/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u6309\u7167\u9898\u76ee\u8981\u6c42\u987a\u5e8f\u89e3\u6790\u5373\u53ef\u3002</p>"},{"location":"C%2B%2B/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    bool isValid(char left, char right)\n    {\n        if (left == 'I' &amp;&amp; (right == 'V' || right == 'X')) return true;\n        if (left == 'X' &amp;&amp; (right == 'L' || right == 'C')) return true;\n        if (left == 'C' &amp;&amp; (right == 'D' || right == 'M')) return true;\n        return false;\n    }\n    int romanToInt(string s) {\n        int n = s.size();\n        if (n &lt;= 0) return 0;\n        int ans = 0;\n        map&lt;char, int&gt; kv;\n        kv['I'] = 1;\n        kv['V'] = 5;\n        kv['X'] = 10;\n        kv['L'] = 50;\n        kv['C'] = 100;\n        kv['D'] = 500;\n        kv['M'] = 1000;\n\n        int i = 0;\n        while(i &lt; n -1)\n        {\n            if (kv[s[i]] &gt;= kv[s[i+1]])\n            {\n                ans += kv[s[i]];\n                i++;\n            }\n            else\n            {\n                if (isValid(s[i], s[i+1]))\n                {\n                    ans += kv[s[i+1]] - kv[s[i]];\n                    i = i + 2;\n                }\n                else\n                {\n                    return 0;\n                }\n            }\n        }\n        if (i == n-1)\n        {\n            ans += kv[s[i]];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/13.%20%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/#python","title":"python","text":"<pre><code>class Solution:\n    def isValid(self,left, right):\n        if left == 'I' and (right == 'V' or right == 'X'):\n            return True\n        if left == 'X' and (right == 'L' or right == 'C'):\n            return True\n        if left == 'C' and (right == 'D' or right == 'M'):\n            return True\n        return False\n    def romanToInt(self, s: str) -&gt; int:\n        n = len(s)\n        if n &lt;= 0:\n            return 0\n        kv = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        i = 0\n        ans = 0\n        while(i &lt; n-1):\n            if(kv[ s[i] ] &gt;= kv[s[i+1]]):\n                ans = ans + kv[s[i]]\n                i = i + 1\n            elif(kv[ s[i] ] &lt; kv[ s[i+1] ]):\n                if self.isValid(s[i], s[i+1]):\n                    ans = ans + kv[s[i+1]] - kv[s[i]]\n                    i = i + 2\n                else:\n                    return 0\n        if i == n-1:\n            ans = ans + kv[s[i]]\n        return ans\n</code></pre>"},{"location":"C%2B%2B/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":""},{"location":"C%2B%2B/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#14","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":""},{"location":"C%2B%2B/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: [\"flower\",\"flow\",\"flight\"]\n\u8f93\u51fa: \"fl\"\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: [\"dog\",\"racecar\",\"car\"]\n\u8f93\u51fa: \"\"\n\u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002\n</code></pre>"},{"location":"C%2B%2B/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        string ans = \"\";\n        if (strs.size() == 0) return ans;\n        int end = strs[0].size();\n        for (int i = 0; i &lt; strs.size(); ++i)\n        {\n            if (strs[i].size() &lt; end) end = strs[i].size();\n        }\n        for (int i = 0; i &lt; end; ++i)\n        {\n            char c = strs[0][i];\n            for (int j = 0; j &lt; strs.size(); ++j)\n            {\n                if (strs[j][i] != c) return ans;\n            }\n            ans.push_back(c);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#python","title":"python","text":"<pre><code>class Solution:\n    def longestCommonPrefix(self, strs: List[str]) -&gt; str:\n        ans = \"\"\n        i = 0\n        if len(strs) == 0:\n            return ans\n        end = min([len(s) for s in strs])\n        while i &lt; end:\n            c = strs[0][i]\n            for s in strs:\n                if s[i] != c:\n                   return ans\n            ans += c\n            i += 1\n        return ans   \n</code></pre>"},{"location":"C%2B%2B/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/","title":"141. \u73af\u5f62\u94fe\u8868","text":""},{"location":"C%2B%2B/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#141","title":"141. \u73af\u5f62\u94fe\u8868","text":""},{"location":"C%2B%2B/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</code></pre>"},{"location":"C%2B%2B/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u5feb\u6162\u6307\u9488\uff0c\u5982\u679c\u91cd\u5408\u8bc1\u660e\u6709\u73af\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u73af\u3002</p>"},{"location":"C%2B%2B/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow = head;\n        ListNode *quick = head;\n        while (slow &amp;&amp; quick)\n        {\n            slow = slow-&gt;next;\n            if (quick-&gt;next)\n                quick = quick-&gt;next-&gt;next;\n            else\n                return false;\n            if (slow == quick) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/141.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        slow = head\n        quick = head\n        while slow and quick:\n            slow = slow.next\n            if quick.next:\n                quick = quick.next.next\n            else:\n                return False\n            if slow == quick:\n                return True\n        return False\n</code></pre>"},{"location":"C%2B%2B/142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/","title":"142. \u73af\u5f62\u94fe\u8868 II","text":""},{"location":"C%2B%2B/142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/#142-ii","title":"142. \u73af\u5f62\u94fe\u8868 II","text":""},{"location":"C%2B%2B/142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null\u3002</p> <p>\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002</p> <p>\u8bf4\u660e\uff1a\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1\n\u8f93\u51fa\uff1atail connects to node index 1\n\u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</code></pre>"},{"location":"C%2B%2B/142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u5feb\u6307\u9488\uff0c\u4e00\u4e2a\u6162\u6307\u9488\uff0c\u904d\u5386\u94fe\u8868\uff0c\u5982\u679c\u5230\u7ed3\u5c3e\u8fd8\u6ca1\u6709\u76f8\u4ea4\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\u3002 \u5982\u679c\u76f8\u4ea4\u4e86\uff0c\u4ee4\u6162\u6307\u9488\u91cd\u65b0\u6307\u5411head, \u5feb\u6307\u9488\u4e0d\u52a8\uff0c\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u518d\u6b21\u76f8\u4ea4\u7684\u4f4d\u7f6e\u5c31\u662f\u73af\u7684\u5165\u53e3\u3002</p>"},{"location":"C%2B%2B/142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *slow = head;\n        ListNode *quick = head;\n        while (slow &amp;&amp; quick)\n        {\n            slow = slow-&gt;next;\n            if (quick-&gt;next)\n            {\n                quick = quick-&gt;next-&gt;next;\n            } else { return nullptr;}\n            if (slow == quick)\n            {\n                break;\n            }\n        }\n        if (slow == quick)\n        {\n            slow = head;\n            while (slow &amp;&amp; quick)\n            {\n                if (slow == quick)\n                {\n                    return slow;\n                }\n                slow = slow-&gt;next;\n                quick = quick-&gt;next;\n            }\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def detectCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        slow = head\n        quick = head\n        while slow and quick:\n            slow = slow.next\n            if quick.next:\n                quick = quick.next.next\n            else:\n                return None\n            if slow == quick:\n                break\n        if slow == quick:\n            slow = head\n            while slow and quick:\n                if slow == quick:\n                    return slow\n                slow = slow.next\n                quick = quick.next\n        return None\n</code></pre>"},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/","title":"15. \u4e09\u6570\u4e4b\u548c","text":""},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":""},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p> <p>\u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002\uff08\u4e0d\u662f\u4e09\u5143\u7ec4\u5728\u539f\u6765\u6570\u7ec4\u7684\u4e0b\u6807\u4e0d\u91cd\u590d\uff0c\u800c\u662f\u4e09\u5143\u7ec4\u8981\u5ffd\u7565\u987a\u5e8f\u4e0d\u91cd\u590d\uff09</p> <p>\u793a\u4f8b</p> <pre><code>\u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n</code></pre>"},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u66b4\u529b\u65b9\u6cd5\uff0c\u5c31\u662fCn3,\u6c42\u548c\uff0c\u628a\u6ee1\u8db3\u8981\u6c42\u7684\u4fdd\u5b58\u4e0b\u6765\u3002\u8fd9\u91cc\u53d8\u6362\u4e00\u4e0b\uff0c a + b = -c, \u904d\u5386Cn2, \u7136\u540e\u518d\u6570\u7ec4\u91cc\u9762\u627e\u5230 -c\uff0c\u7ec4\u5408\u6210\u4e09\u5143\u7ec4\u3002</p>"},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#c","title":"C++","text":""},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#python","title":"python","text":""},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#c_1","title":"C++","text":""},{"location":"C%2B%2B/15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/#python_1","title":"python","text":""},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","title":"160. \u76f8\u4ea4\u94fe\u8868","text":""},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#160","title":"160. \u76f8\u4ea4\u94fe\u8868","text":""},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u6ce8\u610f\uff1a\n    \u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de null.\n    \u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002\n    \u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002\n    \u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O(1) \u5185\u5b58\u3002\n</code></pre>"},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u5148\u6c42\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u7136\u540e\u5bf9\u5176\u524d\u9762\u90e8\u5206\uff0c\u5411\u540e\u9010\u4e2a\u8282\u70b9\u6bd4\u8f83\u3002</p>"},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        int n1 = 0;\n        int n2 = 0;\n        ListNode *iterA = headA;\n        ListNode *iterB = headB;\n        while (iterA)\n        {\n            iterA = iterA-&gt;next;\n            ++n1;\n        }\n        while (iterB)\n        {\n            iterB = iterB-&gt;next;\n            ++n2;\n        }\n        if (n1 &gt; n2)\n        {\n            int cc = n1 - n2;\n            while (headA &amp;&amp; cc &gt; 0)\n            {\n                headA = headA-&gt;next;\n                --cc;\n            }\n        }\n        if (n2 &gt; n1)\n        {\n            int cc = n2 - n1;\n            while (headB &amp;&amp; cc &gt; 0)\n            {\n                headB = headB-&gt;next;\n                --cc;\n            }\n        }\n        while (headA &amp;&amp; headB)\n        {\n            if (headA == headB)\n            {\n                return headA;\n            }\n            headA = headA-&gt;next;\n            headB = headB-&gt;next;\n        }\n        return nullptr;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def getIntersectionNode(self, headA, headB):\n        \"\"\"\n        :type head1, head1: ListNode\n        :rtype: ListNode\n        \"\"\"\n        n1 = 0\n        n2 = 0\n        iterA = headA\n        iterB = headB\n        while iterA:\n            iterA = iterA.next\n            n1 += 1\n        while iterB:\n            iterB = iterB.next\n            n2 += 1\n        if n1 &gt; n2:\n            cc = n1 - n2\n            while headA and cc &gt; 0:\n                headA = headA.next\n                cc -= 1\n        if n2 &gt; n1:\n            cc = n2 - n1\n            while headB and cc &gt; 0:\n                headB = headB.next\n                cc -= 1\n        while headA and headB:\n            if headA == headB:\n                return headA\n            headA = headA.next\n            headB = headB.next\n        return None\n</code></pre>"},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#c_1","title":"C++","text":""},{"location":"C%2B%2B/160.%20%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/#python_1","title":"python","text":""},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/","title":"2. \u4e24\u6570\u76f8\u52a0","text":""},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":""},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u8f93\u5165\uff1a(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n\u8f93\u51fa\uff1a7 -&gt; 0 -&gt; 8\n\u539f\u56e0\uff1a342 + 465 = 807\n</code></pre>"},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#_3","title":"\u9898\u89e3","text":"<p>\u904d\u5386\u76f8\u52a0\u6ce8\u610f\u8fdb\u4f4d\u5373\u53ef\u3002</p>"},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        if (l1 == nullptr) return l2;\n        if (l2 == nullptr) return l1;\n\n        ListNode *iter = new ListNode(-1);\n        ListNode *head = iter;\n        int carry = 0;\n        while (l1 != nullptr and l2 != nullptr)\n        {\n            carry = l1-&gt;val + l2-&gt;val + carry;\n            ListNode *node = new ListNode(carry % 10);\n            iter-&gt;next = node;\n            iter = node;\n            carry = carry / 10;\n            l1 = l1-&gt;next;\n            l2 = l2-&gt;next;\n        }\n        while (l1 != nullptr)\n        {\n            carry = l1-&gt;val + carry;\n            ListNode *node = new ListNode(carry % 10);\n            iter-&gt;next = node;\n            iter = node;\n            carry = carry / 10;\n            l1 = l1-&gt;next;\n\n        }\n        while (l2 != nullptr)\n        {\n            carry = l2-&gt;val + carry;\n            ListNode *node = new ListNode(carry % 10);\n            iter-&gt;next = node;\n            iter = node;\n            carry = carry / 10;\n            l2 = l2-&gt;next;\n        }\n        if (carry &gt; 0)\n        {\n            ListNode *node = new ListNode(carry);\n            iter-&gt;next = node;\n        }\n        return head-&gt;next;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/#python","title":"python","text":"<pre><code>class Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n\n        carry = 0\n        head = ListNode(-1)\n        iters = head\n        while(l1 and l2):\n            carry = l1.val + l2.val + carry\n            node = ListNode(carry % 10)\n            carry = carry // 10\n            iters.next = node\n            iters = node\n            l1 = l1.next\n            l2 = l2.next\n        while(l1):\n            carry = l1.val + carry\n            node = ListNode(carry % 10)\n            carry = carry // 10\n            iters.next = node\n            iters = node\n            l1 = l1.next\n        while(l2):\n            carry = l2.val + carry\n            node = ListNode(carry % 10)\n            carry = carry // 10\n            iters.next = node\n            iters = node\n            l2 = l2.next\n        if carry &gt; 0:\n            node = ListNode(carry)\n            iters.next = node\n\n        return head.next\n</code></pre>"},{"location":"C%2B%2B/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":""},{"location":"C%2B%2B/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":""},{"location":"C%2B%2B/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> <p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p> <pre><code>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002\n\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002\n</code></pre> <p>\u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: \"()\"\n\u8f93\u51fa: true\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: \"()[]{}\"\n\u8f93\u51fa: true\n\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: \"(]\"\n\u8f93\u51fa: false\n\n\n\u793a\u4f8b 4:\n\n\u8f93\u5165: \"([)]\"\n\u8f93\u51fa: false\n\n\n\u793a\u4f8b 5:\n\n\u8f93\u5165: \"{[]}\"\n\u8f93\u51fa: true\n</code></pre>"},{"location":"C%2B%2B/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        map&lt;char, char&gt; kv;\n        kv['('] = ')';\n        kv['['] = ']';\n        kv['{'] = '}';\n        stack&lt;char&gt; st;\n        if (s.size() == 0) return true;\n\n        for (int i=0; i &lt; s.size(); ++i)\n        {\n            if (s[i] == '(' || s[i] == '{' || s[i] == '[')  st.push(s[i]);\n            else\n            {\n                if (st.size() == 0) return false; // \u6ca1\u6709\u5339\u914d\u7684\u5de6\u62ec\u53f7\n                if (s[i] == kv[st.top()]) st.pop();\n                else return false; // \u62ec\u53f7\u4e0d\u5339\u914d\n            }\n        }\n\n        if (st.size() == 0) return true;\n        return false;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/#python","title":"python","text":"<pre><code>class Solution:\n    def isValid(self, s: str) -&gt; bool:\n        kv = {'(':')','[':']','{':'}'}\n        if len(s) &lt;= 0:\n            return True\n        stack = []\n        for c in s:\n            if c in ['(','[','{']:\n                stack.append(c)\n            else:\n                if len(stack) == 0:\n                    return False\n                if c == kv[ stack[-1] ]:\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n</code></pre>"},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868","text":""},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#23-k","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868","text":""},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u8f93\u5165:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n\u8f93\u51fa: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre>"},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u7528K\u4e2a\u6307\u9488\u6307\u793a\u94fe\u8868\u7684\u5f53\u524d\u5143\u7d20\uff0c\u6bd4\u8f83K\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u5143\u7d20\u5230\u7ed3\u679c\u94fe\u8868\uff0c\u7136\u540e\u6307\u9488\u5411\u540e\u79fb\u52a8\u3002 \u9700\u8981\u8bb0\u5f55K\u4e2a\u5143\u7d20\u5e76\u52a8\u6001\u66f4\u65b0\u6700\u5c0f\u5143\u7d20\uff0c\u8fd9\u91cc\u4f7f\u7528\u5806\u5b9e\u73b0\uff0c\u8fd8\u8981\u8bb0\u5f55\u6700\u5c0f\u7684\u5143\u7d20\u6765\u81ea\u54ea\u4e2a\u94fe\u8868\u3002</p> <p>\u5229\u7528\u539f\u6765\u94fe\u8868\u7684\u7ed3\u70b9\uff0c\u4e0d\u9700\u8981\u65b0\u5efa\u7acb\u8282\u70b9\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u6307\u793a\u65b0\u94fe\u8868\u7684\u5934\u6307\u9488\u5373\u53ef\uff0c\u8fd9\u6837\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u81f3O(1).</p> <p>C++ \u4e2d\u5806\u7684\u64cd\u4f5c\uff1a - \u5b9a\u4e49\u5c0f\u9876\u5806\uff1apriority_queue,bigger&gt; minHeap; - \u5806\u4e2d\u6dfb\u52a0\u5143\u7d20\uff1aminHeap.push() - \u5806\u9876\u5143\u7d20:minHeap.top() - \u5806\u4e2d\u5220\u9664\u5143\u7d20\uff1aminHeap.pop() - \u5806\u662f\u5426\u4e3a\u7a7a\uff1aminHeap.empty()"},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    // \u81ea\u5b9a\u4e49\u6bd4\u8f83\u89c4\u5219\n    struct bigger {\n        bool operator()(ListNode* l1, ListNode* l2) {\n            return l1-&gt;val &gt; l2-&gt;val;\n        }\n    };\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        priority_queue&lt;ListNode*,vector&lt;ListNode*&gt;,bigger&gt; minHeap;\n        ListNode* head = new ListNode(0);\n        ListNode* iter = head;\n        int n = lists.size();\n        // \u628aK\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u6307\u9488\u653e\u5165\u5806\u4e2d\n        for (int i = 0; i &lt; n; ++i)\n        {\n            if (lists[i] != nullptr) minHeap.push(lists[i]);\n        }\n        while (!minHeap.empty())\n        {\n            iter-&gt;next = minHeap.top();\n            minHeap.pop();\n            if (iter-&gt;next-&gt;next != nullptr)\n                minHeap.push(iter-&gt;next-&gt;next);\n            iter = iter-&gt;next;\n        }\n        return head-&gt;next;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#python","title":"python","text":"<p>python \u4e2d\u5806\u7684\u64cd\u4f5c\uff1a - \u5f15\u5165\u5305\uff1a from queue import PriorityQueue - \u5b9a\u4e49\uff1aminHeap = PriorityQueue()  # \u9ed8\u8ba4\u5efa\u7acb\u5c0f\u9876\u5806 - \u5224\u7a7a: minHeap.empty() - \u6dfb\u52a0\u5143\u7d20\uff1aminHeap.put((key,value)) #\u4e0d\u80fd\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u4f20\u5165\u5143\u7ec4\uff0c\u6839\u636ekey\u7684\u503c\u5efa\u7acb\u5c0f\u9876\u5806 - \u5806\u9876\u5143\u7d20\uff1aminHeap.get() #\u53d6\u5f97\u5e76\u5220\u9664\uff0c\u4e0eC++\u4e2d\u7684top()\u4e0d\u540c - \u6ce8\u610f\uff1a\u4f20\u5165\u5143\u7ec4\u7684\u65f6\u5019\u5982\u679ckey\u76f8\u540c, \u4f1a\u8fdb\u4e00\u6b65\u6bd4\u8f83value, \u5982\u679cvalue\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u800c\u4e14\u6ca1\u6709\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u4f1a\u62a5\u9519\uff0c\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u3002</p> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -&gt; ListNode:\n        from queue import PriorityQueue\n        head = ListNode(0)\n        iters = head\n        minHeap = PriorityQueue()\n        for i,node in enumerate(lists):\n            if node:\n                minHeap.put((node.val, i)) # \u8fd9\u91cc\u5982\u679cnode.val\u76f8\u540c\uff0c\u4f1a\u6bd4\u8f83i\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f20\u9012node\u8282\u70b9\uff0c\u56e0\u4e3a\u6ca1\u6709\u81ea\u5b9a\u4e49\u7c7b\u578b\u6ca1\u6709\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\n        while not minHeap.empty():\n            node_val, i = minHeap.get();\n            iters.next = lists[i]\n            if lists[i].next:\n                minHeap.put( (lists[i].next.val, i) )\n                lists[i] = lists[i].next # \u6ce8\u610f\u66f4\u65b0\n            iters = iters.next\n        return head.next\n</code></pre>"},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4f7f\u7528\u5206\u6cbb\u6cd5\u4e24\u4e24\u5408\u5e76\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u4e0a\u9762\u7684\u65b9\u6cd5\u6301\u5e73\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1),\u6bd4\u4e0a\u9762\u7684\u65b9\u6cd5\u8981\u597d\u3002</p>"},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#c_1","title":"C++","text":""},{"location":"C%2B%2B/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/#python_1","title":"python","text":""},{"location":"C%2B%2B/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":""},{"location":"C%2B%2B/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#237","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":""},{"location":"C%2B%2B/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\uff0c\u4f60\u5c06\u53ea\u88ab\u7ed9\u5b9a\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: head = [4,5,1,9], node = 5\n\u8f93\u51fa: [4,1,9]\n\u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 1 -&gt; 9.\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: head = [4,5,1,9], node = 1\n\u8f93\u51fa: [4,5,9]\n\u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 5 -&gt; 9.\n</code></pre>"},{"location":"C%2B%2B/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u53ea\u7ed9\u51fa\u4e86\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u65e0\u8bba\u5982\u4f55\u662f\u4e0d\u53ef\u80fd\u5220\u9664\u8fd9\u4e2a\u8282\u70b9\u7684\uff0c\u56e0\u4e3a\u662f\u5355\u5411\u94fe\u8868\uff0c\u65e0\u6cd5\u627e\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002 \u53ea\u80fd\u505a\u5230(\u770b\u8d77\u6765)\u5220\u9664\u4e86\u8fd9\u4e2a\u8282\u70b9\uff1a\u5148\u628a\u540e\u9762\u7684\u8282\u70b9\u7684\u6570\u503c\u62f7\u8d1d\u5230\u672c\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u540e\u4e00\u4e2a\u8282\u70b9\u3002</p>"},{"location":"C%2B%2B/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        if (node == nullptr) return;\n        if (node-&gt;next == nullptr) return;\n        node-&gt;val = node-&gt;next-&gt;val;\n        node-&gt;next = node-&gt;next-&gt;next;\n        return;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/237.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        if node == None:\n            return\n        if node.next == None:\n            return\n        node.val = node.next.val\n        node.next = node.next.next\n        return\n</code></pre>"},{"location":"C%2B%2B/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":""},{"location":"C%2B%2B/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":""},{"location":"C%2B%2B/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u7ed9\u5b9a 1-&gt;2-&gt;3-&gt;4, \u4f60\u5e94\u8be5\u8fd4\u56de 2-&gt;1-&gt;4-&gt;3.\n</code></pre>"},{"location":"C%2B%2B/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u9700\u8981\u4e09\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u8bb0\u5f55\u4e4b\u524d\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u53e6\u5916\u4e24\u4e2a\u8bb0\u5f55\u8981\u4ea4\u6362\u4f4d\u7f6e\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"C%2B%2B/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (head == nullptr) return head;\n        if (head-&gt;next == nullptr) return head;\n\n        ListNode *new_head = new ListNode(0);\n        new_head-&gt;next = head;\n\n        ListNode *iter_pre = new_head;       \n        ListNode *iter = head;\n        ListNode *iter_next = head-&gt;next;\n        while (iter != nullptr &amp;&amp; iter_next != nullptr)\n        {\n            // \u4ea4\u6362\u4f4d\u7f6e\n            iter-&gt;next = iter_next-&gt;next;\n            iter_pre-&gt;next = iter_next;\n            iter_next-&gt;next = iter;\n\n            // \u66f4\u65b0\u4f4d\u7f6e\uff0c\u6307\u5411\u4e0b\u4e00\u5904\n            iter_pre = iter;\n            iter = iter-&gt;next;\n            if (iter != nullptr)\n                iter_next = iter-&gt;next; //\u5355\u6570\u7684\u573a\u666f\n        }\n        return new_head-&gt;next;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def swapPairs(self, head: ListNode) -&gt; ListNode:\n        if not head:\n            return head\n        if not head.next:\n            return head\n\n        new_head = ListNode(0)\n        new_head.next = head\n\n        cur_pre = new_head\n        cur = head\n        cur_next = head.next\n\n        while cur and cur_next:\n            cur.next = cur_next.next\n            cur_pre.next = cur_next\n            cur_next.next = cur\n\n            cur_pre = cur\n            cur = cur.next\n            if cur:\n                cur_next = cur.next\n        return new_head.next\n</code></pre>"},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#25-k","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002</p> <p>k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002</p> <p>\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b :\n\n\u7ed9\u5b9a\u8fd9\u4e2a\u94fe\u8868\uff1a1-&gt;2-&gt;3-&gt;4-&gt;5\n\n\u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2-&gt;1-&gt;4-&gt;3-&gt;5\n\n\u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3-&gt;2-&gt;1-&gt;4-&gt;5\n\n\u8bf4\u660e :\n\n    \u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002\n    \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\n</code></pre>"},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u628a\u8be5\u95ee\u9898\u5206\u89e3\u6210\u4e24\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u662fK\u4e2a\u5143\u7d20\u7684\u94fe\u8868\u7684\u53cd\u5411\uff0c\u4e00\u4e2a\u662f\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u5143\u7d20\u3002 \u8bbestart, end\u662fK\u4e2a\u5143\u7d20\u7684\u94fe\u8868\u7684\u9996\u8282\u70b9\u548c\u5c3e\u8282\u70b9\uff0cpre_start\u6307\u5411\u9996\u8282\u70b9\u4e4b\u524d\u7684\u8282\u70b9\uff0c \u53cd\u8f6c\u53ef\u4ee5\u8868\u793a\u6210</p> <pre><code>start-&gt;next = end-&gt;next;\npre-&gt;next = end;\nreverse(start, end); // \u53cd\u8f6cstart, end\u4e4b\u95f4\u7684\u8282\u70b9\n\n// \u66f4\u65b0\u7ee7\u7eed\u4e0b\u4e00\u8f6e\npre = start;\nstart = start-&gt;next;\nend = get(end,k); // \u66f4\u65b0end\u8282\u70b9\n</code></pre> <p>\u5176\u4e2d<code>get</code>\u65b9\u6cd5\u8d1f\u8d23\u66f4\u65b0<code>end</code>\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u4ecestart\u5f00\u59cb\u6ca1\u6709K\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u8fd4\u56de\u7a7a\u8868\u793a\u4e0d\u7528\u7ffb\u8f6c\u3002</p>"},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#c","title":"C++","text":""},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#python","title":"python","text":""},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#c_1","title":"C++","text":""},{"location":"C%2B%2B/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/#python_1","title":"python","text":""},{"location":"C%2B%2B/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","title":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":""},{"location":"C%2B%2B/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#26","title":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":""},{"location":"C%2B%2B/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p> <p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2], \n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 2\u3002 \n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\u793a\u4f8b 2:\n\n\u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4],\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</code></pre>"},{"location":"C%2B%2B/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u641c\u7d22\u4e00\u6837\u7684\uff0c\u76f4\u5230\u9047\u5230\u4e0d\u4e00\u6837\u7684\u518d\u5f00\u59cb\u628a\u540e\u9762\u7684\u6574\u4f53\u79fb\u52a8\u5230\u524d\u9762\uff0c\u7528\u4e00\u4e2a\u6807\u5fd7\u8bb0\u5f55\u7ed3\u5c3e\u3002</p>"},{"location":"C%2B%2B/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        int i = 0;\n        int end = nums.size();\n        while (i &lt; end)\n        {\n            int j = i + 1;\n            int same = 0;\n            while (j &lt; end &amp;&amp; nums[j] == nums[i])\n            {\n                j ++;\n                same ++;\n            }\n            end = end - same;\n            // [j,n) -&gt; [i+1,]\n            for (int k = j; k &lt; nums.size(); ++k)\n            {\n                nums[i+1+k-j] = nums[k];\n            }\n            i = i + 1;\n        }\n        return end;\n    }\n};\n</code></pre> <p>\u4e0a\u9762\u7684\u65b9\u6cd5\u4f7f\u7528python\u8fc7\u4e0d\u4e86\uff0c\u590d\u6742\u5ea6\u592a\u9ad8\uff0cpython\u6362\u4e00\u79cd\u901f\u5ea6\u5feb\u7684\uff0c\u4f7f\u7528\u5feb\u6162\u6307\u9488\u3002</p>"},{"location":"C%2B%2B/26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#python","title":"python","text":"<pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        if len(nums) == 0:\n            return 0\n        i = 0\n        j = 1\n        while j &lt; len(nums):\n            if nums[i] != nums[j]:\n                i = i + 1\n                nums[i] = nums[j]\n            j = j + 1\n        return i + 1\n</code></pre>"},{"location":"C%2B%2B/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","title":"27. \u79fb\u9664\u5143\u7d20","text":""},{"location":"C%2B%2B/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":""},{"location":"C%2B%2B/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val\uff0c\u4f60\u9700\u8981\u539f\u5730\u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p> <p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p> <p>\u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u7ed9\u5b9a nums = [3,2,2,3], val = 3,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n\n\n\u793a\u4f8b 2:\n\n\u7ed9\u5b9a nums = [0,1,2,2,3,0,4,2], val = 2,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a 0, 1, 3, 0, 4\u3002\n\n\u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</code></pre>"},{"location":"C%2B%2B/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        if (nums.size() == 0) return 0;\n        int i = 0;\n        int j = 0;\n        while (j &lt; nums.size())\n        {\n            if (nums[j] != val)\n            {\n                nums[i] = nums[j];\n                i++;\n            }\n            j++;\n        }\n        return i;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#python","title":"python","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        if len(nums) == 0:\n            return 0\n        i = 0\n        j = 0\n        end = len(nums)\n        while j &lt; end:\n            same = 0\n            if nums[j] != val:\n                nums[i] = nums[j]\n                i = i + 1\n            j = j + 1\n        return i\n</code></pre>"},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/","title":"3. \u6700\u957f\u5b57\u4e32","text":""},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":""},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\u8f93\u5165: \"abcabcbb\"\n\u8f93\u51fa: 3 \n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n\u793a\u4f8b 2:\n\u8f93\u5165: \"bbbbb\"\n\u8f93\u51fa: 1\n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002\n\u793a\u4f8b 3:\n\u8f93\u5165: \"pwwkew\"\n\u8f93\u51fa: 3\n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n     \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002\n</code></pre>"},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li> <p>\u5148\u5c1d\u8bd5\u66b4\u529b\u7684\u89e3\u6cd5\uff0c\u4ece\u7b2c\u4e00\u5b57\u7b26\u5f00\u59cb\u653e\u5165set,\u9047\u5230\u91cd\u590d\u7684\u5c31\u505c\u6b62\uff0c\u8bb0\u5f55\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u6700\u5927\u5b57\u7b26\u4e2a\u6570\uff0c\u6700\u540e\u8f93\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u3002</p> </li> <li> <p>\u66b4\u529b\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e24\u91cd\u5faa\u73af\uff0c\u5176\u4e2d\u6709\u5927\u91cf\u7684\u65e0\u7528\u67e5\u627e\u3002\u4ed4\u7ec6\u8003\u8651\uff0c\u5982\u679c\u626b\u63cf\u5230\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u4ece\u5de6\u4fa7\u5220\u9664\u4e00\u6837\u7684\uff0c\u7ee7\u7eed\u5411\u4e0b\u626b\u63cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u7528\u56de\u6eaf\uff0c\u63d0\u9ad8\u6548\u7387\u3002</p> </li> </ol>"},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/#_3","title":"\u9898\u89e3","text":""},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/#c","title":"C++","text":"<p>\u66b4\u529b\u89e3\u51b3\uff1a</p> <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int len = s.size();\n        set&lt;char&gt; unique;\n        int ans = 0;\n\n        for (int i = 0; i &lt; len; i ++)\n        {\n            int length;\n            for (int j = i; j &lt; len; j ++)\n            {\n                if (unique.find(s[j]) == unique.end())\n                {\n                    unique.insert(s[j]);\n                }\n                else\n                {\n                    break;\n                }\n            }\n            length = unique.size();\n            ans = ans &gt; length ? ans : length;\n            unique.clear();\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u5143\u7d20\u4f4d\u7f6e\uff0c\u907f\u514d\u91cd\u590d\u626b\u63cf\u3002</p> <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map&lt;char, int&gt; m;\n        int ans = 0;\n        int left = 0; // \u6307\u793a\u5de6\u4fa7\u5f00\u59cb\u7684\u4f4d\u7f6e\n        for (int i = 0; i &lt; s.size(); i++)\n        {\n            left = max(left, m[ s[i] ]); //\u66f4\u65b0\u5de6\u4fa7\n            m[ s[i] ] = i + 1; // \u4f4d\u7f6e\u4ece1\u5f00\u59cb\n            ans = max(ans, i - left + 1);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/3.%20%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/#python","title":"python","text":"<pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        j = 0\n        end = len(s)\n        ans = 0\n        unique = set()\n\n        while(j &lt; end):\n            i = j\n            while(i &lt; end):\n                if s[i] not in unique:\n                    unique.add(s[i])\n                    i = i + 1\n                    continue\n                else:\n                    break\n            length = len(unique)\n            ans = max(ans, length)\n            unique = set()\n            j = j + 1\n\n        return ans\n ```\n\n \u4f7f\u7528dict\u5b58\u50a8\u6620\u5c04\u5173\u7cfb\uff0c\u5b9e\u73b0\u4e00\u904d\u626b\u63cf\u51fa\u7ed3\u679c\u3002\n\n ```python\n class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        ans = 0\n        m = {}\n        left = 0\n        for i, v in enumerate(s):\n            if v not in m:\n                m[v] = i + 1\n            else:\n                left = max(left, m[v])\n                m[v] = i + 1\n            ans = max(ans, i - left + 1)\n        return ans\n</code></pre>"},{"location":"C%2B%2B/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":""},{"location":"C%2B%2B/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#35","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":""},{"location":"C%2B%2B/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: [1,3,5,6], 5\n\u8f93\u51fa: 2\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: [1,3,5,6], 2\n\u8f93\u51fa: 1\n\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: [1,3,5,6], 7\n\u8f93\u51fa: 4\n\n\n\u793a\u4f8b 4:\n\n\u8f93\u5165: [1,3,5,6], 0\n\u8f93\u51fa: 0\n</code></pre>"},{"location":"C%2B%2B/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4e8c\u5206\u67e5\u627e\u7684\u7b80\u5355\u5e94\u7528\u3002</p>"},{"location":"C%2B%2B/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1;\n        int mid;\n        while (left &lt;= right)\n        {\n            mid = (left + right) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[mid] &lt; target)\n            {\n                left = mid + 1;\n            }\n            if (nums[mid] &gt; target)\n            {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#python","title":"python","text":"<pre><code>class Solution:\n    def searchInsert(self, nums: List[int], target: int) -&gt; int:\n        left = 0\n        right = len(nums) - 1\n        while (left &lt;= right):\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] &lt; target:\n                left = mid + 1\n            if nums[mid] &gt; target:\n                right = mid - 1\n        return left\n</code></pre>"},{"location":"C%2B%2B/38.%20%E6%8A%A5%E6%95%B0/","title":"38. \u62a5\u6570","text":""},{"location":"C%2B%2B/38.%20%E6%8A%A5%E6%95%B0/#38","title":"38. \u62a5\u6570","text":""},{"location":"C%2B%2B/38.%20%E6%8A%A5%E6%95%B0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u62a5\u6570\u5e8f\u5217\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6309\u7167\u5176\u4e2d\u7684\u6574\u6570\u7684\u987a\u5e8f\u8fdb\u884c\u62a5\u6570\uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u3002\u5176\u524d\u4e94\u9879\u5982\u4e0b\uff1a</p> <ol> <li>1</li> <li>11</li> <li>21</li> <li>1211</li> <li>111221</li> </ol> <p>1 \u88ab\u8bfb\u4f5c  \"one 1\"  (\"\u4e00\u4e2a\u4e00\") , \u5373 11\u3002 11 \u88ab\u8bfb\u4f5c \"two 1s\" (\"\u4e24\u4e2a\u4e00\"\uff09, \u5373 21\u3002 21 \u88ab\u8bfb\u4f5c \"one 2\",  \"one 1\" \uff08\"\u4e00\u4e2a\u4e8c\" ,  \"\u4e00\u4e2a\u4e00\") , \u5373 1211\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff081 \u2264 n \u2264 30\uff09\uff0c\u8f93\u51fa\u62a5\u6570\u5e8f\u5217\u7684\u7b2c n \u9879\u3002</p> <p>\u6ce8\u610f\uff1a\u6574\u6570\u987a\u5e8f\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\u8f93\u5165: 1\n\u8f93\u51fa: \"1\"\n\u793a\u4f8b 2:\n\u8f93\u5165: 4\n\u8f93\u51fa: \"1211\"\n</code></pre>"},{"location":"C%2B%2B/38.%20%E6%8A%A5%E6%95%B0/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u5b9e\u9645\u4e0a\u5c31\u662f\u7edf\u8ba1\u76f8\u90bb\u7684\u91cd\u590d\u6570\u5b57\u7684\u4e2a\u6570\uff0c\u7136\u540e\u5faa\u73af\u3002</p>"},{"location":"C%2B%2B/38.%20%E6%8A%A5%E6%95%B0/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    string next(string s)\n    {\n        int i = 0;\n        string ans = \"\";\n        while (i &lt; s.size())\n        {\n            int j = i + 1;\n            int c = 1;\n            while (j &lt; s.size() &amp;&amp; s[j] == s[i])\n            {\n                c ++;\n                j ++;\n            }\n            ans.push_back((char)(c + '0'));\n            ans.push_back(s[i]);\n            i = j;\n        }\n        return ans;\n    }\n    string countAndSay(int n) {\n        string ans = \"1\";\n        while (n-1)\n        {\n            ans = next(ans);\n            n = n - 1;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/38.%20%E6%8A%A5%E6%95%B0/#python","title":"python","text":"<pre><code>class Solution:\n    def next(self,s:str) -&gt; str:\n        \"\"\"\n        \u83b7\u53d6\u4e0b\u4e00\u4e2a\u62a5\u6570\u5e8f\u5217\n        \"\"\"\n        i = 0\n        ans = \"\"\n        while i &lt; len(s):\n            j = i + 1\n            c = 1\n            while j &lt; len(s) and s[j] == s[i]:\n                c = c + 1\n                j = j + 1\n            ans += (str(c) + str(s[i]))\n            i = j\n        return ans\n    def countAndSay(self, n: int) -&gt; str:\n        ans = \"1\"\n        while n-1:\n            ans = self.next(ans)\n            n = n - 1\n        return ans\n</code></pre>"},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2\u3002 \u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log(m + n))\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u548c nums2 \u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\nnums1 = [1, 3]\nnums2 = [2]\n\n\u5219\u4e2d\u4f4d\u6570\u662f 2.0\n\u793a\u4f8b 2:\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n\u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5\n</code></pre>"},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u66b4\u529b\u89e3\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u628a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76(O(m+n)), \u518d\u53d6\u51fa\u4e2d\u4f4d\u6570(O(1)),\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u4e0d\u7b26\u5408\u8981\u6c42\u3002 \u4e0d\u989d\u5916\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u53ea\u7528\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709 \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d0\u5347\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u66b4\u529b\u65b9\u6cd5\u3002</p>"},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int i = 0;\n        int j = 0;\n        int size1 = nums1.size();\n        int size2 = nums2.size();\n        vector&lt;int&gt; merge;\n        while (i &lt; size1 &amp;&amp; j &lt; size2)\n        {\n            if (nums1[i] &lt;= nums2[j])\n            {\n                merge.push_back(nums1[i]);\n                i++;\n            }\n            else\n            {\n                merge.push_back(nums2[j]);\n                j++;\n            }\n        }\n        while (i &lt; size1)\n        {\n            merge.push_back(nums1[i]);\n            i++;\n        }\n        while (j &lt; size2)\n        {\n            merge.push_back(nums2[j]);\n            j++;\n        }\n\n        int size3 = merge.size();\n        if (size3 % 2 == 0)\n        {\n            int pos2 = size3 / 2;\n            int pos1 = pos2 - 1;\n            float ans = (merge[pos1] + merge[pos2]) / 2.0;\n            return ans;\n        }\n        else\n        {\n            float ans = (float)merge[size3 / 2];\n            return ans;\n        }\n\n        return -1;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#python","title":"python","text":"<pre><code>class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\n        i = 0\n        j = 0\n        merge = []\n        while (i &lt; len(nums1) and j &lt; len(nums2)):\n            if nums1[i] &lt;= nums2[j]:\n                merge.append(nums1[i])\n                i = i + 1\n            else:\n                merge.append(nums2[j])\n                j = j + 1\n        while i &lt; len(nums1):\n            merge.append(nums1[i])\n            i = i + 1\n        while j &lt; len(nums2):\n            merge.append(nums2[j])\n            j = j + 1\n\n        if (len(merge) % 2 == 0):\n            pos2 = len(merge) // 2\n            pos1 = pos2 - 1\n            ans = (merge[pos1] + merge[pos2]) / 2.0\n            return ans\n        else:\n            ans = float( merge[len(merge) // 2] )\n            return ans\n</code></pre>"},{"location":"C%2B%2B/4.%20%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":""},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":""},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165: \"babad\"\n\u8f93\u51fa: \"bab\"\n\u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002\n\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165: \"cbbd\"\n\u8f93\u51fa: \"bb\"\n</code></pre>"},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u522b\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u67e5\u627e\u6700\u957f\u7684\u56de\u6587\u4e32\uff0c\u4fdd\u5b58\u6700\u957f\u7684\u90a3\u4e2a\u7684\u4e0b\u6807\uff0c\u8fd4\u56de\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(n^2),\u53ef\u4ee5\u901a\u8fc7\u3002</p>"},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        if (s.size() &lt;= 1) return s;\n        int start = 0, end = 0;\n\n        for (int i = 0; i &lt; s.size(); i++)\n        {\n            int left, right, tmpLen = 0;\n            // \u4ee5s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = right = i;\n            while (left &gt;= 0 &amp;&amp; right &lt; s.size() &amp;&amp; s[left] == s[right])\n            {\n                left--, right++;\n            }\n            tmpLen = max(tmpLen, right - left - 1);\n            // \u4ee5s[i],s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = i, right = i + 1;\n            while (left &gt;= 0 &amp;&amp; right &lt; s.size() &amp;&amp; s[left] == s[right])\n            {\n                left--, right++;\n            }\n            tmpLen = max(tmpLen, right - left - 1);\n            // \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0start, end\n            if (tmpLen &gt; end - start + 1)\n            {\n                start = i - (tmpLen - 1) / 2;\n                end = i + tmpLen / 2;\n            }\n        }\n        return s.substr(start, end-start+1);\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#python","title":"python","text":"<pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        start = 0\n        end = 0\n        for i in range(len(s)):\n            tmp_max = 0\n            # s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = i\n            right = i\n            while left &gt;= 0 and right &lt; len(s) and s[left]==s[right]:\n                left -= 1\n                right += 1\n            tmp_max = max(tmp_max, right - left - 1)\n            # s[i], s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = i\n            right = i + 1\n            while left &gt;= 0 and right &lt; len(s) and s[left]==s[right]:\n                left -= 1\n                right += 1\n            tmp_max = max(tmp_max, right - left - 1)\n            # \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0\u8bb0\u5f55\u7684\u4e0b\u6807\n            if tmp_max &gt; end - start + 1:\n                start = i - (tmp_max - 1) // 2\n                end = i + tmp_max // 2\n        return s[start : end+1]\n</code></pre>"},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4f7f\u7528Manacher\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>https://segmentfault.com/a/1190000008484167</p>"},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#c_1","title":"C++","text":""},{"location":"C%2B%2B/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/#python_1","title":"python","text":""},{"location":"C%2B%2B/50.%20Pow%28x%2C%20n%29/","title":"50. Pow(x, n)","text":""},{"location":"C%2B%2B/50.%20Pow%28x%2C%20n%29/#50-powx-n","title":"50. Pow(x, n)","text":""},{"location":"C%2B%2B/50.%20Pow%28x%2C%20n%29/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: 2.00000, 10\n\u8f93\u51fa: 1024.00000\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: 2.10000, 3\n\u8f93\u51fa: 9.26100\n\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: 2.00000, -2\n\u8f93\u51fa: 0.25000\n\u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25\n\n\u8bf4\u660e:\n\n\n    -100.0 &lt; x &lt; 100.0\n    n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u2212231, 231 \u2212 1] \u3002\n</code></pre>"},{"location":"C%2B%2B/50.%20Pow%28x%2C%20n%29/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u5feb\u901f\u5e42\u3002</p>"},{"location":"C%2B%2B/50.%20Pow%28x%2C%20n%29/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    double quickPow(double a,long long b)\n    {\n        double ans = 1;\n        double base = a;\n        while(b != 0)\n        {\n            if(b&amp;1 != 0)\n                ans*=base;\n            base*=base;\n            b&gt;&gt;=1;\n        }\n        return ans;\n    }\n    double myPow(double x, int n) {\n        bool negtive = false;\n        long long nn = n;\n        if (nn &lt; 0)\n        {\n            nn = -nn;\n            negtive = true;\n        }\n        double ans = 0;\n        ans = quickPow(x, nn);\n        if (negtive)\n        {\n            ans = 1 / ans;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/50.%20Pow%28x%2C%20n%29/#python","title":"python","text":"<pre><code>class Solution:\n    def quickPow(self, a: float, b: int) -&gt; float:\n        base = a\n        ans = 1\n        while b:\n            if b&amp;1 == 1:\n                ans *= base\n            base *= base\n            b = b &gt;&gt; 1\n        return ans\n\n    def myPow(self, x: float, n: int) -&gt; float:\n        negtive = False\n        if n &lt; 0:\n            negtive = True\n            n = -n\n        ans = self.quickPow(x, n)\n        if negtive:\n            ans = 1.0 / ans\n        return ans\n</code></pre>"},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/","title":"53. \u6700\u5927\u5b50\u5e8f\u548c","text":""},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#nums","title":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002","text":""},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b:\n\u8f93\u5165: [-2,1,-3,4,-1,2,1,-5,4],\n\u8f93\u51fa: 6\n\u89e3\u91ca: \u8fde\u7eed\u5b50\u6570\u7ec4 [4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a 6\u3002\n</code></pre>"},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u52a8\u6001\u89c4\u5212\u6cd5\u89e3\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6<code>O(n)</code>, \u7a7a\u95f4\u590d\u6742\u5ea6<code>O(1)</code>. <code>dp[i]</code>\u8868\u793a\u4ee5<code>i</code>\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\uff0c\u90a3\u4e48<code>dp[i+1] = max(dp[i]+nums[i], nums[i])</code></p>"},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int maxSubArray(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n == 0) return 0;\n        if (n == 1) return nums[0];\n        int dpi = nums[0];\n        int dpii;\n        int i = 1;\n        int ans = nums[0];\n        while (i &lt; n)\n        {\n            dpii = max(dpi + nums[i], nums[i]);\n            ans = max(ans, dpii);\n            dpi = dpii;\n            ++i;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#python","title":"python","text":"<pre><code>class Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n\n        dpi = nums[0]\n        dpii = 0\n        i = 1\n        ans = dpi\n        while i &lt; len(nums):\n            dpii = max(dpi + nums[i], nums[i])\n            ans = max(ans, dpii)\n            dpi = dpii\n            i += 1\n        return ans\n</code></pre>"},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4f7f\u7528\u5206\u6cbb\u6cd5\u6c42\u89e3\uff0c\u53ef\u4ee5\u8d85\u8d8a<code>O(n)</code>\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#c_1","title":"C++","text":""},{"location":"C%2B%2B/53.%20%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/#python_1","title":"python","text":""},{"location":"C%2B%2B/58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/","title":"58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6","text":""},{"location":"C%2B%2B/58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/#58","title":"58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6","text":""},{"location":"C%2B%2B/58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c ' ' \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002</p> <p>\u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0 \u3002</p> <p>\u8bf4\u660e\uff1a\u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u7531\u5b57\u6bcd\u7ec4\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b:\n\u8f93\u5165: \"Hello World\"\n\u8f93\u51fa: 5\n</code></pre>"},{"location":"C%2B%2B/58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u6700\u540e\u662f\u7a7a\u683c\u7684\u4e0d\u8ba4\u4e3a\u6ca1\u6709\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u800c\u662f\u9700\u8981\u7565\u8fc7\u6700\u540e\u7684\u7a7a\u683c\u5411\u524d\u67e5\u627e\uff0c\u8fd9\u4e2a\u662f\u4ece\u7528\u4f8b\u4e2d\u770b\u51fa\u6765\u7684\u3002</p>"},{"location":"C%2B%2B/58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    bool isChar(char c)\n    {\n        if (c &gt;= 'a' &amp;&amp; c &lt;= 'z' ||\n            c &gt;= 'A' &amp;&amp; c &lt;= 'Z')\n        {\n            return true;\n        }\n        return false;\n    }\n    int lengthOfLastWord(string s) {\n        int ans = 0;\n        int n = s.size();\n        if (n == 0) return 0;\n        int i = n - 1;\n        while (i &gt;= 0 &amp;&amp; s[i] == ' ') --i;\n        while (i &gt;= 0 &amp;&amp; isChar(s[i]))\n        {\n            ++ans;\n            --i;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/#python","title":"python","text":"<pre><code>class Solution(object):\n    def isChar(self, c):\n        if c &gt;= 'a' and c &lt;= 'z' or c &gt;= 'A' and c &lt;= 'Z':\n            return True\n        return False\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        ans = 0\n        i = len(s) - 1\n        while i &gt;= 0 and s[i] == ' ':\n            i -= 1\n        while i &gt;= 0 and self.isChar(s[i]):\n            ans += 1\n            i -= 1\n        return ans\n</code></pre>"},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/","title":"6. Z \u5b57\u5f62\u53d8\u6362","text":""},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#6-z","title":"6. Z \u5b57\u5f62\u53d8\u6362","text":""},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"LEETCODEISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a\n\nL   C   I   R\nE T O E S I I G\nE   D   H   N\n\n\n\u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"LCIRETOESIIGEDHN\"\u3002\n</code></pre>"},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u987a\u5e8f\u601d\u7ef4\uff0c\u5148\u6309\u7167Z\u5b57\u5f62\u6392\u5217\uff0c\u518d\u53d6\u51fa\u6765\u8f93\u51fa\u5b57\u7b26\u4e32\u3002</p>"},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#c","title":"C++","text":""},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#python","title":"python","text":"<pre><code>class Solution:\n    def convert(self, s: str, numRows: int) -&gt; str:\n        i = 0\n        j = 0\n        k = 0\n        key_value = {}\n        if numRows &lt;= 1:\n            return s\n        for k in range(0, len(s)):\n            key_value[(i,j)] = k\n            if (j % (numRows-1) == 0 and i &lt; numRows - 1):\n                i = i + 1\n            elif (i &gt; 0):\n                j = j + 1\n                i = i - 1\n\n        ans = \"\"\n        for i in range(0, numRows):\n            for k in range(0, j+1):\n                if (i,k) in key_value.keys():\n                    ans += ( s[ key_value[(i,k)] ] )\n\n        return ans\n</code></pre>"},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#c_1","title":"C++","text":""},{"location":"C%2B%2B/6.%20Z%20%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#python_1","title":"python","text":""},{"location":"C%2B%2B/66.%20%E5%8A%A0%E4%B8%80/","title":"66. \u52a0\u4e00","text":""},{"location":"C%2B%2B/66.%20%E5%8A%A0%E4%B8%80/#66","title":"66. \u52a0\u4e00","text":""},{"location":"C%2B%2B/66.%20%E5%8A%A0%E4%B8%80/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002</p> <p>\u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: [1,2,3]\n\u8f93\u51fa: [1,2,4]\n\u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: [4,3,2,1]\n\u8f93\u51fa: [4,3,2,2]\n\u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002\n</code></pre>"},{"location":"C%2B%2B/66.%20%E5%8A%A0%E4%B8%80/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/66.%20%E5%8A%A0%E4%B8%80/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) {\n        int carry = 0;\n        int n = digits.size();\n        vector&lt;int&gt; ans(digits);\n        if (n &lt;= 0) return ans;\n        int i = n - 1;\n        carry = (digits[i] + 1) / 10;\n        ans[i] = (digits[i] + 1) % 10;\n        while (i &gt;= 0 &amp;&amp; carry &gt; 0)\n        {\n            ans[i] = (digits[i] + carry) % 10;\n            carry = (digits[i] + carry) / 10;\n            --i;\n        }\n        if (carry &gt; 0)\n        {\n            ans.insert(ans.begin(), carry);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/66.%20%E5%8A%A0%E4%B8%80/#python","title":"python","text":"<pre><code>class Solution:\n    def plusOne(self, digits: List[int]) -&gt; List[int]:\n        n = len(digits)\n        ans = digits.copy()\n        if n == 0:\n            return ans\n        i = n - 1\n        carry = (digits[i] + 1) // 10\n        ans[i] = (digits[i] + 1) % 10\n        while (i &gt;= 0 and carry &gt; 0):\n            ans[i] = (digits[i] + carry) % 10\n            carry = (digits[i] + carry) // 10\n            i -= 1\n        if carry &gt; 0:\n            ans.insert(0, carry)\n        return ans\n</code></pre>"},{"location":"C%2B%2B/67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/","title":"67. \u4e8c\u8fdb\u5236\u6c42\u548c","text":""},{"location":"C%2B%2B/67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/#67","title":"67. \u4e8c\u8fdb\u5236\u6c42\u548c","text":""},{"location":"C%2B%2B/67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002 \u8f93\u5165\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57 1 \u548c 0\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: a = \"11\", b = \"1\"\n\u8f93\u51fa: \"100\"\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: a = \"1010\", b = \"1011\"\n\u8f93\u51fa: \"10101\"\n</code></pre>"},{"location":"C%2B%2B/67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int n1 = a.size() - 1;\n        int n2 = b.size() - 1;\n        int c = 0;\n        int sum = 0;\n        string ans;\n        while (n1 &gt;= 0 &amp;&amp; n2 &gt;= 0)\n        {\n            sum = a[n1] - '0' + b[n2] - '0' + c;\n            ans.insert(ans.begin(), (char)(sum % 2 + '0'));\n            c = sum / 2;\n            --n1;\n            --n2;\n        }\n        while (n1 &gt;= 0)\n        {\n            sum = a[n1] - '0' + c;\n            ans.insert(ans.begin(), (char)(sum % 2 + '0'));\n            c = sum / 2;\n            --n1;\n        }\n        while (n2 &gt;= 0)\n        {\n            sum = b[n2] - '0' + c;\n            ans.insert(ans.begin(), (char)(sum % 2 + '0'));\n            c = sum / 2;\n            --n2;\n        }\n        if (c &gt; 0)\n        {\n            ans.insert(ans.begin(),(char)(c + '0'));\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/67.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/#python","title":"python","text":"<pre><code>class Solution:\n    def addBinary(self, a: str, b: str) -&gt; str:\n        n1 = len(a) - 1\n        n2 = len(b) - 1\n        c = 0\n        s = 0\n        ans = \"\"\n        while n1 &gt;= 0 and n2 &gt;= 0:\n            s = int(a[n1]) + int(b[n2]) + c\n            ans = str(s % 2) + ans\n            c = s // 2\n            n1 -= 1\n            n2 -= 1\n        while n1 &gt;= 0:\n            s = int(a[n1]) + c\n            ans = str(s % 2) + ans\n            c = s // 2\n            n1 -= 1\n        while n2 &gt;= 0:\n            s = int(b[n2]) + c\n            ans = str(s % 2) + ans\n            c = s // 2\n            n2 -= 1\n        if c &gt; 0:\n            ans = str(c) + ans\n        return ans\n</code></pre>"},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/","title":"69. x \u7684\u5e73\u65b9\u6839","text":""},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#69-x","title":"69. x \u7684\u5e73\u65b9\u6839","text":""},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002</p> <p>\u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002</p> <p>\u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: 4\n\u8f93\u51fa: 2\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: 8\n\u8f93\u51fa: 2\n\u8bf4\u660e: 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \n     \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002\n</code></pre>"},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u7528\u4e8c\u5206\u6cd5\u67e5\u627e\u4ece<code>[0,x/2+1]</code>\u8303\u56f4\u5185\u7684\u6570\u5b57\uff0c\u54ea\u4e2a\u6b63\u597d\u6ee1\u8db3\u5c31\u662f\u54ea\u4e2a\u3002 \u6ce8\u610f<code>mid, m</code>\u8981\u4f7f\u7528\u5927\u7c7b\u578b\uff0c\u907f\u514d\u6570\u636e\u6ea2\u51fa\u3002</p>"},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int mySqrt(int x) {\n        int l = 0;\n        long long r = x / 2 + 1;\n        long long mid;\n        if (x &lt;= 1) return x;\n        while (l &lt; r)\n        {\n            mid = l + (r - l + 1) / 2;\n            long long m = mid * mid;\n            if (m &gt; x)\n                r = mid - 1;\n            else\n                l = mid;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#python","title":"python","text":"<pre><code>class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        if x &lt;= 1:\n            return x\n        l = 0\n        r = x // 2 + 1\n        while l &lt; r:\n            mid = l + (r-l+1)//2\n            if mid*mid &gt; x:\n                r = mid - 1\n            else:\n                l = mid\n        return l\n</code></pre>"},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4f7f\u7528\u725b\u987f\u6cd5</p>"},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#c_1","title":"C++","text":""},{"location":"C%2B%2B/69.%20x%20%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/#python_1","title":"python","text":""},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/","title":"7. \u6574\u6570\u53cd\u8f6c","text":""},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#7","title":"7. \u6574\u6570\u53cd\u8f6c","text":""},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\u8f93\u5165: 123\n\u8f93\u51fa: 321\n \u793a\u4f8b 2:\n\u8f93\u5165: -123\n\u8f93\u51fa: -321\n\u793a\u4f8b 3:\n\u8f93\u5165: 120\n\u8f93\u51fa: 21\n</code></pre>"},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u5229\u752864\u4f4d\u6570\u5b57\u8ba1\u7b97\uff0c\u5224\u65ad\u662f\u5426\u8d85\u51fa32\u672a\u7684\u8868\u793a\u8303\u56f4\uff0c\u5982\u679c\u8d85\u51fa\u8fd4\u56de0.</p>"},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int reverse(int x) {\n        long int ans = 0;\n        long int xx = (long int)x;\n        long int max = (long int)INT_MAX + 1;\n        bool negtive = false;\n        if (xx &lt; 0) negtive = true, xx = -xx;\n        while(xx)\n        {\n            int b = xx % 10;\n            xx = xx / 10;\n            ans = ans * 10 + b;\n        }\n\n        if ((!negtive &amp;&amp; ans &gt; INT_MAX) ||\n            (negtive &amp;&amp; ans &gt; max) )\n        {\n                ans = 0;\n        }\n\n        if (negtive) ans = -ans;\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#python","title":"python","text":"<p>python3\u4e2d\u7684int\u662f\u65e0\u9650\u7684\u3002</p> <pre><code>class Solution:\n    def reverse(self, x: int) -&gt; int:\n        max_value = 2147483647\n        min_value = -2147483648\n        ans = 0\n        negtive = False\n        if x &lt; 0:\n            negtive = True\n            x = -x\n        while(x):\n            b = x % 10\n            ans = ans * 10 + b\n            x = x // 10\n        if ans &gt; max_value or ans &lt; min_value:\n            ans = 0\n        if negtive:\n            ans = -ans\n        return ans\n</code></pre>"},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4e0d\u501f\u52a964\u4f4d\u6570\u5b57\uff0c\u76f4\u63a5\u572832\u4f4d\u6570\u5b57\u7684\u8303\u56f4\u5185\u5b8c\u6210\u3002</p>"},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#c_1","title":"C++","text":""},{"location":"C%2B%2B/7.%20%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/#python_1","title":"python","text":""},{"location":"C%2B%2B/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/","title":"70. \u722c\u697c\u68af","text":""},{"location":"C%2B%2B/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/#70","title":"70. \u722c\u697c\u68af","text":""},{"location":"C%2B%2B/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1a 2\n\u8f93\u51fa\uff1a 2\n\u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1.  1 \u9636 + 1 \u9636\n2.  2 \u9636\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1a 3\n\u8f93\u51fa\uff1a 3\n\u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1.  1 \u9636 + 1 \u9636 + 1 \u9636\n2.  1 \u9636 + 2 \u9636\n3.  2 \u9636 + 1 \u9636\n</code></pre>"},{"location":"C%2B%2B/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u9012\u63a8\u516c\u5f0f\uff1a<code>f(i) = f(i-2) + f(i-1)</code></p>"},{"location":"C%2B%2B/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        if (n &lt;= 3) return n;\n        int f1 = 1;\n        int f2 = 2;\n        int ans;\n        n = n - 2;\n        while (n &gt; 0)\n        {\n            ans = f1 + f2;\n            f1 = f2;\n            f2 = ans;\n            --n;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/#python","title":"python","text":"<pre><code>class Solution:\n    def climbStairs(self, n: int) -&gt; int:\n        if n &lt;= 3:\n            return n\n        n = n -2\n        f1 = 1\n        f2 = 2\n        ans = -1\n        while n &gt; 0:\n            ans = f1 + f2\n            f1 = f2\n            f2 = ans\n            n -= 1\n        return ans\n</code></pre>"},{"location":"C%2B%2B/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20%28atoi%29/","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)","text":""},{"location":"C%2B%2B/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20%28atoi%29/#8-atoi","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)","text":""},{"location":"C%2B%2B/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20%28atoi%29/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002</p> <p>\u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002</p> <p>\u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002</p> <p>\u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002</p> <p>\u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002</p> <p>\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002</p> <p>\u8bf4\u660e\uff1a</p> <p>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^31,  2^31 \u2212 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0cqing\u8fd4\u56de  INT_MAX (2^31 \u2212 1) \u6216 INT_MIN (\u22122^31) \u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: \"42\"\n\u8f93\u51fa: 42\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: \"   -42\"\n\u8f93\u51fa: -42\n\u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002\n     \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002\n\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: \"4193 with words\"\n\u8f93\u51fa: 4193\n\u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002\n\n\n\u793a\u4f8b 4:\n\n\u8f93\u5165: \"words and 987\"\n\u8f93\u51fa: 0\n\u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002\n     \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002\n\n\u793a\u4f8b 5:\n\n\u8f93\u5165: \"-91283472332\"\n\u8f93\u51fa: -2147483648\n\u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \n     \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002\n</code></pre>"},{"location":"C%2B%2B/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20%28atoi%29/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u6309\u7167\u89c4\u5219\u89e3\u6790\u5373\u53ef\uff0c\u6ce8\u610f\u6b63\u8d1f\u53f7\u7684\u5904\u7406\u3002</p>"},{"location":"C%2B%2B/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20%28atoi%29/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    int myAtoi(string str) {\n        int i = 0;\n        // \u7a7a\u4e32\u8fd4\u56de0\n        if (str.size() == 0) return 0;\n        // \u8df3\u8fc7\u7a7a\u683c\n        while(i &lt; str.size() &amp;&amp; str[i] == ' ') i++;\n        // \u5168\u662f\u7a7a\u683c\u8fd4\u56de0\n        if (i &gt;= str.size()) return 0;\n\n        // \u7a7a\u683c\u4e4b\u540e\u53ea\u80fd\u662f+,-\u6216\u8005\u6570\u5b57\n        if (str[i] &gt;= '0' &amp;&amp; str[i] &lt;= '9' or\n             str[i] == '+' or str[i] == '-')\n        {\n            long int ans = 0;\n            bool negtive = false;\n            if (str[i] == '+') i++;\n            else if (str[i] == '-') i++, negtive = true;\n\n            while(i &lt; str.size() &amp;&amp;\n                   str[i] &gt;= '0' &amp;&amp; \n                   str[i] &lt;= '9'){\n                ans = ans*10 + str[i] - '0';\n                if (!negtive &amp;&amp; ans &gt; INT_MAX)\n                {\n                    return INT_MAX;\n                }\n                if (negtive &amp;&amp; ans-1 &gt;= INT_MAX)\n                {\n                    return INT_MIN;\n                }\n                i++;\n            }\n\n            if (negtive) ans = -ans;\n            return ans;\n        }\n        return 0;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/8.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20%28atoi%29/#python","title":"python","text":"<pre><code>class Solution:\n    def myAtoi(self, str: str) -&gt; int:\n        if len(str) == 0:\n            return 0\n        i = 0\n        while i &lt; len(str) and str[i] == ' ':\n            i = i + 1\n        if i &gt;= len(str):\n            return 0\n        negtive = False\n        if str[i] == '+':\n            i = i + 1\n        elif str[i] == '-':\n            negtive = True\n            i = i + 1\n        ans = 0\n        while i &lt; len(str) and str[i] &gt;= '0' and str[i] &lt;= '9':\n            ans = ans * 10 + int(str[i])\n            i = i + 1\n\n        max_value = 2147483647\n        if ans &gt; max_value and negtive == False:\n            return max_value\n        if ans &gt; max_value and negtive == True:\n            return -(max_value + 1)\n        if negtive:\n            ans = -ans\n        return ans\n</code></pre>"},{"location":"C%2B%2B/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":""},{"location":"C%2B%2B/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/#82-ii","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":""},{"location":"C%2B%2B/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n\u8f93\u51fa: 1-&gt;2-&gt;5\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: 1-&gt;1-&gt;1-&gt;2-&gt;3\n\u8f93\u51fa: 2-&gt;3\n</code></pre>"},{"location":"C%2B%2B/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode *g = new ListNode(0);\n        g-&gt;next = head;\n        ListNode *pre = g;\n        ListNode *iter = head;\n        bool same = false;\n        while (iter != nullptr)\n        {\n            if (iter-&gt;next != nullptr &amp;&amp; iter-&gt;val == iter-&gt;next-&gt;val)\n            {\n                same = true;\n                iter = iter-&gt;next;\n            }\n            else if (same == true)\n            {\n                same = false;\n                if (iter) iter = iter-&gt;next;\n            }\n            else\n            {\n                pre-&gt;next = iter;\n                pre = iter;\n                if (iter) iter = iter-&gt;next;\n            }\n        }\n        pre-&gt;next = iter;\n        return g-&gt;next;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -&gt; ListNode:\n        g = ListNode(0)\n        g.next = head\n        pre = g\n        iters = head\n        same = False\n        while iters:\n            if iters.next and iters.val == iters.next.val:\n                iters = iters.next\n                same = True\n            elif same == True:\n                same = False\n                if iters:\n                    iters = iters.next\n            else:\n                pre.next = iters\n                pre = iters\n                if iters:\n                    iters = iters.next\n        pre.next = iters\n        return g.next\n</code></pre>"},{"location":"C%2B%2B/83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":""},{"location":"C%2B%2B/83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/#83","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":""},{"location":"C%2B%2B/83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\u8f93\u5165: 1-&gt;1-&gt;2\n\u8f93\u51fa: 1-&gt;2\n\u793a\u4f8b 2:\n\u8f93\u5165: 1-&gt;1-&gt;2-&gt;3-&gt;3\n\u8f93\u51fa: 1-&gt;2-&gt;3\n</code></pre>"},{"location":"C%2B%2B/83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (head == nullptr || head-&gt;next == nullptr) return head;\n        ListNode* cur_node = head;\n        ListNode* next_node;\n        while (cur_node != nullptr)\n        {\n            next_node = cur_node-&gt;next;\n            while (next_node != nullptr &amp;&amp; cur_node-&gt;val == next_node-&gt;val)\n            {\n                next_node = next_node-&gt;next;\n            }\n            cur_node-&gt;next = next_node;\n            cur_node = next_node;\n        }\n        return head;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -&gt; ListNode:\n        if not head or not head.next:\n            return head\n        cur_node = head\n        next_node = ''\n        while cur_node:\n            next_node = cur_node.next\n            while next_node and cur_node.val == next_node.val:\n                next_node = next_node.next\n            cur_node.next = next_node\n            cur_node = next_node\n        return head\n</code></pre>"},{"location":"C%2B%2B/876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/","title":"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9","text":""},{"location":"C%2B%2B/876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/#876","title":"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9","text":""},{"location":"C%2B%2B/876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6709\u5934\u7ed3\u70b9 head \u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165\uff1a[1,2,3,4,5]\n\u8f93\u51fa\uff1a\u6b64\u5217\u8868\u4e2d\u7684\u7ed3\u70b9 3 (\u5e8f\u5217\u5316\u5f62\u5f0f\uff1a[3,4,5])\n\u8fd4\u56de\u7684\u7ed3\u70b9\u503c\u4e3a 3 \u3002 (\u6d4b\u8bc4\u7cfb\u7edf\u5bf9\u8be5\u7ed3\u70b9\u5e8f\u5217\u5316\u8868\u8ff0\u662f [3,4,5])\u3002\n\u6ce8\u610f\uff0c\u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a ListNode \u7c7b\u578b\u7684\u5bf9\u8c61 ans\uff0c\u8fd9\u6837\uff1a\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, \u4ee5\u53ca ans.next.next.next = NULL.\n\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1a[1,2,3,4,5,6]\n\u8f93\u51fa\uff1a\u6b64\u5217\u8868\u4e2d\u7684\u7ed3\u70b9 4 (\u5e8f\u5217\u5316\u5f62\u5f0f\uff1a[4,5,6])\n\u7531\u4e8e\u8be5\u5217\u8868\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u503c\u5206\u522b\u4e3a 3 \u548c 4\uff0c\u6211\u4eec\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u3002\n</code></pre>"},{"location":"C%2B%2B/876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u7528\u5feb\u6162\u6307\u9488\uff0c\u626b\u63cf\u4e00\u904d\u94fe\u8868\u5373\u53ef\u627e\u5230\u4e2d\u95f4\u7684\u8282\u70b9\u3002</p>"},{"location":"C%2B%2B/876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/#c","title":"C++","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        if (head == nullptr) return head;\n        if (head-&gt;next == nullptr) return head;\n        ListNode *slow = head;\n        ListNode *quick = head-&gt;next;\n        while (quick != nullptr)\n        {\n            slow = slow-&gt;next;\n            if (quick-&gt;next != nullptr)\n            {\n                quick = quick-&gt;next-&gt;next;\n            } else {\n                break;\n            }\n        }\n        return slow;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/876.%20%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/#python","title":"python","text":"<pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def middleNode(self, head: ListNode) -&gt; ListNode:\n        if head == None:\n            return head\n        if head.next == None:\n            return head\n        slow = head\n        quick = head.next\n        while quick:\n            slow = slow.next\n            if quick.next:\n                quick = quick.next.next\n            else:\n                break\n        return slow\n</code></pre>"},{"location":"C%2B%2B/88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":""},{"location":"C%2B%2B/88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_1","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":""},{"location":"C%2B%2B/88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2\uff0c\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f\u5f97 num1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002</p> <p>\u8bf4\u660e:</p> <pre><code>\u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n\u3002\n\u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n\uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002\n</code></pre> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b:\n\n\u8f93\u5165:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n\u8f93\u51fa: [1,2,2,3,5,6]\n</code></pre>"},{"location":"C%2B%2B/88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u793a<code>nums1</code>\u548c<code>nums2</code>\u7684\u5143\u7d20\uff0c\u4ece\u540e\u5411\u524d\u5408\u5e76\u5230<code>nums1</code>,\u65f6\u95f4\u590d\u6742\u5ea6<code>O(n)</code>, \u7a7a\u95f4\u590d\u6742\u5ea6<code>O(1)</code>.</p>"},{"location":"C%2B%2B/88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int end = nums1.size() - 1;\n        int p1 = m - 1;\n        int p2 = n - 1;\n        while (p1 &gt;= 0 &amp;&amp; p2 &gt;= 0)\n        {\n            if (nums2[p2] &gt; nums1[p1])\n            {\n                nums1[end] = nums2[p2];\n                --p2;\n            }\n            else\n            {\n                nums1[end] = nums1[p1];\n                --p1;\n            }\n            --end;\n        }\n        while (p2 &gt;= 0)\n        {\n            nums1[end] = nums2[p2];\n            --p2;\n            --end;\n        }\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/88.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/#python","title":"python","text":"<pre><code>class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        end = len(nums1) - 1\n        p1 = m - 1\n        p2 = n - 1\n        while p1 &gt;= 0 and p2 &gt;= 0:\n            if nums2[p2] &gt; nums1[p1]:\n                nums1[end] = nums2[p2]\n                p2 -= 1\n            else:\n                nums1[end] = nums1[p1]\n                p1 -= 1\n            end -= 1\n        while p2 &gt;= 0:\n            nums1[end] = nums2[p2]\n            p2 -= 1\n            end -= 1\n</code></pre>"},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/","title":"9. \u56de\u6587\u6570","text":""},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#9","title":"9. \u56de\u6587\u6570","text":""},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: 121\n\u8f93\u51fa: true\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: -121\n\u8f93\u51fa: false\n\u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: 10\n\u8f93\u51fa: false\n\u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n</code></pre>"},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u752864\u4f4d\u6570\u5b57\u4f5c\u4e3a\u5bb9\u5668\u53cd\u8f6cint\u7c7b\u578b\u7684\u6570\u5b57\uff0c\u5982\u679c\u53cd\u8f6c\u4e4b\u540e\u5927\u5c0f\u4e00\u6837\u5219\u662f\u56de\u6587\u6570\u5b57\u3002</p>"},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x &lt; 0) return false;\n        long int v = 0;\n        long int xx = x;\n        while(x)\n        {\n           v = v*10 + x % 10;\n           x = x / 10;\n        }\n        if (xx == v)\n        {\n            return true;\n        }\n\n        return false;\n    }\n};\n</code></pre>"},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#python","title":"python","text":"<pre><code>class Solution:\n    def isPalindrome(self, x: int) -&gt; bool:\n        if x &lt; 0:\n            return False\n        xx = x\n        v = 0\n        while(x):\n            v = v * 10 + x % 10\n            x = x // 10\n\n        if v == xx:\n            return True\n        return False\n</code></pre>"},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u601d\u8def\u4e00\u904d\u5386\u7684\u4e00\u6b21\u624d\u5f97\u5230\u7ed3\u679c\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u904d\u5386\u4e8c\u5206\u4e4b\u4e00\u5373\u53ef\u5f97\u5230\u7ed3\u679c\u3002</p>"},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#c_1","title":"C++","text":""},{"location":"C%2B%2B/9.%20%E5%9B%9E%E6%96%87%E6%95%B0/#python_1","title":"python","text":""},{"location":"C%2B%2B/999.%20template/","title":"999. template","text":""},{"location":"C%2B%2B/999.%20template/#_1","title":"999. template","text":""},{"location":"C%2B%2B/999.%20template/#_2","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u793a\u4f8b</p>"},{"location":"C%2B%2B/999.%20template/#1","title":"\u89e3\u9898\u601d\u8def1","text":""},{"location":"C%2B%2B/999.%20template/#c","title":"C++","text":""},{"location":"C%2B%2B/999.%20template/#python","title":"python","text":""},{"location":"C%2B%2B/999.%20template/#2","title":"\u89e3\u9898\u601d\u8def2","text":""},{"location":"C%2B%2B/999.%20template/#c_1","title":"C++","text":""},{"location":"C%2B%2B/999.%20template/#python_1","title":"python","text":""},{"location":"leetcode/1/readme/","title":"1. \u4e24\u6570\u4e4b\u548c","text":""},{"location":"leetcode/1/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9\n\n\u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9\n\u6240\u4ee5\u8fd4\u56de [0, 1]\n</code></pre>"},{"location":"leetcode/1/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/1/readme/#on2","title":"O(n^2)","text":"<p>\u4e24\u6b21\u904d\u5386\uff0c\u6c42\u89e3\u51fa\u6bcf\u4e24\u4e2a\u6570\u7684\u548c\u4e0etarget\u6bd4\u8f83\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u7ed3\u679c\u3002</p>"},{"location":"leetcode/1/readme/#on","title":"O(n)","text":"<p>\u5229\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u4f4d\u7f6e\u548c\u503c\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u628a<code>nums</code>\u4f9d\u6b21\u5b58\u50a8\u5230\u54c8\u5e0c\u8868\uff0c\u6bcf\u6b21\u5b58\u50a8\u7684\u65f6\u5019\uff0c\u5148\u5224\u65ad<code>target - nums[i]</code>\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c \u5982\u679c\u5728\uff0c\u8bf4\u660e\u4e4b\u524d\u5b58\u50a8\u8fc7<code>target - nums[i]</code>, \u8fd4\u56de\uff1b\u5426\u5219\uff0c\u5b58\u5230\u54c8\u5e0c\u8868\u4e2d<code>map[nums[i] = i</code>.</p>"},{"location":"leetcode/1/readme/#_3","title":"\u9898\u89e3","text":""},{"location":"leetcode/1/readme/#c","title":"C++","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; ans(2, -1);\n        map&lt;int, int&gt; hashMap;\n        for (int i = 0; i &lt; nums.size(); i++)\n        {\n            // pairs = (nums[i], target - nums[i])\n            // \u5982\u679cpairs[1]\u5728hashMap\u4e2d,\u8bf4\u660epairs[0]\u5df2\u7ecf\u88ab\u6dfb\u52a0\u8fc7\u4e86\uff0cpairs[0]\u5e94\u8be5\u5728pairs[1]\u524d\u9762\n            if (hashMap.count(target - nums[i]) &gt; 0)\n            {\n                ans[0] = hashMap[ target - nums[i] ];\n                ans[1] = i;\n                return ans;\n            }\n            // \u5982\u679c\u6ca1\u6709\uff0c\u5b58\u5230hashMap\u4e2d\n            hashMap[ nums[i] ] = i;\n        }\n\n        // \u5982\u679c\u90fd\u5b58\u5230hashMap\u4e2d\u8fd8\u662f\u6ca1\u6709\u5728\u5faa\u73af\u4e2dreturn, \u8bf4\u660e\u6ca1\u6709\n        return ans;      \n    }\n};\n</code></pre>"},{"location":"leetcode/1/readme/#python","title":"Python","text":"<pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        ans = [-1, -1]\n        hashMap = {}\n        for i, val in enumerate(nums):\n            if target-val in hashMap:\n                ans[0] = hashMap[target - val]\n                ans[1] = i\n                return ans\n            hashMap[val] = i\n\n        return ans\n</code></pre>"},{"location":"leetcode/1004/readme/","title":"1004. \u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III","text":""},{"location":"leetcode/1004/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u82e5\u5e72 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4\u00a0A\uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u5c06\u00a0K\u00a0\u4e2a\u503c\u4ece 0 \u53d8\u6210 1 \u3002</p> <p>\u8fd4\u56de\u4ec5\u5305\u542b 1 \u7684\u6700\u957f\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aA = [1,1,1,0,0,0,1,1,1,1,0], K = 2\n    \u8f93\u51fa\uff1a6\n    \u89e3\u91ca\uff1a \n    [1,1,1,0,0,1,1,1,1,1,1]\n    \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 6\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aA = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3\n    \u8f93\u51fa\uff1a10\n    \u89e3\u91ca\uff1a\n    [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\n    \u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 10\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= A.length &lt;= 20000\n    0 &lt;= K &lt;= A.length\n    A[i] \u4e3a\u00a00\u00a0\u6216\u00a01\n</code></pre>"},{"location":"leetcode/1004/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define max(a, b) ((a) &gt; (b) ? (a) : (b))\nint longestOnes(int* A, int ASize, int K){\n    int start = 0;\n    int ans = 0;\n    int max_count = 0;\n    // [start, end] \u5185\u6709 max_count \u4e2a1\n    for(int end = 0; end &lt; ASize; end++) {\n        if (A[end] == 1) {\n            max_count += 1;\n        }\n        // \u5f530\u7684\u4e2a\u6570\u5927\u4e8eK\u7684\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u5411\u53f3\u6ed1\u52a8\n        if (end - start + 1 - max_count &gt; K) {\n            if (A[start] == 1) {\n                max_count -= 1;\n            }\n            start++;    \n        }\n        ans = max(ans, end - start + 1);\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1008/readme/","title":"1008. \u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811","text":""},{"location":"leetcode/1008/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u5148\u5e8f\u904d\u5386\u00a0preorder \u76f8\u5339\u914d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08binary search tree\uff09\u7684\u6839\u7ed3\u70b9\u3002</p> <p>(\u56de\u60f3\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff0c\u5bf9\u4e8e\u00a0node.left\u00a0\u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b &lt; node.val\uff0c\u800c node.right \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b &gt; node.val\u3002\u6b64\u5916\uff0c\u5148\u5e8f\u904d\u5386\u9996\u5148\u663e\u793a\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u904d\u5386 node.left\uff0c\u63a5\u7740\u904d\u5386 node.right\u3002\uff09</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>    \u8f93\u5165\uff1a[8,5,1,7,10,12]\n    \u8f93\u51fa\uff1a[8,5,10,1,7,null,12]\n</code></pre> <p> </p> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= preorder.length &lt;= 100\n    \u5148\u5e8f\u00a0preorder\u00a0\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002\n</code></pre>"},{"location":"leetcode/1008/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u6392\u5e8f\u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c \u518d\u7ed3\u5408\u5148\u5e8f\u904d\u5386\u5e8f\u5217\u751f\u6210\u4e8c\u53c9\u6811\u3002</p> <p>\u7b2c\u4e8c\u79cd\u601d\u8def\uff0c \u76f4\u63a5\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u6784\u9020\u3002 \u5148\u5e8f\u904d\u5386\u5e8f\u5217\u4e00\u5b9a\u662f\u6839\u5728\u6700\u524d\u9762\uff0c \u786e\u5b9a\u4e86\u6839\uff0c\u6240\u6709\u5c0f\u4e8e\u6839\u7684\u5e94\u8be5\u90fd\u5728\u5de6\u5b50\u6811\uff0c\u6240\u6709\u5927\u4e8e\u6839\u7684\u5e94\u8be5\u90fd\u5728\u53f3\u5b50\u6811\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nstruct TreeNode* bstFromPreorder2(int* preorder, int start, int end){\n    int i;\n    int left_start = -1;\n    int left_end = -2;\n    int right_start = -1;\n    int right_end = -2;\n\n    // \u7a7a\u6570\u7ec4\u8fd4\u56de\n    if (preorder == NULL) {\n        return NULL;\n    }\n    // \u957f\u5ea6\u4e3a0\u8fd4\u56de\n    if (end - start + 1 &lt;= 0) {\n        return NULL;\n    }\n    // \u7b2c\u4e00\u4e2a\u7ed3\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\uff0c\u6240\u6709\u6bd4\u5b83\u5c0f\u7684\u4e3a\u505a\u5b50\u6811\uff0c\u6240\u6709\u6bd4\u5b83\u5927\u7684\u4e3a\u53f3\u5b50\u6811\n    struct TreeNode* root;\n    root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    root-&gt;val = preorder[start];\n\n    i = start + 1;\n    left_start = start + 1;\n    while (i &lt;= end) {\n        if (preorder[i] &gt; preorder[start]) {\n            left_end = i - 1;\n            right_start = i;\n            right_end = end;\n            break;\n        }\n        // \u5982\u679c\u6ca1\u6709\u53f3\u5b50\u6811\n        if (i == end) {\n            left_end = end;\n            break;\n        }\n        i++;\n    }\n    root-&gt;left = bstFromPreorder2(preorder, left_start, left_end);\n    root-&gt;right = bstFromPreorder2(preorder, right_start, right_end);\n    return root;\n}\nstruct TreeNode* bstFromPreorder(int* preorder, int preorderSize){\n    return bstFromPreorder2(preorder, 0, preorderSize - 1);\n}\n</code></pre>"},{"location":"leetcode/1009/readme/","title":"1009. \u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801","text":""},{"location":"leetcode/1009/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6bcf\u4e2a\u975e\u8d1f\u6574\u6570\u00a0N\u00a0\u90fd\u6709\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u3002\u4f8b\u5982\uff0c\u00a05\u00a0\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236\u00a0\"101\"\uff0c11 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u00a0\"1011\"\u00a0\u8868\u793a\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6ce8\u610f\uff0c\u9664\u00a0N = 0\u00a0\u5916\uff0c\u4efb\u4f55\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u90fd\u4e0d\u542b\u524d\u5bfc\u96f6\u3002</p> <p>\u4e8c\u8fdb\u5236\u7684\u53cd\u7801\u8868\u793a\u662f\u5c06\u6bcf\u4e2a\u00a01\u00a0\u6539\u4e3a\u00a00\u00a0\u4e14\u6bcf\u4e2a\u00a00\u00a0\u53d8\u4e3a\u00a01\u3002\u4f8b\u5982\uff0c\u4e8c\u8fdb\u5236\u6570\u00a0\"101\"\u00a0\u7684\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a\u00a0\"010\"\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u00a0N\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u53cd\u7801\u6240\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1a5\n    \u8f93\u51fa\uff1a2\n    \u89e3\u91ca\uff1a5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"101\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"010\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 2 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1a7\n    \u8f93\u51fa\uff1a0\n    \u89e3\u91ca\uff1a7 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"111\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"000\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 0 \u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1a10\n    \u8f93\u51fa\uff1a5\n    \u89e3\u91ca\uff1a10 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a \"1010\"\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a \"0101\"\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 5 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    0 &lt;= N &lt; 10^9\n    \u672c\u9898\u4e0e 476\uff1ahttps://leetcode-cn.com/problems/number-complement/ \u76f8\u540c\n</code></pre>"},{"location":"leetcode/1009/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution(object):\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        s = list( bin(N)[2:] )\n        for i in range( len(s) ):\n            if s[i] == '0':\n                s[i] = '1'\n            elif s[i] == '1':\n                s[i] = '0'\n        ss = ''.join(s)\n        ans = int(ss, 2)\n        return ans\n</code></pre>"},{"location":"leetcode/1011/readme/","title":"1011. \u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b","text":""},{"location":"leetcode/1011/readme/#_1","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f20\u9001\u5e26\u4e0a\u7684\u5305\u88f9\u5fc5\u987b\u5728 D \u5929\u5185\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u3002</p> <p>\u4f20\u9001\u5e26\u4e0a\u7684\u7b2c i\u00a0\u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u4e3a\u00a0weights[i]\u3002\u6bcf\u4e00\u5929\uff0c\u6211\u4eec\u90fd\u4f1a\u6309\u7ed9\u51fa\u91cd\u91cf\u7684\u987a\u5e8f\u5f80\u4f20\u9001\u5e26\u4e0a\u88c5\u8f7d\u5305\u88f9\u3002\u6211\u4eec\u88c5\u8f7d\u7684\u91cd\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8239\u7684\u6700\u5927\u8fd0\u8f7d\u91cd\u91cf\u3002</p> <p>\u8fd4\u56de\u80fd\u5728 D \u5929\u5185\u5c06\u4f20\u9001\u5e26\u4e0a\u7684\u6240\u6709\u5305\u88f9\u9001\u8fbe\u7684\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u80fd\u529b\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aweights = [1,2,3,4,5,6,7,8,9,10], D = 5\n    \u8f93\u51fa\uff1a15\n    \u89e3\u91ca\uff1a\n    \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 15 \u5c31\u80fd\u591f\u5728 5 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n    \u7b2c 1 \u5929\uff1a1, 2, 3, 4, 5\n    \u7b2c 2 \u5929\uff1a6, 7\n    \u7b2c 3 \u5929\uff1a8\n    \u7b2c 4 \u5929\uff1a9\n    \u7b2c 5 \u5929\uff1a10\n\n    \u8bf7\u6ce8\u610f\uff0c\u8d27\u7269\u5fc5\u987b\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u88c5\u8fd0\uff0c\u56e0\u6b64\u4f7f\u7528\u8f7d\u91cd\u80fd\u529b\u4e3a 14 \u7684\u8239\u8236\u5e76\u5c06\u5305\u88c5\u5206\u6210 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) \u662f\u4e0d\u5141\u8bb8\u7684\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aweights = [3,2,2,4,1,4], D = 3\n    \u8f93\u51fa\uff1a6\n    \u89e3\u91ca\uff1a\n    \u8239\u8236\u6700\u4f4e\u8f7d\u91cd 6 \u5c31\u80fd\u591f\u5728 3 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n    \u7b2c 1 \u5929\uff1a3, 2\n    \u7b2c 2 \u5929\uff1a2, 4\n    \u7b2c 3 \u5929\uff1a1, 4\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1aweights = [1,2,3,1,1], D = 4\n    \u8f93\u51fa\uff1a3\n    \u89e3\u91ca\uff1a\n    \u7b2c 1 \u5929\uff1a1\n    \u7b2c 2 \u5929\uff1a2\n    \u7b2c 3 \u5929\uff1a3\n    \u7b2c 4 \u5929\uff1a1, 1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= D &lt;= weights.length &lt;= 50000\n    1 &lt;= weights[i] &lt;= 500\n</code></pre>"},{"location":"leetcode/1011/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6700\u540e\u8981\u6c42\u7684\u662f\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u91cf\uff0c \u8bbe\u4e3ak, \u5219 k \u6700\u5c0f\u4e3a weights[0], \u6700\u5927\u4e3a sum(weights), \u5bf9\u8fd9\u4e2a\u8303\u56f4\u8fdb\u884c\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u6700\u5c0f\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u503c\u3002</p> <pre><code>// \u8fd0\u8f7d\u91cf\u4e3aK\u7684\u8239\u662f\u5426\u53ef\u4ee5\u5728D\u5929\u4e4b\u5185\u8fd0\u9001\u5b8c\u8d27\u7269\nint canShip(int *weights, int weightsSize, int D, int k)\n{\n    int i = 0;\n    int sum = 0;\n    while (i &lt; weightsSize) {\n        sum += weights[i];\n        if (sum &gt; k) {\n            D--;\n            sum = 0;\n            i = i - 1;\n        }\n        i++;\n    }\n    if (sum &gt; 0) {\n        D--;\n    }\n    if (D &gt;= 0) return 1;\n    return 0;\n}\nint shipWithinDays(int* weights, int weightsSize, int D){\n    int mink, maxk;\n    int maxw = weights[0];\n    int sumw = 0;\n    int i;\n    int k;\n    for (i = 0; i &lt; weightsSize; i++) {\n        if (weights[i] &gt; maxw) {\n            maxw = weights[i];\n        }\n        sumw += weights[i];\n    }\n    mink = maxw;\n    maxk = sumw;\n    while (mink &lt; maxk) {\n        k = (mink + maxk) / 2;\n        if (canShip(weights, weightsSize, D, k)) {\n            maxk = k;\n        } else {\n            mink = k + 1;\n        }\n    }\n    return mink;\n}\n</code></pre>"},{"location":"leetcode/1016/readme/","title":"1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32","text":""},{"location":"leetcode/1016/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u00a0S\uff08\u4e00\u4e2a\u4ec5\u7531\u82e5\u5e72\u00a0'0' \u548c '1' \u6784\u6210\u7684\u5b57\u7b26\u4e32\uff09\u548c\u4e00\u4e2a\u6b63\u6574\u6570\u00a0N\uff0c\u5982\u679c\u5bf9\u4e8e\u4ece 1 \u5230 N \u7684\u6bcf\u4e2a\u6574\u6570 X\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u90fd\u662f\u00a0S \u7684\u5b50\u4e32\uff0c\u5c31\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aS = \"0110\", N = 3\n    \u8f93\u51fa\uff1atrue\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aS = \"0110\", N = 4\n    \u8f93\u51fa\uff1afalse\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= S.length &lt;= 1000\n    1 &lt;= N &lt;= 10^9\n</code></pre>"},{"location":"leetcode/1016/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5b57\u7b26\u4e32\u67e5\u627e</p> <pre><code>#define PN 100\nint next[PN];\nint nextEnd = 0;\n\n// \u8ba1\u7b97\u6a21\u5f0f\u4e32\u7684 next \u6570\u7ec4\nvoid computeNext(const char *pattern)\n{\n    int i;\n    int j = -1;\n    const int n = strlen(pattern);\n    next[0] = j;\n    for (i = 1; i &lt; n; i++) {\n        while (j &gt; -1 &amp;&amp; pattern[j+1] != pattern[i]) {\n            j = next[j];\n        }\n        if (pattern[i] == pattern[j + 1]) {\n            j++;\n        }\n        next[i] = j;\n    }\n    nextEnd = n;\n}\n\nint kmp(const char *string, const char *pattern)\n{\n    int i;\n    int j = -1;\n    const int n = strlen(string);\n    const int m = strlen(pattern);\n    if (m == 0 &amp;&amp; n == 0) return 0;\n    if (m == 0) return 0;\n    computeNext(pattern);\n    for (i = 0; i &lt; n; i++) {\n        while (j &gt; -1 &amp;&amp; pattern[j+1] != string[i]) {\n            j = next[j];\n        }\n        if (string[i] == pattern[j + 1]) {\n            j++;\n        }\n        if (j == m - 1) {\n            return i - j;\n        }\n    }\n    return -1;\n}\nbool find(char *S, int i)\n{\n    const int n = strlen(S);\n    char num[32];\n    char tmp;\n    int k = 0;\n    while (i) {\n        num[k++] = (char)(i &amp; 1) + '0';\n        i = i &gt;&gt; 1;\n    }\n    num[k] = '\\0';\n    int a = 0;\n    int b = k - 1;\n    while (a &lt; b) {\n        tmp = num[a];\n        num[a] = num[b];\n        num[b] = tmp;\n        a++;\n        b--;\n    }\n    int result;\n    result = kmp(S, num);\n    if (result == -1) {\n        return false;\n    }\n    return true;\n}\nbool queryString(char * S, int N){\n    int i;\n    for (i = 1; i &lt;= N; i++) {\n        if (!find(S, i)) {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre>"},{"location":"leetcode/1023/readme/","title":"1023. \u9a7c\u5cf0\u5f0f\u5339\u914d","text":""},{"location":"leetcode/1023/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u5c0f\u5199\u5b57\u6bcd\u63d2\u5165\u6a21\u5f0f\u4e32\u00a0pattern\u00a0\u5f97\u5230\u5f85\u67e5\u8be2\u9879\u00a0query\uff0c\u90a3\u4e48\u5f85\u67e5\u8be2\u9879\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u4e32\u5339\u914d\u3002\uff08\u6211\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6bcf\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u63d2\u5165 0 \u4e2a\u5b57\u7b26\u3002\uff09</p> <p>\u7ed9\u5b9a\u5f85\u67e5\u8be2\u5217\u8868\u00a0queries\uff0c\u548c\u6a21\u5f0f\u4e32\u00a0pattern\uff0c\u8fd4\u56de\u7531\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u7b54\u6848\u5217\u8868\u00a0answer\u3002\u53ea\u6709\u5728\u5f85\u67e5\u9879\u00a0queries[i] \u4e0e\u6a21\u5f0f\u4e32\u00a0pattern \u5339\u914d\u65f6\uff0c\u00a0answer[i]\u00a0\u624d\u4e3a true\uff0c\u5426\u5219\u4e3a false\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\n    \u8f93\u51fa\uff1a[true,false,true,true,false]\n    \u793a\u4f8b\uff1a\n    \"FooBar\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"oo\" + \"B\" + \"ar\"\u3002\n    \"FootBall\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"oot\" + \"B\" + \"all\".\n    \"FrameBuffer\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"F\" + \"rame\" + \"B\" + \"uffer\".\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\n    \u8f93\u51fa\uff1a[true,false,true,false,false]\n    \u89e3\u91ca\uff1a\n    \"FooBar\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"o\" + \"Ba\" + \"r\".\n    \"FootBall\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"ot\" + \"Ba\" + \"ll\".\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u51fa\uff1aqueries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\n    \u8f93\u5165\uff1a[false,true,false,false,false]\n    \u89e3\u91ca\uff1a \n    \"FooBarTest\" \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a\"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\n</code></pre>"},{"location":"leetcode/1023/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define N 1001\nbool isMatch(char *s, char *pattern)\n{\n    int n = strlen(s);\n    int m = strlen(pattern);\n    int i = 0, j = 0;\n    while (i &lt; n &amp;&amp; j &lt; m) {\n        if (s[i] == pattern[j]) {\n            i++;\n            j++;\n        } else if (s[i] &gt;= 'a' &amp;&amp; s[i] &lt;= 'z') {\n            i++;\n        } else {\n            return false;\n        }\n    }\n    if (j &lt; m) {\n        return false;\n    }\n    if (i &lt; n) {\n        while (i &lt; n) {\n            if (s[i] &gt;= 'A' &amp;&amp; s[i] &lt;= 'Z') {\n                return false;\n            }\n            i++;\n        }\n    }\n    return true;\n}\nbool* camelMatch(char ** queries, int queriesSize, char * pattern, int* returnSize){\n    bool *ans;\n    bool ansOne;\n    int i;\n    int ansEnd = 0;\n    ans = (bool*)malloc(sizeof(bool) * N);\n    for (i = 0; i&lt; queriesSize; i++) {\n        if (isMatch(queries[i], pattern)) {\n            ans[ansEnd++] = true;\n        } else {\n            ans[ansEnd++] = false;\n        }\n    }\n    (*returnSize) = ansEnd;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1026/readme/","title":"1026. \u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c","text":""},{"location":"leetcode/1026/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u00a0root\uff0c\u627e\u51fa\u5b58\u5728\u4e8e\u4e0d\u540c\u8282\u70b9\u00a0A \u548c\u00a0B\u00a0\u4e4b\u95f4\u7684\u6700\u5927\u503c V\uff0c\u5176\u4e2d\u00a0V = |A.val - B.val|\uff0c\u4e14\u00a0A\u00a0\u662f\u00a0B\u00a0\u7684\u7956\u5148\u3002</p> <p>\uff08\u5982\u679c A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u4e4b\u4e00\u4e3a B\uff0c\u6216\u8005 A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u662f B \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a A \u662f B \u7684\u7956\u5148\uff09</p> <p>\u793a\u4f8b\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1a[8,3,10,1,6,null,14,null,null,4,7,13]\n    \u8f93\u51fa\uff1a7\n    \u89e3\u91ca\uff1a \n    \u6211\u4eec\u6709\u5927\u91cf\u7684\u8282\u70b9\u4e0e\u5176\u7956\u5148\u7684\u5dee\u503c\uff0c\u5176\u4e2d\u4e00\u4e9b\u5982\u4e0b\uff1a\n    |8 - 3| = 5\n    |3 - 7| = 4\n    |8 - 1| = 7\n    |10 - 13| = 3\n    \u5728\u6240\u6709\u53ef\u80fd\u7684\u5dee\u503c\u4e2d\uff0c\u6700\u5927\u503c 7 \u7531 |8 - 1| = 7 \u5f97\u51fa\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    \u6811\u4e2d\u7684\u8282\u70b9\u6570\u5728\u00a02\u00a0\u5230\u00a05000\u00a0\u4e4b\u95f4\u3002\n    \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e\u00a00\u00a0\u5230\u00a0100000\u00a0\u4e4b\u95f4\u3002\n</code></pre>"},{"location":"leetcode/1026/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c \u5728\u904d\u5386\u7684\u65f6\u5019\u8ba1\u7b97\u7236\u5b50\u5b50\u5b59\u8282\u70b9\u4e4b\u95f4\u7684\u5dee\u503c\uff0c \u8bb0\u5f55\u4e0b\u5dee\u503c\u6700\u5927\u7684\u90a3\u4e2a\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\n#define N 5000\n\nint road[N];\nint roadEnd = 0;\nint ans = 0;\n\nint abs2(int a, int b)\n{\n    if (a &gt; b) {\n        return a - b;\n    } else {\n        return b - a;\n    }\n}\n// \u8ba1\u7b97\u65b0\u5165\u6808\u7684\u5143\u7d20\u548c\u6808\u5185\u5176\u4ed6\u5143\u7d20\u7684\u5dee\u7684\u7edd\u5bf9\u503c\n// \u5e76\u66f4\u65b0 ans\nvoid compute(int *road, int roadEnd)\n{\n    int i, diff;\n    for (i = 0; i &lt; roadEnd - 1; i++) {\n        diff = abs2(road[i], road[roadEnd - 1]);\n        if (diff &gt; ans) {\n            ans = diff;\n        }\n    }\n    printf(\"%d \", ans);\n}\nvoid dfs(struct TreeNode* root, int *road, int *roadEnd)\n{\n    road[(*roadEnd)++] = root-&gt;val;\n    compute(road, *roadEnd);\n    if (root-&gt;left) {\n        dfs(root-&gt;left, road, roadEnd);\n    }\n    if (root-&gt;right) {\n        dfs(root-&gt;right, road, roadEnd);\n    }\n    (*roadEnd)--;\n    return;\n}\nint maxAncestorDiff(struct TreeNode* root){\n    if (root == NULL) {\n        return 0;\n    }\n    roadEnd = 0;\n    ans = 0;\n    dfs(root, road, &amp;roadEnd);\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1028/readme/","title":"1028. \u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811","text":""},{"location":"leetcode/1028/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6211\u4eec\u4ece\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\u00a0\u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002</p> <p>\u5728\u904d\u5386\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5904\uff0c\u6211\u4eec\u8f93\u51fa\u00a0D\u00a0\u6761\u77ed\u5212\u7ebf\uff08\u5176\u4e2d\u00a0D\u00a0\u662f\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\uff09\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u8282\u70b9\u7684\u503c\u3002\uff08\u5982\u679c\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D\uff0c\u5219\u5176\u76f4\u63a5\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a D + 1\u3002\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a 0\uff09\u3002</p> <p>\u5982\u679c\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4fdd\u8bc1\u8be5\u5b50\u8282\u70b9\u4e3a\u5de6\u5b50\u8282\u70b9\u3002</p> <p>\u7ed9\u51fa\u904d\u5386\u8f93\u51fa\u00a0S\uff0c\u8fd8\u539f\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u00a0root\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1a\"1-2--3--4-5--6--7\"\n    \u8f93\u51fa\uff1a[1,2,5,3,4,6,7]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1a\"1-2--3---4-5--6---7\"\n    \u8f93\u51fa\uff1a[1,2,5,3,null,6,null,4,null,7]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1a\"1-401--349---90--88\"\n    \u8f93\u51fa\uff1a[1,401,null,349,88,90]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    \u539f\u59cb\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4ecb\u4e8e 1 \u548c 1000 \u4e4b\u95f4\u3002\n    \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e 1 \u548c 10 ^ 9 \u4e4b\u95f4\u3002\n</code></pre>"},{"location":"leetcode/1028/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define N 1002\n\nstruct TreeNode *nodeStack[N];\nint nodeStackEnd = 0;\nint levelStack[N];\nint levelStackEnd = 0;\n\n// \u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 number, level, \u548c\u4e0b\u4e00\u6b21\u5f00\u59cb\u7684\u4f4d\u7f6e\nint parse(char *S, int i, int *level, int *next)\n{\n    int l = 0;\n    int num = 0;\n    int j;\n    int n = strlen(S);\n    j = i;\n    while (j &lt; n &amp;&amp; S[j] == '-') {\n        l++;\n        j++;\n    }\n    while (j &lt; n &amp;&amp; S[j] &gt;= '0' &amp;&amp; S[j] &lt;= '9') {\n        num = num * 10 + S[j] - '0';\n        j++;\n    }\n    (*next) = j;\n    (*level) = l;\n    return num;\n}\n\n\nstruct TreeNode* recoverFromPreorder(char * S){\n    int i = 0;\n    int j;\n    int d; // \u77ed\u6a2a\u7ebf\u7684\u6570\u91cf\n    int next;\n    int num;\n    struct TreeNode *root;\n    struct TreeNode *newNode;\n    struct TreeNode *curNode;\n    int number;\n    int level = 0;\n    int curLevel = 0;\n    int n = strlen(S);\n    if (S == NULL || n == 0) {\n        return NULL;\n    }\n    j = 0;\n    num = 0;\n    while (j &lt; n &amp;&amp; S[j] &gt;= '0' &amp;&amp; S[j] &lt;= '9') {\n        num = num * 10 + S[j] - '0';\n        j++;\n    }\n    root = (struct TreeNode*)malloc(sizeof(struct TreeNode)); \n    root-&gt;left = NULL;\n    root-&gt;right = NULL;\n    root-&gt;val = num;\n    if (n == j) {\n       return root;\n    }\n    nodeStack[nodeStackEnd++] = root;\n    levelStack[levelStackEnd++] = 0;\n    curLevel = 0;\n    for (i = j; i &lt; strlen(S); i++) {\n        level = 0;\n        next = 0;\n        number = parse(S, i, &amp;level, &amp;next);\n        if (level == curLevel + 1) {\n            // \u8bf4\u660e\u662f\u6808\u9876\u5143\u7d20\u7684\u5de6\u5b50\u6811\n            newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n            newNode-&gt;val = number;\n            newNode-&gt;left = NULL;\n            newNode-&gt;right = NULL;\n            nodeStack[nodeStackEnd - 1]-&gt;left = newNode;\n            nodeStack[nodeStackEnd++] = newNode;\n            levelStack[levelStackEnd++] = level;\n        } else if (level &lt; curLevel + 1) {\n            while (levelStackEnd &gt; 0 &amp;&amp; levelStack[levelStackEnd - 1] &gt;= level) {\n                levelStackEnd--;\n                nodeStackEnd--;\n            }\n            curNode = nodeStack[nodeStackEnd - 1];\n            newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n            newNode-&gt;left = NULL;\n            newNode-&gt;right = NULL;\n            newNode-&gt;val = number;\n            curNode-&gt;right = newNode;\n            nodeStack[nodeStackEnd++] = newNode;\n            levelStack[levelStackEnd++] = level;\n        } else {\n\n        }\n        i = next - 1;\n        curLevel = level;\n    }\n    return root;\n}\n</code></pre>"},{"location":"leetcode/1031/readme/","title":"1031. \u4e24\u4e2a\u975e\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c","text":""},{"location":"leetcode/1031/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u975e\u8d1f\u6574\u6570\u6570\u7ec4 A \uff0c\u8fd4\u56de\u4e24\u4e2a\u975e\u91cd\u53e0\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u548c\uff0c\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u5206\u522b\u4e3a L \u548c M\u3002\uff08\u8fd9\u91cc\u9700\u8981\u6f84\u6e05\u7684\u662f\uff0c\u957f\u4e3a L \u7684\u5b50\u6570\u7ec4\u53ef\u4ee5\u51fa\u73b0\u5728\u957f\u4e3a M \u7684\u5b50\u6570\u7ec4\u4e4b\u524d\u6216\u4e4b\u540e\u3002\uff09</p> <p>\u4ece\u5f62\u5f0f\u4e0a\u770b\uff0c\u8fd4\u56de\u6700\u5927\u7684 V\uff0c\u800c V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) \u5e76\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u4e4b\u4e00\uff1a</p> <p>0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length, \u6216 0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length. \u00a0</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aA = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\n    \u8f93\u51fa\uff1a20\n    \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[9] \u957f\u5ea6\u4e3a 1\uff0c[6,5] \u957f\u5ea6\u4e3a 2\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aA = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\n    \u8f93\u51fa\uff1a29\n    \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[3,8,1] \u957f\u5ea6\u4e3a 3\uff0c[8,9] \u957f\u5ea6\u4e3a 2\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1aA = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\n    \u8f93\u51fa\uff1a31\n    \u89e3\u91ca\uff1a\u5b50\u6570\u7ec4\u7684\u4e00\u79cd\u9009\u62e9\u4e2d\uff0c[5,6,0,9] \u957f\u5ea6\u4e3a 4\uff0c[0,3,8] \u957f\u5ea6\u4e3a 3\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    L &gt;= 1\n    M &gt;= 1\n    L + M &lt;= A.length &lt;= 1000\n    0 &lt;= A[i] &lt;= 1000\n</code></pre>"},{"location":"leetcode/1031/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5148\u6c42\u51fa\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c\u7136\u540e\u56fa\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c \u6c42\u53e6\u4e00\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u548c\uff0c \u904d\u5386\u6bcf\u4e00\u4e2a\u56fa\u5b9a\u7684\u6570\u7ec4\uff0c\u5373\u53ef\u627e\u51fa\u6240\u6709\u6700\u5927\u7684\u89e3\uff0c\u6700\u540e\u53d6\u6700\u5927\u7684\u90a3\u4e2a\u3002 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\u7684\u786e\u5b9a\u3002</p> <pre><code>#define MAX(a, b) ((a) &gt; (b)) ? (a) : (b)\nint getMSum(int *A, int *aSum, int ASize, int i, int L, int M)\n{\n    int lefts = 0;\n    int lefte = i - 1;\n    int rights = i + L;\n    int righte = ASize - 1;\n    int maxv = -1;\n    int j, tmp;\n\n    if (lefte - lefts + 1 &gt;= M) {\n        for (j = lefts; j &lt;= lefte - M + 1; j++) {\n            tmp = aSum[j + M] - aSum[j];\n            maxv = MAX(maxv, tmp);\n        }\n    }\n\n    if (righte - rights + 1 &gt;= M) {\n        for (j = rights; j &lt;= righte - M + 1; j++) {\n            tmp = aSum[j + M] - aSum[j];\n            maxv = MAX(maxv, tmp);\n        }\n    }\n    return maxv;\n}\nint maxSumTwoNoOverlap(int* A, int ASize, int L, int M){\n    int *aSum;\n    int lSum = 0;\n    int mSum = 0;\n    int sum = 0;\n    int ans = 0;\n    int i, j;\n\n    if (A == NULL || ASize == 0) {\n        return 0;\n    }\n\n    /* \u6c42\u524d\u7f00\u548c */\n    aSum = (int*)malloc(sizeof(int) * (ASize + 1));\n    aSum[0] = 0;\n    for (i = 0; i &lt; ASize; i++) {\n        aSum[i + 1] = aSum[i] + A[i];\n    }\n\n    /* \u786e\u5b9aL\uff0c\u5bfb\u627e\u53ef\u80fd\u7684\u6700\u5927\u7684M */\n    for (i = 0; i &lt;= ASize - L; i++) {\n        lSum = aSum[i + L] - aSum[i];\n        mSum = getMSum(A, aSum, ASize, i, L, M);\n        sum = lSum + mSum;\n        ans = MAX(ans, sum);\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1048/readme/","title":"1048. \u6700\u957f\u5b57\u7b26\u4e32\u94fe","text":""},{"location":"leetcode/1048/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002</p> <p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5728\u00a0word1\u00a0\u7684\u4efb\u4f55\u5730\u65b9\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u4f7f\u5176\u53d8\u6210\u00a0word2\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u00a0word1\u00a0\u662f\u00a0word2\u00a0\u7684\u524d\u8eab\u3002\u4f8b\u5982\uff0c\"abc\"\u00a0\u662f\u00a0\"abac\"\u00a0\u7684\u524d\u8eab\u3002</p> <p>\u8bcd\u94fe\u662f\u5355\u8bcd\u00a0[word_1, word_2, ..., word_k]\u00a0\u7ec4\u6210\u7684\u5e8f\u5217\uff0ck &gt;= 1\uff0c\u5176\u4e2d\u00a0word_1\u00a0\u662f\u00a0word_2\u00a0\u7684\u524d\u8eab\uff0cword_2\u00a0\u662f\u00a0word_3\u00a0\u7684\u524d\u8eab\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p> <p>\u4ece\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868 words \u4e2d\u9009\u62e9\u5355\u8bcd\u7ec4\u6210\u8bcd\u94fe\uff0c\u8fd4\u56de\u8bcd\u94fe\u7684\u6700\u957f\u53ef\u80fd\u957f\u5ea6\u3002 \u00a0</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>    \u8f93\u5165\uff1a[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\n    \u8f93\u51fa\uff1a4\n    \u89e3\u91ca\uff1a\u6700\u957f\u5355\u8bcd\u94fe\u4e4b\u4e00\u4e3a \"a\",\"ba\",\"bda\",\"bdca\"\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= words.length &lt;= 1000\n    1 &lt;= words[i].length &lt;= 16\n    words[i]\u00a0\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002\n</code></pre>"},{"location":"leetcode/1048/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5982\u679c\u5f53\u524d\u6863\u6b21\u7684\u957f\u5ea6\u662f m, \u90a3\u4e48\u4e0b\u4e00\u4e2a\u53ef\u80fd\u662f\u8bcd\u94fe\u7684\u5355\u8bcd\u957f\u5ea6\u662f m + 1, \u641c\u7d22\u6240\u6709\u957f\u5ea6\u662f m + 1\u7684\u5355\u8bcd\uff0c \u8bb0\u5f55\u6700\u5927\u503c\u3002</p> <pre><code>class Solution(object):\n    def longestStrChain(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        def is_prefix(word, word2):\n            if len(word)+1 != len(word2):\n                return False\n            count = 1 # \u6700\u591a\u51fa\u73b0\u4e00\u6b21\u5b57\u7b26\u4e0d\u5339\u914d\n            i = 0\n            j = 0\n            while i &lt; len(word) and j &lt; len(word2):\n                if word[i] == word2[j]:\n                    i += 1\n                    j += 1\n                elif count &gt; 0:\n                    count -= 1\n                    j += 1\n                else:\n                    return False\n            return True\n\n        dic = {}\n        minl = 16\n        maxl = 1\n        for word in words:\n            l = len(word)\n            minl = min([minl, l])\n            maxl = max([maxl, l])\n            if l not in dic:\n                dic[l] = [[word, 1]]\n            else:\n                dic[l].append([word, 1])\n\n        l = minl\n        longest = 1\n        while l &lt;= maxl:\n            if l in dic and l+1 in dic:\n                for word in dic[l]:\n                    for i in  range(len(dic[l+1])):\n                        ans = is_prefix(word[0], dic[l+1][i][0])\n                        #print(\"{0} is {1} ? {2}\".format(word[0], dic[l+1][i][0], ans))\n                        if ans:\n                            dic[l+1][i][1] = word[1] + 1\n                            longest = max([longest, dic[l+1][i][1]])\n            l += 1\n\n        return longest\n</code></pre>"},{"location":"leetcode/1090/readme/","title":"1090. \u53d7\u6807\u7b7e\u5f71\u54cd\u7684\u6700\u5927\u503c","text":""},{"location":"leetcode/1090/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6211\u4eec\u6709\u4e00\u4e2a\u9879\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u7b2c\u00a0i\u00a0\u9879\u7684\u503c\u4e3a\u00a0values[i]\uff0c\u6807\u7b7e\u4e3a\u00a0labels[i]\u3002</p> <p>\u6211\u4eec\u4ece\u8fd9\u4e9b\u9879\u4e2d\u9009\u51fa\u4e00\u4e2a\u5b50\u96c6\u00a0S\uff0c\u8fd9\u6837\u4e00\u6765\uff1a</p> <p>|S| &lt;= num_wanted \u5bf9\u4e8e\u4efb\u610f\u7684\u6807\u7b7e L\uff0c\u5b50\u96c6 S \u4e2d\u6807\u7b7e\u4e3a L\u00a0\u7684\u9879\u7684\u6570\u76ee\u603b\u6ee1\u8db3\u00a0&lt;= use_limit\u3002 \u8fd4\u56de\u5b50\u96c6\u00a0S\u00a0\u7684\u6700\u5927\u53ef\u80fd\u7684\u00a0\u548c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1avalues = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1\n    \u8f93\u51fa\uff1a9\n    \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e09\u9879\u548c\u7b2c\u4e94\u9879\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1avalues = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2\n    \u8f93\u51fa\uff1a12\n    \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u4e09\u9879\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1avalues = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1\n    \u8f93\u51fa\uff1a16\n    \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\u548c\u7b2c\u56db\u9879\u3002\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>    \u8f93\u5165\uff1avalues = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2\n    \u8f93\u51fa\uff1a24\n    \u89e3\u91ca\uff1a\u9009\u51fa\u7684\u5b50\u96c6\u662f\u7b2c\u4e00\u9879\uff0c\u7b2c\u4e8c\u9879\u548c\u7b2c\u56db\u9879\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= values.length == labels.length &lt;= 20000\n    0 &lt;= values[i], labels[i]\u00a0&lt;= 20000\n    1 &lt;= num_wanted, use_limit\u00a0&lt;= values.length\n</code></pre>"},{"location":"leetcode/1090/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution(object):\n    def largestValsFromLabels(self, values, labels, num_wanted, use_limit):\n        \"\"\"\n        :type values: List[int]\n        :type labels: List[int]\n        :type num_wanted: int\n        :type use_limit: int\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for label, value in zip(labels, values):\n            if label not in dic:\n                dic[label] = [value]\n            else:\n                dic[label].append(value)\n        a = []\n        for key, value in dic.iteritems():\n            value = sorted(value, reverse = True)\n            a.extend(value[0:use_limit])\n        a = sorted(a, reverse = True)\n        s = sum(a[0:num_wanted])\n        return s\n</code></pre>"},{"location":"leetcode/1143/readme/","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/1143/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 text1 \u548c text2\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 \u5b50\u5e8f\u5217 \u662f\u6307\u8fd9\u6837\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a\u5b83\u662f\u7531\u539f\u5b57\u7b26\u4e32\u5728\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\u4efb\u4f55\u5b57\u7b26\uff09\u540e\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c\"ace\" \u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\uff0c\u4f46 \"aec\" \u4e0d\u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\u3002\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u300c\u516c\u5171\u5b50\u5e8f\u5217\u300d\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6240\u5171\u540c\u62e5\u6709\u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u82e5\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5219\u8fd4\u56de 0\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165\uff1atext1 = \"abcde\", text2 = \"ace\" \n\u8f93\u51fa\uff1a3  \n\u89e3\u91ca\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u662f \"ace\"\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a 3\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165\uff1atext1 = \"abc\", text2 = \"abc\"\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u662f \"abc\"\uff0c\u5b83\u7684\u957f\u5ea6\u4e3a 3\u3002\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165\uff1atext1 = \"abc\", text2 = \"def\"\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u4e24\u4e2a\u5b57\u7b26\u4e32\u6ca1\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002\n</code></pre> <p>\u63d0\u793a:</p> <pre><code>1 &lt;= text1.length &lt;= 1000\n1 &lt;= text2.length &lt;= 1000\n\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u7b26\u3002\n</code></pre>"},{"location":"leetcode/1143/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>dp[i][j] \u8868\u793a\u4f7f\u7528 string1 \u524d i \u4e2a\u5b57\u7b26\uff0c string2 \u524d j \u4e2a\u5b57\u7b26\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 dp[i][j] = dp[i-1][j-1], if string1[i] == string2[j]          = max(dp[i-1][j], dp[i][j-1]), if string1[i] == string2[j]</p>"},{"location":"leetcode/1143/readme/#ac","title":"AC\u4ee3\u7801","text":"<p>Python</p>"},{"location":"leetcode/1157/readme/","title":"1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20","text":""},{"location":"leetcode/1157/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9e\u73b0\u4e00\u4e2a\u00a0MajorityChecker\u00a0\u7684\u7c7b\uff0c\u5b83\u5e94\u8be5\u5177\u6709\u4e0b\u8ff0\u51e0\u4e2a API\uff1a</p> <p>MajorityChecker(int[] arr)\u00a0\u4f1a\u7528\u7ed9\u5b9a\u7684\u6570\u7ec4 arr\u00a0\u6765\u6784\u9020\u4e00\u4e2a MajorityChecker \u7684\u5b9e\u4f8b\u3002 int query(int left, int right, int threshold)\u00a0\u6709\u8fd9\u4e48\u51e0\u4e2a\u53c2\u6570\uff1a 0 &lt;= left\u00a0&lt;= right\u00a0&lt; arr.length \u8868\u793a\u6570\u7ec4\u00a0arr\u00a0\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002 2 * threshold &gt; right - left + 1\uff0c\u4e5f\u5c31\u662f\u8bf4\u9608\u503c threshold\u00a0\u59cb\u7ec8\u6bd4\u5b50\u5e8f\u5217\u957f\u5ea6\u7684\u4e00\u534a\u8fd8\u8981\u5927\u3002 \u6bcf\u6b21\u67e5\u8be2\u00a0query(...)\u00a0\u4f1a\u8fd4\u56de\u5728\u00a0arr[left], arr[left+1], ..., arr[right]\u00a0\u4e2d\u81f3\u5c11\u51fa\u73b0\u9608\u503c\u6b21\u6570\u00a0threshold\u00a0\u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u5c31\u8fd4\u56de\u00a0-1\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\nmajorityChecker.query(0,5,4); // \u8fd4\u56de 1\nmajorityChecker.query(0,3,3); // \u8fd4\u56de -1\nmajorityChecker.query(2,3,2); // \u8fd4\u56de 2\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= arr.length &lt;=\u00a020000\n1 &lt;= arr[i]\u00a0&lt;=\u00a020000\n\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c0 &lt;= left &lt;= right &lt; len(arr)\n\u5bf9\u4e8e\u6bcf\u6b21\u67e5\u8be2\uff0c2 * threshold &gt; right - left + 1\n\u67e5\u8be2\u6b21\u6570\u6700\u591a\u4e3a 10000\n</code></pre>"},{"location":"leetcode/1157/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u7684\u6027\u8d28</p>"},{"location":"leetcode/1169/readme/","title":"1169. \u67e5\u8be2\u65e0\u6548\u4ea4\u6613","text":""},{"location":"leetcode/1169/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u679c\u51fa\u73b0\u4e0b\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u4ea4\u6613 \u53ef\u80fd\u65e0\u6548\uff1a</p> <p>\u4ea4\u6613\u91d1\u989d\u8d85\u8fc7 \u00a51000 \u6216\u8005\uff0c\u5b83\u548c\u53e6\u4e00\u4e2a\u57ce\u5e02\u4e2d\u540c\u540d\u7684\u53e6\u4e00\u7b14\u4ea4\u6613\u76f8\u9694\u4e0d\u8d85\u8fc7 60 \u5206\u949f\uff08\u5305\u542b 60 \u5206\u949f\u6574\uff09 \u6bcf\u4e2a\u4ea4\u6613\u5b57\u7b26\u4e32\u00a0transactions[i]\u00a0\u7531\u4e00\u4e9b\u7528\u9017\u53f7\u5206\u9694\u7684\u503c\u7ec4\u6210\uff0c\u8fd9\u4e9b\u503c\u5206\u522b\u8868\u793a\u4ea4\u6613\u7684\u540d\u79f0\uff0c\u65f6\u95f4\uff08\u4ee5\u5206\u949f\u8ba1\uff09\uff0c\u91d1\u989d\u4ee5\u53ca\u57ce\u5e02\u3002</p> <p>\u7ed9\u4f60\u4e00\u4efd\u4ea4\u6613\u6e05\u5355\u00a0transactions\uff0c\u8fd4\u56de\u53ef\u80fd\u65e0\u6548\u7684\u4ea4\u6613\u5217\u8868\u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n    \u8f93\u51fa\uff1a[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n    \u89e3\u91ca\uff1a\u7b2c\u4e00\u7b14\u4ea4\u6613\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u7b14\u4ea4\u6613\u548c\u5b83\u95f4\u9694\u4e0d\u8d85\u8fc7 60 \u5206\u949f\u3001\u540d\u79f0\u76f8\u540c\u4e14\u53d1\u751f\u5728\u4e0d\u540c\u7684\u57ce\u5e02\u3002\u540c\u6837\uff0c\u7b2c\u4e8c\u7b14\u4ea4\u6613\u4e5f\u662f\u65e0\u6548\u7684\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\n    \u8f93\u51fa\uff1a[\"alice,50,1200,mtv\"]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1atransactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\n    \u8f93\u51fa\uff1a[\"bob,50,1200,mtv\"]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    transactions.length &lt;= 1000\n    \u6bcf\u7b14\u4ea4\u6613\u00a0transactions[i]\u00a0\u6309\u00a0\"{name},{time},{amount},{city}\"\u00a0\u7684\u683c\u5f0f\u8fdb\u884c\u8bb0\u5f55\n    \u6bcf\u4e2a\u4ea4\u6613\u540d\u79f0\u00a0{name}\u00a0\u548c\u57ce\u5e02\u00a0{city}\u00a0\u90fd\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0c\u957f\u5ea6\u5728\u00a01\u00a0\u5230\u00a010\u00a0\u4e4b\u95f4\n    \u6bcf\u4e2a\u4ea4\u6613\u65f6\u95f4\u00a0{time}\u00a0\u7531\u4e00\u4e9b\u6570\u5b57\u7ec4\u6210\uff0c\u8868\u793a\u4e00\u4e2a\u00a00\u00a0\u5230\u00a01000\u00a0\u4e4b\u95f4\u7684\u6574\u6570\n    \u6bcf\u7b14\u4ea4\u6613\u91d1\u989d\u00a0{amount}\u00a0\u7531\u4e00\u4e9b\u6570\u5b57\u7ec4\u6210\uff0c\u8868\u793a\u4e00\u4e2a\u00a00 \u5230\u00a02000\u00a0\u4e4b\u95f4\u7684\u6574\u6570\n</code></pre>"},{"location":"leetcode/1169/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution:\n    def findInvalid(self, trans):\n        n = len(trans)\n        ans = set()\n        for i in range(n-1):\n            for j in range(i+1, n):\n                a1, b1, c1, d1 = trans[i].split(\",\", 3)\n                a2, b2, c2, d2 = trans[j].split(\",\", 3)\n                if abs(int(b1) - int(b2)) &lt;= 60 and d1 != d2:\n                    if trans[i] not in ans:\n                        ans.add(trans[i])\n                    if trans[j] not in ans:\n                        ans.add(trans[j])\n        return ans\n\n    def invalidTransactions(self, transactions):\n        ans = set()\n        dic = {}\n        for line in transactions:\n            a, b, c, d = line.split(\",\", 3)\n            if a in dic:\n                dic[a].append(line)\n            else:\n                dic[a] = [line]\n            if int(c) &gt; 1000:\n                ans.add(line)\n        #print(dic)\n        for key, value in dic.items():\n            invilds = self.findInvalid(value)\n            if invilds:\n                ans = ans | invilds \n        return ans\n</code></pre>"},{"location":"leetcode/1170/readme/","title":"1170. \u6bd4\u8f83\u5b57\u7b26\u4e32\u6700\u5c0f\u5b57\u6bcd\u51fa\u73b0\u9891\u6b21","text":""},{"location":"leetcode/1170/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u00a0f(s)\uff0c\u5176\u4e2d\u4f20\u5165\u53c2\u6570\u00a0s\u00a0\u662f\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32\uff1b\u8be5\u51fd\u6570\u7684\u529f\u80fd\u662f\u7edf\u8ba1\u00a0s \u00a0\u4e2d\uff08\u6309\u5b57\u5178\u5e8f\u6bd4\u8f83\uff09\u6700\u5c0f\u5b57\u6bcd\u7684\u51fa\u73b0\u9891\u6b21\u3002</p> <p>\u4f8b\u5982\uff0c\u82e5\u00a0s = \"dcce\"\uff0c\u90a3\u4e48\u00a0f(s) = 2\uff0c\u56e0\u4e3a\u6700\u5c0f\u7684\u5b57\u6bcd\u662f\u00a0\"c\"\uff0c\u5b83\u51fa\u73b0\u4e86\u00a02 \u6b21\u3002</p> <p>\u73b0\u5728\uff0c\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u5f85\u67e5\u8868\u00a0queries\u00a0\u548c\u8bcd\u6c47\u8868\u00a0words\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0answer\u00a0\u4f5c\u4e3a\u7b54\u6848\uff0c\u5176\u4e2d\u6bcf\u4e2a\u00a0answer[i]\u00a0\u662f\u6ee1\u8db3\u00a0f(queries[i])\u00a0&lt; f(W)\u00a0\u7684\u8bcd\u7684\u6570\u76ee\uff0cW\u00a0\u662f\u8bcd\u6c47\u8868\u00a0words\u00a0\u4e2d\u7684\u8bcd\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aqueries = [\"cbd\"], words = [\"zaaaz\"]\n    \u8f93\u51fa\uff1a[1]\n    \u89e3\u91ca\uff1a\u67e5\u8be2 f(\"cbd\") = 1\uff0c\u800c f(\"zaaaz\") = 3 \u6240\u4ee5 f(\"cbd\") &lt; f(\"zaaaz\")\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aqueries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n    \u8f93\u51fa\uff1a[1,2]\n    \u89e3\u91ca\uff1a\u7b2c\u4e00\u4e2a\u67e5\u8be2 f(\"bbb\") &lt; f(\"aaaa\")\uff0c\u7b2c\u4e8c\u4e2a\u67e5\u8be2 f(\"aaa\") \u548c f(\"aaaa\") \u90fd &gt; f(\"cc\")\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= queries.length &lt;= 2000\n    1 &lt;= words.length &lt;= 2000\n    1 &lt;= queries[i].length, words[i].length &lt;= 10\n    queries[i][j], words[i][j]\u00a0\u90fd\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\n</code></pre>"},{"location":"leetcode/1170/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int f(char *s)\n{\n    int i;\n    int n = strlen(s);\n    int count = 1;\n    char c = s[0];\n    for (i = 1; i &lt; n; i++) {\n        if (s[i] &lt; c) {\n            c = s[i];\n            count = 1;\n        } else if (c == s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\nint* numSmallerByFrequency(char ** queries, int queriesSize, char ** words, int wordsSize, int* returnSize){\n    int i, j;\n    int count;\n    int n;\n    int *wordCount;\n    int ans;\n    int *ansArray;\n    wordCount = (int*)malloc(sizeof(int) * wordsSize);\n    ansArray = (int*)malloc(sizeof(int) * queriesSize);\n    for (i = 0; i &lt; wordsSize; i++) {\n        wordCount[i] = f(words[i]);\n    }\n    for (i = 0; i &lt; queriesSize; i++) {\n        count = f(queries[i]);\n        ans = 0;\n        for (j = 0; j &lt; wordsSize; j++) {\n            if (count &lt; wordCount[j]) {\n                ans++;\n            }\n        }\n        ansArray[i] = ans;\n    }\n    (*returnSize) = queriesSize;\n    free(wordCount);\n    return ansArray;\n}\n</code></pre>"},{"location":"leetcode/1178/readme/","title":"1178. \u731c\u5b57\u8c1c","text":""},{"location":"leetcode/1178/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5916\u56fd\u53cb\u4eba\u4eff\u7167\u4e2d\u56fd\u5b57\u8c1c\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u82f1\u6587\u7248\u731c\u5b57\u8c1c\u5c0f\u6e38\u620f\uff0c\u8bf7\u4f60\u6765\u731c\u731c\u770b\u5427\u3002</p> <p>\u5b57\u8c1c\u7684\u8ff7\u9762\u00a0puzzle \u6309\u5b57\u7b26\u4e32\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5982\u679c\u4e00\u4e2a\u5355\u8bcd\u00a0word\u00a0\u7b26\u5408\u4e0b\u9762\u4e24\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u7b97\u4f5c\u8c1c\u5e95\uff1a</p> <p>\u5355\u8bcd\u00a0word\u00a0\u4e2d\u5305\u542b\u8c1c\u9762\u00a0puzzle\u00a0\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u3002 \u5355\u8bcd\u00a0word\u00a0\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u90fd\u53ef\u4ee5\u5728\u8c1c\u9762\u00a0puzzle\u00a0\u4e2d\u627e\u5230\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5b57\u8c1c\u7684\u8c1c\u9762\u662f \"abcdefg\"\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f5c\u4e3a\u8c1c\u5e95\u7684\u5355\u8bcd\u6709 \"faced\", \"cabbage\", \u548c \"baggage\"\uff1b\u800c \"beefed\"\uff08\u4e0d\u542b\u5b57\u6bcd \"a\"\uff09\u4ee5\u53ca\u00a0\"based\"\uff08\u5176\u4e2d\u7684 \"s\" \u6ca1\u6709\u51fa\u73b0\u5728\u8c1c\u9762\u4e2d\uff09\u3002 \u8fd4\u56de\u4e00\u4e2a\u7b54\u6848\u6570\u7ec4\u00a0answer\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u00a0answer[i]\u00a0\u662f\u5728\u7ed9\u51fa\u7684\u5355\u8bcd\u5217\u8868 words \u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u8c1c\u8ff7\u9762\u00a0puzzles[i]\u00a0\u6240\u5bf9\u5e94\u7684\u8c1c\u5e95\u7684\u5355\u8bcd\u6570\u76ee\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>    \u8f93\u5165\uff1a\n    words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], \n    puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]\n    \u8f93\u51fa\uff1a[1,1,3,2,4,0]\n    \u89e3\u91ca\uff1a\n    1 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"aboveyz\" \u7684\u8c1c\u5e95 : \"aaaa\" \n    1 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"abrodyz\" \u7684\u8c1c\u5e95 : \"aaaa\"\n    3 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a \"abslute\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\", \"able\"\n    2 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a\u00a0\"absoryz\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\"\n    4 \u4e2a\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a\u00a0\"actresz\" \u7684\u8c1c\u5e95 : \"aaaa\", \"asas\", \"actt\", \"access\"\n    \u6ca1\u6709\u5355\u8bcd\u53ef\u4ee5\u4f5c\u4e3a\u00a0\"gaswxyz\" \u7684\u8c1c\u5e95\uff0c\u56e0\u4e3a\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u90fd\u4e0d\u542b\u5b57\u6bcd 'g'\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= words.length &lt;= 10^5\n    4 &lt;= words[i].length &lt;= 50\n    1 &lt;= puzzles.length &lt;= 10^4\n    puzzles[i].length == 7\n    words[i][j], puzzles[i][j]\u00a0\u90fd\u662f\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\n    \u6bcf\u4e2a\u00a0puzzles[i]\u00a0\u6240\u5305\u542b\u7684\u5b57\u7b26\u90fd\u4e0d\u91cd\u590d\u3002\n</code></pre>"},{"location":"leetcode/1178/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution(object):\n    def findNumOfValidWords(self, words, puzzles):\n        \"\"\"\n        :type words: List[str]\n        :type puzzles: List[str]\n        :rtype: List[int]\n        \"\"\"\n        def convert(word):\n            b = 0\n            for c in word:\n                b = b | ( 1 &lt;&lt; ( ord(c) - ord('a') ) )\n            return b\n\n        dic = {}\n        for word in words:\n            word = \"\".join( set(word) )\n            v = convert(word)\n            if v not in dic:\n                dic[v] = 1\n            else:\n                dic[v] += 1\n\n        ans = [0] * len(puzzles)\n        for i, puzzle in enumerate(puzzles):\n            first = convert(puzzle[0])\n            pv = convert(puzzle)\n            j = pv\n            while j &gt; 0:\n                if (first &amp; j != 0) and j in dic:\n                    ans[i] += dic[j]\n                j = (j - 1) &amp; pv\n        return ans\n</code></pre>"},{"location":"leetcode/1203/readme/","title":"1203. \u9879\u76ee\u7ba1\u7406","text":""},{"location":"leetcode/1203/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u516c\u53f8\u5171\u6709\u00a0n\u00a0\u4e2a\u9879\u76ee\u548c \u00a0m\u00a0\u4e2a\u5c0f\u7ec4\uff0c\u6bcf\u4e2a\u9879\u76ee\u8981\u4e0d\u6ca1\u6709\u5f52\u5c5e\uff0c\u8981\u4e0d\u5c31\u7531\u5176\u4e2d\u7684\u4e00\u4e2a\u5c0f\u7ec4\u8d1f\u8d23\u3002</p> <p>\u6211\u4eec\u7528\u00a0group[i]\u00a0\u4ee3\u8868\u7b2c\u00a0i\u00a0\u4e2a\u9879\u76ee\u6240\u5c5e\u7684\u5c0f\u7ec4\uff0c\u5982\u679c\u8fd9\u4e2a\u9879\u76ee\u76ee\u524d\u65e0\u4eba\u63a5\u624b\uff0c\u90a3\u4e48\u00a0group[i] \u5c31\u7b49\u4e8e\u00a0-1\u3002\uff08\u9879\u76ee\u548c\u5c0f\u7ec4\u90fd\u662f\u4ece\u96f6\u5f00\u59cb\u7f16\u53f7\u7684\uff09</p> <p>\u8bf7\u4f60\u5e2e\u5fd9\u6309\u8981\u6c42\u5b89\u6392\u8fd9\u4e9b\u9879\u76ee\u7684\u8fdb\u5ea6\uff0c\u5e76\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u9879\u76ee\u5217\u8868\uff1a</p> <p>\u540c\u4e00\u5c0f\u7ec4\u7684\u9879\u76ee\uff0c\u6392\u5e8f\u540e\u5728\u5217\u8868\u4e2d\u5f7c\u6b64\u76f8\u90bb\u3002 \u9879\u76ee\u4e4b\u95f4\u5b58\u5728\u4e00\u5b9a\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5217\u8868 beforeItems\u00a0\u6765\u8868\u793a\uff0c\u5176\u4e2d\u00a0beforeItems[i]\u00a0\u8868\u793a\u5728\u8fdb\u884c\u7b2c\u00a0i\u00a0\u4e2a\u9879\u76ee\u524d\uff08\u4f4d\u4e8e\u7b2c i\u00a0\u4e2a\u9879\u76ee\u5de6\u4fa7\uff09\u5e94\u8be5\u5b8c\u6210\u7684\u6240\u6709\u9879\u76ee\u3002 \u7ed3\u679c\u8981\u6c42\uff1a</p> <p>\u5982\u679c\u5b58\u5728\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u5373\u53ef\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u5408\u9002\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u8bf7\u8fd4\u56de\u4e00\u4e2a \u7a7a\u5217\u8868\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1an = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]\n\u8f93\u51fa\uff1a[6,3,4,1,5,2,0,7]\n\u793a\u4f8b\u00a02\uff1a\n\n\u8f93\u5165\uff1an = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]\n\u8f93\u51fa\uff1a[]\n\u89e3\u91ca\uff1a\u4e0e\u793a\u4f8b 1 \u5927\u81f4\u76f8\u540c\uff0c\u4f46\u662f\u5728\u6392\u5e8f\u540e\u7684\u5217\u8868\u4e2d\uff0c4 \u5fc5\u987b\u653e\u5728 6 \u7684\u524d\u9762\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= m &lt;= n &lt;= 3*10^4\ngroup.length == beforeItems.length == n\n-1 &lt;= group[i] &lt;= m-1\n0 &lt;= beforeItems[i].length &lt;= n-1\n0 &lt;= beforeItems[i][j] &lt;= n-1\ni != beforeItems[i][j]\n</code></pre>"},{"location":"leetcode/1203/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u627e\u51fa\u7ec4\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f</li> <li>\u627e\u51fa\u7ec4\u5185\u7684\u4f9d\u8d56\u5173\u7cfb\u56fe\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f</li> <li>\u4e24\u8005\u90fd\u53ef\u4ee5\u5b8c\u6210\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u5426\u5219\uff0c\u8f93\u51fa[]</li> </ol> <p>Python</p>"},{"location":"leetcode/121/readme/","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":""},{"location":"leetcode/121/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [7,1,5,3,6,4]\n\u8f93\u51fa: 5\n\u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002\n     \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [7,6,4,3,1]\n\u8f93\u51fa: 0\n\u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n</code></pre>"},{"location":"leetcode/121/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u627e\u5230\u6700\u5c0f\u503c\uff0c\u548c\u6700\u5c0f\u503c\u540e\u9762\u7684\u6700\u5927\u503c\uff0c\u53d6\u5dee\u503c\u6700\u5927\u7684\u90a3\u4e00\u5bf9</p> <pre><code>class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        if not prices:\n            return 0\n\n        ans = 0\n        i = 1\n        low = prices[0]\n        high = prices[0]\n        while i &lt; len(prices):\n            if prices[i] &lt; low:\n                low = prices[i]\n                high = prices[i]\n            if prices[i] &gt; high:\n                high = prices[i]\n            ans = max(ans, high - low)\n            i += 1\n        return ans\n</code></pre>"},{"location":"leetcode/1218/readme/","title":"1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/1218/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0arr\u00a0\u548c\u4e00\u4e2a\u6574\u6570\u00a0difference\uff0c\u8bf7\u4f60\u627e\u51fa\u00a0arr\u00a0\u4e2d\u6240\u6709\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u7b49\u4e8e\u7ed9\u5b9a\u00a0difference\u00a0\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aarr = [1,2,3,4], difference = 1\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [1,2,3,4]\u3002\n\u793a\u4f8b\u00a02\uff1a\n\n\u8f93\u5165\uff1aarr = [1,3,5,7], difference = 1\n\u8f93\u51fa\uff1a1\n\u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f\u4efb\u610f\u5355\u4e2a\u5143\u7d20\u3002\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1aarr = [1,5,7,8,5,3,4,2,1], difference = -2\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [7,5,3,1]\u3002\n</code></pre>"},{"location":"leetcode/1218/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>dp[i] \u8868\u793a\u4ee5 arr[i] \u7ed3\u5c3e\u7684\u6570\u7ec4\u6700\u957f\u7684\u7b49\u5dee\u6570\u5217\u957f\u5ea6 dp[i] = dp[j] + 1, if arr[i] - arr[j] = difference, j in [0, i - 1]       = 1, if not find arr[j]</p> <p>\u5bfb\u627e j \u7684\u8fc7\u7a0b\u9700\u8981\u4ece[i-1,0]\u626b\u63cf\uff0c\u8fd9\u6837\u53ea\u80fd\u8fc7\u90e8\u5206\u7528\u4f8b\u3002\u4f7f\u7528\u5b57\u5178\u8bb0\u5f55\uff0c\u53ef\u4ee5\u52a0\u5feb\u901f\u5ea6\u3002</p>"},{"location":"leetcode/1218/readme/#ac","title":"AC \u4ee3\u7801","text":"<p>Python</p>"},{"location":"leetcode/122/readme/","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II","text":""},{"location":"leetcode/122/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c\u00a0i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [7,1,5,3,6,4]\n\u8f93\u51fa: 7\n\u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n     \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [1,2,3,4,5]\n\u8f93\u51fa: 4\n\u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n     \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002\n     \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002\n</code></pre> <p>\u793a\u4f8b\u00a03:</p> <pre><code>\u8f93\u5165: [7,6,4,3,1]\n\u8f93\u51fa: 0\n\u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= prices.length &lt;= 3 * 10 ^ 4\n0 &lt;= prices[i]\u00a0&lt;= 10 ^ 4\n</code></pre>"},{"location":"leetcode/122/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6bcf\u4e00\u4e2a\u76f8\u90bb\u7684\u589e\u957f\u90fd\u53ef\u4ee5\u662f\u6700\u540e\u7684\u5229\u6da6</p> <pre><code>class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        i = 1\n        while i &lt; len(prices):\n            if prices[i] &gt; prices[i-1]:\n                ans += prices[i] - prices[i-1]\n            i += 1\n        return ans\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u627e\u5230\u76f8\u90bb\u7684\u6700\u4f4e\u548c\u6700\u9ad8\u70b9\uff0c\u6c42\u5dee\u503c\u548c</p> <pre><code>class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        if not prices:\n            return 0\n\n        prices.insert(0, prices[0] + 1)\n        prices.append(prices[-1] - 1)\n        i = 1\n        while i &lt; len(prices) - 1:\n                     # \u6ce8\u610f\u6709\u503c\u76f8\u540c\u7684\u60c5\u51b5\n            if prices[i] &lt;= prices[i-1] and prices[i] &lt;= prices[i+1]:\n                low = prices[i]\n            if prices[i] &gt;= prices[i-1] and prices[i] &gt;= prices[i+1]:\n                ans += prices[i] - low\n                low = prices[i]\n            i += 1\n        return ans\n</code></pre>"},{"location":"leetcode/1224/readme/","title":"1224. \u6700\u5927\u76f8\u7b49\u9891\u7387","text":""},{"location":"leetcode/1224/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\u00a0nums\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u4ece\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u80fd\u6ee1\u8db3\u4e0b\u9762\u8981\u6c42\u7684 \u6700\u957f \u524d\u7f00\uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\uff1a</p> <p>\u4ece\u524d\u7f00\u4e2d \u5220\u9664\u4e00\u4e2a \u5143\u7d20\u540e\uff0c\u4f7f\u5f97\u6240\u5269\u4e0b\u7684\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u76f8\u540c\u3002 \u5982\u679c\u5220\u9664\u8fd9\u4e2a\u5143\u7d20\u540e\u6ca1\u6709\u5269\u4f59\u5143\u7d20\u5b58\u5728\uff0c\u4ecd\u53ef\u8ba4\u4e3a\u6bcf\u4e2a\u6570\u5b57\u90fd\u5177\u6709\u76f8\u540c\u7684\u51fa\u73b0\u6b21\u6570\uff08\u4e5f\u5c31\u662f 0 \u6b21\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1anums = [2,2,1,1,5,3,3,5]\n    \u8f93\u51fa\uff1a7\n    \u89e3\u91ca\uff1a\u5bf9\u4e8e\u957f\u5ea6\u4e3a 7 \u7684\u5b50\u6570\u7ec4 [2,2,1,1,5,3,3]\uff0c\u5982\u679c\u6211\u4eec\u4ece\u4e2d\u5220\u53bb nums[4]=5\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 [2,2,1,1,3,3]\uff0c\u91cc\u9762\u6bcf\u4e2a\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1anums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\n    \u8f93\u51fa\uff1a13\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1anums = [1,1,1,2,2,2]\n    \u8f93\u51fa\uff1a5\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <p>\u8f93\u5165\uff1anums = [10,2,8,9,3,8,1,5,2,3,7,6] \u8f93\u51fa\uff1a8 \u00a0</p> <p>\u63d0\u793a\uff1a</p> <pre><code>    2 &lt;= nums.length &lt;= 10^5\n    1 &lt;= nums[i] &lt;= 10^5\n</code></pre>"},{"location":"leetcode/1224/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u601d\u8def\uff1a 1. \u7ef4\u62a4\u4e24\u4e2amap, \u4e00\u4e2a\u662fnum --&gt; count, \u8bb0\u5f55\u6bcf\u79cd\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4e00\u4e2a\u662fcount --&gt; num, \u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3acount\u7684\u6570\u5b57\u90fd\u6709\u54ea\u4e9b\u3002 2. \u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u8ba1\u7b97\u51fa\u4e24\u4e2amap, \u7136\u540e\u4ece\u540e\u5411\u524d\u904d\u5386\u4e00\u904d\u3002 3. \u5bf9\u4e8e\u6bcf\u4e00\u4e2ai, \u68c0\u67e5nums[0:i+1]\u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u5982\u679c\u6ee1\u8db3\uff0c\u8fd4\u56de i + 1, \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5220\u9664nums[i], \u66f4\u65b0\u4e24\u4e2amap.</p> <p>\u8be5\u601d\u8def\u6709\u4e24\u4e2a\u5173\u952e\u903b\u8f91\uff1a 1. \u5982\u4f55\u901a\u8fc7\u4e24\u4e2amap\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u9898\u76ee\u8981\u6c42 2. \u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\uff0c\u5982\u4f55\u66f4\u65b0\u4e24\u4e2amap</p> <pre><code>class Solution(object):\n    def maxEqualFreq(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def check(num2count, count2num, current):\n            \"\"\"\n            \u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u90fd\u76f8\u540c\n            \"\"\"\n            # count \u51fa\u73b03\u79cd\u4ee5\u4e0a\u7684\u60c5\u51b5\uff0c\u5220\u9664\u4e00\u4e2a\u81f3\u5c11\u8fd8\u67092\u79cd\u60c5\u51b5\n            if len(count2num) &gt; 2:\n                return False\n            # \u5982\u679c\u6240\u6709\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e00\u6b21\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u7b49\n            if len(count2num) == 1 and count2num.keys()[0] == 1:\n                return True\n            # \u5982\u679c\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u76f8\u540c\u6b21\u6570\uff0c\u4e14\u53ea\u6709\u4e00\u79cd\u6570\u5b57\uff0c\u53ef\u4ee5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u4e4b\u540e\u5269\u4e0b\u7684\u51fa\u73b0\u6b21\u6570\u8fd8\u4e00\u6837\n            if len(count2num) == 1 and len(num2count) == 1:\n                return True\n            # \u5426\u5219\uff0c\u6240\u6709\u7684\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u76f8\u7b49\u4e14\u4e0d\u662f\u90fd\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u65e0\u6cd5\u6ee1\u8db3\u5220\u9664\u4e00\u4e2a\u6570\u5b57\u4e4b\u540e\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u7b49\n            if len(count2num) &lt;= 1:\n                return False\n            key1, key2 = count2num.keys()\n            if key1 &gt; key2:\n                key1, key2 = key2, key1\n            # \u5982\u679c\u53ea\u6709\u4e24\u79cd\u51fa\u73b0\u9891\u7387\uff0c\u5176\u4e2d\u51fa\u73b0\u4e00\u6b21\u7684\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u53bb\u6389\u8be5\u6570\u5b57\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u51fa\u73b0\u9891\u7387\u90fd\u76f8\u7b49\n            if len(count2num[key1]) == 1 and key1 == 1:\n                return True\n            # \u5982\u679c\u53ea\u6709\u4e24\u79cd\u51fa\u73b0\u9891\u7387\u4e14\u53ea\u5dee1\uff0c \u51fa\u73b0\u9891\u7387\u5927\u7684\u53ea\u6709\u4e00\u79cd\u6570\u5b57\uff0c\u90a3\u4e48\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u8be5\u6570\u5b57\uff0c\u8fd9\u6837\u5269\u4e0b\u7684\u6240\u6709\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u76f8\u540c\n            if key2-key1==1 and len(count2num[key2]) == 1:\n                return True\n            return False\n\n        num2count = {}\n        count2num = {}\n\n        # \u7edf\u8ba1\u6bcf\u79cd\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\n        for i, num in enumerate(nums):\n            if num not in num2count:\n                num2count[num] = 1\n            else:\n                num2count[num] += 1\n\n        # \u8bb0\u5f55\u6bcf\u79cd\u51fa\u73b0\u6b21\u6570\u90fd\u6709\u54ea\u4e9b\u6570\u5b57\n        for key, value in num2count.iteritems():\n            if value not in count2num:\n                count2num[value] = [key]   \n            else:\n                count2num[value].append(key)\n\n        # \u68c0\u67e5\u662f\u5426\u7b26\u5408\u8981\u6c42\uff0c\u7136\u540e\u53bb\u6389 i\n        for i in reversed(range(len(nums))):\n            if check(num2count, count2num, nums[i]) == True:\n                return i + 1\n            # \u5220\u9664 nums[i], \u66f4\u65b0\u4e24\u4e2a map\n            if nums[i] in num2count:\n                count = num2count[ nums[i] ]\n                if count &gt; 1:\n                    num2count[ nums[i] ] -= 1\n                else:\n                    del num2count[ nums[i] ]\n\n                if len(count2num[count]) == 1:\n                    del count2num[count]\n                else:\n                    count2num[count].remove(nums[i])\n                if count &gt; 1:\n                    count = count - 1\n                    if count not in count2num:\n                        count2num[count] = [nums[i]]\n                    else:\n                        count2num[count].append(nums[i])\n        return 0\n</code></pre>"},{"location":"leetcode/1239/readme/","title":"1239. \u4e32\u8054\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6","text":""},{"location":"leetcode/1239/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 arr\uff0c\u5b57\u7b26\u4e32 s \u662f\u5c06 arr \u67d0\u4e00\u5b50\u5e8f\u5217\u5b57\u7b26\u4e32\u8fde\u63a5\u6240\u5f97\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c s \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u90fd\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u53ef\u884c\u89e3\u3002</p> <p>\u8bf7\u8fd4\u56de\u6240\u6709\u53ef\u884c\u89e3 s \u4e2d\u6700\u957f\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [\"un\",\"iq\",\"ue\"]\n    \u8f93\u51fa\uff1a4\n    \u89e3\u91ca\uff1a\u6240\u6709\u53ef\u80fd\u7684\u4e32\u8054\u7ec4\u5408\u662f \"\",\"un\",\"iq\",\"ue\",\"uniq\" \u548c \"ique\"\uff0c\u6700\u5927\u957f\u5ea6\u4e3a 4\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [\"cha\",\"r\",\"act\",\"ers\"]\n    \u8f93\u51fa\uff1a6\n    \u89e3\u91ca\uff1a\u53ef\u80fd\u7684\u89e3\u7b54\u6709 \"chaers\" \u548c \"acters\"\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [\"abcdefghijklmnopqrstuvwxyz\"]\n    \u8f93\u51fa\uff1a26\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= arr.length &lt;= 16\n    1 &lt;= arr[i].length &lt;= 26\n    arr[i]\u00a0\u4e2d\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\n</code></pre>"},{"location":"leetcode/1239/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define MAX(a,b) ((a) &gt; (b) ? (a) : (b))\nint size = 0;\n\n// \u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\nint char2int(char *string)\n{\n    int ans = 0;\n    while (*string) {\n        ans += 1 &lt;&lt; (*string - 'a');\n    }\n    return ans;\n}\n// \u8fd4\u56de\u628astring\u4e2d\u5b57\u6bcd\u52a0\u5165\u96c6\u5408set\u4e2d\u7684\u7ed3\u679c\nint add(char *string, int set)\n{\n    int ans = char2int(string);\n    ans = ans | set;\n    return ans;\n}\n\n// \u8fd4\u56destring\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u6bcd\u662f\u5426\u5728set\u4e2d\u51fa\u73b0\u8fc7\nint notCanPut(char* string, int set)\n{\n    int ans = char2int(string);\n    ans = ans &amp; set;\n    return ans;\n}\n/*\n * arr[i] \u5f53\u524d\u68c0\u67e5\u7684\u5355\u8bcd\n * currentSet : \u5f53\u524d\u52a0\u5165\u7684\u96c6\u5408\n * oneAns : \u6df1\u5ea6\u641c\u7d22\u5230\u5e95\u4e00\u8d9f\u7684\u7ed3\u679c\n * ans : \u4fdd\u5b58\u6700\u7ec8\u7684\u7ed3\u679c\n */\nvoid dfs(char** arr, int i, int currentSet, int *oneAns, int *ans)\n{\n    // \u5982\u679c\u5230\u8fbe\u4e86\u672b\u5c3e\uff0c\u6bd4\u8f83\u4e00\u8d9f\u7684\u7ed3\u679c\u548c\u6700\u7ec8\u7684\u7ed3\u679c\u5927\u5c0f\n    if (i == size) {\n        *ans = MAX(*ans, *oneAns);\n        return;\n    }\n\n    // \u5982\u679carr[i]\u65e0\u6cd5\u653e\u5165\uff0c\u5219\u641c\u7d22\u4e0b\u4e00\u4e2a\u5355\u8bcd\n    if (notCanPut(arr[i], currentSet)) {\n        dfs(arr, i+1, currentSet, oneAns, ans);\n        return;\n    }\n\n    // \u5982\u679carr[i]\u53ef\u4ee5\u653e\u5165\uff0c\u90a3\u4e48\u653e\u5165\u548c\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u9012\u5f52\n    int tmpOneAns = *oneAns + strlen(arr[i]);\n    dfs(arr, i + 1, add(arr[i], currentSet), &amp;tmpOneAns, ans);\n\n    dfs(arr, i + 1, currentSet, oneAns, ans);\n\n    return;\n}\nint maxLength(char ** arr, int arrSize){\n    int ans = 0;\n    int oneAns = 0;\n    int currentSet = 0;\n\n    size = arrSize;\n    dfs(arr, 0, &amp;oneAns, &amp;ans);\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/127/readme/","title":"127. \u5355\u8bcd\u63a5\u9f99","text":""},{"location":"leetcode/127/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a</p> <pre><code>\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002\n\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002\n</code></pre> <p>\u8bf4\u660e:</p> <pre><code>\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002\n\u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002\n\u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\n\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002\n\u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002\n</code></pre> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\n\u8f93\u51fa: 5\n\n\u89e3\u91ca: \u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f \"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\",\n    \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\n\u8f93\u51fa: 0\n\n\u89e3\u91ca: endWord \"cog\" \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002\n</code></pre>"},{"location":"leetcode/127/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u627e\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84</p>"},{"location":"leetcode/127/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/128/readme/","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":""},{"location":"leetcode/128/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u00a0O(n)\u3002</p> <p>\u793a\u4f8b:</p> <p>\u8f93\u5165:\u00a0[100, 4, 200, 1, 3, 2] \u8f93\u51fa: 4 \u89e3\u91ca: \u6700\u957f\u8fde\u7eed\u5e8f\u5217\u662f [1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002</p>"},{"location":"leetcode/128/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/131/readme/","title":"131. \u5206\u5272\u56de\u6587\u4e32","text":""},{"location":"leetcode/131/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002</p> <p>\u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: \"aab\"\n\u8f93\u51fa:\n[\n[\"aa\",\"b\"],\n[\"a\",\"a\",\"b\"]\n]\n</code></pre>"},{"location":"leetcode/131/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5728\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u5730\u65b9\u5206\u5272\uff0c\u52a0\u5165\u7ed3\u679c\uff0c\u9012\u5f52\u4e0b\u4e00\u4e2a\u3002 \u5728\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5904\u90fd\u53ef\u4ee5\u4e0d\u5206\u5272 \u9012\u5f52\u5230\u8fbe\u7ed3\u5c3e\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u8bb0\u5f55\u4e00\u4e2a\u7b54\u6848</p>"},{"location":"leetcode/131/readme/#ac","title":"AC \u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/1311/readme/","title":"1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891","text":""},{"location":"leetcode/1311/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 n \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a  0 \u5230 n-1 \u7684\u552f\u4e00 id \u3002</p> <p>\u7ed9\u4f60\u6570\u7ec4 watchedVideos  \u548c friends \uff0c\u5176\u4e2d watchedVideos[i]  \u548c friends[i] \u5206\u522b\u8868\u793a id = i \u7684\u4eba\u89c2\u770b\u8fc7\u7684\u89c6\u9891\u5217\u8868\u548c\u4ed6\u7684\u597d\u53cb\u5217\u8868\u3002</p> <p>Level 1 \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4f60\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\uff0clevel 2 \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4f60\u597d\u53cb\u7684\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4e00\u822c\u7684\uff0cLevel \u4e3a k \u7684\u89c6\u9891\u5305\u542b\u6240\u6709\u4ece\u4f60\u51fa\u53d1\uff0c\u6700\u77ed\u8ddd\u79bb\u4e3a k \u7684\u597d\u53cb\u89c2\u770b\u8fc7\u7684\u89c6\u9891\u3002</p> <p>\u7ed9\u5b9a\u4f60\u7684 id  \u548c\u4e00\u4e2a level \u503c\uff0c\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u6307\u5b9a level \u7684\u89c6\u9891\uff0c\u5e76\u5c06\u5b83\u4eec\u6309\u89c2\u770b\u9891\u7387\u5347\u5e8f\u8fd4\u56de\u3002\u5982\u679c\u6709\u9891\u7387\u76f8\u540c\u7684\u89c6\u9891\uff0c\u8bf7\u5c06\u5b83\u4eec\u6309\u5b57\u6bcd\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1awatchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\n\u8f93\u51fa\uff1a[\"B\",\"C\"] \n\u89e3\u91ca\uff1a\n\u4f60\u7684 id \u4e3a 0\uff08\u7eff\u8272\uff09\uff0c\u4f60\u7684\u670b\u53cb\u5305\u62ec\uff08\u9ec4\u8272\uff09\uff1a\nid \u4e3a 1 -&gt; watchedVideos = [\"C\"] \nid \u4e3a 2 -&gt; watchedVideos = [\"B\",\"C\"] \n\u4f60\u670b\u53cb\u89c2\u770b\u8fc7\u89c6\u9891\u7684\u9891\u7387\u4e3a\uff1a\nB -&gt; 1 \nC -&gt; 2\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1awatchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\n\u8f93\u51fa\uff1a[\"D\"]\n\u89e3\u91ca\uff1a\n\u4f60\u7684 id \u4e3a 0\uff08\u7eff\u8272\uff09\uff0c\u4f60\u670b\u53cb\u7684\u670b\u53cb\u53ea\u6709\u4e00\u4e2a\u4eba\uff0c\u4ed6\u7684 id \u4e3a 3\uff08\u9ec4\u8272\uff09\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>n == watchedVideos.length == friends.length\n2 &lt;= n &lt;= 100\n1 &lt;= watchedVideos[i].length &lt;= 100\n1 &lt;= watchedVideos[i][j].length &lt;= 8\n0 &lt;= friends[i].length &lt; n\n0 &lt;= friends[i][j] &lt; n\n0 &lt;= id &lt; n\n1 &lt;= level &lt; n\n\u5982\u679c friends[i] \u5305\u542b j \uff0c\u90a3\u4e48 friends[j] \u5305\u542b i\n</code></pre>"},{"location":"leetcode/1314/readme/","title":"1314. \u77e9\u9635\u533a\u57df\u548c","text":""},{"location":"leetcode/1314/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u00a0m * n\u00a0\u7684\u77e9\u9635\u00a0mat\u00a0\u548c\u4e00\u4e2a\u6574\u6570\u00a0K \uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\u00a0answer\u00a0\uff0c\u5176\u4e2d\u6bcf\u4e2a\u00a0answer[i][j]\u00a0\u662f\u6240\u6709\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u5143\u7d20\u00a0mat[r][c] \u7684\u548c\uff1a\u00a0</p> <p>i - K &lt;= r &lt;= i + K, j - K &lt;= c &lt;= j + K\u00a0 (r, c)\u00a0\u5728\u77e9\u9635\u5185\u3002 \u00a0</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1amat = [[1,2,3],[4,5,6],[7,8,9]], K = 1\n    \u8f93\u51fa\uff1a[[12,21,16],[27,45,33],[24,39,28]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1amat = [[1,2,3],[4,5,6],[7,8,9]], K = 2\n    \u8f93\u51fa\uff1a[[45,45,45],[45,45,45],[45,45,45]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    m ==\u00a0mat.length\n    n ==\u00a0mat[i].length\n    1 &lt;= m, n, K &lt;= 100\n    1 &lt;= mat[i][j] &lt;= 100\n</code></pre>"},{"location":"leetcode/1314/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int compute(int **matrixSums, int x1, int y1, int x2, int y2)\n{\n    if (x1 == 0 &amp;&amp; y1 == 0) return matrixSums[x2][y2];\n    if (x1 == 0) {\n        return matrixSums[x2][y2] - matrixSums[x2][y1-1];\n    }\n    if (y1 == 0) {\n        return matrixSums[x2][y2] - matrixSums[x1-1][y2];\n    }\n\n    int ans = matrixSums[x2][y2] - matrixSums[x2][y1-1] - matrixSums[x1-1][y2] + matrixSums[x1-1][y1-1];\n    return ans;\n}\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** matrixBlockSum(int** mat, int matSize, int* matColSize, int K, int* returnSize, int** returnColumnSizes)\n{\n    int **ans;\n    int ansEnd = 0;\n    int *colsSize;\n    int colsSizeEnd = 0;\n\n    if (mat == NULL || matSize == 0 || matColSize == NULL) {\n        *returnColumnSizes = &amp;colsSize;\n        *returnSize = 0;\n        return NULL;\n    }\n\n    if (matSize == 1 || matColSize[0] == 0) {\n        *returnColumnSizes = &amp;colsSize;\n        *returnSize = 0;\n        return NULL;\n    }\n\n    if (K == 0) {\n        *returnColumnSizes = matColSize;\n        *returnSize = matSize;\n        return mat;\n    }\n\n    // \u8ba1\u7b97\u77e9\u9635\u548c\u5b58\u50a8\u4e0b\u6765\n    int **sums = (int**)malloc(sizeof(int*) * matSize);\n    for (int i = 0; i &lt; matSize; i++) {\n        sums[i] = (int*)malloc(sizeof(int) * matColSize[i]);\n    }\n    sums[0][0] = mat[0][0];\n    for (int i = 1; i &lt; matSize; i++) {\n        sums[i][0] = sums[i-1][0] + mat[i][0];\n    }\n    for (int j = 1; j &lt; matColSize[0]; j++) {\n        sums[0][j] = sums[0][j-1] + mat[0][j];\n    }\n    for (int i = 1; i &lt; matSize; i++) {\n        for (int j = 1; j &lt; matColSize[i]; j++) {\n            sums[i][j] = sums[i-1][j] + sums[i][j-1] - sums[i-1][j-1] + mat[i][j];\n        }\n    }\n\n    colsSize = (int*)malloc(sizeof(int) * matSize);\n    for (int i = 0; i &lt; matSize; i++) {\n        colsSize[i] = matColSize[i];\n    }\n    ans = (int**)malloc(sizeof(int*) * matSize);\n    for (int i = 0; i &lt; matSize; i++) {\n        ans[i] = (int*)malloc(sizeof(int) * matColSize[i]);\n    }\n\n    // \u8ba1\u7b97\u533a\u57df\u548c\n    int x1, y1, x2, y2;\n    for (int i = 0; i &lt; matSize; i++) {\n        for (int j = 0; j &lt; matColSize[i]; j++) {\n            x1 = i - K &lt; 0 ? 0 : i - K;\n            y1 = j - K &lt; 0 ? 0 : j - K;\n            x2 = i + K &gt;= matSize ? matSize - 1 : i + K;\n            y2 = j + K &gt;= matColSize[matSize-1] ? matColSize[matSize-1] - 1 : j + K;\n            // (x1,y1) -- (x2, y2) \u77e9\u9635\u7684\u548c\n            ans[i][j] = compute(sums, x1, y1, x2, y2);\n        }\n    }\n\n    // \u91ca\u653e\u4e0d\u4f7f\u7528\u7684\u5185\u5b58\n    for (int i = 0; i &lt; matSize; i++) {\n        free(sums[i]);\n    }\n    free(sums);\n\n    *returnSize = matSize;\n    *returnColumnSizes = colsSize;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1315/readme/","title":"1315. \u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\u548c","text":""},{"location":"leetcode/1315/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u4e4b\u548c\uff1a</p> <p>\u8be5\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u7684\u503c\u4e3a\u5076\u6570\u3002\uff08\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u662f\u6307\u8be5\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\u3002\uff09 \u5982\u679c\u4e0d\u5b58\u5728\u7956\u7236\u8282\u70b9\u503c\u4e3a\u5076\u6570\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de\u00a00 \u3002</p> <p>\u793a\u4f8b\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1aroot = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\n    \u8f93\u51fa\uff1a18\n    \u89e3\u91ca\uff1a\u56fe\u4e2d\u7ea2\u8272\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u7684\u503c\u4e3a\u5076\u6570\uff0c\u84dd\u8272\u8282\u70b9\u4e3a\u8fd9\u4e9b\u7ea2\u8272\u8282\u70b9\u7684\u7956\u7236\u8282\u70b9\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    \u6811\u4e2d\u8282\u70b9\u7684\u6570\u76ee\u5728\u00a01 \u5230\u00a010^4\u00a0\u4e4b\u95f4\u3002\n    \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u5728\u00a01 \u5230\u00a0100 \u4e4b\u95f4\u3002\n</code></pre>"},{"location":"leetcode/1315/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int computeSum(struct TreeNode* root)\n{\n    if (root == NULL) return 0;\n\n    int ans = 0;\n    if (root-&gt;left) {\n        struct TreeNode* left = root-&gt;left;\n        if (left-&gt;left) ans += left-&gt;left-&gt;val;\n        if (left-&gt;right) ans += left-&gt;right-&gt;val;\n    }\n    if (root-&gt;right) {\n        struct TreeNode* right = root-&gt;right;\n        if (right-&gt;left) ans += right-&gt;left-&gt;val;\n        if (right-&gt;right) ans += right-&gt;right-&gt;val;\n    }\n    return ans;\n}\n\nvoid dfs(struct TreeNode* root, int *ans)\n{\n    if (root-&gt;val % 2 == 0) {\n        *ans += computeSum(root);\n    }\n    if (root-&gt;left) dfs(root-&gt;left, ans);\n    if (root-&gt;right) dfs(root-&gt;right, ans);\n    return; \n}\n\nint sumEvenGrandparent(struct TreeNode* root){\n    if (root == NULL) return 0;\n    if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) return 0;\n\n    int ans = 0;\n    dfs(root, &amp;ans);\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1333/readme/","title":"1333. \u9910\u5385\u8fc7\u6ee4\u5668","text":""},{"location":"leetcode/1333/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u9910\u9986\u4fe1\u606f\u6570\u7ec4\u00a0restaurants\uff0c\u5176\u4e2d\u00a0\u00a0restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]\u3002\u4f60\u5fc5\u987b\u4f7f\u7528\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u6ee4\u5668\u6765\u8fc7\u6ee4\u8fd9\u4e9b\u9910\u9986\u4fe1\u606f\u3002</p> <p>\u5176\u4e2d\u7d20\u98df\u8005\u53cb\u597d\u8fc7\u6ee4\u5668\u00a0veganFriendly\u00a0\u7684\u503c\u53ef\u4ee5\u4e3a true \u6216\u8005 false\uff0c\u5982\u679c\u4e3a true\u00a0\u5c31\u610f\u5473\u7740\u4f60\u5e94\u8be5\u53ea\u5305\u62ec\u00a0veganFriendlyi\u00a0\u4e3a true \u7684\u9910\u9986\uff0c\u4e3a\u00a0false\u00a0\u5219\u610f\u5473\u7740\u53ef\u4ee5\u5305\u62ec\u4efb\u4f55\u9910\u9986\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u6700\u5927\u4ef7\u683c\u00a0maxPrice\u00a0\u548c\u6700\u5927\u8ddd\u79bb\u00a0maxDistance\u00a0\u4e24\u4e2a\u8fc7\u6ee4\u5668\uff0c\u5b83\u4eec\u5206\u522b\u8003\u8651\u9910\u5385\u7684\u4ef7\u683c\u56e0\u7d20\u548c\u8ddd\u79bb\u56e0\u7d20\u7684\u6700\u5927\u503c\u3002</p> <p>\u8fc7\u6ee4\u540e\u8fd4\u56de\u9910\u9986\u7684 id\uff0c\u6309\u7167 rating\u00a0\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c rating \u76f8\u540c\uff0c\u90a3\u4e48\u6309 id \u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u7b80\u5355\u8d77\u89c1\uff0c\u00a0veganFriendlyi \u548c veganFriendly\u00a0\u4e3a\u00a0true\u00a0\u65f6\u53d6\u503c\u4e3a 1\uff0c\u4e3a false \u65f6\uff0c\u53d6\u503c\u4e3a\u00a00 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\n  \u8f93\u51fa\uff1a[3,1,5] \n  \u89e3\u91ca\uff1a \n  \u8fd9\u4e9b\u9910\u9986\u4e3a\uff1a\n  \u9910\u9986 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\n  \u9910\u9986 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\n  \u9910\u9986 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\n  \u9910\u9986 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\n  \u9910\u9986 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \n  \u5728\u6309\u7167 veganFriendly = 1, maxPrice = 50 \u548c maxDistance = 10 \u8fdb\u884c\u8fc7\u6ee4\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9910\u9986 3, \u9910\u9986 1 \u548c \u9910\u9986 5\uff08\u6309\u8bc4\u5206\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff09\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\n  \u8f93\u51fa\uff1a[4,3,2,1,5]\n  \u89e3\u91ca\uff1a\u9910\u9986\u4e0e\u793a\u4f8b 1 \u76f8\u540c\uff0c\u4f46\u5728 veganFriendly = 0 \u7684\u8fc7\u6ee4\u6761\u4ef6\u4e0b\uff0c\u5e94\u8be5\u8003\u8651\u6240\u6709\u9910\u9986\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>  \u8f93\u5165\uff1arestaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\n  \u8f93\u51fa\uff1a[4,5]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;=\u00a0restaurants.length &lt;= 10^4\n  restaurants[i].length == 5\n  1 &lt;=\u00a0idi, ratingi, pricei, distancei &lt;= 10^5\n  1 &lt;=\u00a0maxPrice,\u00a0maxDistance &lt;= 10^5\n  veganFriendlyi \u548c\u00a0veganFriendly\u00a0\u7684\u503c\u4e3a 0 \u6216 1 \u3002\n  \u6240\u6709 idi \u5404\u4e0d\u76f8\u540c\u3002\n</code></pre>"},{"location":"leetcode/1333/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution:\n    def filterRestaurants(self, restaurants: List[List[int]], veganFriendly: int, maxPrice: int, maxDistance: int) -&gt; List[int]:\n        def compare(a, b):\n            if a[1] != b[1]:\n                return b[1] - a[1]\n            return b[0] - a[0]\n        ans = []\n        for res in restaurants:\n            if ((veganFriendly == 1 and res[2] == veganFriendly) or veganFriendly==0) and res[3] &lt;= maxPrice and res[4] &lt;= maxDistance:\n                ans.append(res)\n\n        ans = sorted(ans, key=cmp_to_key(compare))\n        idx = []\n        for a in ans:\n            idx.append(a[0])\n        return idx\n</code></pre>"},{"location":"leetcode/1334/readme/","title":"1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02","text":""},{"location":"leetcode/1334/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709 n\u00a0\u4e2a\u57ce\u5e02\uff0c\u6309\u4ece 0 \u5230 n-1\u00a0\u7f16\u53f7\u3002\u7ed9\u4f60\u4e00\u4e2a\u8fb9\u6570\u7ec4\u00a0edges\uff0c\u5176\u4e2d edges[i] = [fromi, toi, weighti]\u00a0\u4ee3\u8868\u00a0fromi\u00a0\u548c\u00a0toi\u00a0\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u53cc\u5411\u52a0\u6743\u8fb9\uff0c\u8ddd\u79bb\u9608\u503c\u662f\u4e00\u4e2a\u6574\u6570\u00a0distanceThreshold\u3002</p> <p>\u8fd4\u56de\u80fd\u901a\u8fc7\u67d0\u4e9b\u8def\u5f84\u5230\u8fbe\u5176\u4ed6\u57ce\u5e02\u6570\u76ee\u6700\u5c11\u3001\u4e14\u8def\u5f84\u8ddd\u79bb \u6700\u5927 \u4e3a\u00a0distanceThreshold\u00a0\u7684\u57ce\u5e02\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u57ce\u5e02\uff0c\u5219\u8fd4\u56de\u7f16\u53f7\u6700\u5927\u7684\u57ce\u5e02\u3002</p> <p>\u6ce8\u610f\uff0c\u8fde\u63a5\u57ce\u5e02 i \u548c j \u7684\u8def\u5f84\u7684\u8ddd\u79bb\u7b49\u4e8e\u6cbf\u8be5\u8def\u5f84\u7684\u6240\u6709\u8fb9\u7684\u6743\u91cd\u4e4b\u548c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1an = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u57ce\u5e02\u5206\u5e03\u56fe\u5982\u4e0a\u3002\n\u6bcf\u4e2a\u57ce\u5e02\u9608\u503c\u8ddd\u79bb distanceThreshold = 4 \u5185\u7684\u90bb\u5c45\u57ce\u5e02\u5206\u522b\u662f\uff1a\n\u57ce\u5e02 0 -&gt; [\u57ce\u5e02 1, \u57ce\u5e02 2]\u00a0\n\u57ce\u5e02 1 -&gt; [\u57ce\u5e02 0, \u57ce\u5e02 2, \u57ce\u5e02 3]\u00a0\n\u57ce\u5e02 2 -&gt; [\u57ce\u5e02 0, \u57ce\u5e02 1, \u57ce\u5e02 3]\u00a0\n\u57ce\u5e02 3 -&gt; [\u57ce\u5e02 1, \u57ce\u5e02 2]\u00a0\n\u57ce\u5e02 0 \u548c 3 \u5728\u9608\u503c\u8ddd\u79bb 4 \u4ee5\u5185\u90fd\u6709 2 \u4e2a\u90bb\u5c45\u57ce\u5e02\uff0c\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u8fd4\u56de\u57ce\u5e02 3\uff0c\u56e0\u4e3a\u5b83\u7684\u7f16\u53f7\u6700\u5927\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>\u8f93\u5165\uff1an = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\n\u8f93\u51fa\uff1a0\n\u89e3\u91ca\uff1a\u57ce\u5e02\u5206\u5e03\u56fe\u5982\u4e0a\u3002\u00a0\n\u6bcf\u4e2a\u57ce\u5e02\u9608\u503c\u8ddd\u79bb distanceThreshold = 2 \u5185\u7684\u90bb\u5c45\u57ce\u5e02\u5206\u522b\u662f\uff1a\n\u57ce\u5e02 0 -&gt; [\u57ce\u5e02 1]\u00a0\n\u57ce\u5e02 1 -&gt; [\u57ce\u5e02 0, \u57ce\u5e02 4]\u00a0\n\u57ce\u5e02 2 -&gt; [\u57ce\u5e02 3, \u57ce\u5e02 4]\u00a0\n\u57ce\u5e02 3 -&gt; [\u57ce\u5e02 2, \u57ce\u5e02 4]\n\u57ce\u5e02 4 -&gt; [\u57ce\u5e02 1, \u57ce\u5e02 2, \u57ce\u5e02 3]\u00a0\n\u57ce\u5e02 0 \u5728\u9608\u503c\u8ddd\u79bb 4 \u4ee5\u5185\u53ea\u6709 1 \u4e2a\u90bb\u5c45\u57ce\u5e02\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>2 &lt;= n &lt;= 100\n1 &lt;= edges.length &lt;= n * (n - 1) / 2\nedges[i].length == 3\n0 &lt;= fromi &lt; toi &lt; n\n1 &lt;= weighti,\u00a0distanceThreshold &lt;= 10^4\n\u6240\u6709 (fromi, toi)\u00a0\u90fd\u662f\u4e0d\u540c\u7684\u3002\n</code></pre>"},{"location":"leetcode/1334/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u7528\u591a\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\u6c42\u5f97\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb</li> <li>\u7edf\u8ba1\u6bcf\u4e2a\u57ce\u5e02\u5230\u5176\u4ed6\u57ce\u5e02 \u8ddd\u79bb\u5c0f\u4e8edistanceThreshold\u7684\u57ce\u5e02\u6570\u91cf</li> <li>\u8fd4\u56de\u6570\u91cf\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u5982\u679c\u6570\u91cf\u6700\u5c11\u7684\u6709\u591a\u4e2a\uff0c\u8fd4\u56de\u7f16\u53f7\u6700\u5927\u7684\u90a3\u4e2a</li> </ol>"},{"location":"leetcode/1334/readme/#_3","title":"\u91cd\u590d\u5e73\u65b9\u6cd5","text":""},{"location":"leetcode/1334/readme/#floydwarshall","title":"FloydWarshall \u7b97\u6cd5","text":"<p>Python</p>"},{"location":"leetcode/1334/readme/#jhson","title":"Jhson \u7b97\u6cd5","text":"<p>Python</p>"},{"location":"leetcode/1344/readme/","title":"1344. \u65f6\u949f\u6307\u9488\u7684\u5939\u89d2","text":""},{"location":"leetcode/1344/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u6570\u00a0hour\u00a0\u548c\u00a0minutes\u00a0\u3002\u8bf7\u4f60\u8fd4\u56de\u5728\u65f6\u949f\u4e0a\uff0c\u7531\u7ed9\u5b9a\u65f6\u95f4\u7684\u65f6\u9488\u548c\u5206\u9488\u7ec4\u6210\u7684\u8f83\u5c0f\u89d2\u7684\u89d2\u5ea6\uff0860 \u5355\u4f4d\u5236\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1ahour = 12, minutes = 30\n    \u8f93\u51fa\uff1a165\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1ahour = 3, minutes = 30\n    \u8f93\u51fa\uff1b75\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1ahour = 3, minutes = 15\n    \u8f93\u51fa\uff1a7.5\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>    \u8f93\u5165\uff1ahour = 4, minutes = 50\n    \u8f93\u51fa\uff1a155\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>    \u8f93\u5165\uff1ahour = 12, minutes = 0\n    \u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= hour &lt;= 12\n    0 &lt;= minutes &lt;= 59\n    \u4e0e\u6807\u51c6\u7b54\u6848\u8bef\u5dee\u5728\u00a010^-5\u00a0\u4ee5\u5185\u7684\u7ed3\u679c\u90fd\u88ab\u89c6\u4e3a\u6b63\u786e\u7ed3\u679c\u3002\n</code></pre>"},{"location":"leetcode/1344/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>double angleClock(int hour, int minutes){\n    hour = (hour == 12) ? 0 : hour;\n    double hrand = hour * (360.0 / 12);\n    double mrand = minutes * (360.0 / 60);\n    hrand += minutes * (360.0 / (12 * 60));\n    printf(\"%f, %f\\n\", hrand, mrand);\n    double ans = hrand &gt; mrand ? (hrand - mrand) : (mrand - hrand);\n    if (ans &gt; 180) return 360.0 - ans;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1356/readme/","title":"1356. \u6839\u636e\u6570\u5b57\u4e8c\u8fdb\u5236\u4e0b 1 \u7684\u6570\u76ee\u6392\u5e8f","text":""},{"location":"leetcode/1356/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0arr\u00a0\u3002\u8bf7\u4f60\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6309\u7167\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6570\u5b57 1 \u7684\u6570\u76ee\u5347\u5e8f\u6392\u5e8f\u3002</p> <p>\u5982\u679c\u5b58\u5728\u591a\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e2d\u00a01\u00a0\u7684\u6570\u76ee\u76f8\u540c\uff0c\u5219\u5fc5\u987b\u5c06\u5b83\u4eec\u6309\u7167\u6570\u503c\u5927\u5c0f\u5347\u5e8f\u6392\u5217\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [0,1,2,3,4,5,6,7,8]\n    \u8f93\u51fa\uff1a[0,1,2,4,8,3,5,6,7]\n    \u89e3\u91ca\uff1a[0] \u662f\u552f\u4e00\u4e00\u4e2a\u6709 0 \u4e2a 1 \u7684\u6570\u3002\n    [1,2,4,8] \u90fd\u6709 1 \u4e2a 1 \u3002\n    [3,5,6] \u6709 2 \u4e2a 1 \u3002\n    [7] \u6709 3 \u4e2a 1 \u3002\n    \u6309\u7167 1 \u7684\u4e2a\u6570\u6392\u5e8f\u5f97\u5230\u7684\u7ed3\u679c\u6570\u7ec4\u4e3a [0,1,2,4,8,3,5,6,7]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [1024,512,256,128,64,32,16,8,4,2,1]\n    \u8f93\u51fa\uff1a[1,2,4,8,16,32,64,128,256,512,1024]\n    \u89e3\u91ca\uff1a\u6570\u7ec4\u4e2d\u6240\u6709\u6574\u6570\u4e8c\u8fdb\u5236\u4e0b\u90fd\u53ea\u6709 1 \u4e2a 1 \uff0c\u6240\u4ee5\u4f60\u9700\u8981\u6309\u7167\u6570\u503c\u5927\u5c0f\u5c06\u5b83\u4eec\u6392\u5e8f\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [10000,10000]\n    \u8f93\u51fa\uff1a[10000,10000]\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [2,3,5,7,11,13,17,19]\n    \u8f93\u51fa\uff1a[2,3,5,17,7,11,13,19]\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>    \u8f93\u5165\uff1aarr = [10,100,1000,10000]\n    \u8f93\u51fa\uff1a[10,100,10000,1000]\n</code></pre>"},{"location":"leetcode/1356/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int Bits(int n)\n{\n    int count = 0;\n    while (n &gt; 0) {\n        count++;\n        n = n &amp; (n - 1);\n    }\n    //printf(\"%d : %d\\n\", n, count);\n    return count;\n}\nint compare(const void *p, const void *q)\n{\n    int a = *(int*)p;\n    int b = *(int*)q;\n    int aBits = Bits(a);\n    int bBits = Bits(b);\n    if (aBits == bBits) return a - b;\n    return aBits - bBits;\n}\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortByBits(int* arr, int arrSize, int* returnSize){\n    qsort(arr, arrSize, sizeof(int), compare);\n    *returnSize = arrSize;\n    return arr;\n}\n</code></pre>"},{"location":"leetcode/1360/readme/","title":"1360. \u65e5\u671f\u4e4b\u95f4\u9694\u51e0\u5929","text":""},{"location":"leetcode/1360/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u9694\u4e86\u591a\u5c11\u5929\u3002</p> <p>\u65e5\u671f\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7ed9\u51fa\uff0c\u683c\u5f0f\u4e3a\u00a0YYYY-MM-DD\uff0c\u5982\u793a\u4f8b\u6240\u793a\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1adate1 = \"2019-06-29\", date2 = \"2019-06-30\"\n    \u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1adate1 = \"2020-01-15\", date2 = \"2019-12-31\"\n    \u8f93\u51fa\uff1a15\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    \u7ed9\u5b9a\u7684\u65e5\u671f\u662f\u00a01971\u00a0\u5e74\u5230 2100\u00a0\u5e74\u4e4b\u95f4\u7684\u6709\u6548\u65e5\u671f\u3002\n</code></pre>"},{"location":"leetcode/1360/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>void parse(char *string, int *year, int *month, int *day)\n{\n    int yyyy = (string[0] - '0') * 1000 + (string[1] - '0') * 100 + (string[2] - '0') * 10 + (string[3] - '0');\n    int mm = (string[5] - '0') * 10 + (string[6] - '0');\n    int dd = (string[8] - '0') * 10 + (string[9] - '0');\n\n    *year = yyyy, *month = mm, *day = dd;\n\n    return;\n}\nint getMonthDay(int year, int m)\n{\n    int ans = 0;\n    switch(m){\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n            ans = 31;\n            break;\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n            ans = 30;\n            break;\n        case 2:\n            if (year % 400 == 0 || (year % 100 != 0 &amp;&amp; year % 4 == 0)) ans = 29;\n            else ans = 28;\n            break;\n    }\n    return ans;\n}\nint days(int year, int month, int day)\n{\n    int ans = day;\n    for (int i = 1; i &lt; month; i++) {\n        ans += getMonthDay(year, i);\n    }\n    printf(\"%d-%d-%d : %d\\n\", year, month, day, ans);\n    return ans;\n}\nint daysBetweenDates(char * date1, char * date2){\n    int y1, m1, d1; int y2, m2, d2;\n    int ans;\n\n    parse(date1, &amp;y1, &amp;m1, &amp;d1); parse(date2, &amp;y2,&amp;m2,&amp;d2);\n\n    if (y1 &gt;= y2) {\n        int dd1 = 0;\n        dd1 = days(y1, m1, d1);\n        for (int yy = y1 - 1; yy &gt;= y2; yy--) {\n            dd1 += days(yy,12,31);\n        }\n\n        int dd2 = days(y2, m2, d2);\n        if (dd1 &gt; dd2) ans = dd1 - dd2;\n        else ans = dd2 - dd1;\n        return ans;\n    }\n    return daysBetweenDates(date2, date1);                                                                                                               \n}\n</code></pre>"},{"location":"leetcode/1370/readme/","title":"1370. \u4e0a\u5347\u4e0b\u964d\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/1370/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u00a0s\u00a0\uff0c\u8bf7\u4f60\u6839\u636e\u4e0b\u9762\u7684\u7b97\u6cd5\u91cd\u65b0\u6784\u9020\u5b57\u7b26\u4e32\uff1a</p> <p>\u4ece s\u00a0\u4e2d\u9009\u51fa \u6700\u5c0f\u00a0\u7684\u5b57\u7b26\uff0c\u5c06\u5b83 \u63a5\u5728\u00a0\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u540e\u9762\u3002 \u4ece s\u00a0\u5269\u4f59\u5b57\u7b26\u4e2d\u9009\u51fa\u00a0\u6700\u5c0f\u00a0\u7684\u5b57\u7b26\uff0c\u4e14\u8be5\u5b57\u7b26\u6bd4\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u5927\uff0c\u5c06\u5b83 \u63a5\u5728\u00a0\u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u3002 \u91cd\u590d\u6b65\u9aa4 2 \uff0c\u76f4\u5230\u4f60\u6ca1\u6cd5\u4ece s\u00a0\u4e2d\u9009\u62e9\u5b57\u7b26\u3002 \u4ece s\u00a0\u4e2d\u9009\u51fa \u6700\u5927\u00a0\u7684\u5b57\u7b26\uff0c\u5c06\u5b83 \u63a5\u5728\u00a0\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u540e\u9762\u3002 \u4ece s\u00a0\u5269\u4f59\u5b57\u7b26\u4e2d\u9009\u51fa\u00a0\u6700\u5927\u00a0\u7684\u5b57\u7b26\uff0c\u4e14\u8be5\u5b57\u7b26\u6bd4\u4e0a\u4e00\u4e2a\u6dfb\u52a0\u7684\u5b57\u7b26\u5c0f\uff0c\u5c06\u5b83 \u63a5\u5728\u00a0\u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u3002 \u91cd\u590d\u6b65\u9aa4 5\u00a0\uff0c\u76f4\u5230\u4f60\u6ca1\u6cd5\u4ece s\u00a0\u4e2d\u9009\u62e9\u5b57\u7b26\u3002 \u91cd\u590d\u6b65\u9aa4 1 \u5230 6 \uff0c\u76f4\u5230 s\u00a0\u4e2d\u6240\u6709\u5b57\u7b26\u90fd\u5df2\u7ecf\u88ab\u9009\u8fc7\u3002 \u5728\u4efb\u4f55\u4e00\u6b65\u4e2d\uff0c\u5982\u679c\u6700\u5c0f\u6216\u8005\u6700\u5927\u5b57\u7b26\u4e0d\u6b62\u4e00\u4e2a\u00a0\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5b57\u7b26\u4e32\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u5c06\u00a0s\u00a0\u4e2d\u5b57\u7b26\u91cd\u65b0\u6392\u5e8f\u540e\u7684 \u7ed3\u679c\u5b57\u7b26\u4e32 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"aaaabbbbcccc\"\n    \u8f93\u51fa\uff1a\"abccbaabccba\"\n    \u89e3\u91ca\uff1a\u7b2c\u4e00\u8f6e\u7684\u6b65\u9aa4 1\uff0c2\uff0c3 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abc\"\n    \u7b2c\u4e00\u8f6e\u7684\u6b65\u9aa4 4\uff0c5\uff0c6 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccba\"\n    \u7b2c\u4e00\u8f6e\u7ed3\u675f\uff0c\u73b0\u5728 s = \"aabbcc\" \uff0c\u6211\u4eec\u518d\u6b21\u56de\u5230\u6b65\u9aa4 1\n    \u7b2c\u4e8c\u8f6e\u7684\u6b65\u9aa4 1\uff0c2\uff0c3 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccbaabc\"\n    \u7b2c\u4e8c\u8f6e\u7684\u6b65\u9aa4 4\uff0c5\uff0c6 \u540e\uff0c\u7ed3\u679c\u5b57\u7b26\u4e32\u4e3a result = \"abccbaabccba\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"rat\"\n    \u8f93\u51fa\uff1a\"art\"\n    \u89e3\u91ca\uff1a\u5355\u8bcd \"rat\" \u5728\u4e0a\u8ff0\u7b97\u6cd5\u91cd\u6392\u5e8f\u4ee5\u540e\u53d8\u6210 \"art\"\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"leetcode\"\n    \u8f93\u51fa\uff1a\"cdelotee\"\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"ggggggg\"\n    \u8f93\u51fa\uff1a\"ggggggg\"\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"spo\"\n    \u8f93\u51fa\uff1a\"ops\"\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= s.length &lt;= 500\n    s\u00a0\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\n</code></pre>"},{"location":"leetcode/1370/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define MAX_CHAR 128\n#define MAX_ANS 501\n\nint map[MAX_CHAR];\nvoid init()\n{\n    for (int i = 0; i &lt; MAX_CHAR; i++) {\n        map[i] = 0;\n    }\n}\n\nchar * sortString(char * s){\n    if (s == NULL) return s;\n\n    int n = strlen(s);\n    int i;\n\n    for (i = 0; i &lt; n; i++) {\n        map[ s[i] ] ++;\n    }\n\n    char *ans = (char*)malloc(sizeof(char) * MAX_ANS);\n    int ansEnd = 0;\n    while (n &gt; 0) {\n        for (i = 0; i &lt; MAX_CHAR; i++) {\n            if (map[i] &gt; 0) {\n                ans[ansEnd++] = (char)i;\n                n--;\n                map[i]--;\n            }\n        }\n        for (int i = MAX_CHAR - 1; i &gt;= 0; i--) {\n            if (map[i] &gt; 0) {\n                ans[ansEnd++] = (char)i;\n                n--;\n                map[i]--;\n            }\n        }\n    }\n    ans[ansEnd++] = '\\0';\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1376/readme/","title":"1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4","text":""},{"location":"leetcode/1376/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u516c\u53f8\u91cc\u6709 n \u540d\u5458\u5de5\uff0c\u6bcf\u4e2a\u5458\u5de5\u7684 ID \u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u7f16\u53f7\u4ece 0 \u5230 n - 1\u3002\u516c\u53f8\u7684\u603b\u8d1f\u8d23\u4eba\u901a\u8fc7 headID \u8fdb\u884c\u6807\u8bc6\u3002</p> <p>\u5728 manager \u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a\u76f4\u5c5e\u8d1f\u8d23\u4eba\uff0c\u5176\u4e2d manager[i] \u662f\u7b2c i \u540d\u5458\u5de5\u7684\u76f4\u5c5e\u8d1f\u8d23\u4eba\u3002\u5bf9\u4e8e\u603b\u8d1f\u8d23\u4eba\uff0cmanager[headID] = -1\u3002\u9898\u76ee\u4fdd\u8bc1\u4ece\u5c5e\u5173\u7cfb\u53ef\u4ee5\u7528\u6811\u7ed3\u6784\u663e\u793a\u3002</p> <p>\u516c\u53f8\u603b\u8d1f\u8d23\u4eba\u60f3\u8981\u5411\u516c\u53f8\u6240\u6709\u5458\u5de5\u901a\u544a\u4e00\u6761\u7d27\u6025\u6d88\u606f\u3002\u4ed6\u5c06\u4f1a\u9996\u5148\u901a\u77e5\u4ed6\u7684\u76f4\u5c5e\u4e0b\u5c5e\u4eec\uff0c\u7136\u540e\u7531\u8fd9\u4e9b\u4e0b\u5c5e\u901a\u77e5\u4ed6\u4eec\u7684\u4e0b\u5c5e\uff0c\u76f4\u5230\u6240\u6709\u7684\u5458\u5de5\u90fd\u5f97\u77e5\u8fd9\u6761\u7d27\u6025\u6d88\u606f\u3002</p> <p>\u7b2c i \u540d\u5458\u5de5\u9700\u8981 informTime[i] \u5206\u949f\u6765\u901a\u77e5\u5b83\u7684\u6240\u6709\u76f4\u5c5e\u4e0b\u5c5e\uff08\u4e5f\u5c31\u662f\u8bf4\u5728 informTime[i] \u5206\u949f\u540e\uff0c\u4ed6\u7684\u6240\u6709\u76f4\u5c5e\u4e0b\u5c5e\u90fd\u53ef\u4ee5\u5f00\u59cb\u4f20\u64ad\u8fd9\u4e00\u6d88\u606f\uff09\u3002</p> <p>\u8fd4\u56de\u901a\u77e5\u6240\u6709\u5458\u5de5\u8fd9\u4e00\u7d27\u6025\u6d88\u606f\u6240\u9700\u8981\u7684 \u5206\u949f\u6570 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1an = 1, headID = 0, manager = [-1], informTime = [0]\n    \u8f93\u51fa\uff1a0\n    \u89e3\u91ca\uff1a\u516c\u53f8\u603b\u8d1f\u8d23\u4eba\u662f\u8be5\u516c\u53f8\u7684\u552f\u4e00\u4e00\u540d\u5458\u5de5\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1an = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\n    \u8f93\u51fa\uff1a1\n    \u89e3\u91ca\uff1aid = 2 \u7684\u5458\u5de5\u662f\u516c\u53f8\u7684\u603b\u8d1f\u8d23\u4eba\uff0c\u4e5f\u662f\u5176\u4ed6\u6240\u6709\u5458\u5de5\u7684\u76f4\u5c5e\u8d1f\u8d23\u4eba\uff0c\u4ed6\u9700\u8981 1 \u5206\u949f\u6765\u901a\u77e5\u6240\u6709\u5458\u5de5\u3002\n    \u4e0a\u56fe\u663e\u793a\u4e86\u516c\u53f8\u5458\u5de5\u7684\u6811\u7ed3\u6784\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1an = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]\n    \u8f93\u51fa\uff1a21\n    \u89e3\u91ca\uff1a\u603b\u8d1f\u8d23\u4eba id = 6\u3002\u4ed6\u5c06\u5728 1 \u5206\u949f\u5185\u901a\u77e5 id = 5 \u7684\u5458\u5de5\u3002\n    id = 5 \u7684\u5458\u5de5\u5c06\u5728 2 \u5206\u949f\u5185\u901a\u77e5 id = 4 \u7684\u5458\u5de5\u3002\n    id = 4 \u7684\u5458\u5de5\u5c06\u5728 3 \u5206\u949f\u5185\u901a\u77e5 id = 3 \u7684\u5458\u5de5\u3002\n    id = 3 \u7684\u5458\u5de5\u5c06\u5728 4 \u5206\u949f\u5185\u901a\u77e5 id = 2 \u7684\u5458\u5de5\u3002\n    id = 2 \u7684\u5458\u5de5\u5c06\u5728 5 \u5206\u949f\u5185\u901a\u77e5 id = 1 \u7684\u5458\u5de5\u3002\n    id = 1 \u7684\u5458\u5de5\u5c06\u5728 6 \u5206\u949f\u5185\u901a\u77e5 id = 0 \u7684\u5458\u5de5\u3002\n    \u6240\u9700\u65f6\u95f4 = 1 + 2 + 3 + 4 + 5 + 6 = 21 \u3002\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>    \u8f93\u5165\uff1an = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]\n    \u8f93\u51fa\uff1a3\n    \u89e3\u91ca\uff1a\u7b2c\u4e00\u5206\u949f\u603b\u8d1f\u8d23\u4eba\u901a\u77e5\u5458\u5de5 1 \u548c 2 \u3002\n    \u7b2c\u4e8c\u5206\u949f\u4ed6\u4eec\u5c06\u4f1a\u901a\u77e5\u5458\u5de5 3, 4, 5 \u548c 6 \u3002\n    \u7b2c\u4e09\u5206\u949f\u4ed6\u4eec\u5c06\u4f1a\u901a\u77e5\u5269\u4e0b\u7684\u5458\u5de5\u3002\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>    \u8f93\u5165\uff1an = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]\n    \u8f93\u51fa\uff1a1076\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= n &lt;= 10^5\n    0 &lt;= headID &lt; n\n    manager.length == n\n    0 &lt;= manager[i] &lt; n\n    manager[headID] == -1\n    informTime.length\u00a0== n\n    0 &lt;= informTime[i] &lt;= 1000\n    \u5982\u679c\u5458\u5de5 i \u6ca1\u6709\u4e0b\u5c5e\uff0cinformTime[i] == 0 \u3002\n    \u9898\u76ee \u4fdd\u8bc1 \u6240\u6709\u5458\u5de5\u90fd\u53ef\u4ee5\u6536\u5230\u901a\u77e5\u3002\n</code></pre>"},{"location":"leetcode/1376/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8d85\u65f6\u7684\u66b4\u529b\u89e3\u6cd5\uff1a</p> <pre><code>#define MAXN 100000\n\n\nint *managerG;\nint *informTimeG;\nint managerSizeG;\nint informTimeSizeG;\nint max(int a, int b)\n{\n    if (a &gt; b) return a;\n    return b;\n}\n\nint dfs(int i, int cost)\n{\n    if (informTimeG[i] == 0) {\n        return cost;\n    }\n    int ans = 0;\n    for (int j = 0; j &lt; managerSizeG; j++) {\n        if (managerG[j] == i) {\n            int tmp = dfs(j, cost + informTimeG[i]);\n            ans = max(ans, tmp);\n        }\n    }\n    return ans;\n}\nint numOfMinutes(int n, int headID, int* manager, int managerSize, int* informTime, int informTimeSize){\n    if (n &lt;= 0 || manager == NULL || managerSize &lt;= 0 || informTime == NULL || informTimeSize &lt;= 0) return 0;\n\n    int ans = 0;\n    managerG = manager;\n    managerSizeG = managerSize;\n    informTimeG = informTime;\n    informTimeSizeG = informTimeSize;\n\n    ans = dfs(headID, 0);\n\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/138/readme/","title":"138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868","text":""},{"location":"leetcode/138/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002</p> <p>\u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684 \u6df1\u62f7\u8d1d\u3002 </p> <p>\u6211\u4eec\u7528\u4e00\u4e2a\u7531 n \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u94fe\u8868\u6765\u8868\u793a\u8f93\u5165/\u8f93\u51fa\u4e2d\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u8282\u70b9\u7528\u4e00\u4e2a [val, random_index] \u8868\u793a\uff1a</p> <pre><code>val\uff1a\u4e00\u4e2a\u8868\u793a Node.val \u7684\u6574\u6570\u3002\nrandom_index\uff1a\u968f\u673a\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7d22\u5f15\uff08\u8303\u56f4\u4ece 0 \u5230 n-1\uff09\uff1b\u5982\u679c\u4e0d\u6307\u5411\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u4e3a  null \u3002\n</code></pre> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\u8f93\u51fa\uff1a[[7,null],[13,0],[11,4],[10,2],[1,0]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [[1,1],[2,1]]\n\u8f93\u51fa\uff1a[[1,1],[2,1]]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = [[3,null],[3,0],[3,null]]\n\u8f93\u51fa\uff1a[[3,null],[3,0],[3,null]]\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1ahead = []\n\u8f93\u51fa\uff1a[]\n\u89e3\u91ca\uff1a\u7ed9\u5b9a\u7684\u94fe\u8868\u4e3a\u7a7a\uff08\u7a7a\u6307\u9488\uff09\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>-10000 &lt;= Node.val &lt;= 10000\nNode.random \u4e3a\u7a7a\uff08null\uff09\u6216\u6307\u5411\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002\n\u8282\u70b9\u6570\u76ee\u4e0d\u8d85\u8fc7 1000 \u3002\n</code></pre>"},{"location":"leetcode/138/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u590d\u5236\u6bcf\u4e2a\u94fe\u8868\u8282\u70b9\u6302\u63a5\u5728\u8be5\u8282\u70b9\u540e\u9762</li> <li>\u518d\u6b21\u904d\u5386\u94fe\u8868\u8bbe\u7f6e\u65b0\u8282\u70b9\u7684\u968f\u673a\u6307\u9488\u7684\u6307\u5411</li> <li>\u518d\u6b21\u904d\u5386\u65ad\u5f00\u65e7\u8282\u70b9\uff0c\u628a\u65b0\u8282\u70b9\u8fde\u63a5\u5728\u4e00\u8d77\u8fd4\u56de</li> </ol>"},{"location":"leetcode/138/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/1380/readme/","title":"1380. \u77e9\u9635\u4e2d\u7684\u5e78\u8fd0\u6570","text":""},{"location":"leetcode/1380/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a m * n \u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u6570\u5b57 \u5404\u4e0d\u76f8\u540c \u3002\u8bf7\u4f60\u6309 \u4efb\u610f \u987a\u5e8f\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5e78\u8fd0\u6570\u3002</p> <p>\u5e78\u8fd0\u6570\u662f\u6307\u77e9\u9635\u4e2d\u6ee1\u8db3\u540c\u65f6\u4e0b\u5217\u4e24\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\uff1a</p> <p>\u5728\u540c\u4e00\u884c\u7684\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5c0f \u5728\u540c\u4e00\u5217\u7684\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5927 \u00a0</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1amatrix = [[3,7,8],[9,11,13],[15,16,17]]\n    \u8f93\u51fa\uff1a[15]\n    \u89e3\u91ca\uff1a15 \u662f\u552f\u4e00\u7684\u5e78\u8fd0\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5176\u6240\u5728\u884c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u662f\u6240\u5728\u5217\u4e2d\u7684\u6700\u5927\u503c\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1amatrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\n    \u8f93\u51fa\uff1a[12]\n    \u89e3\u91ca\uff1a12 \u662f\u552f\u4e00\u7684\u5e78\u8fd0\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u5176\u6240\u5728\u884c\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u662f\u6240\u5728\u5217\u4e2d\u7684\u6700\u5927\u503c\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1amatrix = [[7,8],[1,2]]\n    \u8f93\u51fa\uff1a[7]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    m == mat.length\n    n == mat[i].length\n    1 &lt;= n, m &lt;= 50\n    1 &lt;=\u00a0matrix[i][j]\u00a0&lt;= 10^5\n    \u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u4e0d\u540c\u7684\n</code></pre>"},{"location":"leetcode/1380/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/1382/readme/","title":"1382. \u5c06\u4e8c\u53c9\u641c\u7d22\u6811\u53d8\u5e73\u8861","text":""},{"location":"leetcode/1382/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u4e00\u68f5\u00a0\u5e73\u8861\u540e\u00a0\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u65b0\u751f\u6210\u7684\u6811\u5e94\u8be5\u4e0e\u539f\u6765\u7684\u6811\u6709\u7740\u76f8\u540c\u7684\u8282\u70b9\u503c\u3002</p> <p>\u5982\u679c\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u68f5\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1 \uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u00a0\u5e73\u8861\u7684 \u3002</p> <p>\u5982\u679c\u6709\u591a\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u8bf7\u4f60\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u3002</p> <p>\u793a\u4f8b\uff1a</p> <p></p> <pre><code>    \u8f93\u5165\uff1aroot = [1,null,2,null,3,null,4,null,null]\n    \u8f93\u51fa\uff1a[2,1,3,null,null,null,4]\n    \u89e3\u91ca\uff1a\u8fd9\u4e0d\u662f\u552f\u4e00\u7684\u6b63\u786e\u7b54\u6848\uff0c[3,1,4,null,2,null,null] \u4e5f\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u6784\u9020\u65b9\u6848\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    \u6811\u8282\u70b9\u7684\u6570\u76ee\u5728\u00a01\u00a0\u5230\u00a010^4\u00a0\u4e4b\u95f4\u3002\n    \u6811\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c\uff0c\u4e14\u5728\u00a01\u00a0\u5230\u00a010^5 \u4e4b\u95f4\u3002\n</code></pre>"},{"location":"leetcode/1382/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define N 10002\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nvoid middle(struct TreeNode* root, int *arr, int *arrEnd)\n{\n    if (root == NULL) return;\n    if (root-&gt;left) {\n        middle(root-&gt;left, arr, arrEnd);\n    }\n    arr[(*arrEnd)++] = root-&gt;val;\n    if (root-&gt;right) {\n        middle(root-&gt;right, arr, arrEnd);\n    }\n    return;\n}\n\nstruct TreeNode* balanceDFS(int *arr, int start, int end)\n{\n    if (start &gt; end) return NULL;\n\n    if (start == end) {\n        struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n        newNode-&gt;val = arr[start];\n        newNode-&gt;left = NULL;\n        newNode-&gt;right = NULL;\n        return newNode;\n    }\n\n    int mid = (end + start) / 2;\n    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    newNode-&gt;val = arr[mid];\n    newNode-&gt;left = balanceDFS(arr, start, mid - 1);\n    newNode-&gt;right = balanceDFS(arr, mid + 1, end);\n    return newNode;\n}\n\nstruct TreeNode* balanceBST(struct TreeNode* root){\n    if (root == NULL) return root;\n\n    int *array = (int*)malloc(sizeof(int) * N);\n    int arrayEnd = 0;\n\n    middle(root, array, &amp;arrayEnd); // \u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6392\u5e8f\u597d\u7684\u6570\u7ec4\n    for (int i = 0; i &lt; arrayEnd; i++) {\n        printf(\"%d \", array[i]);\n    }\n\n    int mid = (arrayEnd - 1) / 2;\n    root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    root-&gt;val = array[mid];\n    root-&gt;left = balanceDFS(array, 0, mid - 1);\n    root-&gt;right = balanceDFS(array, mid + 1, arrayEnd - 1);\n\n    free(array);\n\n    return root;\n}\n</code></pre>"},{"location":"leetcode/1386/readme/","title":"1386. \u5b89\u6392\u7535\u5f71\u9662\u5ea7\u4f4d","text":""},{"location":"leetcode/1386/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7535\u5f71\u9662\u7684\u89c2\u5f71\u5385\u4e2d\u6709 n\u00a0\u884c\u5ea7\u4f4d\uff0c\u884c\u7f16\u53f7\u4ece 1\u00a0\u5230 n\u00a0\uff0c\u4e14\u6bcf\u4e00\u884c\u5185\u603b\u5171\u6709 10 \u4e2a\u5ea7\u4f4d\uff0c\u5217\u7f16\u53f7\u4ece 1 \u5230 10 \u3002</p> <p>\u7ed9\u4f60\u6570\u7ec4\u00a0reservedSeats\u00a0\uff0c\u5305\u542b\u6240\u6709\u5df2\u7ecf\u88ab\u9884\u7ea6\u4e86\u7684\u5ea7\u4f4d\u3002\u6bd4\u5982\u8bf4\uff0cresearvedSeats[i]=[3,8]\u00a0\uff0c\u5b83\u8868\u793a\u7b2c\u00a03\u00a0\u884c\u7b2c\u00a08\u00a0\u4e2a\u5ea7\u4f4d\u88ab\u9884\u7ea6\u4e86\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u00a0\u6700\u591a\u80fd\u5b89\u6392\u591a\u5c11\u4e2a 4 \u4eba\u5bb6\u5ead\u00a0\u30024 \u4eba\u5bb6\u5ead\u8981\u5360\u636e\u00a0\u540c\u4e00\u884c\u5185\u8fde\u7eed\u00a0\u7684 4 \u4e2a\u5ea7\u4f4d\u3002\u9694\u7740\u8fc7\u9053\u7684\u5ea7\u4f4d\uff08\u6bd4\u65b9\u8bf4 [3,3] \u548c [3,4]\uff09\u4e0d\u662f\u8fde\u7eed\u7684\u5ea7\u4f4d\uff0c\u4f46\u662f\u5982\u679c\u4f60\u53ef\u4ee5\u5c06 4 \u4eba\u5bb6\u5ead\u62c6\u6210\u8fc7\u9053\u4e24\u8fb9\u5404\u5750 2 \u4eba\uff0c\u8fd9\u6837\u5b50\u662f\u5141\u8bb8\u7684\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1an = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\n    \u8f93\u51fa\uff1a4\n    \u89e3\u91ca\uff1a\u4e0a\u56fe\u6240\u793a\u662f\u6700\u4f18\u7684\u5b89\u6392\u65b9\u6848\uff0c\u603b\u5171\u53ef\u4ee5\u5b89\u6392 4 \u4e2a\u5bb6\u5ead\u3002\u84dd\u8272\u7684\u53c9\u8868\u793a\u88ab\u9884\u7ea6\u7684\u5ea7\u4f4d\uff0c\u6a59\u8272\u7684\u8fde\u7eed\u5ea7\u4f4d\u8868\u793a\u4e00\u4e2a 4 \u4eba\u5bb6\u5ead\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1an = 2, reservedSeats = [[2,1],[1,8],[2,6]]\n    \u8f93\u51fa\uff1a2\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1an = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\n    \u8f93\u51fa\uff1a4\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= n &lt;= 10^9\n    1 &lt;=\u00a0reservedSeats.length &lt;= min(10*n, 10^4)\n    reservedSeats[i].length == 2\n    1\u00a0&lt;=\u00a0reservedSeats[i][0] &lt;= n\n    1 &lt;=\u00a0reservedSeats[i][1] &lt;= 10\n    \u6240\u6709\u00a0reservedSeats[i] \u90fd\u662f\u4e92\u4e0d\u76f8\u540c\u7684\u3002\n</code></pre>"},{"location":"leetcode/1386/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int familysInRow(int *seated)\n{\n    if (seated[1] == 0 &amp;&amp; seated[2] == 0 &amp;&amp; seated[3] == 0 &amp;&amp; seated[4] == 0 &amp;&amp;\n        seated[5] == 0 &amp;&amp; seated[6] == 0 &amp;&amp; seated[7] == 0 &amp;&amp; seated[8] == 0) {\n        return 2;\n    }\n    if (seated[1] == 0 &amp;&amp; seated[2] == 0 &amp;&amp; seated[3] == 0 &amp;&amp; seated[4] == 0) {\n        return 1;\n    }\n    if (seated[3] == 0 &amp;&amp; seated[4] == 0 &amp;&amp; seated[5] == 0 &amp;&amp; seated[6] == 0) {\n        return 1;\n    }\n    if (seated[5] == 0 &amp;&amp; seated[6] == 0 &amp;&amp; seated[7] == 0 &amp;&amp; seated[8] == 0) {\n        return 1;\n    }\n    return 0;    \n}\n\nint compare(const void *p, const void *q)\n{\n    int *a = *(int**)p;\n    int *b = *(int**)q;\n    printf(\"pp:%d, %d\\n\", a[0],b[0]);\n    return a[0] - b[0];\n}\nint maxNumberOfFamilies(int n, int** reservedSeats, int reservedSeatsSize, int* reservedSeatsColSize){\n    int *row = (int*)malloc(sizeof(int) * 10);\n    int rowEnd = 0;\n    int ans = 0;\n\n    qsort(reservedSeats, reservedSeatsSize, sizeof(int) * 2, compare);\n\n    int line = 1;\n    int iter = 0;\n    int count = 0;\n    while (iter &lt; reservedSeatsSize) {\n        for (int i = 0; i &lt; 10; i++) row[i] = 0;\n        if (count &gt; 1) {\n            ans += 2 * (count - 1);\n        }\n        count = 0;\n        while (iter &lt; reservedSeatsSize &amp;&amp; reservedSeats[iter][0] == line) {\n            printf(\"\\n%d,%d\\n\", reservedSeats[iter][0], iter);\n            row[ reservedSeats[iter][1]-1 ] = 1;\n            iter++;\n        }\n        ans += familysInRow(row);\n        while (iter &lt; reservedSeatsSize &amp;&amp; reservedSeats[iter][0] &gt; line) {\n            line++;\n            count++;\n        } \n    }\n    if (n - line &gt; 0) {\n        ans += 2 * (n - line);\n    }\n    free(row);\n\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1399/readme/","title":"1399. \u7edf\u8ba1\u6700\u5927\u7ec4\u7684\u6570\u76ee","text":""},{"location":"leetcode/1399/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n\u00a0\u3002\u8bf7\u4f60\u5148\u6c42\u51fa\u4ece 1\u00a0\u5230 n \u7684\u6bcf\u4e2a\u6574\u6570 10 \u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6570\u4f4d\u548c\uff08\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff09\uff0c\u7136\u540e\u628a\u6570\u4f4d\u548c\u76f8\u7b49\u7684\u6570\u5b57\u653e\u5230\u540c\u4e00\u4e2a\u7ec4\u4e2d\u3002</p> <p>\u8bf7\u4f60\u7edf\u8ba1\u6bcf\u4e2a\u7ec4\u4e2d\u7684\u6570\u5b57\u6570\u76ee\uff0c\u5e76\u8fd4\u56de\u6570\u5b57\u6570\u76ee\u5e76\u5217\u6700\u591a\u7684\u7ec4\u6709\u591a\u5c11\u4e2a\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 13\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u603b\u5171\u6709 9 \u4e2a\u7ec4\uff0c\u5c06 1 \u5230 13 \u6309\u6570\u4f4d\u6c42\u548c\u540e\u8fd9\u4e9b\u7ec4\u5206\u522b\u662f\uff1a\n[1,10]\uff0c[2,11]\uff0c[3,12]\uff0c[4,13]\uff0c[5]\uff0c[6]\uff0c[7]\uff0c[8]\uff0c[9]\u3002\u603b\u5171\u6709 4 \u4e2a\u7ec4\u62e5\u6709\u7684\u6570\u5b57\u5e76\u5217\u6700\u591a\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 2\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u603b\u5171\u6709 2 \u4e2a\u5927\u5c0f\u4e3a 1 \u7684\u7ec4 [1]\uff0c[2]\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 15\n\u8f93\u51fa\uff1a6\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 24\n\u8f93\u51fa\uff1a5\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= n &lt;= 10^4\n</code></pre>"},{"location":"leetcode/1399/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define MAXN 1000\n#define LINEMAX 2000\n\nint bitSum(int n)\n{\n    int sum = 0;\n    while (n) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n}\n\nint countLargestGroup(int n){\n    int **map = (int**)malloc(sizeof(int*) * MAXN);\n    int *colSize = (int*)malloc(sizeof(int) * MAXN);\n    for (int i = 0; i &lt; MAXN; i++) {\n        map[i] = (int*)malloc(sizeof(int) * LINEMAX);\n        colSize[i] = 0;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        int ss = bitSum(i);\n        map[ss][colSize[ss]++] = i;\n    }\n\n    int maxValue = -1;\n    for (int i = 0; i &lt; MAXN; i++) {\n        if (colSize[i] &gt; maxValue) {\n            maxValue = colSize[i];\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i &lt; MAXN; i++) {\n        if (colSize[i] == maxValue) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1403/readme/","title":"1403. \u975e\u9012\u589e\u987a\u5e8f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/1403/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u4ece\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u6ee1\u8db3\u8be5\u5b50\u5e8f\u5217\u7684\u5143\u7d20\u4e4b\u548c \u4e25\u683c \u5927\u4e8e\u672a\u5305\u542b\u5728\u8be5\u5b50\u5e8f\u5217\u4e2d\u7684\u5404\u5143\u7d20\u4e4b\u548c\u3002</p> <p>\u5982\u679c\u5b58\u5728\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u53ea\u9700\u8fd4\u56de \u957f\u5ea6\u6700\u5c0f \u7684\u5b50\u5e8f\u5217\u3002\u5982\u679c\u4ecd\u7136\u6709\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u5219\u8fd4\u56de \u5143\u7d20\u4e4b\u548c\u6700\u5927 \u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u4e0e\u5b50\u6570\u7ec4\u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u300c\u6570\u7ec4\u7684\u5b50\u5e8f\u5217\u300d\u4e0d\u5f3a\u8c03\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u8fde\u7eed\u6027\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u4ece\u6570\u7ec4\u4e2d\u5206\u79bb\u4e00\u4e9b\uff08\u4e5f\u53ef\u80fd\u4e0d\u5206\u79bb\uff09\u5143\u7d20\u5f97\u5230\u3002</p> <p>\u6ce8\u610f\uff0c\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u6ee1\u8db3\u6240\u6709\u7ea6\u675f\u6761\u4ef6\u7684\u89e3\u51b3\u65b9\u6848\u662f \u552f\u4e00 \u7684\u3002\u540c\u65f6\uff0c\u8fd4\u56de\u7684\u7b54\u6848\u5e94\u5f53\u6309 \u975e\u9012\u589e\u987a\u5e8f \u6392\u5217\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [4,3,10,9,8]\n\u8f93\u51fa\uff1a[10,9] \n\u89e3\u91ca\uff1a\u5b50\u5e8f\u5217 [10,9] \u548c [10,8] \u662f\u6700\u5c0f\u7684\u3001\u6ee1\u8db3\u5143\u7d20\u4e4b\u548c\u5927\u4e8e\u5176\u4ed6\u5404\u5143\u7d20\u4e4b\u548c\u7684\u5b50\u5e8f\u5217\u3002\u4f46\u662f [10,9] \u7684\u5143\u7d20\u4e4b\u548c\u6700\u5927\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [4,4,7,6,7]\n\u8f93\u51fa\uff1a[7,7,6] \n\u89e3\u91ca\uff1a\u5b50\u5e8f\u5217 [7,7] \u7684\u548c\u4e3a 14 \uff0c\u4e0d\u4e25\u683c\u5927\u4e8e\u5269\u4e0b\u7684\u5176\u4ed6\u5143\u7d20\u4e4b\u548c\uff0814 = 4 + 4 + 6\uff09\u3002\u56e0\u6b64\uff0c[7,6,7] \u662f\u6ee1\u8db3\u9898\u610f\u7684\u6700\u5c0f\u5b50\u5e8f\u5217\u3002\u6ce8\u610f\uff0c\u5143\u7d20\u6309\u975e\u9012\u589e\u987a\u5e8f\u8fd4\u56de\u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [6]\n\u8f93\u51fa\uff1a[6]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= nums.length &lt;= 500\n1 &lt;= nums[i] &lt;= 100\n</code></pre>"},{"location":"leetcode/1403/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int compare(const void *p, const void *q)\n{\n    int a = *(int *)p;\n    int b = *(int *)q;\n    return b - a;\n}\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint *minSubsequence(int *nums, int numsSize, int *returnSize)\n{\n    // \u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c \u6c42\u548c\uff0c\u53d6\u524dX\u4e2a\u5143\u7d20\u5927\u4e8e\u548c\u7684\u4e8c\u5206\u4e4b\u4e00\n    if (nums == NULL || numsSize &lt;= 0)\n    {\n        *returnSize = 0;\n        return NULL;\n    }\n\n    int *ans = (int *)malloc(sizeof(int) * numsSize);\n    int ansEnd = 0;\n    int sum = 0;\n\n    qsort(nums, numsSize, sizeof(int), compare);\n\n    for (int i = 0; i &lt; numsSize; i++)\n    {\n        sum += nums[i];\n    }\n\n    int curr = 0;\n    int i = 0;\n    while (curr &lt;= sum / 2 &amp;&amp; i &lt; numsSize)\n    {\n        ans[ansEnd++] = nums[i];\n        curr += nums[i];\n        i++;\n    }\n\n    *returnSize = ansEnd;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1404/readme/","title":"1404. \u5c06\u4e8c\u8fdb\u5236\u8868\u793a\u51cf\u5230 1 \u7684\u6b65\u9aa4\u6570","text":""},{"location":"leetcode/1404/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8868\u793a\u7684\u6570\u5b57 s \u3002\u8bf7\u4f60\u8fd4\u56de\u6309\u4e0b\u8ff0\u89c4\u5219\u5c06\u5176\u51cf\u5c11\u5230 1 \u6240\u9700\u8981\u7684\u6b65\u9aa4\u6570\uff1a</p> <p>\u5982\u679c\u5f53\u524d\u6570\u5b57\u4e3a\u5076\u6570\uff0c\u5219\u5c06\u5176\u9664\u4ee5 2 \u3002</p> <p>\u5982\u679c\u5f53\u524d\u6570\u5b57\u4e3a\u5947\u6570\uff0c\u5219\u5c06\u5176\u52a0\u4e0a 1 \u3002</p> <p>\u9898\u76ee\u4fdd\u8bc1\u4f60\u603b\u662f\u53ef\u4ee5\u6309\u4e0a\u8ff0\u89c4\u5219\u5c06\u6d4b\u8bd5\u7528\u4f8b\u53d8\u4e3a 1 \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"1101\"\n    \u8f93\u51fa\uff1a6\n    \u89e3\u91ca\uff1a\"1101\" \u8868\u793a\u5341\u8fdb\u5236\u6570 13 \u3002\n    Step 1) 13 \u662f\u5947\u6570\uff0c\u52a0 1 \u5f97\u5230 14\u00a0\n    Step 2) 14 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 7\n    Step 3) 7  \u662f\u5947\u6570\uff0c\u52a0 1 \u5f97\u5230 8\n    Step 4) 8  \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 4\u00a0 \n    Step 5) 4  \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 2\u00a0\n    Step 6) 2  \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"10\"\n    \u8f93\u51fa\uff1a1\n    \u89e3\u91ca\uff1a\"10\" \u8868\u793a\u5341\u8fdb\u5236\u6570 2 \u3002\n    Step 1) 2 \u662f\u5076\u6570\uff0c\u9664 2 \u5f97\u5230 1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>    \u8f93\u5165\uff1as = \"1\"\n    \u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>    1 &lt;= s.length\u00a0&lt;= 500\n    s \u7531\u5b57\u7b26 '0' \u6216 '1' \u7ec4\u6210\u3002\n    s[0] == '1'\n</code></pre>"},{"location":"leetcode/1404/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define N 500\nint numSteps(char * s){\n    if (s == NULL) return 0;\n\n    int n = strlen(s);\n    char *ss = (char*)malloc(sizeof(char) * (n + N));\n    int ssEnd = 0;\n\n    // \u9006\u5e8f\u5b58\u50a8\n    for (int i = n - 1; i &gt;= 0; i--) {\n        ss[ssEnd++] = s[i];\n    }\n    ss[ssEnd] = '\\0';\n\n    // \u5f00\u59cb\u6a21\u62df\u64cd\u4f5c\n    int count = 0;\n    int start = 0;\n    int end = n - 1;\n    while (start &lt; end) {\n        if (ss[start] == '0') {\n            start++;\n        } else {\n            int carry = 1;\n            int sum = 0;\n            for (int i = start; i &lt;= end; i++) {\n                sum = ss[i] - '0' + carry;\n                ss[i] = sum % 2 + '0';\n                carry = sum / 2;\n            }\n            if (carry) {\n                end++;\n                ss[end] = carry;\n                ss[end+1] = '\\0';\n            }\n        }\n        count++;\n    }\n    return count;\n}\n</code></pre>"},{"location":"leetcode/1405/readme/","title":"1405. \u6700\u957f\u5feb\u4e50\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/1405/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u4e0d\u542b\u6709\u4efb\u4f55 'aaa'\uff0c'bbb' \u6216 'ccc' \u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b50\u4e32\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u300c\u5feb\u4e50\u5b57\u7b26\u4e32\u300d\u3002</p> <p>\u7ed9\u4f60\u4e09\u4e2a\u6574\u6570 a\uff0cb \uff0cc\uff0c\u8bf7\u4f60\u8fd4\u56de \u4efb\u610f\u4e00\u4e2a \u6ee1\u8db3\u4e0b\u5217\u5168\u90e8\u6761\u4ef6\u7684\u5b57\u7b26\u4e32 s\uff1a</p> <p>s \u662f\u4e00\u4e2a\u5c3d\u53ef\u80fd\u957f\u7684\u5feb\u4e50\u5b57\u7b26\u4e32\u3002 s \u4e2d \u6700\u591a \u6709a \u4e2a\u5b57\u6bcd 'a'\u3001b\u00a0\u4e2a\u5b57\u6bcd 'b'\u3001c \u4e2a\u5b57\u6bcd 'c' \u3002 s \u4e2d\u53ea\u542b\u6709 'a'\u3001'b' \u3001'c' \u4e09\u79cd\u5b57\u6bcd\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = 1, b = 1, c = 7\n\u8f93\u51fa\uff1a\"ccaccbcc\"\n\u89e3\u91ca\uff1a\"ccbccacc\" \u4e5f\u662f\u4e00\u79cd\u6b63\u786e\u7b54\u6848\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = 2, b = 2, c = 1\n\u8f93\u51fa\uff1a\"aabbc\"\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aa = 7, b = 1, c = 0\n\u8f93\u51fa\uff1a\"aabaa\"\n\u89e3\u91ca\uff1a\u8fd9\u662f\u8be5\u6d4b\u8bd5\u7528\u4f8b\u7684\u552f\u4e00\u6b63\u786e\u7b54\u6848\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>0 &lt;= a, b, c &lt;= 100\na + b + c &gt; 0\n</code></pre>"},{"location":"leetcode/1405/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define N 2000\n\n// \u83b7\u53d6\u9664\u4e86except\u4e4b\u5916\u7684\u6700\u5927\u503c\u5f97\u4e0b\u6807\nint getMax(int *map, int except)\n{\n    int index = -1;\n    int max = INT_MIN;\n    for (int i = 0; i &lt; 3; i++) {\n        if (i != except) {\n            if (map[i] &gt; max) {\n                max = map[i];\n                index = i;\n            }\n        }\n    }\n    return index;\n}\nchar * longestDiverseString(int a, int b, int c){\n    char *ans = (char*)malloc(sizeof(char) * N);\n    int ansEnd = 0;\n    int *map = (int*)malloc(sizeof(int) * 3);\n    map[0] = a, map[1] = b, map[2] = c;\n\n    int except = -1;\n    int index = -1;\n    while (map[0] + map[1] + map[2]) {\n        index = getMax(map, except);\n        // \u5982\u679c\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6d88\u8017\u4e00\u4e2a\n        if (except == -1 || map[index] &gt; map[except]) {\n            if (map[index] &gt; 0) {\n                ans[ansEnd++] = index + 'a';\n                map[index]--;\n            }\n            if (map[index] &gt; 0) {\n                ans[ansEnd++] = index + 'a';\n                map[index]--;\n            }\n        } else {\n            if (map[index] &gt; 0) {\n                ans[ansEnd++] = index + 'a';\n                map[index]--;\n            }\n        }\n        except = index;\n        if (map[0] + map[1] + map[2] - map[except] == 0) {\n            ans[ansEnd] = '\\0';\n            return ans;\n        }\n    }\n    ans[ansEnd] = '\\0';\n    free(map);\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1409/readme/","title":"1409. \u67e5\u8be2\u5e26\u952e\u7684\u6392\u5217","text":""},{"location":"leetcode/1409/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5f85\u67e5\u6570\u7ec4 queries \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e3a 1 \u5230 m \u4e4b\u95f4\u7684\u6b63\u6574\u6570\u3002 \u8bf7\u4f60\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u5904\u7406\u6240\u6709\u5f85\u67e5\u9879 queries[i]\uff08\u4ece i=0 \u5230 i=queries.length-1\uff09\uff1a</p> <p>\u4e00\u5f00\u59cb\uff0c\u6392\u5217 P=[1,2,3,...,m]\u3002 \u5bf9\u4e8e\u5f53\u524d\u7684 i \uff0c\u8bf7\u4f60\u627e\u51fa\u5f85\u67e5\u9879 queries[i] \u5728\u6392\u5217 P \u4e2d\u7684\u4f4d\u7f6e\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\uff0c\u7136\u540e\u5c06\u5176\u4ece\u539f\u4f4d\u7f6e\u79fb\u52a8\u5230\u6392\u5217 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff08\u5373\u4e0b\u6807\u4e3a 0 \u5904\uff09\u3002\u6ce8\u610f\uff0c queries[i] \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u5c31\u662f queries[i] \u7684\u67e5\u8be2\u7ed3\u679c\u3002 \u8bf7\u4f60\u4ee5\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de\u5f85\u67e5\u6570\u7ec4\u00a0 queries \u7684\u67e5\u8be2\u7ed3\u679c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1aqueries = [3,1,2,1], m = 5\n  \u8f93\u51fa\uff1a[2,1,2,1] \n  \u89e3\u91ca\uff1a\u5f85\u67e5\u6570\u7ec4 queries \u5904\u7406\u5982\u4e0b\uff1a\n  \u5bf9\u4e8e i=0: queries[i]=3, P=[1,2,3,4,5], 3 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 2\uff0c\u63a5\u7740\u6211\u4eec\u628a 3 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[3,1,2,4,5] \u3002\n  \u5bf9\u4e8e i=1: queries[i]=1, P=[3,1,2,4,5], 1 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 1\uff0c\u63a5\u7740\u6211\u4eec\u628a 1 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[1,3,2,4,5] \u3002 \n  \u5bf9\u4e8e i=2: queries[i]=2, P=[1,3,2,4,5], 2 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 2\uff0c\u63a5\u7740\u6211\u4eec\u628a 2 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[2,1,3,4,5] \u3002\n  \u5bf9\u4e8e i=3: queries[i]=1, P=[2,1,3,4,5], 1 \u5728 P \u4e2d\u7684\u4f4d\u7f6e\u662f 1\uff0c\u63a5\u7740\u6211\u4eec\u628a 1 \u79fb\u52a8\u5230 P \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5f97\u5230 P=[1,2,3,4,5] \u3002 \n  \u56e0\u6b64\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u6570\u7ec4\u4e3a [2,1,2,1] \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1aqueries = [4,1,2,2], m = 4\n  \u8f93\u51fa\uff1a[3,1,2,0]\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>  \u8f93\u5165\uff1aqueries = [7,5,5,8,3], m = 8\n  \u8f93\u51fa\uff1a[6,5,0,7,5]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;= m &lt;= 10^3\n  1 &lt;= queries.length &lt;= m\n  1 &lt;= queries[i] &lt;= m\n</code></pre>"},{"location":"leetcode/1409/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define MAXN 1001\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* processQueries(int* queries, int queriesSize, int m, int* returnSize){\n    // map \u5b58\u50a8 value : index \u6620\u5c04\n    int *ans = (int*)malloc(sizeof(int) * queriesSize);\n    int ansEnd = 0;\n    int *map = (int*)malloc(sizeof(int) * (m+1));\n    for (int i = 0; i &lt; m; i++) {\n        map[i + 1] = i;\n    }\n    for (int i = 0; i &lt; queriesSize; i++) {\n        int index = map[ queries[i] ]; // \u67e5\u8be2value\u7684\u7d22\u5f15\n        ans[ansEnd++] = index; \n        // \u628aindex\u4f4d\u7f6e\u7684\u5143\u7d20\u79fb\u52a8\u5230\u9996\u4f4d\uff0c\u6240\u6709\u4ece[0, index-1]\u4f4d\u7f6e\u7684\u5143\u7d20\u7d22\u5f15+1\n        for (int j = 1; j &lt;= m; j++) {\n            if (map[j] &lt; index) {\n                map[j] += 1;\n            }\n        }\n        map[ queries[i] ] = 0;\n    }\n\n    *returnSize = ansEnd;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1410/readme/","title":"1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668","text":""},{"location":"leetcode/1410/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u300cHTML \u5b9e\u4f53\u89e3\u6790\u5668\u300d \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u89e3\u6790\u5668\uff0c\u5b83\u5c06 HTML \u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u7528\u5b57\u7b26\u672c\u8eab\u66ff\u6362\u6389\u6240\u6709\u8fd9\u4e9b\u7279\u6b8a\u7684\u5b57\u7b26\u5b9e\u4f53\u3002</p> <p>HTML \u91cc\u8fd9\u4e9b\u7279\u6b8a\u5b57\u7b26\u548c\u5b83\u4eec\u5bf9\u5e94\u7684\u5b57\u7b26\u5b9e\u4f53\u5305\u62ec\uff1a</p> <pre><code>\u53cc\u5f15\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp;quot; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f \" \u3002\n\u5355\u5f15\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp;apos; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f ' \u3002\n\u4e0e\u7b26\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp;amp; \uff0c\u5bf9\u5e94\u5bf9\u7684\u5b57\u7b26\u662f &amp; \u3002\n\u5927\u4e8e\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp;gt; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f &gt; \u3002\n\u5c0f\u4e8e\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp;lt; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f &lt; \u3002\n\u659c\u7ebf\u53f7\uff1a\u5b57\u7b26\u5b9e\u4f53\u4e3a &amp;frasl; \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u662f / \u3002\n</code></pre> <p>\u7ed9\u4f60\u8f93\u5165\u5b57\u7b26\u4e32 text \uff0c\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a HTML \u5b9e\u4f53\u89e3\u6790\u5668\uff0c\u8fd4\u56de\u89e3\u6790\u5668\u89e3\u6790\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1atext = \"&amp;amp; is an HTML entity but &amp;ambassador; is not.\"\n\u8f93\u51fa\uff1a\"&amp; is an HTML entity but &amp;ambassador; is not.\"\n\u89e3\u91ca\uff1a\u89e3\u6790\u5668\u628a\u5b57\u7b26\u5b9e\u4f53 &amp;amp; \u7528 &amp; \u66ff\u6362\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1atext = \"and I quote: &amp;quot;...&amp;quot;\"\n\u8f93\u51fa\uff1a\"and I quote: \\\"...\\\"\"\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1atext = \"Stay home! Practice on Leetcode :)\"\n\u8f93\u51fa\uff1a\"Stay home! Practice on Leetcode :)\"\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1atext = \"x &amp;gt; y &amp;amp;&amp;amp; x &amp;lt; y is always false\"\n\u8f93\u51fa\uff1a\"x &gt; y &amp;&amp; x &lt; y is always false\"\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>\u8f93\u5165\uff1atext = \"leetcode.com&amp;frasl;problemset&amp;frasl;all\"\n\u8f93\u51fa\uff1a\"leetcode.com/problemset/all\"\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= text.length &lt;= 10^5\n\u5b57\u7b26\u4e32\u53ef\u80fd\u5305\u542b 256 \u4e2aASCII \u5b57\u7b26\u4e2d\u7684\u4efb\u610f\u5b57\u7b26\u3002\n</code></pre>"},{"location":"leetcode/1410/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/1418/readme/","title":"1418. \u70b9\u83dc\u5c55\u793a\u8868","text":""},{"location":"leetcode/1418/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 orders\uff0c\u8868\u793a\u5ba2\u6237\u5728\u9910\u5385\u4e2d\u5b8c\u6210\u7684\u8ba2\u5355\uff0c\u786e\u5207\u5730\u8bf4\uff0c orders[i]=[customerNamei,tableNumberi,foodItemi] \uff0c\u5176\u4e2d customerNamei \u662f\u5ba2\u6237\u7684\u59d3\u540d\uff0ctableNumberi \u662f\u5ba2\u6237\u6240\u5728\u9910\u684c\u7684\u684c\u53f7\uff0c\u800c foodItemi \u662f\u5ba2\u6237\u70b9\u7684\u9910\u54c1\u540d\u79f0\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u8be5\u9910\u5385\u7684 \u70b9\u83dc\u5c55\u793a\u8868 \u3002\u5728\u8fd9\u5f20\u8868\u4e2d\uff0c\u8868\u4e2d\u7b2c\u4e00\u884c\u4e3a\u6807\u9898\uff0c\u5176\u7b2c\u4e00\u5217\u4e3a\u9910\u684c\u684c\u53f7 \u201cTable\u201d \uff0c\u540e\u9762\u6bcf\u4e00\u5217\u90fd\u662f\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u9910\u54c1\u540d\u79f0\u3002\u63a5\u4e0b\u6765\u6bcf\u4e00\u884c\u4e2d\u7684\u9879\u5219\u8868\u793a\u6bcf\u5f20\u9910\u684c\u8ba2\u8d2d\u7684\u76f8\u5e94\u9910\u54c1\u6570\u91cf\uff0c\u7b2c\u4e00\u5217\u5e94\u5f53\u586b\u5bf9\u5e94\u7684\u684c\u53f7\uff0c\u540e\u9762\u4f9d\u6b21\u586b\u5199\u4e0b\u5355\u7684\u9910\u54c1\u6570\u91cf\u3002</p> <p>\u6ce8\u610f\uff1a\u5ba2\u6237\u59d3\u540d\u4e0d\u662f\u70b9\u83dc\u5c55\u793a\u8868\u7684\u4e00\u90e8\u5206\u3002\u6b64\u5916\uff0c\u8868\u4e2d\u7684\u6570\u636e\u884c\u5e94\u8be5\u6309\u9910\u684c\u684c\u53f7\u5347\u5e8f\u6392\u5217\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1aorders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\n  \u8f93\u51fa\uff1a[[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \n  \u89e3\u91ca\uff1a\n  \u70b9\u83dc\u5c55\u793a\u8868\u5982\u4e0b\u6240\u793a\uff1a\n        Table,Beef Burrito,Ceviche,Fried Chicken,Water\n        3    ,0           ,2      ,1            ,0\n        5    ,0           ,1      ,0            ,1\n        10   ,1           ,0      ,0            ,0\n  \u5bf9\u4e8e\u9910\u684c 3\uff1aDavid \u70b9\u4e86 \"Ceviche\" \u548c \"Fried Chicken\"\uff0c\u800c Rous \u70b9\u4e86 \"Ceviche\"\n  \u800c\u9910\u684c 5\uff1aCarla \u70b9\u4e86 \"Water\" \u548c \"Ceviche\"\n  \u9910\u684c 10\uff1aCorina \u70b9\u4e86 \"Beef Burrito\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1aorders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\n  \u8f93\u51fa\uff1a[[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \n  \u89e3\u91ca\uff1a\n  \u5bf9\u4e8e\u9910\u684c 1\uff1aAdam \u548c Brianna \u90fd\u70b9\u4e86 \"Canadian Waffles\"\n  \u800c\u9910\u684c 12\uff1aJames, Ratesh \u548c Amadeus \u90fd\u70b9\u4e86 \"Fried Chicken\"\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>  \u8f93\u5165\uff1aorders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\n  \u8f93\u51fa\uff1a[[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;=\u00a0orders.length &lt;= 5 * 10^4\n  orders[i].length == 3\n  1 &lt;= customerNamei.length, foodItemi.length &lt;= 20\n  customerNamei \u548c foodItemi \u7531\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u53ca\u7a7a\u683c\u5b57\u7b26 ' ' \u7ec4\u6210\u3002\n  tableNumberi \u662f 1 \u5230 500 \u8303\u56f4\u5185\u7684\u6574\u6570\u3002\n</code></pre>"},{"location":"leetcode/1418/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;uthash.h&gt;\n\n#define STRMAX 22\n#define NUMMAX 5\n#define ORDERLEN 50001\n\ntypedef struct FoodName {\n    char strname[STRMAX];\n    int index;\n    UT_hash_handle hh;\n} STR_INDEX;\n\n// foodname \u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\nint FoodCompare(STR_INDEX *a, STR_INDEX *b)\n{\n    return strcmp(a-&gt;strname, b-&gt;strname);\n}\n\n// \u684c\u53f7\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5217\nint TableCompare(STR_INDEX *a, STR_INDEX *b)\n{\n    int num1 = atoi(a-&gt;strname);\n    int num2 = atoi(b-&gt;strname);\n    return num1 - num2;\n}\n\nvoid int2str(int n, char *str)\n{\n    int end = 0;\n    while (n) {\n        str[end++] = n % 10 + '0';\n        n = n / 10;\n    }\n    str[end] = '\\0';\n    int left = 0;\n    int right = end - 1;\n    char tmp;\n    while (left &lt; right) {\n        tmp = str[left];\n        str[left] = str[right];\n        str[right] = tmp;\n        left++;\n        right--;\n    }\n}\nvoid addOne(char *str)\n{\n    printf(\"%s,\", str);\n    int a = atoi(str);\n    a = a + 1;\n    printf(\"%d, \", a);\n    int2str(a, str);\n}\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** displayTable(char *** orders, int ordersSize, int* ordersColSize, \n                        int* returnSize, int** returnColumnSizes){\n    STR_INDEX *foodNames = NULL;\n    STR_INDEX *tableIndexs = NULL;\n    STR_INDEX *currFood = NULL;\n    STR_INDEX *currTable = NULL;\n    for (int i = 0; i &lt; ordersSize; i++) {\n        char *foodName = orders[i][2];\n        HASH_FIND_STR(foodNames, foodName, currFood);\n        if (currFood == NULL) {\n            currFood = (STR_INDEX*)malloc(sizeof(STR_INDEX));\n            strcpy(currFood-&gt;strname, foodName);\n            currFood-&gt;strname[strlen(foodName)] = '\\0';\n            currFood-&gt;index = -1;\n            HASH_ADD_STR(foodNames, strname, currFood);\n        }\n\n        char *tableIndex = orders[i][1];\n        HASH_FIND_STR(tableIndexs, tableIndex, currTable);\n        if (currTable == NULL) {\n            currTable = (STR_INDEX*)malloc(sizeof(STR_INDEX));\n            strcpy(currTable-&gt;strname, tableIndex);\n            currTable-&gt;strname[strlen(tableIndex)] = '\\0';\n            HASH_ADD_STR(tableIndexs, strname, currTable);\n        }\n    }\n\n    int foodCount = HASH_COUNT(foodNames);\n    int tableCount = HASH_COUNT(tableIndexs);\n    HASH_SORT(foodNames, FoodCompare);\n    HASH_SORT(tableIndexs, TableCompare);\n\n    char ***ans = (char***)malloc(sizeof(char**) * (tableCount + 1));\n    for (int i = 0; i &lt;= tableCount; i++) {\n        ans[i] = (char**)malloc(sizeof(char*) * (foodCount + 1));\n        for (int j = 0; j &lt;= foodCount; j++) {\n            ans[i][j] = (char*)malloc(sizeof(char) * STRMAX);\n            ans[i][j][0] = '0';\n            ans[i][j][1] = '\\0';\n        }\n    }\n    strcpy(ans[0][0], \"Table\");\n    ans[0][0][5] = '\\0';\n\n    int findex = 1;\n    for (currFood = foodNames; currFood != NULL; currFood = currFood-&gt;hh.next) {\n        currFood-&gt;index = findex;\n        strcpy(ans[0][findex], currFood-&gt;strname);\n        ans[0][findex][strlen(currFood-&gt;strname)] = '\\0';\n        findex += 1;\n    }\n    int tindex = 1;\n    for (currTable = tableIndexs; currTable != NULL; currTable = currTable-&gt;hh.next) {\n        currTable-&gt;index = tindex;\n        strcpy(ans[tindex][0], currTable-&gt;strname);\n        ans[tindex][0][strlen(currTable-&gt;strname)] = '\\0';\n        tindex += 1;\n    }\n\n    for (int i = 0; i &lt; ordersSize; i++) {\n        char *tableIndex = orders[i][1];\n        char *foodName = orders[i][2];\n        findex = -1;\n        tindex = -1;\n        HASH_FIND_STR(tableIndexs, tableIndex, currTable);\n        HASH_FIND_STR(foodNames, foodName, currFood);\n        if (currTable != NULL) tindex = currTable-&gt;index;\n        if (currFood != NULL) findex = currFood-&gt;index;\n        if (findex != -1 &amp;&amp; tindex != -1) {\n            addOne(ans[tindex][findex]);\n        } else {\n            printf(\"tindex: %d, findex: %d\", tindex, findex);\n        }\n    }\n\n    int *colsSize = (int*)malloc(sizeof(int) * (tableCount + 1));\n    for (int i = 0; i &lt;= tableCount; i++) {\n        colsSize[i] = foodCount + 1;\n    }\n\n    *returnSize = tableCount + 1;\n    *returnColumnSizes = colsSize;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1423/readme/","title":"1423. \u53ef\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570","text":""},{"location":"leetcode/1423/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u51e0\u5f20\u5361\u724c \u6392\u6210\u4e00\u884c\uff0c\u6bcf\u5f20\u5361\u724c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u70b9\u6570\u3002\u70b9\u6570\u7531\u6574\u6570\u6570\u7ec4 cardPoints \u7ed9\u51fa\u3002</p> <p>\u6bcf\u6b21\u884c\u52a8\uff0c\u4f60\u53ef\u4ee5\u4ece\u884c\u7684\u5f00\u5934\u6216\u8005\u672b\u5c3e\u62ff\u4e00\u5f20\u5361\u724c\uff0c\u6700\u7ec8\u4f60\u5fc5\u987b\u6b63\u597d\u62ff k \u5f20\u5361\u724c\u3002</p> <p>\u4f60\u7684\u70b9\u6570\u5c31\u662f\u4f60\u62ff\u5230\u624b\u4e2d\u7684\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cardPoints \u548c\u6574\u6570 k\uff0c\u8bf7\u4f60\u8fd4\u56de\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1acardPoints = [1,2,3,4,5,6,1], k = 3\n  \u8f93\u51fa\uff1a12\n  \u89e3\u91ca\uff1a\u7b2c\u4e00\u6b21\u884c\u52a8\uff0c\u4e0d\u7ba1\u62ff\u54ea\u5f20\u724c\uff0c\u4f60\u7684\u70b9\u6570\u603b\u662f 1 \u3002\u4f46\u662f\uff0c\u5148\u62ff\u6700\u53f3\u8fb9\u7684\u5361\u724c\u5c06\u4f1a\u6700\u5927\u5316\u4f60\u7684\u53ef\u83b7\u5f97\u70b9\u6570\u3002\u6700\u4f18\u7b56\u7565\u662f\u62ff\u53f3\u8fb9\u7684\u4e09\u5f20\u724c\uff0c\u6700\u7ec8\u70b9\u6570\u4e3a 1 + 6 + 5 = 12 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1acardPoints = [2,2,2], k = 2\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u65e0\u8bba\u4f60\u62ff\u8d77\u54ea\u4e24\u5f20\u5361\u724c\uff0c\u53ef\u83b7\u5f97\u7684\u70b9\u6570\u603b\u662f 4 \u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1acardPoints = [9,7,7,9,7,7,9], k = 7\n\u8f93\u51fa\uff1a55\n\u89e3\u91ca\uff1a\u4f60\u5fc5\u987b\u62ff\u8d77\u6240\u6709\u5361\u724c\uff0c\u53ef\u4ee5\u83b7\u5f97\u7684\u70b9\u6570\u4e3a\u6240\u6709\u5361\u724c\u7684\u70b9\u6570\u4e4b\u548c\u3002\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1acardPoints = [1,1000,1], k = 1\n\u8f93\u51fa\uff1a1\n\u89e3\u91ca\uff1a\u4f60\u65e0\u6cd5\u62ff\u5230\u4e2d\u95f4\u90a3\u5f20\u5361\u724c\uff0c\u6240\u4ee5\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u4e3a 1 \u3002\n</code></pre> <p>\u793a\u4f8b 5\uff1a</p> <pre><code>\u8f93\u5165\uff1acardPoints = [1,79,80,1,1,1,200,1], k = 3\n\u8f93\u51fa\uff1a202\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= cardPoints.length &lt;= 10^5\n1 &lt;= cardPoints[i] &lt;= 10^4\n1 &lt;= k &lt;= cardPoints.length\n</code></pre>"},{"location":"leetcode/1423/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define NN 100000\n\nint **matrix = NULL;\nint *colSize = NULL;\nint n = 0;\n\nint max(int a, int b) {\n    if (a &gt; b) {\n        return a;\n    } else {\n        return b;\n    }\n    return 0;\n}\nvoid iter(int i, int j, int *ans, int *ansEnd)\n{\n    while (i &gt;= 0) {\n        if (j &lt; colSize[i]) {\n            ans[(*ansEnd)++] = matrix[i][j];\n        }\n        i -= 1;\n        j += 1;\n    }\n}\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findDiagonalOrder(int** nums, int numsSize, int* numsColSize, int* returnSize){\n    int m = 0;\n    int i, j, k;\n\n    for (i = 0; i &lt; numsSize; i++) {\n        m = max(m, numsColSize[i]);\n    }\n\n    int *ans = (malloc(sizeof(int) * NN));\n    int ansEnd = 0;\n    matrix = nums;\n    n = numsSize;\n    colSize = numsColSize;\n\n    for (i = 0; i &lt; numsSize - 1; i++) {\n        iter(i, 0, ans, &amp;ansEnd);\n    }\n\n    for (j = 0; j &lt; m; j++) {\n        iter(numsSize - 1, j, ans, &amp;ansEnd);\n    }\n\n    *returnSize = ansEnd;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/1452/readme/","title":"1452. \u6536\u85cf\u6e05\u5355","text":""},{"location":"leetcode/1452/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 favoriteCompanies \uff0c\u5176\u4e2d favoriteCompanies[i] \u662f\u7b2c i \u540d\u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002</p> <p>\u8bf7\u627e\u51fa\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\u7684\u6536\u85cf\u6e05\u5355\uff0c\u5e76\u8fd4\u56de\u8be5\u6e05\u5355\u4e0b\u6807\u3002\u4e0b\u6807\u9700\u8981\u6309\u5347\u5e8f\u6392\u5217\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\n  \u8f93\u51fa\uff1a[0,1,4] \n  \u89e3\u91ca\uff1a\n  favoriteCompanies[2]=[\"google\",\"facebook\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\u3002\n  favoriteCompanies[3]=[\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u548c favoriteCompanies[1]=[\"google\",\"microsoft\"] \u7684\u5b50\u96c6\u3002\n  \u5176\u4f59\u7684\u6536\u85cf\u6e05\u5355\u5747\u4e0d\u662f\u5176\u4ed6\u4efb\u4f55\u4eba\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1,4] \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\n  \u8f93\u51fa\uff1a[0,1] \n  \u89e3\u91ca\uff1afavoriteCompanies[2]=[\"facebook\",\"google\"] \u662f favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] \u7684\u5b50\u96c6\uff0c\u56e0\u6b64\uff0c\u7b54\u6848\u4e3a [0,1] \u3002\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>  \u8f93\u5165\uff1afavoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\n  \u8f93\u51fa\uff1a[0,1,2,3]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;=\u00a0favoriteCompanies.length &lt;= 100\n  1 &lt;=\u00a0favoriteCompanies[i].length &lt;= 500\n  1 &lt;=\u00a0favoriteCompanies[i][j].length &lt;= 20\n  favoriteCompanies[i] \u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32 \u5404\u4e0d\u76f8\u540c \u3002\n  \u7528\u6237\u6536\u85cf\u7684\u516c\u53f8\u6e05\u5355\u4e5f \u5404\u4e0d\u76f8\u540c \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4fbf\u6211\u4eec\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u6bcf\u4e2a\u6e05\u5355\uff0c favoriteCompanies[i] != favoriteCompanies[j] \u4ecd\u7136\u6210\u7acb\u3002\n  \u6240\u6709\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\n</code></pre>"},{"location":"leetcode/1452/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -&gt; List[int]:\n        listset = []\n        for liststr in favoriteCompanies:\n            listset.append(set(liststr))\n        ans = []\n        for i in range(len(favoriteCompanies)):\n            flag = True\n            for j in range(len(favoriteCompanies)):\n                if i != j and (listset[i] &amp; listset[j] == listset[i]):\n                    flag = False\n                    break\n            if flag:\n                ans.append(i)\n\n        return ans\n</code></pre>"},{"location":"leetcode/150/readme/","title":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","text":""},{"location":"leetcode/150/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6839\u636e\u9006\u6ce2\u5170\u8868\u793a\u6cd5\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p> <p>\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002</p> <p>\u8bf4\u660e\uff1a</p> <pre><code>\u6574\u6570\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002\n\u7ed9\u5b9a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002\n</code></pre> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"]\n\u8f93\u51fa: 9\n\u89e3\u91ca: ((2 + 1) * 3) = 9\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"]\n\u8f93\u51fa: 6\n\u89e3\u91ca: (4 + (13 / 5)) = 6\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\n\u8f93\u51fa: 22\n\u89e3\u91ca: \n((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</code></pre>"},{"location":"leetcode/150/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u7528\u6808\u5b58\u653e\u6570\u5b57\uff0c\u4e00\u65e6\u9047\u5230\u6570\u5b57\u5c31\u653e\u5165\u6808\u4e2d</li> <li>\u4e00\u65e6\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u4ece\u6808\u9876\u5f39\u51fa\u4e24\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e4b\u540e\u653e\u5165\u6808</li> <li>\u91cd\u590d1,2\u76f4\u5230\u6808\u4e2d\u53ea\u5269\u4e00\u4e2a\u6570\u5b57</li> </ol>"},{"location":"leetcode/150/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/169/readme/","title":"169. \u591a\u6570\u5143\u7d20","text":""},{"location":"leetcode/169/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u7684\u591a\u6570\u5143\u7d20\u3002\u591a\u6570\u5143\u7d20\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u00a0\u230a n/2 \u230b\u00a0\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>\u8f93\u5165: [3,2,3]\n\u8f93\u51fa: 3\n</code></pre> <p>\u793a\u4f8b\u00a02:</p> <pre><code>\u8f93\u5165: [2,2,1,1,1,2,2]\n\u8f93\u51fa: 2\n</code></pre>"},{"location":"leetcode/169/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u4f7f\u7528 currNum \u8bb0\u5f55\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57\uff0c \u4f7f\u7528 count \u8bb0\u5f55\u51fa\u73b0\u7684\u6b21\u6570\u3002</li> <li>\u904d\u5386\u6570\u7ec4\u7b2c\u4e00\u904d\uff0c \u5982\u679c\u9047\u5230 currNum, count++, \u5982\u679c\u9047\u5230\u4e0d\u662f currNum, count--. \u5982\u679c count == 0, currNum \u8bbe\u7f6e\u6210\u65b0\u7684\u5143\u7d20\uff0c count = 1.</li> <li>\u904d\u5386\u6570\u7ec4\u7b2c\u4e8c\u904d\uff0c \u7edf\u8ba1currNum \u51fa\u73b0\u7684\u6b21\u6570</li> </ol> <p>Python</p>"},{"location":"leetcode/17/readme/","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":""},{"location":"leetcode/17/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002</p> <p>\u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002</p> <p></p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165\uff1a\"23\"\n\u8f93\u51fa\uff1a[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n</code></pre> <p>\u8bf4\u660e: \u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p>"},{"location":"leetcode/17/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>2 \u5bf9\u5e94 \"abc\", 3 \u5bf9\u5e94 \"def\", \u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u53ef\u4ee5\u7528\u4e24\u91cd\u5faa\u73af\u904d\u5386\u5f97\u5230\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u8f93\u5165\u662f\u4e0d\u786e\u5b9a\u6709\u591a\u5c11\u4e2a\u7684\uff0c\u65e0\u6cd5\u7528\u591a\u91cd\u5faa\u73af\u904d\u5386\uff0c\u8fd9\u79cd\u60c5\u51b5\u7528\u9012\u5f52\u5b9e\u73b0\u5c31\u6bd4\u8f83\u5bb9\u6613\u3002</p> <p>\u9012\u5f52\u7684\u65f6\u5019\uff0c\u51fd\u6570\u4e2d\u6709\u4e00\u4e2afor\u5faa\u73af\uff0c\u7528\u6765\u5c1d\u8bd5\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u5b57\u6bcd\u3002</p>"},{"location":"leetcode/17/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/179/readme/","title":"179. \u6700\u5927\u6570","text":""},{"location":"leetcode/179/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\uff0c\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u7684\u987a\u5e8f\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [10,2]\n\u8f93\u51fa: 210\n</code></pre> <p>\u793a\u4f8b\u00a02:</p> <pre><code>\u8f93\u5165: [3,30,34,5,9]\n\u8f93\u51fa: 9534330\n</code></pre> <p>\u8bf4\u660e: \u8f93\u51fa\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6574\u6570\u3002</p>"},{"location":"leetcode/179/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u672c\u8d28\u4e0a\u662f\u786e\u5b9a\u4e00\u79cd\u6392\u5e8f\u65f6\u6bd4\u8f83\u5927\u5c0f\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u597d\u5927\u5c0f\u4e4b\u540e\uff0c\u6392\u5e8f\uff0c\u8f93\u51fa\u3002</p> <ol> <li>\u6ce8\u610f0\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u9700\u8981\u7279\u6b8a\u5904\u7406</li> <li>\u6ce8\u610f\u7ed3\u679c\u662f\u51680\u7684\u65f6\u5019\u8f93\u51fa\u4e00\u4e2a0\uff0c\u800c\u4e0d\u80fd\u8f93\u51fa\u4e00\u4e320</li> </ol> <pre><code>#define N 100 // \u6570\u5b57\u7684\u6700\u5927\u4f4d\u6570\n#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))\n\nint num2strSubProcess(char *str, int end, int num)\n{\n    int left = end;\n    int right;\n    char tmp;\n\n    // 0 \u9700\u8981\u7279\u6b8a\u5904\u7406\n    if (num == 0) {\n        str[end++] = '0';\n        return end;\n    }\n\n    while (num) {\n        str[end++] = (char)(num % 10 + '0');\n        num = num / 10;\n    }\n\n    right = end - 1;\n\n    while (left &lt; right) {\n        tmp = str[left];\n        str[left] = str[right];\n        str[right] = tmp;\n        left += 1;\n        right -= 1;\n    }\n\n    return end;\n}\n\nvoid num2str(char *str, int num1, int num2)\n{\n    int end = 0;\n\n    end = num2strSubProcess(str, end, num1);\n    end = num2strSubProcess(str, end, num2);\n    str[end] = '\\0';\n\n    return;\n}\n// num1 &lt; num2 \u5b9e\u73b0\u672c\u9898\u7684\u5173\u952e\u6bd4\u8f83\u903b\u8f91\n// \u6bd4\u8f83\u7684\u65b9\u6cd5\u662f\u6bd4\u8f83 num1num2 \u548c num2num1 \u7684\u5927\u5c0f\nint less(int num1, int num2)\n{\n    char *str1 = (char*)malloc(sizeof(char) * N * 2);\n    char *str2 = (char*)malloc(sizeof(char) * N * 2);\n    int i, n;\n\n    num2str(str1, num1, num2);\n    num2str(str2, num2, num1);\n    n = strlen(str1);\n\n    for (i = 0; i &lt; n; i++) {\n        if (str1[i] &lt; str2[i]) {\n            return 1;\n        } else if (str1[i] &gt; str2[i]) {\n            return 0;\n        }\n    }\n\n    return 0;\n}\nint partition(int *nums, int begin, int end)\n{\n    int x, i, j, tmp;\n\n    x = nums[end];\n    i = begin - 1;\n    for (j = begin; j &lt; end; j++) {\n        if (less(nums[j], x) == 1) {\n            i = i + 1;\n            tmp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = tmp;\n        }\n    }\n\n    tmp = nums[i + 1];\n    nums[i + 1] = nums[end];\n    nums[end] = tmp;\n\n    return i + 1;\n}\n\nvoid sorted(int *nums, int begin, int end)\n{\n    int mid;\n\n    if (begin &gt; end) {\n        return;\n    }\n\n    mid = partition(nums, begin, end);\n    sorted(nums, begin, mid - 1);\n    sorted(nums, mid + 1, end);\n    return;\n}\n\nchar * largestNumber(int* nums, int numsSize){\n    int i, num, left, right, digit;\n    char tmp;\n    char *ans;\n    int ansEnd = 0;\n\n    if (numsSize == 0 || nums == NULL) {\n        return NULL;\n    }\n\n    // \u5148\u6309\u7167\u89c4\u5219\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    sorted(nums, 0, numsSize - 1);\n\n    ans = (char*)malloc(sizeof(char) * numsSize * N);\n\n    // \u4f9d\u6b21\u53d6\u51fa\u6bcf\u4e2a\u6570\u5b57\uff0c\u8f6c\u5316\u6210\u5b57\u7b26\u62fc\u63a5\u5728\u4e00\u8d77\n    for (i = numsSize - 1; i &gt;= 0; i--) {\n        num = nums[i];\n\n        // 0 \u9700\u8981\u7279\u6b8a\u5904\u7406\n        if (num == 0) {\n            ans[ansEnd++] = '0';\n            continue;\n        }\n\n        left = ansEnd;\n        right = left;\n        while (num) {\n            digit = num % 10;\n            num = num / 10;\n            ans[right++] = (char)(digit + '0');\n        }\n        ansEnd = right;\n        right -= 1;\n        while (left &lt; right) {\n            tmp = ans[left];\n            ans[left] = ans[right];\n            ans[right] = tmp;\n            left++;\n            right--;\n        }\n    }\n    ans[ansEnd] = '\\0';\n\n    // \u5982\u679c ans \u4e2d\u5168\u90e8\u90fd\u662f0 \u7f29\u5199\u6210\u4e00\u4e2a0\n    int flag = 1;\n    for (i = 0; i &lt; ansEnd; i++) {\n        if (ans[i] != '0') {\n            flag = 0;\n            break;\n        }\n    }\n    if (flag) {\n        ans[0] = '0';\n        ans[1] = '\\0';\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/18/readme/","title":"18. \u56db\u6570\u4e4b\u548c","text":""},{"location":"leetcode/18/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u00a0n \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u00a0nums\u00a0\u548c\u4e00\u4e2a\u76ee\u6807\u503c\u00a0target\uff0c\u5224\u65ad\u00a0nums\u00a0\u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc\u00a0\u548c d\u00a0\uff0c\u4f7f\u5f97\u00a0a + b + c + d\u00a0\u7684\u503c\u4e0e\u00a0target\u00a0\u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002</p> <p>\u6ce8\u610f\uff1a</p> <p>\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</code></pre>"},{"location":"leetcode/18/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u56fa\u5b9a\u4e24\u4e2a\u6570\u5b57\uff0c\u53e6\u5916\u4e24\u4e2a\u6570\u5b57\u4f7f\u7528\u53cc\u6307\u9488\u903c\u8fd1</p> <pre><code>class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        sns = sorted(nums)\n        n = len(sns)\n        if n &lt; 4:\n            return []\n\n        i = 0\n        ans = []\n        while i &lt; n - 3:\n            if i &gt; 0 and sns[i] == sns[i-1]:\n                i += 1\n                continue\n\n            j = i + 1\n            while j &lt; n - 2:\n                if j &gt; i+1 and sns[j] == sns[j-1]:\n                    j += 1\n                    continue\n\n                p = j + 1\n                q = n - 1\n                while p &lt; q:\n                    tmp = sns[p] + sns[q] + sns[i] + sns[j]\n                    if tmp == target:\n                        if p == j + 1 or p &gt; j + 1 and sns[p] != sns[p-1]:\n                            ans.append([sns[i],sns[j],sns[p], sns[q]])\n                        p += 1\n                    elif tmp &lt; target:\n                        p += 1\n                    else:\n                        q -= 1\n                j += 1\n            i += 1\n        return ans\n</code></pre>"},{"location":"leetcode/187/readme/","title":"187. \u91cd\u590d\u7684DNA\u5e8f\u5217","text":""},{"location":"leetcode/187/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6240\u6709 DNA \u90fd\u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a\u201cACGAATTCCG\u201d\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002</p> <p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7\u4e00\u6b21\u7684 10 \u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\uff1as = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n\u8f93\u51fa\uff1a[\"AAAAACCCCC\", \"CCCCCAAAAA\"]\n</code></pre>"},{"location":"leetcode/187/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6bcf10\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u952e\u54c8\u5e0c\u8bb0\u5f55\uff0c\u5982\u679c\u627e\u5230\u91cd\u590d\u7684\u5c31\u8f93\u51fa\u3002</p>"},{"location":"leetcode/187/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/19/readme/","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9","text":""},{"location":"leetcode/19/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c\u00a0n\u00a0\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>  \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1-&gt;2-&gt;3-&gt;4-&gt;5, \u548c n = 2.\n\n  \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1-&gt;2-&gt;3-&gt;5.\n  \u8bf4\u660e\uff1a\n\n  \u7ed9\u5b9a\u7684 n\u00a0\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002\n</code></pre> <p>\u8fdb\u9636\uff1a</p> <pre><code>  \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f\n</code></pre>"},{"location":"leetcode/19/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ul> <li> <p>\u5e38\u89c4\u89e3\u6cd5 \u5047\u8bbe\u94fe\u8868\u4e3alink, \u8282\u70b9\u4e2a\u6570\u4e3aN\uff0c\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\uff0c\u5c31\u662f\u6b63\u6570\u7b2c(N-n+1)\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8be5\u8282\u70b9\uff0c\u9700\u8981\u627e\u5230\u5b83\u524d\u9762\u7684\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7b2c(N-n)\u4e2a\u8282\u70b9\u3002 \u5982\u679c(N-n)==0, \u76f4\u63a5\u7528\u5934\u7ed3\u70b9\u6307\u5411\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u5373\u5220\u9664\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9\uff1b \u5176\u4ed6\u60c5\u51b5\uff0c\u627e\u5230\u7b2c(N-n)\u8282\u70b9\uff0cnext\u6307\u9488\u6307\u5411\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff1b</p> </li> <li> <p>\u4e00\u6b21\u904d\u5386\u7684\u89e3\u6cd5 \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u95f4\u9694n, \u7136\u540e\u4e00\u8d77\u79fb\u52a8\u4e24\u4e2a\u6307\u9488\uff0c\u524d\u9762\u7684\u5230\u7ed3\u5c3e\uff0c\u540e\u9762\u7684\u6307\u9488\u6b63\u597d\u6307\u5411\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u524d\u4e00\u4e2a\u3002</p> </li> </ul> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n){\n    struct ListNode *g;\n    struct ListNode *c;\n    struct ListNode *p;\n\n    g = (struct ListNode*)malloc(sizeof(struct ListNode));\n    g-&gt;next = head;\n\n    if (head == NULL) {\n        return head;\n    }\n\n    // \u63d0\u524d\u8d70n+1\u6b65\n    n = n + 1;\n    c = g;\n    while (c &amp;&amp; n) {\n        c = c-&gt;next;\n        n = n - 1;\n    }\n\n    // \u4e00\u8d77\u8d70\u77e5\u9053c\u4e3a\u7a7a\n    p = g;\n    while (c) {\n        c = c-&gt;next;\n        p = p-&gt;next;\n    }\n\n    // p\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e3a\u8981\u5220\u9664\u7684\u8282\u70b9\n    p-&gt;next = p-&gt;next-&gt;next;\n    return g-&gt;next;\n}\n</code></pre>"},{"location":"leetcode/198/readme/","title":"198. \u6253\u5bb6\u52ab\u820d","text":""},{"location":"leetcode/198/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a[1,2,3,1]\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002\n     \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1a[2,7,9,3,1]\n\u8f93\u51fa\uff1a12\n\u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002\n     \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>0 &lt;= nums.length &lt;= 100\n0 &lt;= nums[i] &lt;= 400\n</code></pre>"},{"location":"leetcode/198/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u904d\u5386\u6240\u6709\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u5927\u90e8\u5206\u7528\u4f8b\uff0c\u4f46\u662f\u6700\u540e\u4f1a\u8d85\u65f6\u3002</p> <pre><code>#define MAX(a,b) ((a) &gt; (b)) ? (a) : (b)\nint maxv = 0;\n\nvoid dfs(int *nums, int numsSize, int i, int tmpMax)\n{\n    if (i &gt;= numsSize) {\n        maxv = MAX(maxv, tmpMax);\n        return;\n    }\n\n    // \u9009\u62e9i\n    dfs(nums, numsSize, i + 2, tmpMax + nums[i]);\n\n    // \u4e0d\u9009\u62e9i\n    dfs(nums, numsSize, i + 1, tmpMax);\n}\nint rob(int* nums, int numsSize){\n    int ans = 0;\n    maxv = 0;\n    if (numsSize &lt;= 0) {\n        return maxv;\n    }\n    dfs(nums, numsSize, 0, ans);\n    return maxv;\n}\n</code></pre> <p>\u9012\u5f52\u6d88\u8017\u65f6\u95f4\u592a\u591a\uff0c\u53ea\u9002\u5408N\u8f83\u5c0f\u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff0c\u8ba1\u7b97\u4ee5\u6bcf\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u60c5\u51b5\u4e0b\u5077\u7684\u6700\u591a\u7684\u94b1\uff0c\u7136\u540e\u53d6\u6700\u5927\u503c\u3002</p> <pre><code>#define MAX(a,b) ((a) &gt; (b)) ? (a) : (b)\nint rob(int* nums, int numsSize){\n    int *dp;\n    int maxv = 0;\n    int premax = 0;\n    int i;\n\n    if (numsSize &lt;= 0) {\n        return 0;\n    }\n    if (numsSize == 1) {\n        return nums[0];\n    }\n    if (numsSize == 2) {\n        return MAX(nums[0],nums[1]);\n    }\n    dp = (int*)malloc(sizeof(int) * numsSize);\n    dp[0] = nums[0];\n    dp[1] = nums[1];\n    premax = nums[0];\n    maxv = MAX(nums[0], nums[1]);\n\n    for (i = 2; i &lt; numsSize; i++) {\n        dp[i] = premax + nums[i];\n        premax = MAX(premax, dp[i-1]);\n        maxv = MAX(maxv, dp[i]);\n    }\n    return maxv;\n}\n</code></pre>"},{"location":"leetcode/2/readme/","title":"Readme","text":""},{"location":"leetcode/2/readme/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":""},{"location":"leetcode/2/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u51fa\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u8f93\u5165\uff1a(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n\u8f93\u51fa\uff1a7 -&gt; 0 -&gt; 8\n\u539f\u56e0\uff1a342 + 465 = 807\n</code></pre>"},{"location":"leetcode/2/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/2/readme/#_3","title":"\u9898\u89e3","text":"<p>\u904d\u5386\u76f8\u52a0\u6ce8\u610f\u8fdb\u4f4d\u5373\u53ef\u3002</p>"},{"location":"leetcode/2/readme/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        if (l1 == nullptr) return l2;\n        if (l2 == nullptr) return l1;\n\n        ListNode *iter = new ListNode(-1);\n        ListNode *head = iter;\n        int carry = 0;\n        while (l1 != nullptr and l2 != nullptr)\n        {\n            carry = l1-&gt;val + l2-&gt;val + carry;\n            ListNode *node = new ListNode(carry % 10);\n            iter-&gt;next = node;\n            iter = node;\n            carry = carry / 10;\n            l1 = l1-&gt;next;\n            l2 = l2-&gt;next;\n        }\n        while (l1 != nullptr)\n        {\n            carry = l1-&gt;val + carry;\n            ListNode *node = new ListNode(carry % 10);\n            iter-&gt;next = node;\n            iter = node;\n            carry = carry / 10;\n            l1 = l1-&gt;next;\n\n        }\n        while (l2 != nullptr)\n        {\n            carry = l2-&gt;val + carry;\n            ListNode *node = new ListNode(carry % 10);\n            iter-&gt;next = node;\n            iter = node;\n            carry = carry / 10;\n            l2 = l2-&gt;next;\n        }\n        if (carry &gt; 0)\n        {\n            ListNode *node = new ListNode(carry);\n            iter-&gt;next = node;\n        }\n        return head-&gt;next;\n    }\n};\n</code></pre>"},{"location":"leetcode/2/readme/#python","title":"python","text":"<pre><code>class Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode:\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n\n        carry = 0\n        head = ListNode(-1)\n        iters = head\n        while(l1 and l2):\n            carry = l1.val + l2.val + carry\n            node = ListNode(carry % 10)\n            carry = carry // 10\n            iters.next = node\n            iters = node\n            l1 = l1.next\n            l2 = l2.next\n        while(l1):\n            carry = l1.val + carry\n            node = ListNode(carry % 10)\n            carry = carry // 10\n            iters.next = node\n            iters = node\n            l1 = l1.next\n        while(l2):\n            carry = l2.val + carry\n            node = ListNode(carry % 10)\n            carry = carry // 10\n            iters.next = node\n            iters = node\n            l2 = l2.next\n        if carry &gt; 0:\n            node = ListNode(carry)\n            iters.next = node\n\n        return head.next\n</code></pre>"},{"location":"leetcode/200/readme/","title":"200. \u5c9b\u5c7f\u6570\u91cf","text":""},{"location":"leetcode/200/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u00a0'1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002</p> <p>\u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165:\n11110\n11010\n11000\n00000\n\u8f93\u51fa:\u00a01\n</code></pre> <p>\u793a\u4f8b\u00a02:</p> <pre><code>\u8f93\u5165:\n11000\n11000\n00100\n00011\n\u8f93\u51fa: 3\n\u89e3\u91ca: \u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u3002\n</code></pre>"},{"location":"leetcode/200/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u4f7f\u7528\u5927\u5c0f\u4e3a m * n \u7684\u5e76\u67e5\u96c6\u8868\u793a\u6700\u7ec8\u7684\u5c9b\u5c7f\u6570\u91cf</li> <li>\u904d\u5386\u77e9\u9635\u6bcf\u4e2a\u5143\u7d20\uff0c\u68c0\u67e5\u5176\u5de6\u4fa7\uff0c\u4e0a\u4fa7\u662f\u5426\u4e0e1\u76f8\u8fde\uff0c\u5982\u679c\u76f8\u90bb\uff0c\u5408\u5e76\u5230\u4e00\u7ec4\u4e2d</li> <li>\u6700\u540e\u7edf\u8ba1\u5e76\u67e5\u96c6\u4e2d\u96c6\u5408\u7684\u6570\u91cf</li> </ol> <p>python</p>"},{"location":"leetcode/207/readme/","title":"207. \u8bfe\u7a0b\u8868","text":""},{"location":"leetcode/207/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee numCourse \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a\u00a00\u00a0\u5230\u00a0numCourse-1 \u3002</p> <p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002\u00a0\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec\uff1a[0,1]</p> <p>\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: 2, [[1,0]] \n\u8f93\u51fa: true\n\u89e3\u91ca:\u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002\n\u793a\u4f8b 2:\n\n\u8f93\u5165: 2, [[1,0],[0,1]]\n\u8f93\u51fa: false\n\u89e3\u91ca:\u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531 \u8fb9\u7f18\u5217\u8868 \u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f \u90bb\u63a5\u77e9\u9635 \u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002\n\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002\n1 &lt;=\u00a0numCourses &lt;= 10^5\n</code></pre>"},{"location":"leetcode/207/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5904\u7406\u6709\u5411\u56fe\uff0c\u770b\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u73af\u8def</p> <p>Python</p>"},{"location":"leetcode/208/readme/","title":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)","text":""},{"location":"leetcode/208/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b\u00a0insert,\u00a0search, \u548c\u00a0startsWith\u00a0\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>Trie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // \u8fd4\u56de true\ntrie.search(\"app\");     // \u8fd4\u56de false\ntrie.startsWith(\"app\"); // \u8fd4\u56de true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // \u8fd4\u56de true\n</code></pre> <p>\u8bf4\u660e:</p> <pre><code>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd\u00a0a-z\u00a0\u6784\u6210\u7684\u3002\n\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002\n</code></pre> <p>C</p>"},{"location":"leetcode/210/readme/","title":"210. \u8bfe\u7a0b\u8868 II","text":""},{"location":"leetcode/210/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u73b0\u5728\u4f60\u603b\u5171\u6709 n \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a\u00a00\u00a0\u5230\u00a0n-1\u3002</p> <p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002\u00a0\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b\u00a01 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: [0,1]</p> <p>\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002</p> <p>\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>\u8f93\u5165: 2, [[1,0]] \n\u8f93\u51fa: [0,1]\n\u89e3\u91ca:\u00a0\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a [0,1] \u3002\n\u793a\u4f8b\u00a02:\n\n\u8f93\u5165: 4, [[1,0],[2,0],[3,1],[3,2]]\n\u8f93\u51fa: [0,1,2,3] or [0,2,1,3]\n\u89e3\u91ca:\u00a0\u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002\n\u00a0    \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f\u00a0[0,1,2,3] \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f\u00a0[0,2,1,3] \u3002\n\u8bf4\u660e:\n\n\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531\u8fb9\u7f18\u5217\u8868\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1\u56fe\u7684\u8868\u793a\u6cd5\u3002\n\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002\n</code></pre> <p>\u63d0\u793a:</p> <pre><code>\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002\n\u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002\n\u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7\u00a0BFS\u00a0\u5b8c\u6210\u3002\n</code></pre>"},{"location":"leetcode/210/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5148\u5224\u65ad\u662f\u5426\u6709\u73af\uff0c\u5982\u679c\u6ca1\u6709\u73af\u8def\uff0c\u8fdb\u884c\u62d3\u6251\u6392\u5e8f</p> <p>Python</p>"},{"location":"leetcode/212/readme/","title":"212. \u5355\u8bcd\u641c\u7d22 II","text":""},{"location":"leetcode/212/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u00a0board\u00a0\u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 words\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002</p> <p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: \nwords = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\n[\n['o','a','a','n'],\n['e','t','a','e'],\n['i','h','k','r'],\n['i','f','l','v']\n]\n\n\u8f93\u51fa:\u00a0[\"eat\",\"oath\"]\n\u8bf4\u660e:\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd a-z\u00a0\u7ec4\u6210\u3002\n</code></pre> <p>\u63d0\u793a:</p> <pre><code>\u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f\n\u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09\u3002\n</code></pre>"},{"location":"leetcode/212/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/212/readme/#_3","title":"\u65b9\u6cd5\u4e00","text":"<p>\u66b4\u529b\u67e5\u627e\uff0c \u5bf9\u6bcf\u4e00\u4e2a\u5355\u8bcd\uff0c \u4ece\u77e9\u9635\u4e2d\u627e\u5230\u6240\u6709\u5f00\u5934\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff0c\u4ee5\u6b64\u4e3a\u8d77\u70b9\u5411\u56db\u4e2a\u65b9\u5411\u641c\u7d22\u3002</p> <p>C</p>"},{"location":"leetcode/212/readme/#_4","title":"\u65b9\u6cd5\u4e8c","text":"<p>\u5bf9 words \u5efa\u7acb\u524d\u7f00\u6811\uff0c \u7136\u540e\u904d\u5386\u524d\u7f00\u6811\u5728\u4e8c\u7ef4\u77e9\u9635\u4e2d\u641c\u7d22\u3002</p> <p>C</p>"},{"location":"leetcode/215/readme/","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20","text":""},{"location":"leetcode/215/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [3,2,1,5,6,4] \u548c k = 2\n\u8f93\u51fa: 5\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [3,2,3,1,2,4,5,5,6] \u548c k = 4\n\u8f93\u51fa: 4\n</code></pre> <p>\u8bf4\u660e:</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 \u2264 k \u2264 \u6570\u7ec4\u7684\u957f\u5ea6\u3002</p>"},{"location":"leetcode/224/readme/","title":"224. \u57fa\u672c\u8ba1\u7b97\u5668","text":""},{"location":"leetcode/224/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p> <p>\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5305\u542b\u5de6\u62ec\u53f7\u00a0(\u00a0\uff0c\u53f3\u62ec\u53f7\u00a0)\uff0c\u52a0\u53f7\u00a0+\u00a0\uff0c\u51cf\u53f7\u00a0-\uff0c\u975e\u8d1f\u6574\u6570\u548c\u7a7a\u683c\u00a0\u00a0\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: \"1 + 1\"\n\u8f93\u51fa: 2\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: \" 2-1 + 2 \"\n\u8f93\u51fa: 3\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: \"(1+(4+5+2)-3)+(6+8)\"\n\u8f93\u51fa: 23\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <pre><code>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002\n\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 eval\u3002\n</code></pre>"},{"location":"leetcode/224/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6309\u7167\u5b57\u7b26\u4e32\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u6210\u89e3\u6790\uff1a</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nchar *substr(char *s, int start, int end)\n{\n    char *ans = (char*)malloc(sizeof(char) * (end - start + 2));\n    int ansEnd = 0;\n    for (int i = start; i &lt; end; i++) {\n        ans[ansEnd++] = s[i];\n    }\n    ans[ansEnd++] = '\\0';\n    return ans;\n}\nint eval(char *s)\n{\n    if (s == NULL) return 0;\n    const int n = strlen(s);\n    int num1 = 0;\n    char op = '+';\n    int num2;\n    int start = 0;\n    int end = 0;\n    while (end &lt; n) {\n        while (start &lt; n &amp;&amp; s[start] == ' ') start++;\n        if (start &gt;= n) return 0;\n        end = start;\n        if (s[start] &lt; '0' || s[start] &gt; '9') printf(\"label1.\");\n        while (s[end] &gt;= '0' &amp;&amp; s[end] &lt;= '9') end++;\n        char *num2str = substr(s, start, end); printf(\"parse str:%s\\n\", num2str);\n        int num2 = atoi(num2str); printf(\"compute: %d %c %d = \\n\", num1, op, num2);\n\n        num1 = (op == '+' ? num1 + num2 : num1 - num2);\n\n        start = end;\n        while (start &lt; n &amp;&amp; s[start] == ' ') start++;\n        if (s[start] == '+' || s[start] == '-') op = s[start];\n        else printf(\"label2.\\n\");\n\n        // \u68c0\u6d4b\u662f\u5426\u6709\u8fde\u7eed\u7684\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u8d1f\u6570\u7684\u60c5\u51b5\n        int tmps = start + 1;\n        while (tmps &lt; n &amp;&amp; s[tmps] == ' ') tmps++;\n        if (tmps &gt;= n) printf(\"lable4.\\n\");\n        if (s[tmps] == '-') {\n            if (op == '+') op = '-';\n            else if (op == '-') op = '+';\n            start = tmps + 1;\n            end = start;\n        } else {\n            start = start + 1;\n            end = start;\n        }\n    }\n    return num1;\n}\n\nchar *toStrWithNegtive(int n)\n{\n    char *ans = (char*)malloc(sizeof(char) * 100);\n    int ansEnd = 0;\n    if (n == 0) {\n        ans[ansEnd++] = '0';\n    } else if (n &lt; 0) {\n        n = -n;\n        ans[ansEnd++] = '-';\n    }\n    int start = ansEnd;\n    while (n) {\n        ans[ansEnd++] = n % 10 + '0';\n        n = n / 10;\n    }\n    ans[ansEnd] = '\\0';\n    int end = ansEnd - 1;\n    char tmp;\n    while (start &lt; end) {\n        tmp = ans[start];\n        ans[start] = ans[end];\n        ans[end] = tmp;\n        start++;\n        end--;\n    }\n    return ans;\n}\nint calculate(char *s)\n{\n    if (s == NULL) return 0;\n    const int n = strlen(s);\n\n    char *stack = (char*)malloc(sizeof(char) *(strlen(s) + 10));\n    int top = 0;\n    for (int i = 0; i &lt; n; i++) {\n        if (s[i] != ')') {\n            stack[top++] = s[i];\n        } else {\n            int start = i - 1;\n            while (start &gt;= 0 &amp;&amp; stack[start] != '(') start--;\n            if (start &lt; 0) printf(\"label3.\");\n            char *cc = substr(stack, start + 1, top); printf(\"parsed cc: %s\\n\", cc);\n            int tmpnum = eval(cc); printf(\"parsed cc2:%d\\n\", tmpnum);\n            top = start;\n            char *tmpstr = toStrWithNegtive(tmpnum);\n            for (int k = 0; k &lt; strlen(tmpstr); k++) {\n                stack[top++] = tmpstr[k];\n            }\n        }\n    }\n    stack[top] = '\\0'; printf(\"final stack:%s\\n\", stack);\n    return eval(stack);\n}\n</code></pre> <p>\u5982\u679c\u7b26\u53f7\u5305\u542b\u7684\u518d\u591a\u4e00\u4e9b\uff0c\u6dfb\u52a0\u62ec\u53f7\uff0c\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e4b\u540e\uff0c\u7eaf\u89e3\u6790\u5b57\u7b26\u4e32\u53ef\u80fd\u8fc7\u4e8e\u7e41\u7410\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5148\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u5229\u7528\u6808\u6c42\u89e3\u6700\u7ec8\u7684\u7ed3\u679c\u3002</p>"},{"location":"leetcode/229/readme/","title":"229. \u6c42\u4f17\u6570 II","text":""},{"location":"leetcode/229/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a\u00a0n\u00a0\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7\u00a0\u230a n/3 \u230b\u00a0\u6b21\u7684\u5143\u7d20\u3002</p> <p>\u8bf4\u660e: \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>\u8f93\u5165: [3,2,3]\n\u8f93\u51fa: [3]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [1,1,1,3,3,2,2,2]\n\u8f93\u51fa: [1,2]\n</code></pre>"},{"location":"leetcode/229/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8d85\u8fc7 n/3 \u7684\u6570\u5b57\u6700\u591a\u53ea\u67092\u4e2a\uff0c \u5f53\u7136\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\uff0c\u6216\u8005\u6ca1\u6709\u3002</p> <ol> <li>\u4f7f\u7528 num1, num2 \u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u6570\u5b57\uff0c count1, count2 \u5206\u522b\u8bb0\u5f55\u51fa\u73b0\u6b21\u6570</li> <li>\u7b2c\u4e00\u904d\u904d\u5386\u6570\u7ec4\uff0c if nums[i] == num1: count1++, if nums[i] == num2: count2++ \u5982\u679c\u548cnum1, num2\u90fd\u4e0d\u540c\uff0c if count1 == 0: num1 = nums[i], if count2 == 0: num2 = nums[i] \u5982\u679ccount1, count2\u90fd\u4e0d\u4e3a0\uff0c count1, count2 \u540c\u65f6 -1, \u8868\u793a\u62b5\u6d88\u4e00\u4e2a\u3002</li> <li>\u7b2c\u4e8c\u6b21\u904d\u5386\u6570\u7ec4\uff0c \u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\uff0c\u8f93\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n/3 \u7684\u6570\u5b57</li> </ol> <p>\u6ce8\u610f\uff0c\u8fd9\u91cc num1, num2 \u53ef\u80fd\u662f\u540c\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>Python</p>"},{"location":"leetcode/23/readme/","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868","text":""},{"location":"leetcode/23/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165:\n[\n1-&gt;4-&gt;5,\n1-&gt;3-&gt;4,\n2-&gt;6\n]\n\u8f93\u51fa: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre>"},{"location":"leetcode/23/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u4e00\u4e2a\u6700\u5c0f\u5806\u7ef4\u62a4K\u4e2a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6bcf\u6b21\u4ece\u5806\u9876\u53d6\u4e00\u4e2a\u8282\u70b9\u5e76\u628a\u4e0b\u4e00\u4e2a\u8282\u70b9\u5165\u5806\uff0c\u8c03\u6574\u4e4b\u540e\u7ee7\u7eed\u4e0b\u4e00\u8f6e\u3002</p>"},{"location":"leetcode/23/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/239/readme/","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c","text":""},{"location":"leetcode/239/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a\u00a0k\u00a0\u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k\u00a0\u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002</p> <p>\u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002</p> <p>\u8fdb\u9636\uff1a</p> <p>\u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: nums = [1,3,-1,-3,5,3,6,7], \u548c k = 3\n\u8f93\u51fa: [3,3,5,5,6,7] \n\u89e3\u91ca:\n\n  \u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e                \u6700\u5927\u503c\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= nums.length &lt;= 10^5\n-10^4\u00a0&lt;= nums[i]\u00a0&lt;= 10^4\n1 &lt;= k\u00a0&lt;= nums.length\n</code></pre>"},{"location":"leetcode/239/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/239/readme/#_3","title":"\u65b9\u6cd5\u4e00","text":"<p>\u66b4\u529b\u89e3\u51b3\u65b9\u6cd5\uff0c \u6ed1\u52a8\u7a97\u53e3\uff0c \u6bcf\u6b21\u6ed1\u51fa\u4e00\u4e2a\uff0c\u6ed1\u5165\u4e00\u4e2a\uff0c \u770b\u6ed1\u51fa\u7684\u662f\u5426\u662f\u6700\u5927\u503c\uff0c\u5982\u679c\u6ed1\u51fa\u7684\u4e0d\u662f\u6700\u5927\u503c\uff0c\u6bd4\u8f83\u6ed1\u5165\u5143\u7d20\u548c\u6700\u5927\u503c\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u6700\u5927\u503c\uff1b \u5982\u679c\u6ed1\u51fa\u7684\u662f\u6700\u5927\u503c\uff0c \u65b0\u7684\u6700\u5927\u503c\u53ea\u80fd\u904d\u5386\u4e00\u904d\u5f97\u5230\uff0c\u8fd9\u91cc\u4f1a\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u662f\u7ebf\u6027\u7684\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u904d\u5386\u5f97\u5230\u6700\u5927\u503c, \u65f6\u95f4\u590d\u6742\u5ea6\u662f O(k) * (n - k)\u3002</p> <p><code>python class Solution:     def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:         n = len(nums)         maxv = max(nums[0:k])         ans = [maxv]         for i in range(1, n - k + 1):             if nums[i - 1] != maxv:                 if nums[i + k - 1] &gt; maxv:                     maxv = nums[i + k - 1]             else:                 maxv = max(nums[i: i + k])             ans.append(maxv)         return ans</code></p> <p>### \u65b9\u6cd5\u4e8c</p> <p>\u5982\u679c\u4f7f\u7528\u5927\u5c0f\u4e3aK\u7684\u5806\uff0c\u6bcf\u6b21\u5efa\u7acb\u5806 O(K), \u53d6\u51fa\u6700\u5927\u503c O(1), \u5faa\u73af n-k+1 \u6b21\uff0c \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nk, \u4e0e\u66b4\u529b\u65b9\u6cd5\u7684\u590d\u6742\u5ea6\u4e00\u6837\uff0c\u4f46\u662f\u6700\u540e\u4e00\u4e2a\u7528\u4f8b\u8fc7\u4e0d\u4e86\u3002</p> <p><code>python  import heapq class Solution:     def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:         MAX_NUM = 100         n = len(nums)         ans = []         for i in range(n - k + 1):             heap = [(MAX_NUM - num, num) for num in nums[i : i + k]]             heapq.heapify(heap)             ans.append(heapq.heappop(heap)[1])         return ans</code></p> <p>17/18 cases passed (N/A)</p> <p>### \u65b9\u6cd5\u4e09</p> <p>\u4f7f\u7528\u53cc\u5411\u961f\u5217\uff0c \u5728\u961f\u5217\u9996\u7ef4\u62a4\u6700\u5927\u503c\u7684\u7d22\u5f15\uff0c \u59cb\u7ec8\u4fdd\u6301\u961f\u5217\u7684\u964d\u5e8f\u6392\u5217\u3002</p> <p>```python  from collections import deque from typing import List</p> <p>class Solution:     def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:         n = len(nums)         if n * k == 0: return []         if k == 1: return nums</p> <pre><code>    # \u521b\u5efa\u4e00\u4e2a\u53cc\u5411\u961f\u5217\uff0c \u6211\u4eec\u7528\u961f\u5217\u5934 array[0] \u7684\u4f4d\u7f6e\u5b58\u50a8\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c\u7684\u7d22\u5f15\n    # \u961f\u5217\u4ece\u5de6\u5411\u53f3\u5b58\u50a8\u5f53\u524d\u6ed1\u52a8\u7a97\u53e3\u5185\u5143\u7d20\u7684\u7d22\u5f15\u503c\uff0c\u4f46\u662f\u5e76\u4e0d\u5b58\u50a8\u6240\u6709\u7684\u503c\uff0c \u4fdd\u6301\u964d\u5e8f\u5b58\u50a8\n    # \u5728\u961f\u5217\u5c3e\u6dfb\u52a0\u5143\u7d20\u7684\u65f6\u5019\uff0c \u9996\u5148\u628a\u5e94\u8be5\u5f39\u51fa\u7684\u5143\u7d20\u90fd\u5f39\u51fa\n    # \u5e94\u8be5\u5f39\u51fa\u7684\u5143\u7d20\u5305\u62ec\uff0c 1. \u6ed1\u52a8\u51fa\u7a97\u53e3\u7684\u5143\u7d20\uff1b 2. \u6bd4\u5c06\u8981\u52a0\u5165\u7684\u5143\u7d20\u5c0f\u7684\u5143\u7d20\n    array = deque()\n    maxIndex = 0\n    for i in range(k):\n        # array \u975e\u7a7a\u7684\u65f6\u5019\u9996\u5148\u5f39\u51fa\u6bd4 nums[i] \u5c0f\u7684\u5143\u7d20\n        if array:\n            while array and nums[ array[-1] ] &lt; nums[i]:\n                array.pop()\n        # \u4ece\u961f\u5c3e\u52a0\u5165\u961f\u5217\n        array.append(i)\n        if nums[i] &gt; nums[maxIndex]:\n            maxIndex = i\n    ans = [ nums[maxIndex] ]\n\n    # \u5904\u7406\u5143\u7d20 [k, n-1]\n    for i in range(k, n):\n        # \u5982\u679c\u961f\u9996\u7684\u5143\u7d20\u5df2\u7ecf\u4f4d\u4e8e\u6ed1\u52a8\u7a97\u53e3\u4e4b\u5916\u4e86\uff0c\u5f39\u51fa\u5b83\n        # \u8fd9\u91cc\u65e0\u9700\u5faa\u73af\u5f39\u51fa\u662f\u56e0\u4e3a\u4e00\u6b21\u53ea\u52a0\u5165\u4e00\u4e2a\n        if array and array[0] == i - k:\n            array.popleft()\n        while array and nums[ array[-1] ] &lt; nums[i]:\n            array.pop()\n        array.append(i)\n        ans.append(nums[ array[0] ])\n    return ans\n</code></pre> <p>```</p> <p>### \u65b9\u6cd5\u56db</p> <p>\u4f7f\u7528\u5206\u5272\u533a\u57df\u7684\u524d\u5411\u548c\u540e\u5411\u6570\u7ec4</p> <p>```python  class Solution:     def maxSlidingWindow(self, nums: List[int], k: int) -&gt; List[int]:         n = len(nums)         if n * k == 0: return []         if k == 1: return nums</p> <pre><code>    # k = 3, n = 10\n    # 3, 1, 6 | 4, 8, 2 | 1, 9, 10 | 7\n    # 3, 3, 6 | 4, 8, 8 | 1, 9, 10 | 7  --&gt; left\n    # 6, 6, 6 | 8, 8, 2 | 10, 10, 10| 7 --&gt; right\n    # left[i] \u8868\u793a [(i / k) * k, i] \u533a\u95f4\u7684\u6700\u5927\u503c\n    # right[i] \u8868\u793a [i, (i/k + 1)*k - 1] \u533a\u95f4\u7684\u6700\u5927\u503c\n    # \u8bbe [i, j] \u4e3a\u533a\u95f4\u5927\u5c0f\u4e3a k \u7684\u533a\u95f4\uff0c \u5219\u8be5\u533a\u95f4\u7684\u6700\u5927\u503c\n    # \u5982\u679c i = (i / k) * k, j = (i/k + 1)*k - 1, \u6b63\u597d\u4f4d\u4e8e\u533a\u95f4\u5185\uff0cmax([i, j]) = left[j] = right[i]\n    # \u5982\u679c [i, j] \u8de8\u8d8a k \u533a\u95f4\uff0c \u4f8b\u5982 i = 1, j = 3, \u5219 max([1, 3]) = max( max([1,2]) , max([3,3]) )\n    # \u800c max([1, 2]) = right[i], max([3,3]) = left[j]\n    # \u7efc\u4e0a\uff0c \u6700\u540e\u7684\u7ed3\u679c\u603b\u662f\u7b49\u4e8e max(left[j], right[i])\n    left = [0] * n\n    for i in range(n):\n        if i % k == 0:\n            left[i] = nums[i]\n        else:\n            if nums[i] &gt; left[i - 1]:\n                left[i] = nums[i]\n            else:\n                left[i] = left[i - 1]\n\n    right = [0] * n\n    for i in reversed(range(n)):\n        if (i + 1) % k == 0:\n            right[i] = nums[i]\n        else:\n            if i + 1 &gt;= n:\n                right[i] = nums[i]\n                continue\n            if nums[i] &gt; right[i + 1]:\n                right[i] = nums[i]\n            else:\n                right[i] = right[i + 1]\n\n    ans = []\n    for i in range(n - k + 1):\n        j = i + k - 1\n        maxv = max(right[i], left[j])\n        ans.append(maxv)\n    return ans\n</code></pre> <p>```</p>"},{"location":"leetcode/24/readme/","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":""},{"location":"leetcode/24/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002</p> <p>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u7ed9\u5b9a 1-&gt;2-&gt;3-&gt;4, \u4f60\u5e94\u8be5\u8fd4\u56de 2-&gt;1-&gt;4-&gt;3.\n</code></pre>"},{"location":"leetcode/24/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8fd9\u4e2a\u6709\u4e2a\u66f4\u4e00\u822c\u7684\u9898\u76ee\uff0c K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868\u3002 \u5173\u952e\u662f\u638c\u63e1\u94fe\u8868\u7ffb\u8f6c\u7684\u64cd\u4f5c\u3002</p>"},{"location":"leetcode/24/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/25/readme/","title":"25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":""},{"location":"leetcode/25/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002</p> <p>k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002</p> <p>\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1-&gt;2-&gt;3-&gt;4-&gt;5\n\n\u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2-&gt;1-&gt;4-&gt;3-&gt;5\n\n\u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3-&gt;2-&gt;1-&gt;4-&gt;5\n</code></pre>"},{"location":"leetcode/25/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/25/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/263/readme/","title":"263. \u4e11\u6570","text":""},{"location":"leetcode/263/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002</p> <p>\u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570\u00a02, 3, 5\u00a0\u7684\u6b63\u6574\u6570\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: 6\n\u8f93\u51fa: true\n\u89e3\u91ca: 6 = 2 \u00d7\u00a03\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: 8\n\u8f93\u51fa: true\n\u89e3\u91ca: 8 = 2 \u00d7 2 \u00d7\u00a02\n</code></pre> <p>\u793a\u4f8b\u00a03:</p> <pre><code>\u8f93\u5165: 14\n\u8f93\u51fa: false \n\u89e3\u91ca: 14 \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570\u00a07\u3002\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <pre><code>1\u00a0\u662f\u4e11\u6570\u3002\n\u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4:\u00a0[\u22122^31,\u00a0 2^31\u00a0\u2212 1]\u3002\n</code></pre>"},{"location":"leetcode/263/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution:\n    def isUgly(self, num: int) -&gt; bool:\n        if num &lt;= 0:\n            return False\n        while num &gt; 1:\n            if num % 2 != 0 and num % 5 != 0 and num % 3 != 0:\n                return False\n            if num % 2 == 0:\n                num = num // 2\n            if num % 3 == 0:\n                num = num // 3\n            if num % 5 == 0:\n                num = num // 5\n        return True\n</code></pre> <pre><code>bool isUgly(int num){\n    if (num == 0) {\n        return false;\n    }\n    while (num % 2 == 0) {\n        num = num / 2;\n    }\n    while (num % 3 == 0) {\n        num = num / 3;\n    }\n    while (num % 5 == 0) {\n        num = num / 5;\n    }\n    if (num == 1) {\n        return true;\n    }\n    return false;\n}\n</code></pre>"},{"location":"leetcode/264/readme/","title":"264. \u4e11\u6570 II","text":""},{"location":"leetcode/264/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c n \u4e2a\u4e11\u6570\u3002</p> <p>\u4e11\u6570\u5c31\u662f\u8d28\u56e0\u6570\u53ea\u5305\u542b\u00a02, 3, 5 \u7684\u6b63\u6574\u6570\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: n = 10\n\u8f93\u51fa: 12\n\u89e3\u91ca: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002\n\u8bf4\u660e:\n\n1\u00a0\u662f\u4e11\u6570\u3002\nn\u00a0\u4e0d\u8d85\u8fc71690\u3002\n</code></pre>"},{"location":"leetcode/264/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4ece1\u5f00\u59cb\u679a\u4e3e\uff0c\u5224\u65ad\u6bcf\u4e2a\u6570\u5b57\u662f\u5426\u662f\u4e11\u6570\uff0c\u662f\u8ba1\u6570+1\uff0c \u76f4\u5230\u627e\u5230\u7b2cN\u4e2a\u4e11\u6570\u4e3a\u6b62\u3002\u8fd9\u6837\u5230\u540e\u9762\u5927\u91cf\u7684\u65f6\u95f4\u5c31\u4f1a\u6d6a\u8d39\u5728\u5224\u65ad\u662f\u5426\u662f\u4e11\u6570\u4e0a\u3002</p> <p>\u8f6c\u53d8\u601d\u8def\uff0c\u4ece\u7b2c\u4e00\u4e2a\u4e11\u6570\u5f00\u59cb\u4f9d\u6b21\u751f\u6210\u4e0b\u4e00\u4e2a\u4e11\u6570\uff0c\u8fd9\u6837\u65e0\u9700\u5224\u65ad\u662f\u5426\u662f\u4e11\u6570\uff0c\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002</p> <pre><code>class Solution:\n    def __init__(self):\n        N = 1690\n        c2, c3, c5 = 0, 0, 0 # \u5206\u522b\u6307\u54112,3,5\u4e3a\u56e0\u5b50\u7684\u6307\u9488\uff0c \u8bb0\u5f55\u4e0a\u4e00\u6b21\u7684\u4f4d\u7f6e\n        self.uglys = [1, ]\n        for i in range(1, N):\n            nextUgly = min(self.uglys[c2] * 2, self.uglys[c3] * 3, self.uglys[c5] * 5)\n            self.uglys.append(nextUgly)\n\n            if nextUgly == self.uglys[c2] * 2:\n                c2 += 1\n            if nextUgly == self.uglys[c3] * 3:\n                c3 += 1\n            if nextUgly == self.uglys[c5] * 5:\n                c5 += 1\n\n            print(self.uglys)\n            print(c2, c3, c5)\n\n    def nthUglyNumber(self, n: int) -&gt; int:\n        return self.uglys[n - 1]\n</code></pre> <p>\u5206\u6790\u4e0a\u8ff0\u8fc7\u7a0b</p> <pre><code>[1]\n |\n |\nc2\nc3\nc5\n\n[1, 2]\n |  |\n |  |\n c3 c2\n c5\n\n[1, 2, 3]\n |  |\n |  |\n c5 c2\n    c3\n\n[1, 2, 3, 4]\n |  |  |\n |  |  |\n c5 c3 c2\n\n[1, 2, 3, 4, 5]\n    |  |\n    |  |\n    c3 c2\n    c5\n\n[1, 2, 3, 4, 5, 6]\n    |  |  |\n    |  |  |\n    c5 c3 c2\n\n[1, 2, 3, 4, 5, 6, 8]\n    |  |     |\n    |  |     |\n   c5  c3    c2\n\n[1, 2, 3, 4, 5, 6, 8, 9]\n    |     |  |\n    |     |  |\n   c5     c3 c2\n</code></pre> <p>c2, c3, c5 \u5206\u522b\u8868\u793a\u4e58 2\uff0c 3\uff0c 5 \u4e58\u8fc7\u7684\u6b21\u6570\u3002</p>"},{"location":"leetcode/3/readme/","title":"Readme","text":""},{"location":"leetcode/3/readme/#3","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32","text":""},{"location":"leetcode/3/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\u8f93\u5165: \"abcabcbb\"\n\u8f93\u51fa: 3 \n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n\u793a\u4f8b 2:\n\u8f93\u5165: \"bbbbb\"\n\u8f93\u51fa: 1\n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002\n\u793a\u4f8b 3:\n\u8f93\u5165: \"pwwkew\"\n\u8f93\u51fa: 3\n\u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n     \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002\n</code></pre>"},{"location":"leetcode/3/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li> <p>\u5148\u5c1d\u8bd5\u66b4\u529b\u7684\u89e3\u6cd5\uff0c\u4ece\u7b2c\u4e00\u5b57\u7b26\u5f00\u59cb\u653e\u5165set,\u9047\u5230\u91cd\u590d\u7684\u5c31\u505c\u6b62\uff0c\u8bb0\u5f55\u5f53\u524d\u4e0d\u91cd\u590d\u7684\u6700\u5927\u5b57\u7b26\u4e2a\u6570\uff0c\u6700\u540e\u8f93\u51fa\u4e00\u4e2a\u6700\u5927\u7684\u3002</p> </li> <li> <p>\u66b4\u529b\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e24\u91cd\u5faa\u73af\uff0c\u5176\u4e2d\u6709\u5927\u91cf\u7684\u65e0\u7528\u67e5\u627e\u3002\u4ed4\u7ec6\u8003\u8651\uff0c\u5982\u679c\u626b\u63cf\u5230\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u4ece\u5de6\u4fa7\u5220\u9664\u4e00\u6837\u7684\uff0c\u7ee7\u7eed\u5411\u4e0b\u626b\u63cf\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e0d\u7528\u56de\u6eaf\uff0c\u63d0\u9ad8\u6548\u7387\u3002</p> </li> </ol>"},{"location":"leetcode/3/readme/#_3","title":"\u9898\u89e3","text":""},{"location":"leetcode/3/readme/#c","title":"C++","text":"<p>\u66b4\u529b\u89e3\u51b3\uff1a</p> <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int len = s.size();\n        set&lt;char&gt; unique;\n        int ans = 0;\n\n        for (int i = 0; i &lt; len; i ++)\n        {\n            int length;\n            for (int j = i; j &lt; len; j ++)\n            {\n                if (unique.find(s[j]) == unique.end())\n                {\n                    unique.insert(s[j]);\n                }\n                else\n                {\n                    break;\n                }\n            }\n            length = unique.size();\n            ans = ans &gt; length ? ans : length;\n            unique.clear();\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u5143\u7d20\u4f4d\u7f6e\uff0c\u907f\u514d\u91cd\u590d\u626b\u63cf\u3002</p> <pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_map&lt;char, int&gt; m;\n        int ans = 0;\n        int left = 0; // \u6307\u793a\u5de6\u4fa7\u5f00\u59cb\u7684\u4f4d\u7f6e\n        for (int i = 0; i &lt; s.size(); i++)\n        {\n            left = max(left, m[ s[i] ]); //\u66f4\u65b0\u5de6\u4fa7\n            m[ s[i] ] = i + 1; // \u4f4d\u7f6e\u4ece1\u5f00\u59cb\n            ans = max(ans, i - left + 1);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"leetcode/3/readme/#python","title":"python","text":"<pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        j = 0\n        end = len(s)\n        ans = 0\n        unique = set()\n\n        while(j &lt; end):\n            i = j\n            while(i &lt; end):\n                if s[i] not in unique:\n                    unique.add(s[i])\n                    i = i + 1\n                    continue\n                else:\n                    break\n            length = len(unique)\n            ans = max(ans, length)\n            unique = set()\n            j = j + 1\n\n        return ans\n ```\n\n \u4f7f\u7528dict\u5b58\u50a8\u6620\u5c04\u5173\u7cfb\uff0c\u5b9e\u73b0\u4e00\u904d\u626b\u63cf\u51fa\u7ed3\u679c\u3002\n\n ```python\n class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        ans = 0\n        m = {}\n        left = 0\n        for i, v in enumerate(s):\n            if v not in m:\n                m[v] = i + 1\n            else:\n                left = max(left, m[v])\n                m[v] = i + 1\n            ans = max(ans, i - left + 1)\n        return ans\n</code></pre>"},{"location":"leetcode/30/readme/","title":"30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32","text":""},{"location":"leetcode/30/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</p> <p>\u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a\ns = \"barfoothefoobarman\",\nwords = [\"foo\",\"bar\"]\n\u8f93\u51fa\uff1a[0,9]\n\u89e3\u91ca\uff1a\n\u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f \"barfoo\" \u548c \"foobar\" \u3002\n\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1a\ns = \"wordgoodgoodgoodbestword\",\nwords = [\"word\",\"good\",\"best\",\"word\"]\n\u8f93\u51fa\uff1a[]\n</code></pre>"},{"location":"leetcode/30/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u7edf\u8ba1words\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570</li> <li>\u904d\u5386s, \u6bcf\u6ee1\u8db3words\u957f\u5ea6\u5c31\u5206\u5272\u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u770b\u662f\u5426\u548cwords\u8ba1\u7b97\u7ed3\u679c\u76f8\u540c</li> <li>\u5982\u679c\u76f8\u540c\uff0c\u8f93\u51fa\u8fd9\u65f6\u7684\u8d77\u59cb\u4e0b\u6807</li> </ol>"},{"location":"leetcode/30/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/307/readme/","title":"307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539","text":""},{"location":"leetcode/307/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4  nums\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15 i \u5230 j  (i \u2264 j) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b i,  j \u4e24\u70b9\u3002</p> <p>update(i, val) \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a i \u7684\u6570\u503c\u66f4\u65b0\u4e3a val\uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>Given nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</code></pre> <p>\u8bf4\u660e:</p> <pre><code>\u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728 update \u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002\n\u4f60\u53ef\u4ee5\u5047\u8bbe update \u51fd\u6570\u4e0e sumRange \u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u662f\u5747\u5300\u5206\u5e03\u7684\u3002\n</code></pre>"},{"location":"leetcode/307/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/307/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>python \u6811\u72b6\u6570\u7ec4\u5b9e\u73b0</li> <li> <p>C</p> </li> <li> <p>python \u7ebf\u6bb5\u6811\u5b9e\u73b0</p> </li> <li>C</li> </ul>"},{"location":"leetcode/313/readme/","title":"313. \u8d85\u7ea7\u4e11\u6570","text":""},{"location":"leetcode/313/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c n \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002</p> <p>\u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u662f\u957f\u5ea6\u4e3a\u00a0k\u00a0\u7684\u8d28\u6570\u5217\u8868\u00a0primes\u00a0\u4e2d\u7684\u6b63\u6574\u6570\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: n = 12, primes = [2,7,13,19]\n\u8f93\u51fa: 32 \n\u89e3\u91ca: \u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684\u8d28\u6570\u5217\u8868 primes = [2,7,13,19]\uff0c\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u5e8f\u5217\u4e3a\uff1a[1,2,4,7,8,13,14,16,19,26,28,32] \u3002\n\u8bf4\u660e:\n\n1\u00a0\u662f\u4efb\u4f55\u7ed9\u5b9a\u00a0primes\u00a0\u7684\u8d85\u7ea7\u4e11\u6570\u3002\n \u7ed9\u5b9a\u00a0primes\u00a0\u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002\n0 &lt; k \u2264 100, 0 &lt; n \u2264 106, 0 &lt; primes[i] &lt; 1000 \u3002\n\u7b2c\u00a0n\u00a0\u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u8303\u56f4\u5185\u3002\n</code></pre>"},{"location":"leetcode/313/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>idx \u6709 len(primes) \u4e2a\u5143\u7d20\uff0c \u521d\u59cb\u5316\u4e3a0\uff0c \u4e3a\u5bf9\u5e94\u7684 primes[i] \u7684\u6307\u9488\u3002\u601d\u8def\u4e0e 264. \u4e11\u6570 II \u5b8c\u5168\u4e00\u81f4\u3002</p> <pre><code>class Solution:\n    def nthSuperUglyNumber(self, n: int, primes: List[int]) -&gt; int:\n        k = len(primes)\n        idx = [0] * k # \u6307\u793aprimes[i]\u5f53\u524d\u4f4d\u7f6e\n        array = [1]\n        for _ in range(1, n):\n            nextNumbers = [array[value] * primes[i] for i, value in enumerate(idx)]\n            nextNumber = min(nextNumbers)\n            array.append(nextNumber)\n            for j in range(k):\n                if array[ idx[j] ] * primes[j] == nextNumber:\n                    idx[j] += 1\n        return array[n-1]\n</code></pre>"},{"location":"leetcode/315/readme/","title":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570","text":""},{"location":"leetcode/315/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts\u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f  nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: [5,2,6,1]\n\u8f93\u51fa: [2,1,1,0] \n\u89e3\u91ca:\n5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1).\n2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1).\n6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1).\n1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20.\n</code></pre>"},{"location":"leetcode/315/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/315/readme/#_3","title":"\u4f7f\u7528\u7ebf\u6bb5\u6811","text":"<ol> <li>\u6c42\u51fanums\u7684\u6700\u5c0f\u6700\u5927\u503c\uff0c[min, max]\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u6784\u9020\u4e00\u68f5\u6811\uff0c\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u5185\u5143\u7d20\u4e2a\u6570\uff0c\u6784\u9020\u7684\u65f6\u5019\u521d\u59cb\u5316\u4e3a0</li> <li>\u4ece\u53f3\u5411\u5de6\u904d\u5386nums, \u67e5\u8be2 [min, nums[i] - 1] \u8303\u56f4\u5185\u4e2a\u6570\uff0c\u8f93\u51fa\u5230\u7ed3\u679c</li> <li>\u7ebf\u6bb5\u6811\u4e2d nums[i] \u90a3\u4e2a\u8282\u70b9\u7684 cnt \u503c+1, \u9012\u5f52\u66f4\u65b0\u76f8\u5173\u8282\u70b9\u7684 cnt \u503c</li> </ol> <p>\u8be5\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u5f53 max - min \u975e\u5e38\u5927\u7684\u65f6\u5019\u5360\u7528\u7a7a\u95f4\u5927\u3002\u4f7f\u7528\u8be5\u65b9\u6cd5\u4e4b\u524d\u9700\u8981\u6ce8\u610f\u6570\u636e\u8303\u56f4\u3002</p> <p>[python]</p> <p>\u6211\u4eec\u53ef\u4ee5\u6539\u8fdb\u4e0a\u9762\u7684\u65b9\u6cd5\u662f\u4e4b\u66f4\u4e3a\u901a\u7528\uff0c \u4e0d\u7528\u5728\u610f\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\uff0c\u65b9\u6cd5\u662f\u9884\u5904\u7406\u6570\u7ec4\u3002 \u628a\u6570\u7ec4\u7684\u6bcf\u4e2a\u6570\u5b57\u66ff\u6362\u6210\u6392\u5e8f\u4e4b\u540e\u7684\u7d22\u5f15\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5982\u679c\u6570\u5b57\u76f8\u540c\uff0c\u5176\u6392\u5e8f\u4e4b\u540e\u7684\u7d22\u5f15\u4e5f\u8981\u4fdd\u6301\u4e00\u6837\u3002</p> <pre><code>[5,2,6,1] --&gt; [2,1,3,0]    [5,2,6,2,1] --&gt; [3,1,4,1,0]\n[2,1,1,0]     [2,1,1,0]    [3,1,2,1,0] --&gt; [3,1,2,1,0]\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c \u8f6c\u6362\u4e4b\u540e\u7684\u6570\u7ec4\u7ed3\u679c\u8fd8\u662f\u548c\u4e4b\u524d\u4e00\u6837\u7684\uff0c \u4f46\u662f\u6570\u636e\u8303\u56f4\u88ab\u7f29\u653e\u5230[0,len(nums)-1]. \u8fd9\u6837\u9884\u5904\u7406\u4e4b\u540e\u518d\u4f7f\u7528\u4e0a\u9762\u7ebf\u6bb5\u6811\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\u3002</p> <p>python</p>"},{"location":"leetcode/315/readme/#_4","title":"\u4f7f\u7528\u6811\u72b6\u6570\u7ec4","text":"<p>\u628a nums \u9884\u5904\u7406\u6210 nums[i] \u7684\u6392\u540d\u4e4b\u540e\uff0c \u6570\u7ec4\u7684\u503c\u7684\u8303\u56f4\u5c31\u548c\u4e0b\u6807\u4e00\u81f4\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u5fc5\u7ef4\u62a4 [begin, end] \u8303\u56f4\uff0c \u800c\u533a\u95f4\u6027\u8d28\u53ea\u9700\u8981\u4e00\u4e2a\u6570\u636e\u4fbf\u53ef\u4ee5\u4fdd\u5b58\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u505a\u3002</p> <ol> <li>\u9884\u5904\u7406 nums \u4e3a\u5176\u6392\u540d</li> <li>\u4ece\u53f3\u5411\u505a\u904d\u5386 nums, \u67e5\u8be2 [0, nums[i]-1] \u533a\u95f4\u5185 cnt \u503c</li> <li>nums[i] \u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u66f4\u65b0\u5173\u8054\u7684\u8282\u70b9\u7684 cnt \u503c</li> </ol> <p>python</p>"},{"location":"leetcode/315/readme/#_5","title":"\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u601d\u60f3","text":"<p>\u5f52\u5e76\u6392\u5e8f\u5728\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u7684\u65f6\u5019\uff0c \u540e\u9762\u7684\u6570\u7ec4\u4e00\u5b9a\u5728\u524d\u9762\u6570\u7ec4\u6240\u6709\u5143\u7d20\u7684\u540e\u9762\uff0c \u6240\u4ee5\u524d\u9762\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c \u90fd\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u540e\u9762\u6570\u7ec4\u6709\u51e0\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5b83\u3002</p> <p>\u6211\u4eec\u4f7f\u7528 (num, index) \u66ff\u6362\u6389\u539f\u6765\u7684 nums \u6570\u7ec4\uff0c \u5bf9\u5176\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c \u6bcf\u6b21 merge \u7684\u65f6\u5019\uff0c \u5bf9\u4e8e\u524d\u9762\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20 \u8ba1\u7b97\u540e\u9762\u6570\u7ec4\u4e2d\u5c0f\u4e8e\u5b83\u7684\u5143\u7d20\u4e2a\u6570\uff0c \u7d2f\u52a0\u5230 ans[index] \u7ed3\u679c\u4e2d\u3002</p> <p>\u5f52\u5e76\u6392\u5e8f\u5b8c\u6210\u4e4b\u540e\uff0c ans \u4e2d\u4fdd\u5b58\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c\u3002</p> <p>python</p>"},{"location":"leetcode/318/readme/","title":"318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef","text":""},{"location":"leetcode/318/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u00a0words\uff0c\u627e\u5230\u00a0length(word[i]) * length(word[j])\u00a0\u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>\u8f93\u5165: [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n\u8f93\u51fa: 16 \n\u89e3\u91ca: \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a \"abcw\", \"xtfn\"\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n\u8f93\u51fa: 4 \n\u89e3\u91ca: \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a \"ab\", \"cd\"\u3002\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n\u8f93\u51fa: 0 \n\u89e3\u91ca: \u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\u3002\n</code></pre>"},{"location":"leetcode/318/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u628a\u5355\u8bcd\u8f6c\u6362\u6210\u6570\u5b57\uff0c\u5229\u7528\u4e0e\u8fd0\u7b97\u5224\u65ad\u6709\u6ca1\u6709\u76f8\u540c\u7684\u5b57\u6bcd\u3002</p> <pre><code>class Solution(object):\n    def maxProduct(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        bits = []\n        for word in words:\n            b = 0\n            for c in word:\n                b = b | ( 1 &lt;&lt; (ord(c) - ord('a')) )\n            bits.append(b)\n\n        ans = 0\n        for i in range(len(bits)):\n            for j in range(len(bits)):\n                if i != j and bits[i] &amp; bits[j] == 0:\n                    ab = len(words[i]) * len(words[j])\n                    ans = max([ans, ab])\n\n        return ans\n</code></pre>"},{"location":"leetcode/327/readme/","title":"327. \u533a\u95f4\u548c\u7684\u4e2a\u6570","text":""},{"location":"leetcode/327/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u533a\u95f4\u548c\u5728 [lower, upper] \u4e4b\u95f4\u7684\u4e2a\u6570\uff0c\u5305\u542b lower \u548c upper\u3002 \u533a\u95f4\u548c S(i, j) \u8868\u793a\u5728 nums \u4e2d\uff0c\u4f4d\u7f6e\u4ece i \u5230 j \u7684\u5143\u7d20\u4e4b\u548c\uff0c\u5305\u542b i \u548c j (i \u2264 j)\u3002</p> <p>\u8bf4\u660e: \u6700\u76f4\u89c2\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f O(n2) \uff0c\u8bf7\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: nums = [-2,5,-1], lower = -2, upper = 2,\n\u8f93\u51fa: 3 \n\u89e3\u91ca: 3\u4e2a\u533a\u95f4\u5206\u522b\u662f: [0,0], [2,2], [0,2]\uff0c\u5b83\u4eec\u8868\u793a\u7684\u548c\u5206\u522b\u4e3a: -2, -1, 2\u3002\n</code></pre>"},{"location":"leetcode/327/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/327/readme/#ac","title":"AC\u4ee3\u7801","text":""},{"location":"leetcode/336/readme/","title":"336. \u56de\u6587\u5bf9","text":""},{"location":"leetcode/336/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u7ec4\u552f\u4e00\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709\u4e0d\u540c\u00a0\u7684\u7d22\u5f15\u5bf9(i, j)\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u00a0words[i] + words[j]\u00a0\uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n\u8f93\u51fa: [[0,1],[1,0],[3,2],[2,4]] \n\u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]\n\u793a\u4f8b 2:\n\n\u8f93\u5165: [\"bat\",\"tab\",\"cat\"]\n\u8f93\u51fa: [[0,1],[1,0]] \n\u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"battab\",\"tabbat\"]\n</code></pre>"},{"location":"leetcode/336/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/336/readme/#_3","title":"\u65b9\u6cd5\u4e00","text":"<p>\u66b4\u529b\u679a\u4e3e, 110/134 cases passed (N/A)</p> <pre><code>class Solution:\n    def palindromePairs(self, words: List[str]) -&gt; List[List[int]]:\n        def valid(string):\n            m = len(string)\n            left, right = 0, m-1\n            while left &lt; right:\n                if string[left] != string[right]:\n                    return False\n                left += 1\n                right -= 1\n            return True\n\n        n = len(words)\n        ans = []\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    string = words[i] + words[j]\n                    if valid(string):\n                        ans.append([i, j])\n        return ans\n</code></pre>"},{"location":"leetcode/336/readme/#_4","title":"\u65b9\u6cd5\u4e8c","text":"<p>C</p>"},{"location":"leetcode/336/readme2/","title":"336. \u56de\u6587\u5bf9","text":""},{"location":"leetcode/336/readme2/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u7ec4\u552f\u4e00\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709\u4e0d\u540c\u00a0\u7684\u7d22\u5f15\u5bf9(i, j)\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u00a0words[i] + words[j]\u00a0\uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n\u8f93\u51fa: [[0,1],[1,0],[3,2],[2,4]] \n\u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [\"bat\",\"tab\",\"cat\"]\n\u8f93\u51fa: [[0,1],[1,0]] \n\u89e3\u91ca: \u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a [\"battab\",\"tabbat\"]\n</code></pre>"},{"location":"leetcode/336/readme2/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u66b4\u529b\u65b9\u6cd5</li> </ol> <pre><code>class Solution:\n    def palindromePairs(self, words: List[str]) -&gt; List[List[int]]:\n        def valid(string):\n            m = len(string)\n            left, right = 0, m-1\n            while left &lt; right:\n                if string[left] != string[right]:\n                    return False\n                left += 1\n                right -= 1\n            return True\n\n        n = len(words)\n        ans = []\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    string = words[i] + words[j]\n                    if valid(string):\n                        ans.append([i, j])\n        return ans\n</code></pre>"},{"location":"leetcode/386/readme/","title":"386. \u5b57\u5178\u5e8f\u6392\u6570","text":""},{"location":"leetcode/386/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u00a0n, \u8fd4\u56de\u4ece\u00a01\u00a0\u5230\u00a0n\u00a0\u7684\u5b57\u5178\u987a\u5e8f\u3002</p> <p>\u4f8b\u5982\uff0c</p> <pre><code>\u7ed9\u5b9a n =1 3\uff0c\u8fd4\u56de [1,10,11,12,13,2,3,4,5,6,7,8,9] \u3002\n\n\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f18\u5316\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u8f93\u5165\u7684\u6570\u636e\u00a0n\u00a0\u5c0f\u4e8e\u7b49\u4e8e\u00a05,000,000\u3002\n</code></pre>"},{"location":"leetcode/386/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u66b4\u529b\u65b9\u6cd5\uff0c \u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c\u6309\u7167\u5b57\u7b26\u4e32\u6bd4\u8f83\u5927\u5c0f\u3002</li> </ol> <pre><code>char *str(int n)\n{\n    char *ans = (char*)malloc(sizeof(char) * 1000);\n    int ansEnd = 0;\n    if (n == 0) {\n        ans[ansEnd++] = '0';\n        ans[ansEnd] = '\\0';\n        return ans;\n    }\n    while (n) {\n        ans[ansEnd++] = n % 10 + '0';\n        n = n / 10;\n    }\n    ans[ansEnd] = '\\0';\n    int left = 0;\n    int right = ansEnd - 1;\n    char tmp;\n    while (left &lt; right) {\n        tmp = ans[left];\n        ans[left] = ans[right];\n        ans[right] = tmp;\n        left++;\n        right--;\n    }\n    return ans;\n}\nint compare(const void *p, const void *q)\n{\n    int a = *(int*)p;\n    int b = *(int*)q;\n    char *aString = str(a);\n    int aSize = strlen(aString);\n    char *bString = str(b);\n    int bSize = strlen(bString);\n    int i = 0;\n    int ans = 0;\n    while (i &lt; aSize &amp;&amp; i &lt; bSize) {\n        if (aString[i] != bString[i]) {\n            ans = aString[i] - bString[i];\n            break;\n        } else {\n            i++;\n        }\n    }\n\n    free(aString);\n    free(bString);\n    if (i &gt;= aSize) return -1;\n    if (i &gt;= bSize) return 1;\n\n    return ans;\n}\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lexicalOrder(int n, int* returnSize){\n    int *ans = (int*)malloc(sizeof(int) * n);\n\n    for (int i = 1; i &lt;= n; i++) {\n        ans[i-1] = i;\n    }\n\n    qsort(ans, n, sizeof(int), compare);\n\n    *returnSize = n;\n    return ans;\n}\n</code></pre> <ol> <li>\u5148\u5e8f\u904d\u538610\u53c9\u6570\uff0c\u76f4\u63a5\u751f\u6210\u7ed3\u679c\u3002</li> </ol>"},{"location":"leetcode/39/readme/","title":"39. \u7ec4\u5408\u603b\u548c","text":""},{"location":"leetcode/39/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002</p> <p>candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002</p> <p>\u8bf4\u660e\uff1a</p> <pre><code>\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\n\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002\n</code></pre> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: candidates = [2,3,6,7], target = 7,\n\u6240\u6c42\u89e3\u96c6\u4e3a:\n[\n[7],\n[2,2,3]\n]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: candidates = [2,3,5], target = 8,\n\u6240\u6c42\u89e3\u96c6\u4e3a:\n[\n[2,2,2,2],\n[2,3,3],\n[3,5]\n]\n</code></pre>"},{"location":"leetcode/39/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u9996\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c \u7136\u540e\u5c1d\u8bd5\u6bcf\u4e2a\u5f53\u524d\u5143\u7d20\u5230\u6700\u5927\u6b21\u6570(\u7d2f\u52a0\u8d85\u8fc7\u76ee\u6807\u503c)</p>"},{"location":"leetcode/39/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/4/readme/","title":"Readme","text":""},{"location":"leetcode/4/readme/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"leetcode/4/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4 nums1 \u548c nums2\u3002 \u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log(m + n))\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u548c nums2 \u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\nnums1 = [1, 3]\nnums2 = [2]\n\n\u5219\u4e2d\u4f4d\u6570\u662f 2.0\n\u793a\u4f8b 2:\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n\u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5\n</code></pre>"},{"location":"leetcode/4/readme/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u66b4\u529b\u89e3\u6cd5\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u628a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76(O(m+n)), \u518d\u53d6\u51fa\u4e2d\u4f4d\u6570(O(1)),\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u4e0d\u7b26\u5408\u8981\u6c42\u3002 \u4e0d\u989d\u5916\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u53ea\u7528\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u548c\u65f6\u95f4\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709 \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d0\u5347\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u66b4\u529b\u65b9\u6cd5\u3002</p>"},{"location":"leetcode/4/readme/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int i = 0;\n        int j = 0;\n        int size1 = nums1.size();\n        int size2 = nums2.size();\n        vector&lt;int&gt; merge;\n        while (i &lt; size1 &amp;&amp; j &lt; size2)\n        {\n            if (nums1[i] &lt;= nums2[j])\n            {\n                merge.push_back(nums1[i]);\n                i++;\n            }\n            else\n            {\n                merge.push_back(nums2[j]);\n                j++;\n            }\n        }\n        while (i &lt; size1)\n        {\n            merge.push_back(nums1[i]);\n            i++;\n        }\n        while (j &lt; size2)\n        {\n            merge.push_back(nums2[j]);\n            j++;\n        }\n\n        int size3 = merge.size();\n        if (size3 % 2 == 0)\n        {\n            int pos2 = size3 / 2;\n            int pos1 = pos2 - 1;\n            float ans = (merge[pos1] + merge[pos2]) / 2.0;\n            return ans;\n        }\n        else\n        {\n            float ans = (float)merge[size3 / 2];\n            return ans;\n        }\n\n        return -1;\n    }\n};\n</code></pre>"},{"location":"leetcode/4/readme/#python","title":"python","text":"<pre><code>class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\n        i = 0\n        j = 0\n        merge = []\n        while (i &lt; len(nums1) and j &lt; len(nums2)):\n            if nums1[i] &lt;= nums2[j]:\n                merge.append(nums1[i])\n                i = i + 1\n            else:\n                merge.append(nums2[j])\n                j = j + 1\n        while i &lt; len(nums1):\n            merge.append(nums1[i])\n            i = i + 1\n        while j &lt; len(nums2):\n            merge.append(nums2[j])\n            j = j + 1\n\n        if (len(merge) % 2 == 0):\n            pos2 = len(merge) // 2\n            pos1 = pos2 - 1\n            ans = (merge[pos1] + merge[pos2]) / 2.0\n            return ans\n        else:\n            ans = float( merge[len(merge) // 2] )\n            return ans\n</code></pre>"},{"location":"leetcode/4/readme/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4e2d\u4f4d\u6570\u662f\u628a\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\uff0c\u4f4d\u4e8e\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u5b57\uff0c\u5982\u679c\u4e2d\u95f4\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6570\u5b57\uff0c\u4e2d\u4f4d\u6570\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u5b57\u7684\u5e73\u5747\u503c\u3002</p> <p>\u8bbe\u6570\u7ec4 array \u5143\u7d20\u4e2a\u6570\u4e3an, n\u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4f4d\u7f6e\u4e3ai; i + 1 = n - i + 1 - 1, \u5373\u5de6\u4fa7\u5143\u7d20\u6570\u91cf = \u53f3\u4fa7\u5143\u7d20\u6570\u91cf + 1</p> <p>\u5982\u679cn\u4e3a\u5076\u6570, \u4e2d\u4f4d\u6570\u7684\u4f4d\u7f6e\u4e3a i, i+1; i = (n - (i+1)) + 1, \u5373\u5de6\u4fa7\u5143\u7d20\u6570\u91cf = \u53f3\u4fa7\u5143\u7d20\u6570\u91cf</p> <p>\u4e0a\u9762\u4e24\u4e2a\u516c\u5f0f\u8ba1\u7b97\u51fa i = n / 2 (\u6574\u6570\u9664\u6cd5).</p> <p>\u5f53\u6709\u4e24\u4e2a\u6570\u7ec4 A, B \u7684\u65f6\u5019\uff0c \u6211\u4eec\u7528 i, j \u5206\u5272 A, B \u4e3a\u524d\u540e\u4e24\u4e2a\u90e8\u5206, m, n \u5206\u522b\u662f A\uff0c B\u7684\u5927\u5c0f\u3002</p> <pre><code>                left_part | right_part\nA[0], A[1], ..., A[i - 1] | A[i], A[i+1], ..., A[m-1]\nB[0], B[1], ..., B[j - 1] | B[j], B[j+1], ..., B[n-1]\n</code></pre> <p>\u5f53 len(left_part) == len(right_part) \u4e14 max(left_part) &lt;= min(right_part) \u7684\u65f6\u5019\uff0c \u6211\u4eec\u5c31\u627e\u5230\u4e86\u4e2d\u4f4d\u6570\u3002 - (m + n) / 2 == 0, midian = (max(left_part) + min(right_part)) / 2 - (m + n) / 2 != 0, midian = max(left_part)</p> <p>\u5de6\u534a\u90e8\u5206\u957f\u5ea6 = \u53f3\u534a\u90e8\u5206\u957f\u5ea6\uff0c \u5c31\u662f i + j = (m - i + n - j) \u6216\u8005 i + j = (m - i + n - j) + 1, \u5947\u6570\u65f6\u53f3\u4fa7\u5c11\u4e00\u4e2a\u5143\u7d20\u3002 \u6362\u7b97\u4e4b\u540e\u5f97\u5230 i + j = (m + n + 1) / 2;</p> <p>\u6211\u4eec\u904d\u5386i, \u4ece0\u5230m-1, \u627e\u5230\u5bf9\u5e94\u7684j\uff0c \u7136\u540e\u68c0\u67e5max(left_part) &lt;= min(right_part)\uff0c \u4e00\u65e6\u6ee1\u8db3\u8981\u6c42\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u7ed3\u679c\u3002</p> <pre><code>#define MAX(a, b) ((a) &gt; (b) ? (a) : (b))\n#define MIN(a, b) ((a) &lt; (b) ? (a) : (b))\n\ndouble findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\n    if (nums1Size &gt; nums2Size) {\n        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\n    }\n\n    int m = nums1Size;\n    int n = nums2Size;\n    int i, j, mid1, mid2;\n    int left_max, right_min;\n\n    if (m &lt;= 0) {\n        if (n % 2 != 0) return (double)nums2[n / 2];\n        if (n % 2 == 0) return (nums2[n / 2 - 1] + nums2[n / 2]) / 2.0;\n    }\n\n    if (n &lt;= 0) {\n        if (m % 2 != 0) return (double)nums1[m / 2];\n        if (m % 2 == 0) return (nums1[m / 2 - 1] + nums1[m / 2]) / 2.0;\n    }\n    // i = 0 \u65f6\u8868\u793a nums1 \u4e2d\u4e0d\u53d6\u503c\uff0c i = m \u8868\u793a nums1 \u4e2d\u7684\u503c\u5168\u90e8\u5728left_part\n    for (i = 0; i &lt;= m; i++) {\n        j = (m + n + 1) / 2 - i;\n        // left_max \u662f max(A[i-1], B[j-1]), \u56e0\u4e3a\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u53ea\u8981\u6bd4\u8f83\u6700\u540e\u4e24\u4e2a\u7684\u5927\u5c0f\n        if (i == 0) left_max = nums2[j - 1];\n        else if (j == 0) left_max = nums1[i - 1];\n        else {\n            left_max = MAX(nums1[i-1], nums2[j-1]);\n        }\n\n        // right_min \u53d6\u6700\u5f00\u59cb\u4e24\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u503c\n        if (i == m) right_min = nums2[j];\n        else if (j == n) right_min = nums1[i];\n        else right_min = MIN(nums1[i], nums2[j]);\n\n        if (left_max &lt;= right_min) {\n            if ((m + n) % 2 == 0) return (left_max + right_min) / 2.0;\n            if ((m + n) % 2 != 0) return (double)left_max;\n        }\n    }\n\n    return 0.0;\n}\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(m), \u662f\u5927\u4e8e\u9898\u76ee\u8981\u6c42 \\(O(log(m + n))\\) \u7684\u3002 \u53ea\u8981\u5728\u67e5\u627e\u7684\u65f6\u5019\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c \u56e0\u4e3a\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c \u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u964d\u4f4e\u5230 \\(O(log(min(m,n)))\\).</p> <pre><code>double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\n    if (nums1Size &gt; nums2Size) {\n        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\n    }\n\n    // i \u6307\u5411 nums1 \u7684\u524d\u534a\u90e8\u5206\uff0c j \u6307\u5411 nums2 \u7684\u524d\u534a\u90e8\u5206\n    // nums1 + nums2 \u7684\u524d\u534a\u90e8\u5206 \u548c \u540e\u534a\u90e8\u5206\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u627e\u5230\u4e2d\u4f4d\u6570\n    // nums1Size + nums2Size \u662f\u5076\u6570\uff0c len(left_part) == len(right_part) \u4e14 max(left_part) &lt;= min(right_part)\n    // nums1Size + nums2Size \u662f\u5947\u6570\uff0c len(left_part) == len(right_part) + 1 \u4e14 max(left_part) &lt;= min(right_part)\n    // \u5982\u679c\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e2d\u4f4d\u6570\uff0c\u56e0\u4e3a\u4e2d\u4f4d\u6570\u7684\u4f5c\u7528\u5c31\u662f\u5206\u5272\u6570\u7ec4\u4e3a\u4e24\u4e2a\u6570\u91cf\u76f8\u7b49\u7684\u90e8\u5206\uff0c \u4f7f\u5f97\u524d\u9762\u7684\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u540e\u9762\u7684\n    // i + j = nums1Size - i + nums2Size - j , \u5982\u679c i \u662f\u5076\u6570\n    // i + j = nums1Size - i + nums2Size - j + 1, \u5982\u679c i \u662f\u5947\u6570\n    // \u6362\u7b97\u51fa i \u548c j \u7684\u5173\u7cfb\uff1a i + j = (nums1Size + nums2Size + 1) / 2, \u9664\u662f\u6574\u6570\u9664\u6cd5\uff0c\u4e0d\u7528\u533a\u5206\u5947\u6570\u5076\u6570\n\n    int left = 0;\n    int right = nums1Size;\n    int mid1, mid2; // \u5b58\u50a8\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6216\u8005\u4e00\u4e2a\u6570\u5b57\n    while (left &lt;= right) {\n        // \u4ece nums1 \u4e2d\u95f4\u4f4d\u7f6e\u5f00\u59cb\u641c\u7d22\n        int i = (left + right) / 2;\n        int j = (nums1Size + nums2Size + 1) / 2 - i;\n\n        // \u8fb9\u754c\u60c5\u51b5\u7684\u5904\u7406\uff0c\u5982\u679c\u662f\u524d\u534a\u90e8\u5206\u7684\u8fb9\u754c\uff0c \u8bbe\u7f6e\u6210\u6700\u5c0f\u503c\n        // \u5982\u679c\u662f\u540e\u534a\u90e8\u5206\u7684\u8fb9\u754c\uff0c\u8bbe\u7f6e\u6210\u6700\u5927\u503c\n        // nums[i-1], nums[i], nums[j-1], nums[j] \u8fb9\u754c\u6ce8\u610f\n        int nums_i_1 = (i == 0) ? INT_MIN : nums1[i-1];\n        int nums_i = (i == nums1Size) ? INT_MAX : nums1[i];\n        int nums_j_1 = (j == 0) ? INT_MIN : nums2[j-1];\n        int nums_j = (j == nums2Size) ? INT_MAX : nums2[j];\n\n        // nums[i-1] &lt;= nums[j] \u4e14 nums[j - 1] &lt;= nums[i] \u7684\u65f6\u5019\uff0c\u5373\u627e\u5230\n        // nums[i-1] &lt;= nums[j] \u7684\u65f6\u5019, \u7ee7\u7eed\u589e\u52a0i, \u5426\u5219\u51cf\u5c11i\n        if (nums_i_1 &lt;= nums_j) {\n            mid1 = (nums_i_1 &gt; nums_j_1) ? nums_i_1 : nums_j_1;\n            mid2 = (nums_i &lt; nums_j) ? nums_i : nums_j;\n            left = i + 1;\n        } else {\n            right = i - 1;\n        }\n    }\n\n    float ans = -99999;\n    if ((nums1Size + nums2Size) % 2 == 0) {\n        ans = (mid1 + mid2) / 2.0;\n    } else {\n        ans = mid1;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/40/readme/","title":"40. \u7ec4\u5408\u603b\u548c II","text":""},{"location":"leetcode/40/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002</p> <p>candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002</p> <p>\u8bf4\u660e\uff1a</p> <pre><code>\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002\n\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002\n</code></pre> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: candidates = [10,1,2,7,6,1,5], target = 8,\n\u6240\u6c42\u89e3\u96c6\u4e3a:\n[\n[1, 7],\n[1, 2, 5],\n[2, 6],\n[1, 1, 6]\n]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: candidates = [2,5,2,1,2], target = 5,\n\u6240\u6c42\u89e3\u96c6\u4e3a:\n[\n[1,2,2],\n[5]\n]\n</code></pre>"},{"location":"leetcode/40/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8be5\u9898\u4e0e39\u7684\u533a\u522b\u662f\u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u7528\u4e00\u6b21\uff0c\u4f46\u662f\u6570\u5b57\u53ef\u80fd\u4f1a\u91cd\u590d\u3002 \u505a\u6cd5\u8fd8\u662f\u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u9012\u5f52\u7684\u65f6\u5019\u6ce8\u610f\uff1a\u9012\u5f52\u4e0b\u4e00\u4e2a\u7684\u65f6\u5019\u8981\u5148\u5224\u65ad\u662f\u5426\u548c\u5f53\u524d\u7684\u4e00\u6837\uff0c\u5982\u679c\u4e00\u6837\u8df3\u8fc7\uff0c\u53bb\u6389\u91cd\u590d\u7b54\u6848\u3002</p>"},{"location":"leetcode/40/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/402/readme/","title":"402. \u79fb\u6389K\u4f4d\u6570\u5b57","text":""},{"location":"leetcode/402/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\u00a0num\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 k \u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002</p> <p>\u6ce8\u610f:</p> <p>num \u7684\u957f\u5ea6\u5c0f\u4e8e 10002 \u4e14\u00a0\u2265 k\u3002 num \u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002</p> <p>\u793a\u4f8b 1 :</p> <pre><code>\u8f93\u5165: num = \"1432219\", k = 3\n\u8f93\u51fa: \"1219\"\n\u89e3\u91ca: \u79fb\u9664\u6389\u4e09\u4e2a\u6570\u5b57 4, 3, \u548c 2 \u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u7684\u6570\u5b57 1219\u3002\n</code></pre> <p>\u793a\u4f8b 2 :</p> <pre><code>\u8f93\u5165: num = \"10200\", k = 1\n\u8f93\u51fa: \"200\"\n\u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6\u3002\n</code></pre> <p>\u793a\u4f8b 3 :</p> <pre><code>\u8f93\u5165: num = \"10\", k = 2\n\u8f93\u51fa: \"0\"\n\u89e3\u91ca: \u4ece\u539f\u6570\u5b57\u79fb\u9664\u6240\u6709\u7684\u6570\u5b57\uff0c\u5269\u4f59\u4e3a\u7a7a\u5c31\u662f0\u3002\n</code></pre>"},{"location":"leetcode/402/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>char *removeKdigits(char *num, int k)\n{\n    int n = strlen(num);\n    int l = n - k;\n\n    // \u4ece num \u4e2d\u9009\u62e9 l \u4e2a\u6570\u5b57\u7ec4\u6210 \u6700\u5c0f\u7684\u6570\n    char *ans = (char *)malloc(sizeof(char) * (l + 3));\n    int ansEnd = 0;\n\n    // \u5168\u90e8\u79fb\u9664\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de0\n    if (l == 0)\n    {\n        ans[0] = '0';\n        ans[1] = '\\0';\n        return ans;\n    }\n\n    int start = 0;\n    int end = n - l;\n    // \u6bcf\u6b21\u4ece[start, end]\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c \u66f4\u65b0 start \u4e3aindex+1, end = end+1\n    while (start &lt;= end &amp;&amp; start &lt; n &amp;&amp; end &lt; n)\n    {\n        int min = INT_MAX;\n        int index = -1;\n        for (int i = start; i &lt;= end; i++)\n        {\n            if (num[i] &lt; min)\n            {\n                min = num[i];\n                index = i;\n            }\n        }\n        if (index != -1)\n        {\n            if (ansEnd == 0 &amp;&amp; num[index] == '0')\n            {\n                start = index + 1;\n                end = end + 1;\n            }\n            else\n            {\n                ans[ansEnd++] = num[index];\n                start = index + 1;\n                end = end + 1;\n            }\n        }\n        else\n        {\n            break;\n        }\n    }\n    // \u53ea\u9009\u62e9\u4e86\u524d\u5bfc0\u7684\u60c5\u51b5\u4e0b\u8fd4\u56de0\n    if (ansEnd == 0)\n    {\n        ans[ansEnd++] = '0';\n    }\n    ans[ansEnd] = '\\0';\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/406/readme/","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217","text":""},{"location":"leetcode/406/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\u3002 \u6bcf\u4e2a\u4eba\u7531\u4e00\u4e2a\u6574\u6570\u5bf9(h, k)\u8868\u793a\uff0c\u5176\u4e2dh\u662f\u8fd9\u4e2a\u4eba\u7684\u8eab\u9ad8\uff0ck\u662f\u6392\u5728\u8fd9\u4e2a\u4eba\u524d\u9762\u4e14\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8eh\u7684\u4eba\u6570\u3002 \u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u91cd\u5efa\u8fd9\u4e2a\u961f\u5217\u3002</p> <p>\u6ce8\u610f\uff1a \u603b\u4eba\u6570\u5c11\u4e8e1100\u4eba\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u8f93\u5165:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n\u8f93\u51fa:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</code></pre>"},{"location":"leetcode/406/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int compare(const int *p, const int *q)\n{\n    int *a = *(int **)p;\n    int *b = *(int **)q;\n    if (a[0] != b[0]) {\n        return a[0] - b[0];\n    } else {\n        return b[1] - a[1];\n    }\n    return 0;\n}\nint *deepCopy(int *arr)\n{\n    int *ans = (int*)malloc(sizeof(int) * 2);\n    ans[0] = arr[0], ans[1] = arr[1];\n    return ans;\n}\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** reconstructQueue(int** people, int peopleSize, int* peopleColSize, \n                        int* returnSize, int** returnColumnSizes){\n    int *cols = (int*)malloc(sizeof(int) * peopleSize);\n    for (int i = 0; i &lt; peopleSize; i++) cols[i] = 2;\n    if (people == NULL || peopleSize == 0 || peopleColSize == NULL) {\n        *returnSize = 0;\n        *returnColumnSizes = cols;\n        return NULL;\n    }\n\n    int **ans = (int**)malloc(sizeof(int*) * peopleSize);\n    for (int i = 0; i &lt; peopleSize; i++) ans[i] = NULL;\n\n    qsort(people, peopleSize, sizeof(int) * 2, compare);\n\n    for (int i = 0; i &lt; peopleSize; i++) {\n        int pos = people[i][1];\n        int blankCount = 0; // \u7edf\u8ba1\u7a7a\u4f4d\u7f6e\u7684\u6570\u91cf\n        int j = 0;\n        while (blankCount &lt;= pos &amp;&amp; j &lt; peopleSize) {\n            if (ans[j] == NULL) {\n                blankCount++;\n            }\n            j++;\n        }\n        if (j &lt;= peopleSize &amp;&amp; blankCount &gt; pos) {\n            printf(\"%d : [%d, %d]\\n\", j - 1, people[i][0], people[i][1]);\n            ans[j - 1] = deepCopy(people[i]);\n        } else {\n            printf(\"%d, %d, %d\\n\", blankCount, pos, j);\n        }\n    }\n\n    *returnSize = peopleSize;\n    *returnColumnSizes = cols;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/414/readme/","title":"414. \u7b2c\u4e09\u5927\u7684\u6570","text":""},{"location":"leetcode/414/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u8fd4\u56de\u6b64\u6570\u7ec4\u4e2d\u7b2c\u4e09\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662fO(n)\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: [3, 2, 1]\n\n\u8f93\u51fa: 1\n\n\u89e3\u91ca: \u7b2c\u4e09\u5927\u7684\u6570\u662f 1.\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [1, 2]\n\n\u8f93\u51fa: 2\n\n\u89e3\u91ca: \u7b2c\u4e09\u5927\u7684\u6570\u4e0d\u5b58\u5728, \u6240\u4ee5\u8fd4\u56de\u6700\u5927\u7684\u6570 2 .\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: [2, 2, 3, 1]\n\n\u8f93\u51fa: 1\n\n\u89e3\u91ca: \u6ce8\u610f\uff0c\u8981\u6c42\u8fd4\u56de\u7b2c\u4e09\u5927\u7684\u6570\uff0c\u662f\u6307\u7b2c\u4e09\u5927\u4e14\u552f\u4e00\u51fa\u73b0\u7684\u6570\u3002\n\u5b58\u5728\u4e24\u4e2a\u503c\u4e3a2\u7684\u6570\uff0c\u5b83\u4eec\u90fd\u6392\u7b2c\u4e8c\u3002\n</code></pre>"},{"location":"leetcode/414/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int thirdMax(int* nums, int numsSize){\n    long long max1 = LLONG_MIN;\n    long long max2 = LLONG_MIN;\n    long long max3 = LLONG_MIN;\n    int i;\n\n    for (i = 0; i &lt; numsSize; i++) {\n        if (nums[i] &gt; max1) {\n            max3 = max2;\n            max2 = max1;\n            max1 = nums[i];\n        }\n        if (nums[i] &lt; max1 &amp;&amp; nums[i] &gt; max2) {\n            max3 = max2;\n            max2 = nums[i];\n        }\n        if (nums[i] &lt; max2 &amp;&amp; nums[i] &gt; max3) {\n            max3 = nums[i];\n        }\n    }\n    if (max3 == LLONG_MIN) { return max1; }\n    return max3;\n}\n</code></pre>"},{"location":"leetcode/42/readme/","title":"42. \u63a5\u96e8\u6c34","text":""},{"location":"leetcode/42/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u00a0n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p> <p></p> <p>\u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002\u00a0\u611f\u8c22 Marcos \u8d21\u732e\u6b64\u56fe\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>  \u8f93\u5165: [0,1,0,2,1,0,1,3,2,1,2,1]\n  \u8f93\u51fa: 6\n</code></pre>"},{"location":"leetcode/42/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int trap(int* height, int heightSize){\n    int left = 0;\n    int right = heightSize - 1;\n    int ans = 0;\n    while (left &lt; right) {\n        if (height[left] &lt;= height[right]) {\n            if (height[left+1] &lt; height[left] &amp;&amp; left + 1 &lt; right) {\n                ans += height[left] - height[left+1];\n                height[left+1] = height[left];\n            }\n            left++;\n        } else {\n            if (height[right] &gt; height[right-1] &amp;&amp; right - 1 &gt; left) {\n                ans += height[right] - height[right-1];\n                height[right-1] = height[right];\n            }\n            right--;\n        }\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/456/readme/","title":"456. 132\u6a21\u5f0f","text":""},{"location":"leetcode/456/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1aa1, a2, ..., an\uff0c\u4e00\u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217 ai, aj, ak \u88ab\u5b9a\u4e49\u4e3a\uff1a\u5f53 i &lt; j &lt; k \u65f6\uff0cai &lt; ak &lt; aj\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5f53\u7ed9\u5b9a\u6709 n \u4e2a\u6570\u5b57\u7684\u5e8f\u5217\u65f6\uff0c\u9a8c\u8bc1\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u662f\u5426\u542b\u6709132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u6ce8\u610f\uff1an \u7684\u503c\u5c0f\u4e8e15000\u3002</p> <p>\u793a\u4f8b1:</p> <pre><code>\u8f93\u5165: [1, 2, 3, 4]\n\n\u8f93\u51fa: False\n\n\u89e3\u91ca: \u5e8f\u5217\u4e2d\u4e0d\u5b58\u5728132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [3, 1, 4, 2]\n\n\u8f93\u51fa: True\n\n\u89e3\u91ca: \u5e8f\u5217\u4e2d\u6709 1 \u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2].\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: [-1, 3, 2, 0]\n\n\u8f93\u51fa: True\n\n\u89e3\u91ca: \u5e8f\u5217\u4e2d\u6709 3 \u4e2a132\u6a21\u5f0f\u7684\u7684\u5b50\u5e8f\u5217: [-1, 3, 2], [-1, 3, 0] \u548c [-1, 2, 0].\n</code></pre>"},{"location":"leetcode/456/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>ai\u6700\u5c0f\uff0c aj\u6700\u5927\uff0c \u518d\u4ece(j, end)\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u5728(ai, aj)\u4e4b\u95f4\u7684\u6570\u5b57\u5c31\u53ef\u4ee5\u3002 \u5bf9\u4e8e\u4efb\u610f\u7684aj, \u627e\u5230[0, j)\u533a\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u5b83\u662f\u6700\u4f73\u7684ai. \u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6c42\u524d\u7f00\u6700\u5c0f\u503c\u5b9e\u73b0\uff0c\u8017\u65f6O(n). \u786e\u5b9aai, aj\u4e4b\u540e\uff0c\u4ece(j, end)\u533a\u95f4\u627e\u4e00\u4e2a\u5c0f\u4e8eaj\u7684\u5143\u7d20\uff0c \u5982\u679c\u80fd\u591f\u627e\u5230\uff0c\u8bf4\u660e\u6709132\u6a21\u5f0f\u3002 \u4f7f\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4(j, end)\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u4fdd\u6301\u5728\u6808\u4e2d\u7684\u5143\u7d20\u964d\u5e8f\uff0c\u6808\u9876\u7684\u5143\u7d20\u6700\u5c0f\u3002</p> <p>\u7b97\u6cd5\u63cf\u8ff0\uff1a</p> <ol> <li>\u904d\u5386\u4e00\u904d\u6c42mins, mins[i]\u8868\u793a[0, i]\u5185\u6700\u5c0f\u7684\u5143\u7d20</li> <li>for j in [n-1,0], if a[j] &lt;= mins[j], j--; \u5982\u679c\u4ece\u524d\u9762\u627e\u4e0d\u5230\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\u7684\u503c\uff0c\u8df3\u8fc7</li> <li>if a[j] &gt; mins[j], \u6b64\u65f6 ai = mins[j], aj = a[j],      \u5982\u679c\u6808\u975e\u7a7a\uff0c \u5f39\u51fa\u6808\u9876\u5143\u7d20\u76f4\u5230\u5927\u4e8eai,     \u5982\u679c\u6808\u975e\u7a7a\uff0c \u6808\u9876\u5143\u7d20\u5c0f\u4e8eaj, \u5219\u8fd4\u56detrue     \u5426\u5219\uff0c\u628aa[j]\u538b\u5165\u6808\u4e2d\uff0c j--, \u7ee7\u7eed\u4e0b\u4e2a\u5faa\u73af</li> </ol> <p>\u6808\u4e2d\u7ef4\u62a4\u7684\u59cb\u7ec8\u662fj\u4e4b\u540e\u7684\u5143\u7d20\uff0c\u800c\u4e14\u662f\u5927\u4e8eai\u7684\u5143\u7d20\uff0c\u4e00\u65e6\u627e\u5230\u5c0f\u4e8eaj\u7684\u5c31\u53ef\u4ee5\u8fd4\u56de\uff0c\u5982\u679c\u904d\u5386\u5b8c\u8fd8\u6ca1\u6709\u8fd4\u56de\uff0c\u8bf4\u660e\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684132\u6a21\u5f0f\u3002</p>"},{"location":"leetcode/456/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/463/readme/","title":"463. \u5c9b\u5c7f\u7684\u5468\u957f","text":""},{"location":"leetcode/463/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b 0 \u548c 1 \u7684\u4e8c\u7ef4\u7f51\u683c\u5730\u56fe\uff0c\u5176\u4e2d 1 \u8868\u793a\u9646\u5730\u00a00 \u8868\u793a\u6c34\u57df\u3002</p> <p>\u7f51\u683c\u4e2d\u7684\u683c\u5b50\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u76f8\u8fde\uff08\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0d\u76f8\u8fde\uff09\u3002\u6574\u4e2a\u7f51\u683c\u88ab\u6c34\u5b8c\u5168\u5305\u56f4\uff0c\u4f46\u5176\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u5c9b\u5c7f\uff08\u6216\u8005\u8bf4\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u793a\u9646\u5730\u7684\u683c\u5b50\u76f8\u8fde\u7ec4\u6210\u7684\u5c9b\u5c7f\uff09\u3002</p> <p>\u5c9b\u5c7f\u4e2d\u6ca1\u6709\u201c\u6e56\u201d\uff08\u201c\u6e56\u201d \u6307\u6c34\u57df\u5728\u5c9b\u5c7f\u5185\u90e8\u4e14\u4e0d\u548c\u5c9b\u5c7f\u5468\u56f4\u7684\u6c34\u76f8\u8fde\uff09\u3002\u683c\u5b50\u662f\u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u3002\u7f51\u683c\u4e3a\u957f\u65b9\u5f62\uff0c\u4e14\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5747\u4e0d\u8d85\u8fc7 100 \u3002\u8ba1\u7b97\u8fd9\u4e2a\u5c9b\u5c7f\u7684\u5468\u957f\u3002</p> <p>\u793a\u4f8b :</p> <pre><code>\u8f93\u5165:\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\n\u8f93\u51fa: 16\n\n\u89e3\u91ca: \u5b83\u7684\u5468\u957f\u662f\u4e0b\u9762\u56fe\u7247\u4e2d\u7684 16 \u4e2a\u9ec4\u8272\u7684\u8fb9\uff1a\n</code></pre>"},{"location":"leetcode/463/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int get(int **grid, int gridSize, int col, int i, int j)\n{\n    int count = 4;\n    if (i - 1 &gt;= 0 &amp;&amp; grid[i-1][j] == 1) {\n        count--;\n    }\n    if (i + 1 &lt; gridSize &amp;&amp; grid[i+1][j] == 1) {\n        count--;\n    }\n    if (j - 1 &gt;= 0 &amp;&amp; grid[i][j-1] == 1) {\n        count--;\n    }\n    if (j + 1 &lt; col &amp;&amp; grid[i][j+1] == 1) {\n        count--;\n    }\n    //printf(\"%d \", count);\n    return count;\n}\nint islandPerimeter(int** grid, int gridSize, int* gridColSize){\n    int i, j;\n    int ans = 0;\n    for (i = 0; i &lt; gridSize; i++) {\n        for (j = 0; j &lt; gridColSize[i]; j++) {\n            if (grid[i][j] == 1) {\n                ans += get(grid, gridSize, gridColSize[i], i, j);\n            }\n        }\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/468/readme/","title":"468. \u9a8c\u8bc1IP\u5730\u5740","text":""},{"location":"leetcode/468/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u7684 IPv4 \u6216 IPv6 \u5730\u5740\u3002</p> <p>IPv4 \u5730\u5740\u7531\u5341\u8fdb\u5236\u6570\u548c\u70b9\u6765\u8868\u793a\uff0c\u6bcf\u4e2a\u5730\u5740\u5305\u542b4\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5176\u8303\u56f4\u4e3a 0 - 255\uff0c \u7528(\".\")\u5206\u5272\u3002\u6bd4\u5982\uff0c172.16.254.1\uff1b</p> <p>\u540c\u65f6\uff0cIPv4 \u5730\u5740\u5185\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\u6bd4\u5982\uff0c\u5730\u5740 172.16.254.01 \u662f\u4e0d\u5408\u6cd5\u7684\u3002</p> <p>IPv6 \u5730\u5740\u75318\u7ec416\u8fdb\u5236\u7684\u6570\u5b57\u6765\u8868\u793a\uff0c\u6bcf\u7ec4\u8868\u793a 16 \u6bd4\u7279\u3002\u8fd9\u4e9b\u7ec4\u6570\u5b57\u901a\u8fc7 (\":\")\u5206\u5272\u3002\u6bd4\u5982,  2001:0db8:85a3:0000:0000:8a2e:0370:7334 \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u3002\u800c\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u5165\u4e00\u4e9b\u4ee5 0 \u5f00\u5934\u7684\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\u3002\u6240\u4ee5\uff0c 2001:db8:85a3:0:0:8A2E:0370:7334 \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 address\u5730\u5740 (\u5373\uff0c\u5ffd\u7565 0 \u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199)\u3002</p> <p>\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u56e0\u4e3a\u67d0\u4e2a\u7ec4\u7684\u503c\u4e3a 0\uff0c\u800c\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684\u7ec4\uff0c\u4ee5\u81f3\u4e8e\u51fa\u73b0 <code>(::)</code> \u7684\u60c5\u51b5\u3002 \u6bd4\u5982\uff0c 2001:0db8:85a3::8A2E:0370:7334 \u662f\u65e0\u6548\u7684 IPv6 \u5730\u5740\u3002</p> <p>\u540c\u65f6\uff0c\u5728 IPv6 \u5730\u5740\u4e2d\uff0c\u591a\u4f59\u7684 0 \u4e5f\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u6bd4\u5982\uff0c 02001:0db8:85a3:0000:0000:8a2e:0370:7334 \u662f\u65e0\u6548\u7684\u3002</p> <p>\u8bf4\u660e: \u4f60\u53ef\u4ee5\u8ba4\u4e3a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u91cc\u6ca1\u6709\u7a7a\u683c\u6216\u8005\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: \"172.16.254.1\"\n\n\u8f93\u51fa: \"IPv4\"\n\n\u89e3\u91ca: \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv4 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de \"IPv4\"\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n\n\u8f93\u51fa: \"IPv6\"\n\n\u89e3\u91ca: \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de \"IPv6\"\u3002\n</code></pre> <p>\u793a\u4f8b 3:</p> <pre><code>\u8f93\u5165: \"256.256.256.256\"\n\n\u8f93\u51fa: \"Neither\"\n\n\u89e3\u91ca: \u8fd9\u4e2a\u5730\u5740\u65e2\u4e0d\u662f IPv4 \u4e5f\u4e0d\u662f IPv6 \u5730\u5740\u3002\n</code></pre>"},{"location":"leetcode/468/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6309\u7167\u9898\u76ee\u63cf\u8ff0\u5206\u60c5\u51b5\u8ba8\u8bba</p>"},{"location":"leetcode/468/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/472/readme/","title":"472. \u8fde\u63a5\u8bcd","text":""},{"location":"leetcode/472/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5355\u8bcd\u7684\u5217\u8868\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u6240\u6709\u7684\u8fde\u63a5\u8bcd\u3002</p> <p>\u8fde\u63a5\u8bcd\u7684\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u662f\u7531\u81f3\u5c11\u4e24\u4e2a\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n\n\u8f93\u51fa: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n\n\u89e3\u91ca: \"catsdogcats\"\u7531\"cats\", \"dog\" \u548c \"cats\"\u7ec4\u6210; \n    \"dogcatsdog\"\u7531\"dog\", \"cats\"\u548c\"dog\"\u7ec4\u6210; \n    \"ratcatdogcat\"\u7531\"rat\", \"cat\", \"dog\"\u548c\"cat\"\u7ec4\u6210\u3002\n</code></pre> <p>\u8bf4\u660e:</p> <pre><code>\u7ed9\u5b9a\u6570\u7ec4\u7684\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7 10000\u3002\n\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u957f\u5ea6\u603b\u548c\u4e0d\u8d85\u8fc7 600000\u3002\n\u6240\u6709\u8f93\u5165\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\n\u4e0d\u9700\u8981\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002\n</code></pre>"},{"location":"leetcode/472/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u6309\u7167\u5355\u8bcd\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f</li> <li>\u9010\u4e2a\u5355\u8bcd\u63d2\u5165\u524d\u7f00\u6811\uff0c\u63d2\u5165\u4e4b\u524d\u5728\u6811\u4e2d\u67e5\u627e\uff0c\u4e00\u65e6\u627e\u5230\u4ece\u6839\u5f00\u59cb\u63d2\u5165</li> <li>\u5982\u679c\u80fd\u591f\u627e\u5230\uff0c\u8fd9\u4e2a\u5355\u8bcd\u8ba1\u5165\u7ed3\u679c\uff0c\u4e0d\u63d2\u5165\u6811\u4e2d</li> <li>\u5982\u679c\u6700\u7ec8\u6ca1\u80fd\u627e\u5230\uff0c\u628a\u8be5\u5355\u8bcd\u63d2\u5165\u524d\u7f00\u6811</li> </ol> <p>C</p>"},{"location":"leetcode/495/readme/","title":"495. \u63d0\u83ab\u653b\u51fb","text":""},{"location":"leetcode/495/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u300a\u82f1\u96c4\u8054\u76df\u300b\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u4e2a\u53eb \u201c\u63d0\u83ab\u201d \u7684\u82f1\u96c4\uff0c\u4ed6\u7684\u653b\u51fb\u53ef\u4ee5\u8ba9\u654c\u65b9\u82f1\u96c4\u827e\u5e0c\uff08\u7f16\u8005\u6ce8\uff1a\u5bd2\u51b0\u5c04\u624b\uff09\u8fdb\u5165\u4e2d\u6bd2\u72b6\u6001\u3002\u73b0\u5728\uff0c\u7ed9\u51fa\u63d0\u83ab\u5bf9\u827e\u5e0c\u7684\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u827e\u5e0c\u7684\u4e2d\u6bd2\u72b6\u6001\u603b\u65f6\u957f\u3002</p> <p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u63d0\u83ab\u5728\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\u8fdb\u884c\u653b\u51fb\uff0c\u5e76\u7acb\u5373\u4f7f\u827e\u5e0c\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u3002</p> <p>\u793a\u4f8b1:</p> <pre><code>  \u8f93\u5165: [1,4], 2\n  \u8f93\u51fa: 4\n  \u539f\u56e0: \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002\n  \u7b2c 4 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u4f7f\u5f97\u827e\u5e0c\u83b7\u5f97\u53e6\u5916 2 \u79d2\u4e2d\u6bd2\u65f6\u95f4\u3002\n  \u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 4 \u79d2\u3002\n</code></pre> <p>\u793a\u4f8b2:</p> <pre><code>  \u8f93\u5165: [1,2], 2\n  \u8f93\u51fa: 3\n  \u539f\u56e0: \u7b2c 1 \u79d2\u521d\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u672b\u7ed3\u675f\u3002\n  \u4f46\u662f\u7b2c 2 \u79d2\u521d\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u4e86\u5df2\u7ecf\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u7684\u827e\u5e0c\u3002\n  \u7531\u4e8e\u4e2d\u6bd2\u72b6\u6001\u4e0d\u53ef\u53e0\u52a0\uff0c\u63d0\u83ab\u5728\u7b2c 2 \u79d2\u521d\u7684\u8fd9\u6b21\u653b\u51fb\u4f1a\u5728\u7b2c 3 \u79d2\u672b\u7ed3\u675f\u3002\n  \u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 3 \u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  \u4f60\u53ef\u4ee5\u5047\u5b9a\u65f6\u95f4\u5e8f\u5217\u6570\u7ec4\u7684\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 10000\u3002\n  \u4f60\u53ef\u4ee5\u5047\u5b9a\u63d0\u83ab\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc7 10,000,000\u3002\n</code></pre>"},{"location":"leetcode/495/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u4e2d\u6bd2\u6301\u7eed\u622a\u81f3\u65f6\u95f4\u7684\u53d8\u91cfend,  \u626b\u63cf\u6bcf\u4e2a\u65f6\u95f4\u70b9\uff0c\u5982\u679c\u5f53\u524d\u65f6\u95f4\u70b9\u5927\u4e8e\u7b49\u4e8eend, \u6301\u7eed\u65f6\u95f4+duration \u5982\u679c\u5f53\u524d\u65f6\u95f4\u70b9\u5c0f\u4e8eend, \u8bf4\u660e\u4e2d\u6bd2\u65f6\u95f4\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u4e2d\u6bd2\u65f6\u95f4\u6709\u635f\u5931\uff0c\u4e3a time + duration - end. \u626b\u63cf\u4e00\u904d\u5373\u53ef\u5f97\u5230\u7ed3\u679c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n).</p> <pre><code>class Solution(object):\n    def findPoisonedDuration(self, timeSeries, duration):\n        \"\"\"\n        :type timeSeries: List[int]\n        :type duration: int\n        :rtype: int\n        \"\"\"\n        dead = 0\n        end = 0\n        for time in timeSeries:\n            if time &gt;= end:\n                dead += duration\n            else:\n                dead += time + duration - end\n            end = time + duration\n        return dead\n</code></pre>"},{"location":"leetcode/5/readme/","title":"Readme","text":""},{"location":"leetcode/5/readme/#5","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32","text":""},{"location":"leetcode/5/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe s \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1\uff1a\n\n\u8f93\u5165: \"babad\"\n\u8f93\u51fa: \"bab\"\n\u6ce8\u610f: \"aba\" \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002\n\n\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165: \"cbbd\"\n\u8f93\u51fa: \"bb\"\n</code></pre>"},{"location":"leetcode/5/readme/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u522b\u4ee5\u6bcf\u4e2a\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u67e5\u627e\u6700\u957f\u7684\u56de\u6587\u4e32\uff0c\u4fdd\u5b58\u6700\u957f\u7684\u90a3\u4e2a\u7684\u4e0b\u6807\uff0c\u8fd4\u56de\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(n^2),\u53ef\u4ee5\u901a\u8fc7\u3002</p>"},{"location":"leetcode/5/readme/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        if (s.size() &lt;= 1) return s;\n        int start = 0, end = 0;\n\n        for (int i = 0; i &lt; s.size(); i++)\n        {\n            int left, right, tmpLen = 0;\n            // \u4ee5s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = right = i;\n            while (left &gt;= 0 &amp;&amp; right &lt; s.size() &amp;&amp; s[left] == s[right])\n            {\n                left--, right++;\n            }\n            tmpLen = max(tmpLen, right - left - 1);\n            // \u4ee5s[i],s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = i, right = i + 1;\n            while (left &gt;= 0 &amp;&amp; right &lt; s.size() &amp;&amp; s[left] == s[right])\n            {\n                left--, right++;\n            }\n            tmpLen = max(tmpLen, right - left - 1);\n            // \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0start, end\n            if (tmpLen &gt; end - start + 1)\n            {\n                start = i - (tmpLen - 1) / 2;\n                end = i + tmpLen / 2;\n            }\n        }\n        return s.substr(start, end-start+1);\n    }\n};\n</code></pre>"},{"location":"leetcode/5/readme/#python","title":"python","text":"<pre><code>class Solution:\n    def longestPalindrome(self, s: str) -&gt; str:\n        start = 0\n        end = 0\n        for i in range(len(s)):\n            tmp_max = 0\n            # s[i]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = i\n            right = i\n            while left &gt;= 0 and right &lt; len(s) and s[left]==s[right]:\n                left -= 1\n                right += 1\n            tmp_max = max(tmp_max, right - left - 1)\n            # s[i], s[i+1]\u4e3a\u4e2d\u5fc3\u7684\u6700\u957f\u56de\u6587\u4e32\n            left = i\n            right = i + 1\n            while left &gt;= 0 and right &lt; len(s) and s[left]==s[right]:\n                left -= 1\n                right += 1\n            tmp_max = max(tmp_max, right - left - 1)\n            # \u5982\u679c\u672c\u6b21\u627e\u5230\u7684\u6bd4\u4e4b\u524d\u7684\u957f\uff0c\u66f4\u65b0\u8bb0\u5f55\u7684\u4e0b\u6807\n            if tmp_max &gt; end - start + 1:\n                start = i - (tmp_max - 1) // 2\n                end = i + tmp_max // 2\n        return s[start : end+1]\n</code></pre>"},{"location":"leetcode/5/readme/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u4f7f\u7528Manacher\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>https://segmentfault.com/a/1190000008484167</p>"},{"location":"leetcode/5/readme/#python_1","title":"python","text":"<p>```python class Solution(object):     def longestPalindrome(self, s):         \"\"\"         :type s: str         :rtype: str         \"\"\"         # \u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u63d2\u5165\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5b57\u7b26 '#'         s = '#' + \"\".join([c + '#' for c in s])         s = '^' + s + '$' # \u9996\u5c3e\u9644\u52a0\u4e0d\u540c\u5b57\u7b26\u907f\u514d\u8fb9\u754c\u5224\u65ad         n = len(s)         lps = [1] * n</p> <pre><code>    lid, mid, rid = 0, 0, 0\n    i = 1 # s[0] \u662f '^'\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97\n    center = 0 # \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u7528\u6765\u751f\u6210\u56de\u6587\n    ans = 0 # \u6700\u957f\u56de\u6587\u7684\u957f\u5ea6\n    while i &lt; n - 1:\n        if i &lt; rid:\n            # i' = 2 * mid - i \u662f i \u5173\u4e8e mid \u7684\u5bf9\u79f0\u70b9\n            lps[i] = min(lps[2 * mid - i], rid - i)\n\n        # lps[i] \u521d\u59cb\u5316\u4e3a1\uff0c\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u662f\u534a\u5f84\u4e3a1\u7684\u56de\u6587\n        # \u4ee5 i \u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62\n        # \u56e0\u4e3a\u9996\u5c3e\u65b0\u589e\u4e86\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u5230\u8fb9\u754c\u4e00\u5b9a\u4f1a\u505c\u6b62\n        while s[i - lps[i]] == s[i + lps[i]]:\n            lps[i] += 1\n\n        # \u901a\u8fc7\u4e0a\u9762\u7684\u5faa\u73af\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u51fa lps[i]\n        # \u5982\u679c i + lps[i] &gt; rid, \u8bf4\u660e\u7ecf\u8fc7\u6269\u5c55\u8fb9\u754c\u5df2\u7ecf\u8d85\u8fc7 rid\n        # \u66f4\u65b0 mid \u4e3a i, \u56e0\u4e3a lps[i] \u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230\n        # \u66f4\u65b0 rid \u4e3a mid + lps[mid]\n        if rid &lt; i + lps[i]:\n            mid = i\n            rid = mid + lps[mid]\n\n        if ans &lt; lps[i] - 1:\n            ans = lps[i] - 1\n            center = i\n        # \u5982\u679c i + lps[i] &lt; rid, \u8bf4\u660e i \u7684\u8fb9\u754c\u8fd8\u6ca1\u6709\u8d8a\u8fc7 mid \u7684\u8fb9\u754c\n        # \u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 i + 1, \u4f9d\u65e7\u5229\u7528 mid \u7684\u5806\u79f0\u4fe1\u606f\n        i += 1\n\n    string = s[center-ans : center + ans]\n    string = string.replace(\"#\", \"\")\n    return string\n</code></pre> <p>```</p>"},{"location":"leetcode/515/readme/","title":"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c","text":""},{"location":"leetcode/515/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165:\n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9\n\n\u8f93\u51fa: [1, 3, 9]\n</code></pre>"},{"location":"leetcode/515/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u5c42\u6c42\u4e00\u4e2a\u6700\u5927\u503c\uff0c \u5c42\u6b21\u7684\u533a\u5206\u4f7f\u7528\u961f\u5217\u3002</p> <pre><code># Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def largestValues(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        if root is None:\n            return ans\n        count = 1\n        deque = []\n\n        deque.append(root)\n        ans.append(root.val)\n        while len(deque) &gt; 0:\n            cur = deque.pop(0)\n            if cur.left:\n                deque.append(cur.left)\n            if cur.right:\n                deque.append(cur.right)\n            count -= 1\n            if count == 0 and len(deque) &gt; 0:\n                ans.append( max([node.val for node in deque]) )\n                count = len(deque)\n        return ans\n</code></pre>"},{"location":"leetcode/516/readme/","title":"516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/516/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u8be5\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u5047\u8bbes\u7684\u6700\u5927\u957f\u5ea6\u4e3a1000\u3002</p> <p>\u793a\u4f8b 1:     \u8f93\u5165:</p> <pre><code>\"bbbab\"\n\u8f93\u51fa:\n\n4\n\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a \"bbbb\"\u3002\n</code></pre> <p>\u793a\u4f8b 2:     \u8f93\u5165:</p> <pre><code>\"cbbd\"\n\u8f93\u51fa:\n\n2\n\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a \"bb\"\u3002\n</code></pre>"},{"location":"leetcode/516/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8f6c\u5316\u4e3a\u6c42 string \u548c\u5176 \u9006\u5e8f\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217</p>"},{"location":"leetcode/516/readme/#ac","title":"AC\u4ee3\u7801","text":"<p>Pyhton</p>"},{"location":"leetcode/541/readme/","title":"541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II","text":""},{"location":"leetcode/541/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u9694\u00a02k \u4e2a\u5b57\u7b26\u7684\u524d k \u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002</p> <p>\u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c11\u4e8e k \u4e2a\uff0c\u5219\u5c06\u5269\u4f59\u5b57\u7b26\u5168\u90e8\u53cd\u8f6c\u3002 \u5982\u679c\u5269\u4f59\u5b57\u7b26\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5176\u4f59\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002 \u00a0</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: s = \"abcdefg\", k = 2\n\u8f93\u51fa: \"bacdfeg\"\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\n\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728 [1, 10000] \u8303\u56f4\u5185\u3002\n</code></pre>"},{"location":"leetcode/541/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>void reverse(char *s, int start, int end)\n{\n    char tmp;\n    while (start &lt; end) {\n        tmp = s[start];\n        s[start] = s[end];\n        s[end] = tmp;\n        start++;\n        end--;\n    }\n}\nchar * reverseStr(char * s, int k){\n    int n = strlen(s);\n    int count2k = n / (2 * k);\n    int last = n - count2k * k * 2;\n    int start = -1;\n    int end = -1;\n    int i;\n    for (i = 0; i &lt; count2k; i++) {\n        start = i * 2 * k;\n        end = start + k - 1;\n        reverse(s, start, end);\n    }\n    start = count2k * 2 * k;\n    if (last &gt;= k) {\n        end = start + k - 1;\n        reverse(s, start, end);\n    } else {\n        end = n - 1;\n        reverse(s, start, end);\n    }\n\n    return s;\n}\n</code></pre>"},{"location":"leetcode/547/readme/","title":"547. \u670b\u53cb\u5708","text":""},{"location":"leetcode/547/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u73ed\u4e0a\u6709 N \u540d\u5b66\u751f\u3002\u5176\u4e2d\u6709\u4e9b\u4eba\u662f\u670b\u53cb\uff0c\u6709\u4e9b\u5219\u4e0d\u662f\u3002\u4ed6\u4eec\u7684\u53cb\u8c0a\u5177\u6709\u662f\u4f20\u9012\u6027\u3002\u5982\u679c\u5df2\u77e5 A \u662f B \u7684\u670b\u53cb\uff0cB \u662f C \u7684\u670b\u53cb\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a A \u4e5f\u662f C \u7684\u670b\u53cb\u3002\u6240\u8c13\u7684\u670b\u53cb\u5708\uff0c\u662f\u6307\u6240\u6709\u670b\u53cb\u7684\u96c6\u5408\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a N * N \u7684\u77e9\u9635 M\uff0c\u8868\u793a\u73ed\u7ea7\u4e2d\u5b66\u751f\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u3002\u5982\u679cM[i][j] = 1\uff0c\u8868\u793a\u5df2\u77e5\u7b2c i \u4e2a\u548c j \u4e2a\u5b66\u751f\u4e92\u4e3a\u670b\u53cb\u5173\u7cfb\uff0c\u5426\u5219\u4e3a\u4e0d\u77e5\u9053\u3002\u4f60\u5fc5\u987b\u8f93\u51fa\u6240\u6709\u5b66\u751f\u4e2d\u7684\u5df2\u77e5\u7684\u670b\u53cb\u5708\u603b\u6570\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: \n[[1,1,0],\n[1,1,0],\n[0,0,1]]\n\u8f93\u51fa: 2 \n\u8bf4\u660e\uff1a\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u4ed6\u4eec\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\n\u7b2c2\u4e2a\u5b66\u751f\u81ea\u5df1\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\u6240\u4ee5\u8fd4\u56de2\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: \n[[1,1,0],\n[1,1,1],\n[0,1,1]]\n\u8f93\u51fa: 1\n\u8bf4\u660e\uff1a\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u5b66\u751f1\u548c\u5b66\u751f2\u4e92\u4e3a\u670b\u53cb\uff0c\u6240\u4ee5\u5b66\u751f0\u548c\u5b66\u751f2\u4e5f\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e09\u4e2a\u5728\u4e00\u4e2a\u670b\u53cb\u5708\uff0c\u8fd4\u56de1\u3002\n</code></pre> <p>\u6ce8\u610f\uff1a</p> <pre><code>N \u5728[1,200]\u7684\u8303\u56f4\u5185\u3002\n\u5bf9\u4e8e\u6240\u6709\u5b66\u751f\uff0c\u6709M[i][i] = 1\u3002\n\u5982\u679c\u6709M[i][j] = 1\uff0c\u5219\u6709M[j][i] = 1\u3002\n</code></pre>"},{"location":"leetcode/547/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u670b\u53cb\u5708\uff0c\u6700\u540e\u7edf\u8ba1\u4e2a\u6570\u8f93\u51fa\u3002</p> <p>python</p>"},{"location":"leetcode/605/readme/","title":"605. \u79cd\u82b1\u95ee\u9898","text":""},{"location":"leetcode/605/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u82b1\u575b\uff0c\u4e00\u90e8\u5206\u5730\u5757\u79cd\u690d\u4e86\u82b1\uff0c\u53e6\u4e00\u90e8\u5206\u5374\u6ca1\u6709\u3002\u53ef\u662f\uff0c\u82b1\u5349\u4e0d\u80fd\u79cd\u690d\u5728\u76f8\u90bb\u7684\u5730\u5757\u4e0a\uff0c\u5b83\u4eec\u4f1a\u4e89\u593a\u6c34\u6e90\uff0c\u4e24\u8005\u90fd\u4f1a\u6b7b\u53bb\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u82b1\u575b\uff08\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u7ec4\u5305\u542b0\u548c1\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u79cd\u690d\u82b1\uff0c1\u8868\u793a\u79cd\u690d\u4e86\u82b1\uff09\uff0c\u548c\u4e00\u4e2a\u6570\u00a0n\u00a0\u3002\u80fd\u5426\u5728\u4e0d\u6253\u7834\u79cd\u690d\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u79cd\u5165\u00a0n\u00a0\u6735\u82b1\uff1f\u80fd\u5219\u8fd4\u56deTrue\uff0c\u4e0d\u80fd\u5219\u8fd4\u56deFalse\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: flowerbed = [1,0,0,0,1], n = 1\n\u8f93\u51fa: True\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: flowerbed = [1,0,0,0,1], n = 2\n\u8f93\u51fa: False\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>\u6570\u7ec4\u5185\u5df2\u79cd\u597d\u7684\u82b1\u4e0d\u4f1a\u8fdd\u53cd\u79cd\u690d\u89c4\u5219\u3002\n\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1, 20000]\u3002\nn \u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n</code></pre>"},{"location":"leetcode/605/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5148\u5904\u7406\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5 \u5bf9\u4e8e\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u5143\u7d20\uff0c\u5224\u65ad\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u80fd\u79cd\u82b1\uff0c\u5982\u679c\u80fd\u79cd\uff0c n - 1 \u540c\u65f6\u5c06\u8be5\u4f4d\u7f6e\u79cd\u4e0a\u82b1\u3002 \u6700\u540e\u5224\u65adN\u662f\u5426\u4e3a0.</p> <pre><code>bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n){\n    int i;\n    // \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5355\u72ec\u5904\u7406\n    if (flowerbedSize == 1 &amp;&amp; flowerbed[0] == 0 &amp;&amp; n == 1) {\n        return true;\n    }\n    for (i = 0; i &lt; flowerbedSize; i++) {\n        if (flowerbed[i] == 1) {\n            continue;\n        }\n        // \u5982\u679c\u4f4d\u4e8e\u8d77\u59cb\u4f4d\u7f6e\uff0c\u53ea\u8981\u540e\u9762\u4e00\u4e2a\u4e0d\u662f1\uff0c\u5c31\u53ef\u4ee5\u79cd\u82b1\n        if (i == 0 &amp;&amp; i + 1 &lt; flowerbedSize &amp;&amp; flowerbed[i + 1] == 0) {\n            n = n - 1;\n            flowerbed[i] = 1;\n        }\n        // \u5982\u679c\u4f4d\u4e8e\u6700\u540e\uff0c\u53ea\u8981\u524d\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u662f1\uff0c\u5c31\u53ef\u4ee5\u79cd\u82b1\n        if (i == flowerbedSize - 1 &amp;&amp; i - 1 &gt;= 0 &amp;&amp; flowerbed[i - 1] == 0) {\n            n = n - 1;\n            flowerbed[i] = 1;\n        }\n        if (i - 1 &gt;= 0 &amp;&amp; i + 1 &lt; flowerbedSize &amp;&amp; flowerbed[i - 1] == 0 &amp;&amp; flowerbed[i + 1] == 0) {\n            n = n - 1;\n            flowerbed[i] = 1;\n        }\n    }\n\n    if (n &gt; 0) {\n        return false;\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"leetcode/609/readme/","title":"609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6","text":""},{"location":"leetcode/609/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4fe1\u606f\u5217\u8868\uff0c\u5305\u62ec\u76ee\u5f55\u8def\u5f84\uff0c\u4ee5\u53ca\u8be5\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5305\u542b\u5185\u5bb9\u7684\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u627e\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u91cd\u590d\u6587\u4ef6\u7ec4\u7684\u8def\u5f84\u3002\u4e00\u7ec4\u91cd\u590d\u7684\u6587\u4ef6\u81f3\u5c11\u5305\u62ec\u4e8c\u4e2a\u5177\u6709\u5b8c\u5168\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u3002</p> <p>\u8f93\u5165\u5217\u8868\u4e2d\u7684\u5355\u4e2a\u76ee\u5f55\u4fe1\u606f\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5982\u4e0b\uff1a</p> <p>\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"</p> <p>\u8fd9\u610f\u5473\u7740\u6709 n \u4e2a\u6587\u4ef6\uff08f1.txt, f2.txt ... fn.txt \u7684\u5185\u5bb9\u5206\u522b\u662f f1_content, f2_content ... fn_content\uff09\u5728\u76ee\u5f55 root/d1/d2/.../dm \u4e0b\u3002\u6ce8\u610f\uff1an&gt;=1 \u4e14 m&gt;=0\u3002\u5982\u679c m=0\uff0c\u5219\u8868\u793a\u8be5\u76ee\u5f55\u662f\u6839\u76ee\u5f55\u3002</p> <p>\u8be5\u8f93\u51fa\u662f\u91cd\u590d\u6587\u4ef6\u8def\u5f84\u7ec4\u7684\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5b83\u5305\u542b\u5177\u6709\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u8def\u5f84\u3002\u6587\u4ef6\u8def\u5f84\u662f\u5177\u6709\u4e0b\u5217\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a</p> <p>\"directory_path/file_name.txt\"</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a\n[\"root/a 1.txt(abcd) 2.txt(efgh)\", \"root/c 3.txt(abcd)\", \"root/c/d 4.txt(efgh)\", \"root 4.txt(efgh)\"]\n\u8f93\u51fa\uff1a  \n[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</code></pre>"},{"location":"leetcode/609/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8f6c\u6362\u6210\u8def\u5f84\uff0c \u6587\u4ef6\u540d\uff0c\u7136\u540e\u5229\u7528\u54c8\u5e0c\u8868\u67e5\u627e\u91cd\u590d</p>"},{"location":"leetcode/609/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/621/readme/","title":"621. \u4efb\u52a1\u8c03\u5ea6\u5668","text":""},{"location":"leetcode/621/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u5927\u5199\u7684 A - Z \u5b57\u6bcd\u8868\u793a\u768426 \u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002CPU \u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p> <p>\u7136\u800c\uff0c\u4e24\u4e2a\u76f8\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a n \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p> <p>\u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684\u6700\u77ed\u65f6\u95f4\u3002</p> <p>\u793a\u4f8b \uff1a</p> <pre><code>\u8f93\u5165\uff1atasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n\u8f93\u51fa\uff1a8\n\u89e3\u91ca\uff1aA -&gt; B -&gt; (\u5f85\u547d) -&gt; A -&gt; B -&gt; (\u5f85\u547d) -&gt; A -&gt; B.\n    \u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u76f8\u540c\u7c7b\u578b\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u95f4\u9694\u957f\u5ea6\u4e3a n = 2 \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u800c\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\u53ea\u9700\u8981\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u6240\u4ee5\u4e2d\u95f4\u51fa\u73b0\u4e86\uff08\u5f85\u547d\uff09\u72b6\u6001\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>\u4efb\u52a1\u7684\u603b\u4e2a\u6570\u4e3a [1, 10000]\u3002\nn \u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]\u3002\n</code></pre>"},{"location":"leetcode/621/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u7edf\u8ba1\u6bcf\u4e2a\u4efb\u52a1\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6309\u7167\u6b21\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f</li> <li>\u5047\u8bbe\u6700\u5927\u7684\u6b21\u6570\u4e3ac, \u90a3\u4e48\u81f3\u5c11\u9700\u8981 (c-1) * n + c \u4e2a\u65f6\u95f4\u624d\u80fd\u6267\u884c\u5b8c</li> <li>\u521d\u59cb\u5316ans = (c-1) * n + c, space = (c-1) * n \u8868\u793a\u7a7a\u95f2\u7684\u4f4d\u7f6e\u4e2a\u6570</li> <li>\u904d\u5386\u5269\u4e0b\u7684\u4efb\u52a1\uff0c\u5982\u679c\u51fa\u73b0\u6b21\u6570\u662fc, \u5219ans+=1, \u56e0\u4e3a\u9700\u8981\u5728\u6700\u540e\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u6765\u6267\u884c\u5b83\uff1b \u5982\u679c\u5c0f\u4e8ec, \u5219\u80af\u5b9a\u53ef\u4ee5\u5b89\u6392\u5728\u4e4b\u524d\u7684\u7a7a\u95f2\u4f4d\u7f6e\u4e0a\u3002 </li> <li>\u5b89\u6392\u4e4b\u524d\uff0c\u68c0\u67e5space, \u5982\u679cspace\u5c0f\u4e8e\u5f53\u524d\u8981\u5b89\u6392\u7684\u4efb\u52a1\u6570\u91cf\uff0c \u90a3\u4e48\u5f53\u524d\u7684\u7a7a\u95f2\u88ab\u5360\u6ee1\uff0c\u6700\u540e\u7684\u7ed3\u679c\u662f len(tasks) \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4e00\u4e2a\u7a7a\u95f2\u7a7a\u95f4\u90fd\u6ca1\u6709\u4e86\uff0c\u4e5f\u80fd\u6ee1\u8db3\u95f4\u9694\u4e3an. \u5982\u679cspace\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u8981\u5b89\u6392\u7684\u4efb\u52a1\u6570\u91cf\uff0c \u66f4\u65b0space.</li> </ol>"},{"location":"leetcode/621/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>Python</li> <li>Python</li> </ul>"},{"location":"leetcode/639/readme/","title":"639. \u89e3\u7801\u65b9\u6cd5 2","text":""},{"location":"leetcode/639/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd\u00a0A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p> <p>'A' -&gt; 1 'B' -&gt; 2 ... 'Z' -&gt; 26 \u9664\u4e86\u4e0a\u8ff0\u7684\u6761\u4ef6\u4ee5\u5916\uff0c\u73b0\u5728\u52a0\u5bc6\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u5b57\u7b26 ''\u4e86\uff0c\u5b57\u7b26''\u53ef\u4ee5\u88ab\u5f53\u505a1\u52309\u5f53\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>\u7ed9\u5b9a\u4e00\u6761\u5305\u542b\u6570\u5b57\u548c\u5b57\u7b26'*'\u7684\u52a0\u5bc6\u4fe1\u606f\uff0c\u8bf7\u786e\u5b9a\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p> <p>\u540c\u65f6\uff0c\u7531\u4e8e\u7ed3\u679c\u503c\u53ef\u80fd\u4f1a\u76f8\u5f53\u7684\u5927\uff0c\u6240\u4ee5\u4f60\u5e94\u5f53\u5bf9109\u00a0+ 7\u53d6\u6a21\u3002\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u6b64\u5904\u53d6\u6a21\u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff09</p> <p>\u793a\u4f8b 1 :</p> <pre><code>\u8f93\u5165: \"*\"\n\u8f93\u51fa: 9\n\u89e3\u91ca: \u52a0\u5bc6\u7684\u4fe1\u606f\u53ef\u4ee5\u88ab\u89e3\u5bc6\u4e3a: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\n</code></pre> <p>\u793a\u4f8b 2 :</p> <pre><code>\u8f93\u5165: \"1*\"\n\u8f93\u51fa: 9 + 9 = 18\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u8fd9\u91cc1*\u53ef\u4ee5\u5206\u89e3\u4e3a1,* \u6216\u8005\u5f53\u505a1*\u6765\u5904\u7406\uff0c\u6240\u4ee5\u7ed3\u679c\u662f9+9=18\uff09\n\u8bf4\u660e :\n\n\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\u662f [1, 105]\u3002\n\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u4f1a\u5305\u542b\u5b57\u7b26 '*' \u548c \u6570\u5b57'0' - '9'\u3002\n</code></pre>"},{"location":"leetcode/639/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4e0e 91.\u89e3\u7801\u65b9\u6cd5 \u7c7b\u4f3c\uff0c\u90fd\u662f\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u4ece\u540e\u5411\u524d\u89e3\u51b3\u3002 \u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a 1. <code>*</code> \u53d6\u503c\u7684\u8303\u56f4\u662f1-9\uff0c \u4e0d\u5305\u62ec0\uff0c <code>**</code>\u53ef\u4ee5\u53d6\u503c11-19\uff0c 21-26\u517115\u4e2a\u5143\u7d20 2. \u89e3\u7801\u65b9\u6cd5\u6570\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u9700\u8981\u7528\u5230 <code>9 * nextCount</code>, \u8fd9\u91cc\u53ef\u80fd\u4f1a\u8d85\u51fa <code>int</code> \u7684\u8868\u793a\u8303\u56f4\uff0c \u6240\u4ee5\u7ed3\u679c\u9700\u8981\u7528 <code>long long</code> \u7c7b\u578b\u4fdd\u5b58\u3002</p> <pre><code>#define M 1000000007\n\n/*\n    \"12*3\", * \u53ef\u4ee5\u8868\u793a 1-9 \u4efb\u610f\u6570\u5b57\n    \u8bbe dp[i] \u8868\u793a s[i...n] \u7684\u89e3\u7801\u6570\u91cf\uff0c dp[n] = 1\n    if s[i] != '*', dp[i] = dp[i+1] + dp[i+2], \u4e0e 91 \u89e3\u7801\u65b9\u6cd5\u4e2d\u5bf9\u5e94\u7684\u60c5\u51b5\u4e00\u6837\n    if s[i] == '*', dp[i] \u53ef\u5355\u72ec\u89e3\u6790\u6210 0-9 \u51719\u79cd\u60c5\u51b5\uff0c dp[i] = 9 * dp[i + 1]\n                    dp[i], dp[i+1] \u89e3\u6790\u6210\u5b57\u6bcd\u7684\u60c5\u51b5\uff0c if s[i+1] in [0,6], * \u53ef\u4ee5\u53d6 1\uff0c 2 \u5171\u4e24\u79cd\u60c5\u51b5\n                                                     if s[i+1] not in [0, 6], * \u53ef\u4ee5\u53d6 1 \u5171\u4e00\u79cd\u60c5\u51b5\n */\nint numDecodings(char * s){\n    if (s == NULL) return 0;\n    int n = strlen(s);\n    long long nextNext = 1;\n    long long next = (s[n-1] == '0') ? 0 : 1;\n    long long curr;\n\n    if (s[n-1] == '*') next = 9; // * \u53ef\u4ee5\u53d6 1-9 \u5171 9 \u79cd\u60c5\u51b5\n    for (int i = n - 2; i &gt;= 0; i--) {\n        if (s[i] == '*') {\n            curr = 0;\n            if (s[i + 1] &gt;= '0' &amp;&amp; s[i+1] &lt;= '6') {\n                curr = 2; // *[0-6], *\u53ef\u4ee5\u53d6\u503c 1\uff0c 2\n            } else if (s[i+1] == '*') {\n                curr = 15; // **, \u53ef\u4ee5\u53d611-19\uff0c 21-26\uff0c \u6ce8\u610f00-10\uff0c 20\u662f\u4e0d\u80fd\u53d6\u7684\n            } else {\n                curr = 1; // *[7-9], *\u53ea\u80fd\u53d6 1\uff0c \u56e0\u4e3a 26 \u662f\u6700\u5927\u503c\uff0c 27\u662f\u65e0\u6cd5\u89e3\u7801\u7684\n            }\n            curr = curr * nextNext; // \u5bf9\u5e94\u4e24\u4f4d\u6570\u5b57\u89e3\u7801\u4e00\u4e2a\u5b57\u6bcd\u7684\u60c5\u51b5\n            curr += 9 * next; // \u5bf9\u5e94 * \u53d61-9\u5e76\u4e14\u5355\u72ec\u89e3\u7801\u7684\u60c5\u51b5\n        } else if (s[i] == '0') {\n            curr = 0; // 0 \u65e0\u6cd5\u89e3\u7801\uff0c \u5373\u4f7f\u662f0*\u4e5f\u4e0d\u80fd\n        } else {\n            curr = 0;\n            if (s[i+1] == '*') {\n                if (s[i] == '1') curr = 9; // 11-19 \u53ef\u4ee5\u67099\u4e2d\u89e3\u7801\u65b9\u6cd5\n                if (s[i] == '2') curr = 6; // 21-26 \u53ef\u4ee5\u67096\u79cd\u89e3\u7801\u65b9\u6cd5\n            } else {\n                int number = (s[i] - '0') * 10 + s[i+1] - '0';\n                if (number &gt;= 1 &amp;&amp; number &lt;= 26) {\n                    curr = 1;\n                }\n            }\n            curr = curr * nextNext;\n            curr += next;\n        }\n\n        nextNext = next;\n        next = curr % M;\n    }\n\n    return next;\n}\n</code></pre>"},{"location":"leetcode/658/readme/","title":"658. \u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20","text":""},{"location":"leetcode/658/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u4e24\u4e2a\u6574\u6570 k \u548c x\uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 x\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 k \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684\u3002\u5982\u679c\u6709\u4e24\u4e2a\u6570\u4e0e x \u7684\u5dee\u503c\u4e00\u6837\uff0c\u4f18\u5148\u9009\u62e9\u6570\u503c\u8f83\u5c0f\u7684\u90a3\u4e2a\u6570\u3002</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>  \u8f93\u5165: [1,2,3,4,5], k=4, x=3\n  \u8f93\u51fa: [1,2,3,4]\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>  \u8f93\u5165: [1,2,3,4,5], k=4, x=-1\n  \u8f93\u51fa: [1,2,3,4]\n</code></pre> <p>\u8bf4\u660e:</p> <pre><code>  k \u7684\u503c\u4e3a\u6b63\u6570\uff0c\u4e14\u603b\u662f\u5c0f\u4e8e\u7ed9\u5b9a\u6392\u5e8f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\n  \u6570\u7ec4\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc7 104\n  \u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0e\u00a0x \u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 104\n</code></pre>"},{"location":"leetcode/658/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230 x \u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e</li> <li>\u4f7f\u7528\u53cc\u6307\u9488\u641c\u7d22\u9644\u8fd1\u5143\u7d20\uff0c\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684K\u4e2a</li> <li>\u6392\u5e8f\u8f93\u51fa</li> </ol> <pre><code>#define ABS(a) ((a) &gt;= 0 ? (a) : (-(a)))\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nvoid swap(int *arr, int index1, int index2)\n{\n    int tmp;\n\n    if (index1 == index2) {\n        return;\n    }\n\n    tmp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = tmp;\n    return;\n}\n\nint partition(int *arr, int start, int end)\n{\n    int x, i, j;\n\n    x = arr[end];\n    j = start - 1;\n    for (i = start; i &lt; end; i++) {\n        if (arr[i] &lt;= x) {\n            j = j + 1;\n            swap(arr, j, i);\n        }\n    }\n    swap(arr, j + 1, end);\n    return j + 1;\n}\nvoid sorted(int *arr, int start, int end)\n{\n    int mid;\n\n    if (start &gt;= end) {\n        return;\n    }\n\n    mid = partition(arr, start, end);\n    sorted(arr, start, mid - 1);\n    sorted(arr, mid + 1, end);\n    return;\n}\nint BinaryFind(int *arr, int arrSize, int target)\n{\n    int left = 0;\n    int right = arrSize - 1;\n    int mid;\n\n    while (left &lt; right) {\n        mid = (left + right) / 2;\n        if (arr[mid] == target) {\n            return mid;\n        } else if (arr[mid] &gt; target) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\nint* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize){\n    int *ans;\n    int ansEnd = 0;\n    int left, right, pos;\n\n    if (arr == NULL || arrSize == 0) {\n        return NULL;\n    }\n\n    // \u4e8c\u5206\u67e5\u627e\u627e\u5230 x \u5e94\u8be5\u63d2\u5165 arr \u7684\u4f4d\u7f6e\n    pos = BinaryFind(arr, arrSize, x);\n\n    // \u4ece pos \u5f00\u59cb\u53cc\u6307\u9488\u5de6\u53f3\u641c\u7d22\uff0c \u627e\u4e0e x \u5dee\u503c\u6700\u5c0f\u7684\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\n    ans = (int*)malloc(sizeof(int) * k);\n    left = pos - 1;\n    right = pos;\n    while (ansEnd &lt; k) {\n        if (left &gt;= 0 &amp;&amp; right &lt; arrSize) {\n            if (ABS(arr[left] - x) &lt;= ABS(arr[right] - x)) {\n                ans[ansEnd++] = arr[left];\n                left -= 1;\n            } else {\n                ans[ansEnd++] = arr[right];\n                right += 1;\n            }\n        } else if (left &gt;= 0) {\n            ans[ansEnd++] = arr[left];\n            left -= 1;\n        } else {\n            ans[ansEnd++] = arr[right];\n            right += 1;\n        }\n    }\n\n    sorted(ans, 0, ansEnd - 1);\n\n    *returnSize = ansEnd;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/684/readme/","title":"684. \u5197\u4f59\u8fde\u63a5","text":""},{"location":"leetcode/684/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684\u65e0\u5411\u56fe\u3002</p> <p>\u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002</p> <p>\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a\u8fb9\u7684\u5143\u7d20\u662f\u4e00\u5bf9[u, v]\u00a0\uff0c\u6ee1\u8db3\u00a0u &lt; v\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9u\u00a0\u548cv\u7684\u65e0\u5411\u56fe\u7684\u8fb9\u3002</p> <p>\u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9\u00a0[u, v] \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f\u00a0u &lt; v\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165: [[1,2], [1,3], [2,3]]\n\u8f93\u51fa: [2,3]\n\u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a:\n1\n/ \\\n2 - 3\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165: [[1,2], [2,3], [3,4], [1,4], [1,5]]\n\u8f93\u51fa: [1,4]\n\u89e3\u91ca: \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a:\n5 - 1 - 2\n    |   |\n    4 - 3\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>\u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002\n\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n</code></pre>"},{"location":"leetcode/684/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u987a\u5e8f\u8bfb\u53d6\u7ed9\u51fa\u7684\u8fb9</li> <li>\u4f7f\u7528\u5e76\u67e5\u96c6merge\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\uff0c\u5982\u679cmerge\u4e4b\u524d\u53d1\u73b0\u5df2\u7ecf\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\uff0c\u8fd9\u6761\u8fb9\u662f\u591a\u4f59\u7684\u3002</li> <li>\u4e00\u65e6\u627e\u5230\uff0c\u8f93\u51fa\u5b83</li> </ol> <p>python</p>"},{"location":"leetcode/685/readme/","title":"685. \u5197\u4f59\u8fde\u63a5 II","text":"<p>\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6709\u6839\u6811\u6307\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u6709\u5411\u56fe\u3002\u8be5\u6811\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u662f\u8be5\u6839\u8282\u70b9\u7684\u540e\u7ee7\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002</p> <p>\u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002</p> <p>\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5\u8fb9\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002 \u6bcf\u4e00\u4e2a\u8fb9 \u7684\u5143\u7d20\u662f\u4e00\u5bf9 [u, v]\uff0c\u7528\u4ee5\u8868\u793a\u6709\u5411\u56fe\u4e2d\u8fde\u63a5\u9876\u70b9 u and v\u548c\u9876\u70b9\u7684\u8fb9\uff0c\u5176\u4e2d\u7236\u8282\u70b9u\u662f\u5b50\u8282\u70b9v\u7684\u4e00\u4e2a\u7236\u8282\u70b9\u3002</p> <p>\u8fd4\u56de\u4e00\u6761\u80fd\u5220\u9664\u7684\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u56fe\u662f\u6709N\u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\u3002\u82e5\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b54\u6848\u3002</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>\u8f93\u5165: [[1,2], [1,3], [2,3]]\n\u8f93\u51fa: [2,3]\n\u89e3\u91ca: \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b:\n  1\n / \\\nv   v\n2--&gt;3\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: [[1,2], [2,3], [3,4], [4,1], [1,5]]\n\u8f93\u51fa: [4,1]\n\u89e3\u91ca: \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b:\n5 &lt;- 1 -&gt; 2\n    ^    |\n    |    v\n    4 &lt;- 3\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u7684\u57283\u52301000\u8303\u56f4\u5185\u3002\n\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2d N \u662f\u4e8c\u7ef4\u6570\u7ec4\u7684\u5927\u5c0f\u3002\n</code></pre>"},{"location":"leetcode/685/readme/#_1","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u5e76\u67e5\u96c6\uff0c \u989d\u5916\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u3002</p> <ol> <li>\u5148\u627e\u5230\u5165\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5c1d\u8bd5\u53bb\u6389\u4e00\u4e2a\u8fb9\uff0c\u68c0\u67e5\u7ed3\u679c\u662f\u5426\u7b26\u5408\u8981\u6c42</li> <li>\u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5c1d\u8bd5\u5165\u5ea6\u4e3a1\u7684\u70b9\u53bb\u6389\u8fb9</li> <li>\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u662f\u8f93\u51fa\u6700\u540e\u51fa\u73b0\u7684\uff0c\u6240\u4ee5\u4ece\u540e\u5f80\u524d\u904d\u5386</li> </ol> <p>Python</p>"},{"location":"leetcode/727/readme/","title":"767. \u91cd\u6784\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/727/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32S\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002</p> <p>\u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: S = \"aab\"\n\u8f93\u51fa: \"aba\"\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: S = \"aaab\"\n\u8f93\u51fa: \"\"\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>S \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728[1, 500]\u533a\u95f4\u5185\u3002\n</code></pre>"},{"location":"leetcode/739/readme/","title":"739. \u6bcf\u65e5\u6e29\u5ea6","text":""},{"location":"leetcode/739/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8bf7\u6839\u636e\u6bcf\u65e5 \u6c14\u6e29 \u5217\u8868\uff0c\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u51fa\u4e3a\uff1a\u8981\u60f3\u89c2\u6d4b\u5230\u66f4\u9ad8\u7684\u6c14\u6e29\uff0c\u81f3\u5c11\u9700\u8981\u7b49\u5f85\u7684\u5929\u6570\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528\u00a00 \u6765\u4ee3\u66ff\u3002</p> <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868\u00a0temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f\u00a0[1, 1, 4, 2, 1, 1, 0, 0]\u3002</p> <p>\u63d0\u793a\uff1a\u6c14\u6e29 \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f\u00a0[1, 30000]\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u5747\u4e3a\u534e\u6c0f\u5ea6\uff0c\u90fd\u662f\u5728\u00a0[30, 100]\u00a0\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</p>"},{"location":"leetcode/739/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u66b4\u529b\u65b9\u6cd5\uff0c\u4e24\u5c42\u5faa\u73af\uff0c\u6700\u540e\u4e24\u4e2a\u7528\u4f8b\u65e0\u6cd5\u901a\u8fc7\u3002 35 / 37 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b</p> <pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* T, int TSize, int* returnSize){\n    int *ans;\n    int i, j;\n\n    ans = (int*)malloc(sizeof(int) * TSize);\n    memset(ans, 0, sizeof(int) * TSize);\n    for (i = 0; i &lt; TSize - 1; i++) {\n        for (j = i + 1; j &lt; TSize; j++) {\n            if (T[j] &gt; T[i]) {\n                ans[i] = j - i;\n                break;\n            }\n        }\n    }\n    *returnSize = TSize;\n    return ans;\n}\n</code></pre> <p>\u66b4\u529b\u65b9\u6cd5\u6bcf\u6b21\u90fd\u5230\u626b\u63cf\u5230\u6700\u540e\uff0c\u65e0\u6cd5\u5229\u7528\u524d\u4e00\u6b21\u626b\u63cf\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\u3002 \u6211\u4eec\u91c7\u53d6\u4ece\u540e\u9053\u524d\u7684\u65b9\u6cd5\u626b\u63cf\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c \u5f53 nums[i] &lt; nums[i+1] \u65f6\uff0c ans[i] = 1 \u5f53nums[i] &gt;= nums[i+1] \u65f6\uff0c \u9700\u8981\u5411\u540e\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8enums[i]\u7684\u6570\u5b57 \u5728\u5411\u540e\u627e\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5df2\u7ecf\u77e5\u9053\u4e86\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5b83\u7684\u6570\u5b57\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5fc5\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u800c\u662f\u8df3\u8dc3\u7740\u627e\uff0c\u8fd9\u6837\u660e\u663e\u53ef\u4ee5\u5feb\u5f88\u591a\u3002</p> <pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* T, int TSize, int* returnSize){\n    int *ans;\n    int i, j;\n\n    ans = (int*)malloc(sizeof(int) * TSize);\n    memset(ans, 0, sizeof(int) * TSize);\n    for (i = TSize - 2; i &gt;= 0; i--) {\n        if (T[i] &lt; T[i + 1]) {\n            ans[i] = 1;\n        } else {\n            j = i + 1;\n            while (j &lt; TSize &amp;&amp; T[i] &gt;= T[j]) {\n                if (ans[j] == 0) {\n                    break;\n                }\n                j = j + ans[j];\n            }\n            if (j &lt; TSize &amp;&amp; j &gt; i &amp;&amp; T[j] &gt; T[i]) {\n                ans[i] = j - i;\n            }\n        }\n    }\n    *returnSize = TSize;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/743/readme/","title":"743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4","text":""},{"location":"leetcode/743/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709\u00a0N\u00a0\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a\u00a01\u00a0\u5230\u00a0N\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868\u00a0times\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7\u6709\u5411\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002\u00a0times[i] = (u, v, w)\uff0c\u5176\u4e2d\u00a0u\u00a0\u662f\u6e90\u8282\u70b9\uff0cv\u00a0\u662f\u76ee\u6807\u8282\u70b9\uff0c w\u00a0\u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u4ece\u67d0\u4e2a\u8282\u70b9\u00a0K\u00a0\u53d1\u51fa\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de\u00a0-1\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\uff1atimes = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>N\u00a0\u7684\u8303\u56f4\u5728\u00a0[1, 100]\u00a0\u4e4b\u95f4\u3002\nK\u00a0\u7684\u8303\u56f4\u5728\u00a0[1, N]\u00a0\u4e4b\u95f4\u3002\ntimes\u00a0\u7684\u957f\u5ea6\u5728\u00a0[1, 6000]\u00a0\u4e4b\u95f4\u3002\n\u6240\u6709\u7684\u8fb9\u00a0times[i] = (u, v, w)\u00a0\u90fd\u6709\u00a01 &lt;= u, v &lt;= N\u00a0\u4e14\u00a00 &lt;= w &lt;= 100\u3002\n</code></pre>"},{"location":"leetcode/743/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528 dijkstra \u786e\u5b9a\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c \u7136\u540e\u6c42\u548c</p> <p>Python</p>"},{"location":"leetcode/767/readme/","title":"767. \u91cd\u6784\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/767/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32S\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002</p> <p>\u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: S = \"aab\"\n\u8f93\u51fa: \"aba\"\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: S = \"aaab\"\n\u8f93\u51fa: \"\"\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>S \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728[1, 500]\u533a\u95f4\u5185\u3002\n</code></pre>"},{"location":"leetcode/767/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5904\u7406\u6210\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\uff0c \u6309\u7167\u6b21\u6570\u5efa\u7acb\u5927\u9876\u5806\u3002 \u6bcf\u6b21\u53d6\u5806\u9876\u4e0e\u524d\u4e00\u6b21\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u8c03\u6574\u5806\u3002 \u76f4\u5230\u53d6\u5b8c\u6216\u8005\u627e\u4e0d\u5230\u4e0d\u540c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002</p> <pre><code>N = 600\nclass Solution(object):\n    def reorganizeString(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: str\n        \"\"\"\n        dic = {}\n        for c in S:\n            if c not in dic:\n                dic[c] = 1\n            else:\n                dic[c] += 1\n        maps = []\n        for key, value in dic.iteritems():\n            maps.append( [N-value, value, key] )\n        heapq.heapify(maps)\n        hp = maps\n        ans = \"\"\n        while (len(hp) &gt; 0):\n            index, value, key = heapq.heappop(hp)\n            if len(ans) == 0 or ans[-1] != key:\n                ans += key\n                value = value - 1\n                if value &gt; 0:\n                    heapq.heappush(hp, [N-value, value, key])\n            else:\n                if len(hp) == 0:\n                    return \"\"\n                index, value2, key2 = heapq.heappop(hp)\n                ans += key2\n                value2 = value2 - 1\n                if value2 &gt; 0:\n                    heapq.heappush(hp, [N-value2, value2, key2] )\n                heapq.heappush(hp, [N-value, value, key])\n        return ans\n</code></pre>"},{"location":"leetcode/768/readme/","title":"768. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II","text":""},{"location":"leetcode/768/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8fd9\u4e2a\u95ee\u9898\u548c\u201c\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757\u201d\u76f8\u4f3c\uff0c\u4f46\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff0c\u8f93\u5165\u6570\u7ec4\u6700\u5927\u957f\u5ea6\u4e3a2000\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6700\u5927\u4e3a10**8\u3002</p> <p>arr\u662f\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p> <p>\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f</p> <p>\u793a\u4f8b\u00a01:</p> <pre><code>  \u8f93\u5165: arr = [5,4,3,2,1]\n  \u8f93\u51fa: 1\n  \u89e3\u91ca:\n  \u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n  \u4f8b\u5982\uff0c\u5206\u6210 [5, 4], [3, 2, 1] \u7684\u7ed3\u679c\u662f [4, 5, 1, 2, 3]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>  \u8f93\u5165: arr = [2,1,3,4,4]\n  \u8f93\u51fa: 4\n  \u89e3\u91ca:\n  \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [2, 1], [3, 4, 4]\u3002\n  \u7136\u800c\uff0c\u5206\u6210 [2, 1], [3], [4], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>  arr\u7684\u957f\u5ea6\u5728[1, 2000]\u4e4b\u95f4\u3002\n  arr[i]\u7684\u5927\u5c0f\u5728[0, 10**8]\u4e4b\u95f4\u3002\n</code></pre>"},{"location":"leetcode/768/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5148\u6392\u5e8f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u4efb\u4f55\u533a\u95f4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u626b\u63cf\u4e00\u8d9f\uff0c\u627e\u5230\u6392\u5e8f\u4e4b\u540e\u7684\u6570\u7ec4\u548c\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u53ca\u5176\u4e2a\u6570\u90fd\u76f8\u540c\u7684\u70b9 \u4e00\u65e6\u627e\u5230\uff0c\u7ed3\u679c\u5c31\u589e\u52a01\uff0c\u66f4\u65b0\u5faa\u73af\u53d8\u91cf\uff0c\u63a5\u7740\u5f80\u4e0b\u627e</p> <pre><code>class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        def getMaxMin(arr):\n            minv = min(arr)\n            minc = arr.count(minv)\n            maxv = max(arr)\n            maxc = arr.count(maxv)\n            return (minv, minc), (maxv, maxc)\n\n        ans = 0\n        i = 0\n        n = len(arr)\n        start = i\n        sorted_arr = sorted(arr)\n        while i &lt; n:\n            minv, maxv = getMaxMin(sorted_arr[start : i + 1])\n            arrMin, arrMax = getMaxMin(arr[start : i + 1])\n            if minv == arrMin and maxv == arrMax:\n                ans += 1\n                start = i + 1\n            i = i + 1\n        return ans\n</code></pre>"},{"location":"leetcode/769/readme/","title":"769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757","text":""},{"location":"leetcode/769/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6570\u7ec4arr\u662f[0, 1, ..., arr.length - 1]\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a\u201c\u5757\u201d\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p> <p>\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f</p> <p>\u793a\u4f8b 1:</p> <pre><code>  \u8f93\u5165: arr = [4,3,2,1,0]\n  \u8f93\u51fa: 1\n  \u89e3\u91ca:\n  \u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n  \u4f8b\u5982\uff0c\u5206\u6210 [4, 3], [2, 1, 0] \u7684\u7ed3\u679c\u662f [3, 4, 0, 1, 2]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>  \u8f93\u5165: arr = [1,0,2,3,4]\n  \u8f93\u51fa: 4\n  \u89e3\u91ca:\n  \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [1, 0], [2, 3, 4]\u3002\n  \u7136\u800c\uff0c\u5206\u6210 [1, 0], [2], [3], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002\n</code></pre> <p>\u6ce8\u610f:</p> <pre><code>  arr \u7684\u957f\u5ea6\u5728 [1, 10] \u4e4b\u95f4\u3002\n  arr[i]\u662f [0, 1, ..., arr.length - 1]\u7684\u4e00\u79cd\u6392\u5217\u3002\n</code></pre>"},{"location":"leetcode/769/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u76f8\u5f53\u4e8e\u627e\u51fa\u5c40\u90e8\u4e71\u5e8f\u7684\u5b50\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u6309\u7167\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u5224\u65ad \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7b26\u5408\u539f\u59cb\u6570\u7ec4\u7684\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u91cd\u6392</p> <pre><code>class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        def getMaxMin(arr, start, end):\n            maxv = max(arr[start : end + 1])\n            minv = min(arr[start : end + 1])\n            return minv, maxv\n\n        ans = 0\n        i = 0\n        n = len(arr)\n        start = i\n        end = -1\n        while i &lt; n:\n            minv, maxv = start, i\n            arrMin, arrMax = getMaxMin(arr, start, i)\n            if minv == arrMin and maxv == arrMax:\n                ans += 1\n                start = i + 1\n            i = i + 1\n        return ans\n</code></pre>"},{"location":"leetcode/792/readme/","title":"792. \u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570","text":""},{"location":"leetcode/792/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 S \u548c\u5355\u8bcd\u5b57\u5178 words, \u6c42\u00a0words[i]\u00a0\u4e2d\u662f\u00a0S\u00a0\u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002</p> <p>\u793a\u4f8b:       \u8f93\u5165:        S = \"abcde\"       words = [\"a\", \"bb\", \"acd\", \"ace\"]       \u8f93\u51fa: 3       \u89e3\u91ca: \u6709\u4e09\u4e2a\u662f\u00a0S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: \"a\", \"acd\", \"ace\"\u3002</p> <p>\u6ce8\u610f:</p> <pre><code>  \u6240\u6709\u5728words\u548c\u00a0S\u00a0\u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\n  S \u7684\u957f\u5ea6\u5728\u00a0[1, 50000]\u3002\n  words\u00a0\u7684\u957f\u5ea6\u5728\u00a0[1, 5000]\u3002\n  words[i]\u7684\u957f\u5ea6\u5728[1, 50]\u3002\n</code></pre>"},{"location":"leetcode/792/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u66b4\u529b\u67e5\u627e</p> <pre><code>class Solution(object):\n    def match(self, dic, word):\n\n        cur = -1\n        for c in word:\n            if c in dic:\n                indexs = dic[c]\n                flag = True\n                for index in indexs:\n                    if index &gt; cur:\n                        cur = index\n                        flag = False\n                        break\n                if flag:\n                    return False\n            else:\n                return False\n        return True\n    def numMatchingSubseq(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        ans = 0\n        dic = {}\n        for i, c in enumerate(S):\n            if c not in dic:\n                dic[c] = [i]\n            else:\n                dic[c].append(i)\n        for word in words:\n            if self.match(dic, word):\n                ans += 1\n        return ans\n</code></pre>"},{"location":"leetcode/797/readme/","title":"797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84","text":""},{"location":"leetcode/797/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4e00\u4e2a\u6709 n \u4e2a\u7ed3\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u627e\u5230\u6240\u6709\u4ece 0 \u5230 n-1 \u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u987a\u5e8f\uff09</p> <p>\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c i \u4e2a\u6570\u7ec4\u4e2d\u7684\u5355\u5143\u90fd\u8868\u793a\u6709\u5411\u56fe\u4e2d i \u53f7\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u4e0b\u4e00\u4e9b\u7ed3\u70b9\uff08\u8bd1\u8005\u6ce8\uff1a\u6709\u5411\u56fe\u662f\u6709\u65b9\u5411\u7684\uff0c\u5373\u89c4\u5b9a\u4e86a\u2192b\u4f60\u5c31\u4e0d\u80fd\u4eceb\u2192a\uff09\u7a7a\u5c31\u662f\u6ca1\u6709\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e86\u3002</p> <p>\u793a\u4f8b:     \u8f93\u5165: <code>[[1,2], [3], [3], []]</code>     \u8f93\u51fa: <code>[[0,1,3],[0,2,3]]</code>     \u89e3\u91ca: \u56fe\u662f\u8fd9\u6837\u7684:     <code>0---&gt;1</code> <code>|    |</code> <code>v    v</code> <code>2---&gt;3</code>     \u8fd9\u6709\u4e24\u6761\u8def: <code>0 -&gt; 1 -&gt; 3</code> \u548c <code>0 -&gt; 2 -&gt; 3</code>.</p> <p>\u63d0\u793a:</p> <pre><code>\u7ed3\u70b9\u7684\u6570\u91cf\u4f1a\u5728\u8303\u56f4 [2, 15] \u5185\u3002\n\u4f60\u53ef\u4ee5\u628a\u8def\u5f84\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u5728\u8def\u5f84\u5185\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u3002\n</code></pre>"},{"location":"leetcode/797/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u6216\u8005 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u90fd\u53ef\u4ee5\u5b8c\u6210\u6b64\u9898\u76ee\u3002</p>"},{"location":"leetcode/797/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22C\u8bed\u8a00\u5b9e\u73b0\u7248</li> <li>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22C\u8bed\u8a00\u5b9e\u73b0\u7248</li> </ul>"},{"location":"leetcode/82/readme/","title":"82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II","text":""},{"location":"leetcode/82/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d \u6ca1\u6709\u91cd\u590d\u51fa\u73b0 \u7684\u6570\u5b57\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n\u8f93\u51fa: 1-&gt;2-&gt;5\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: 1-&gt;1-&gt;1-&gt;2-&gt;3\n\u8f93\u51fa: 2-&gt;3\n</code></pre>"},{"location":"leetcode/82/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/82/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/83/readme/","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":""},{"location":"leetcode/83/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: 1-&gt;1-&gt;2\n\u8f93\u51fa: 1-&gt;2\n</code></pre> <p>\u793a\u4f8b 2:</p> <pre><code>\u8f93\u5165: 1-&gt;1-&gt;2-&gt;3-&gt;3\n\u8f93\u51fa: 1-&gt;2-&gt;3\n</code></pre>"},{"location":"leetcode/83/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/83/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> </ul>"},{"location":"leetcode/838/readme/","title":"838. \u63a8\u591a\u7c73\u8bfa","text":""},{"location":"leetcode/838/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e00\u884c\u4e2d\u6709 N \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6211\u4eec\u5c06\u6bcf\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u5782\u76f4\u7ad6\u7acb\u3002</p> <p>\u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u628a\u4e00\u4e9b\u591a\u7c73\u8bfa\u9aa8\u724c\u5411\u5de6\u6216\u5411\u53f3\u63a8\u3002</p> <p></p> <p>\u6bcf\u8fc7\u4e00\u79d2\uff0c\u5012\u5411\u5de6\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4f1a\u63a8\u52a8\u5176\u5de6\u4fa7\u76f8\u90bb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u3002</p> <p>\u540c\u6837\u5730\uff0c\u5012\u5411\u53f3\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e5f\u4f1a\u63a8\u52a8\u7ad6\u7acb\u5728\u5176\u53f3\u4fa7\u7684\u76f8\u90bb\u591a\u7c73\u8bfa\u9aa8\u724c\u3002</p> <p>\u5982\u679c\u540c\u65f6\u6709\u591a\u7c73\u8bfa\u9aa8\u724c\u843d\u5728\u4e00\u5f20\u5782\u76f4\u7ad6\u7acb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u4e24\u8fb9\uff0c\u7531\u4e8e\u53d7\u529b\u5e73\u8861\uff0c \u8be5\u9aa8\u724c\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\u3002</p> <p>\u5c31\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u6211\u4eec\u4f1a\u8ba4\u4e3a\u6b63\u5728\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e0d\u4f1a\u5bf9\u5176\u5b83\u6b63\u5728\u4e0b\u964d\u6216\u5df2\u7ecf\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002</p> <p>\u7ed9\u5b9a\u8868\u793a\u521d\u59cb\u72b6\u6001\u7684\u5b57\u7b26\u4e32 \"S\" \u3002\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u5de6\u8fb9\uff0c\u5219 S[i] = 'L'\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u53f3\u8fb9\uff0c\u5219 S[i] = 'R'\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u88ab\u63a8\u52a8\uff0c\u5219 S[i] = '.'\u3002</p> <p>\u8fd4\u56de\u8868\u793a\u6700\u7ec8\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a\".L.R...LR..L..\"\n\u8f93\u51fa\uff1a\"LL.RR.LLRRLL..\"\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1a\"RR.L\"\n\u8f93\u51fa\uff1a\"RR.L\"\n\u8bf4\u660e\uff1a\u7b2c\u4e00\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u7ed9\u7b2c\u4e8c\u5f20\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>0 &lt;= N &lt;= 10^5\n\u8868\u793a\u591a\u7c73\u8bfa\u9aa8\u724c\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709 'L'\uff0c'R'; \u4ee5\u53ca '.';\n</code></pre>"},{"location":"leetcode/838/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u66b4\u529b\u65b9\u6cd5\uff0c\u5206\u60c5\u51b5\u8ba8\u8bba\uff0c\u53ef\u4ee5\u901a\u8fc7\u5168\u90e8\u7528\u4f8b</p> <pre><code>char *pushDominoes(char *dominoes)\n{\n    if (dominoes == NULL)\n        return NULL;\n\n    // start\u6307\u5411\u524d\u9762\u7684LR\uff0cend\u6307\u5411\u540e\u9762\u7684LR\n    int n = strlen(dominoes);\n    int start = -1;\n    int end = -1;\n    char *ans = (char *)malloc(sizeof(char) * (n + 2));\n    int ansEnd = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (dominoes[i] == 'L' || dominoes[i] == 'R')\n        {\n            ans[ansEnd++] = dominoes[i];\n        }\n        else\n        {\n            start = i - 1;\n            while (start &gt;= 0)\n            {\n                if (dominoes[start] == 'L' || dominoes[start] == 'R')\n                {\n                    break;\n                }\n                start--;\n            }\n            end = i + 1;\n            while (end &lt; n)\n            {\n                if (dominoes[end] == 'L' || dominoes[end] == 'R')\n                {\n                    break;\n                }\n                end++;\n            }\n            if (start &lt; 0 &amp;&amp; end &gt;= n)\n            {\n                ans[ansEnd++] = dominoes[i];\n            }\n            else if (start &lt; 0)\n            {\n                if (dominoes[end] == 'L')\n                {\n                    ans[ansEnd++] = dominoes[end];\n                }\n                else\n                {\n                    ans[ansEnd++] = dominoes[i];\n                }\n            }\n            else if (end &gt;= n)\n            {\n                if (dominoes[start] == 'R')\n                {\n                    ans[ansEnd++] = dominoes[start];\n                }\n                else\n                {\n                    ans[ansEnd++] = dominoes[i];\n                }\n            }\n            else\n            {\n                int ll = i - start;\n                int rr = end - i;\n                if (dominoes[start] == 'L' &amp;&amp; dominoes[end] == 'R')\n                {\n                    ans[ansEnd++] = dominoes[i];\n                }\n                else if (dominoes[start] == dominoes[end])\n                {\n                    ans[ansEnd++] = dominoes[start];\n                }\n                else if (ll == rr)\n                {\n                    ans[ansEnd++] = dominoes[i];\n                }\n                else if (ll &gt; rr)\n                {\n                    if (dominoes[end] == 'L')\n                    {\n                        ans[ansEnd++] = dominoes[end];\n                    }\n                    else\n                    {\n                        ans[ansEnd++] = dominoes[i];\n                    }\n                }\n                else if (ll &lt; rr)\n                {\n                    if (dominoes[start] == 'R')\n                    {\n                        ans[ansEnd++] = dominoes[start];\n                    }\n                    else\n                    {\n                        ans[ansEnd++] = dominoes[i];\n                    }\n                }\n            }\n        }\n    }\n    ans[ansEnd] = '\\0';\n    return ans;\n}\n</code></pre> <p>\u4fee\u6539\u4e00\u4e0b\u7b56\u7565\uff0c\u6bcf\u6b21\u8bb0\u5f55\u524d\u540e\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7701\u5f88\u591a\u3002</p> <pre><code>char *pushDominoes(char *dominoes)\n{\n    if (dominoes == NULL)\n        return NULL;\n\n    // start\u6307\u5411\u524d\u9762\u7684LR\uff0cend\u6307\u5411\u540e\u9762\u7684LR\n    int n = strlen(dominoes);\n    int start = -1;\n    int end = -1;\n    char *ans = (char *)malloc(sizeof(char) * (n + 2));\n    int ansEnd = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (dominoes[i] == 'L' || dominoes[i] == 'R')\n        {\n            ans[ansEnd++] = dominoes[i];\n            start = i;\n        }\n        else\n        {\n            // \u5982\u679cend\u5c0f\u4e8e\u5f53\u524d\u7d22\u5f15\uff0c\u5411\u540e\u67e5\u627e\u786e\u5b9aend\u7684\u4f4d\u7f6e\n            if (end &lt; i)\n            {\n                end = i + 1;\n                while (end &lt; n &amp;&amp; dominoes[end] == '.')\n                    end++;\n            }\n\n            if (start &lt; 0 &amp;&amp; end &gt;= n)\n            {\n                ans[ansEnd++] = '.';\n            }\n            else if (start &lt; 0 &amp;&amp; dominoes[end] == 'L')\n            {\n                ans[ansEnd++] = 'L';\n            }\n            else if (start &lt; 0 &amp;&amp; dominoes[end] != 'L')\n            {\n                ans[ansEnd++] = '.';\n            }\n            else if (end &gt;= n &amp;&amp; dominoes[start] == 'R')\n            {\n                ans[ansEnd++] = 'R';\n            }\n            else if (end &gt;= n &amp;&amp; dominoes[start] != 'R')\n            {\n                ans[ansEnd++] = '.';\n            }\n            else if (dominoes[start] == dominoes[end])\n            {\n                ans[ansEnd++] = dominoes[start];\n            }\n            else if (dominoes[start] == 'L' &amp;&amp; dominoes[end] == 'R')\n            {\n                ans[ansEnd++] = '.';\n            }\n            else\n            {\n                int ll = i - start;\n                int rr = end - i;\n                if (ll == rr)\n                {\n                    ans[ansEnd++] = '.';\n                }\n                else if (ll &lt; rr)\n                {\n                    ans[ansEnd++] = dominoes[start];\n                }\n                else\n                {\n                    ans[ansEnd++] = dominoes[end];\n                }\n            }\n        }\n    }\n    ans[ansEnd] = '\\0';\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/839/readme/","title":"839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4","text":""},{"location":"leetcode/839/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u679c\u6211\u4eec\u4ea4\u6362\u5b57\u7b26\u4e32\u00a0X \u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u5b83\u548c\u5b57\u7b26\u4e32\u00a0Y \u76f8\u7b49\uff0c\u90a3\u4e48\u79f0 X \u548c Y \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u672c\u8eab\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u5b83\u4eec\u4e5f\u662f\u76f8\u4f3c\u7684\u3002</p> <p>\u4f8b\u5982\uff0c\"tars\" \u548c \"rats\" \u662f\u76f8\u4f3c\u7684 (\u4ea4\u6362 0 \u4e0e 2 \u7684\u4f4d\u7f6e)\uff1b\u00a0\"rats\" \u548c \"arts\" \u4e5f\u662f\u76f8\u4f3c\u7684\uff0c\u4f46\u662f \"star\" \u4e0d\u4e0e \"tars\"\uff0c\"rats\"\uff0c\u6216 \"arts\" \u76f8\u4f3c\u3002</p> <p>\u603b\u4e4b\uff0c\u5b83\u4eec\u901a\u8fc7\u76f8\u4f3c\u6027\u5f62\u6210\u4e86\u4e24\u4e2a\u5173\u8054\u7ec4\uff1a{\"tars\", \"rats\", \"arts\"} \u548c {\"star\"}\u3002\u6ce8\u610f\uff0c\"tars\" \u548c \"arts\" \u662f\u5728\u540c\u4e00\u7ec4\u4e2d\uff0c\u5373\u4f7f\u5b83\u4eec\u5e76\u4e0d\u76f8\u4f3c\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u7ec4\u800c\u8a00\uff0c\u8981\u786e\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5728\u7ec4\u4e2d\uff0c\u53ea\u9700\u8981\u8fd9\u4e2a\u8bcd\u548c\u8be5\u7ec4\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5355\u8bcd\u76f8\u4f3c\u3002</p> <p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u5217\u8868 A\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f A \u4e2d\u5176\u5b83\u6240\u6709\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\u8bf7\u95ee A \u4e2d\u6709\u591a\u5c11\u4e2a\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4\uff1f</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\uff1a[\"tars\",\"rats\",\"arts\",\"star\"]\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>A.length &lt;= 2000\nA[i].length &lt;= 1000\nA.length * A[i].length &lt;= 20000\nA \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\nA \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4e14\u662f\u5f7c\u6b64\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u5ef6\u957f\u3002\n</code></pre> <p>\u5907\u6ce8\uff1a</p> <p>\u5b57\u6bcd\u5f02\u4f4d\u8bcd[anagram]\uff0c\u4e00\u79cd\u628a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff08\u987a\u5e8f\uff09\u52a0\u4ee5\u6539\u6362\u6240\u5f62\u6210\u7684\u65b0\u8bcd\u3002</p>"},{"location":"leetcode/839/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5224\u65ad\u662f\u5426\u76f8\u4f3c\uff0c \u5982\u679c\u76f8\u4f3c\uff0c\u5c31\u5229\u7528\u5e76\u67e5\u96c6\u5408\u5e76\uff0c\u6700\u540e\u7edf\u8ba1\u5e76\u67e5\u96c6\u4e2d\u6709\u591a\u5c11\u4e2a\u7ec4\u3002 \u8be5\u65b9\u6cd5\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u53ea\u80fd\u901a\u8fc7\u4e00\u822c\u7684\u7528\u4f8b\u3002</p> <p>python</p> <p>\u4f7f\u7528C++\uff0c\u540c\u6837\u7684\u7b97\u6cd5\u53ef\u4ee5\u901a\u8fc7\u3002</p> <p>c++</p>"},{"location":"leetcode/848/readme/","title":"848. \u5b57\u6bcd\u79fb\u4f4d","text":""},{"location":"leetcode/848/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6709\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 S\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 shifts\u3002</p> <p>\u6211\u4eec\u5c06\u5b57\u6bcd\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u79f0\u4e3a\u539f\u5b57\u6bcd\u7684 \u79fb\u4f4d\uff08\u7531\u4e8e\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c 'z'\u00a0\u5c06\u4f1a\u53d8\u6210\u00a0'a'\uff09\u3002</p> <p>\u4f8b\u5982\u00b7\uff0cshift('a') = 'b'\uff0c\u00a0shift('t') = 'u',\uff0c \u4ee5\u53ca\u00a0shift('z') = 'a'\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u00a0shifts[i] = x\u00a0\uff0c \u6211\u4eec\u4f1a\u5c06 S\u00a0\u4e2d\u7684\u524d\u00a0i+1\u00a0\u4e2a\u5b57\u6bcd\u79fb\u4f4d\u00a0x\u00a0\u6b21\u3002</p> <p>\u8fd4\u56de\u5c06\u6240\u6709\u8fd9\u4e9b\u79fb\u4f4d\u90fd\u5e94\u7528\u5230 S \u540e\u6700\u7ec8\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>  \u8f93\u5165\uff1aS = \"abc\", shifts = [3,5,9]\n  \u8f93\u51fa\uff1a\"rpl\"\n  \u89e3\u91ca\uff1a \n  \u6211\u4eec\u4ee5 \"abc\" \u5f00\u59cb\u3002\n  \u5c06 S \u4e2d\u7684\u7b2c 1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 3 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 \"dbc\"\u3002\n  \u518d\u5c06 S \u4e2d\u7684\u524d 2 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 5 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 \"igc\"\u3002\n  \u6700\u540e\u5c06 S \u4e2d\u7684\u8fd9 3 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 9 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7b54\u6848 \"rpl\"\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;= S.length = shifts.length &lt;= 20000\n  0 &lt;= shifts[i] &lt;= 10 ^ 9\n</code></pre>"},{"location":"leetcode/848/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u66b4\u529b\u6a21\u62df\u79fb\u52a8</p> <pre><code>void shift(char *S, int i, int count)\n{\n    int num;\n    num = S[i] - 'a';\n    num = (num + count % 26 ) % 26;\n    S[i] = num + 'a';\n}\nchar * shiftingLetters(char * S, int* shifts, int shiftsSize){\n    int i;\n    for (i = shiftsSize - 2; i &gt;= 0; i--) {\n        shifts[i] = (shifts[i+1] % 26 + shifts[i] % 26) % 26;\n    }\n    for (i = 0; i &lt; shiftsSize; i++) {\n        shift(S, i, shifts[i]);\n    }\n    return S;\n}\n</code></pre>"},{"location":"leetcode/854/readme/","title":"854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/854/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5c06 A \u4e2d\u7684\u4e24\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7cbe\u786e\u5730\u4ea4\u6362\u4f4d\u7f6e K \u6b21\u5f97\u5230\u4e0e B \u76f8\u7b49\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u79f0\u5b57\u7b26\u4e32\u00a0A\u00a0\u548c\u00a0B\u00a0\u7684\u76f8\u4f3c\u5ea6\u4e3a K\uff08K\u00a0\u4e3a\u975e\u8d1f\u6574\u6570\uff09\u3002</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u00a0A\u00a0\u548c\u00a0B\u00a0\uff0c\u8fd4\u56de A \u548c B\u00a0\u7684\u76f8\u4f3c\u5ea6 K \u7684\u6700\u5c0f\u503c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aA = \"ab\", B = \"ba\"\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aA = \"abc\", B = \"bca\"\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aA = \"abac\", B = \"baca\"\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1aA = \"aabc\", B = \"abca\"\n\u8f93\u51fa\uff1a2\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= A.length == B.length &lt;= 20\nA\u00a0\u548c\u00a0B\u00a0\u53ea\u5305\u542b\u96c6\u5408\u00a0{'a', 'b', 'c', 'd', 'e', 'f'}\u00a0\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u3002\n</code></pre>"},{"location":"leetcode/854/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"leetcode/854/readme/#_3","title":"\u65b9\u6cd5\u4e00","text":"<p>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 + \u526a\u679d</p> <p>A B\u4e24\u4e2a\u5b57\u7b26\u4e32\u9010\u4e2a\u6bd4\u8f83\u5b57\u7b26\uff0c\u9047\u5230\u4e0d\u76f8\u540c\u7684\u5b57\u6bcd, \u8bb0\u5f55\u7d22\u5f15\u4e3a s, \u5411\u540e\u5bfb\u627e A[j] == B[s] &amp;&amp; A[j] != B[j] \u7684\u6240\u6709j, \u5168\u90e8\u52a0\u5165\u961f\u5217\uff0c \u7ed3\u679c+1\uff0c \u7ee7\u7eed\u3002\u4e00\u65e6\u641c\u7d22\u5230B\uff0c\u5c31\u7ed3\u675f\u3002</p> <p>\u4e24\u70b9\u9700\u8981\u6ce8\u610f\uff1a</p> <ol> <li>\u8bb0\u5f55\u5df2\u7ecf\u641c\u7d22\u7684\u8282\u70b9\uff0c\u5982\u679c\u540e\u7eed\u751f\u6210\u7684\u5b57\u7b26\u4e32\u5df2\u7ecf\u641c\u7d22\u8fc7\uff0c\u8bf4\u660e\u5df2\u7ecf\u6709\u66f4\u77ed\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u5e94\u8be5\u8df3\u8fc7</li> <li>A[j] == B[j] \u53ef\u4ee5\u8df3\u8fc7\u662f\u56e0\u4e3a \u66ff\u6362\u4e4b\u540e\u4e5f\u4e0d\u4f1a\u89e3\u51b3\u95ee\u9898\uff0c\u4f9d\u7136\u8fd8\u662f\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\uff0c\u53ea\u4e0d\u8fc7\u628a\u4f4d\u7f6e\u5411\u540e\u79fb\u52a8\u4e86\uff0c\u4e4b\u540e\u8fd8\u8981\u89e3\u51b3\u5b83\u3002</li> </ol> <p>Python</p>"},{"location":"leetcode/854/readme/#_4","title":"\u65b9\u6cd5\u4e8c","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 + \u526a\u679d</p> <p>\u601d\u8def\u540c\u65b9\u6cd5\u4e00\uff0c\u53ea\u4e0d\u8fc7\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4f18\u5148\u641c\u7d22\u5230\u5e95\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u591a\u641c\u7d22\uff0c\u4f46\u662f\u5185\u5b58\u6d88\u8017\u5c11\uff0c\u53ea\u9700\u8981\u4fdd\u5b58\u4e00\u6b21\u6df1\u641c\u7684\u7ed3\u679c\u3002</p> <p>Python</p>"},{"location":"leetcode/870/readme/","title":"870. \u4f18\u52bf\u6d17\u724c","text":""},{"location":"leetcode/870/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4\u00a0A\u00a0\u548c\u00a0B\uff0cA \u76f8\u5bf9\u4e8e B \u7684\u4f18\u52bf\u53ef\u4ee5\u7528\u6ee1\u8db3\u00a0A[i] &gt; B[i]\u00a0\u7684\u7d22\u5f15 i\u00a0\u7684\u6570\u76ee\u6765\u63cf\u8ff0\u3002</p> <p>\u8fd4\u56de\u00a0A\u00a0\u7684\u4efb\u610f\u6392\u5217\uff0c\u4f7f\u5176\u76f8\u5bf9\u4e8e B\u00a0\u7684\u4f18\u52bf\u6700\u5927\u5316\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1aA = [2,7,11,15], B = [1,10,4,11]\n  \u8f93\u51fa\uff1a[2,11,7,15]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1aA = [12,24,8,32], B = [13,25,32,11]\n  \u8f93\u51fa\uff1a[24,32,8,12]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;= A.length = B.length &lt;= 10000\n  0 &lt;= A[i] &lt;= 10^9\n  0 &lt;= B[i] &lt;= 10^9\n</code></pre>"},{"location":"leetcode/870/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8d2a\u5fc3\u6cd5\u89e3\u9898\uff0c\u5148\u628aA\u6392\u5e8f\uff0c\u904d\u5386B\u4e2d\u6bcf\u4e2a\u5143\u7d20\uff0c\u4eceA\u4e2d\u627e\u5230\u521a\u597d\u5927\u4e8e\u5b83\u7684\u6700\u5c0f\u5143\u7d20\u653e\u5165\u7ed3\u679c\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u5927\u4e8e\u7684\u5143\u7d20\uff0c\u5c31\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u653e\u8fdb\u53bb\u3002</p> <p>\u4e24\u5c42\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u7684\u7528\u4f8b\u3002(59 / 67 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b)</p> <pre><code>class Solution(object):\n    def advantageCount(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        A = sorted(A)\n\n        ans = []\n        for i in range(len(B)):\n            find = False\n            for j in range(len(A)):\n                if A[j] &gt; B[i]:\n                    ans.append(A[j])\n                    del A[j]\n                    find = True\n                    break\n            if not find:\n                ans.append(A[0])\n                del A[0]\n        return ans\n</code></pre> <p>\u4f18\u5316\u67e5\u627e\u8fc7\u7a0b\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u52a0\u5feb\u901f\u5ea6\uff0c\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684\u7528\u4f8b</p> <pre><code>class Solution(object):\n    def advantageCount(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        def find(number):\n            \"\"\"\n            \u627e\u5230A\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8enumber\u7684\u6570\u5b57\u7684\u4e0b\u6807\n            \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56deA\u4e2d\u6700\u5c0f\u6570\u5b57\u7684\u4e0b\u6807\n            \"\"\"\n            n = len(A)\n            left = 0\n            right = n - 1\n            while left &lt;= right:\n                mid = (left + right) // 2\n                if A[mid] &gt; number:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            if left &lt; n and A[left] &gt; number:\n                return left\n            else:\n                return 0\n\n        A = sorted(A)\n\n        ans = []\n        for i in range(len(B)):\n            index = find(B[i])\n            #print(\"{0} {1} {2}\\n\".format(A[index], B[i], index))\n            ans.append(A[index])\n            del A[index]\n\n        return ans\n</code></pre>"},{"location":"leetcode/881/readme/","title":"881. \u6551\u751f\u8247","text":""},{"location":"leetcode/881/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7b2c\u00a0i\u00a0\u4e2a\u4eba\u7684\u4f53\u91cd\u4e3a\u00a0people[i]\uff0c\u6bcf\u8258\u8239\u53ef\u4ee5\u627f\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a\u00a0limit\u3002</p> <p>\u6bcf\u8258\u8239\u6700\u591a\u53ef\u540c\u65f6\u8f7d\u4e24\u4eba\uff0c\u4f46\u6761\u4ef6\u662f\u8fd9\u4e9b\u4eba\u7684\u91cd\u91cf\u4e4b\u548c\u6700\u591a\u4e3a\u00a0limit\u3002</p> <p>\u8fd4\u56de\u8f7d\u5230\u6bcf\u4e00\u4e2a\u4eba\u6240\u9700\u7684\u6700\u5c0f\u8239\u6570\u3002(\u4fdd\u8bc1\u6bcf\u4e2a\u4eba\u90fd\u80fd\u88ab\u8239\u8f7d)\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1apeople = [1,2], limit = 3\n\u8f93\u51fa\uff1a1\n\u89e3\u91ca\uff1a1 \u8258\u8239\u8f7d (1, 2)\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1apeople = [3,2,2,1], limit = 3\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a3 \u8258\u8239\u5206\u522b\u8f7d (1, 2), (2) \u548c (3)\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1apeople = [3,5,3,4], limit = 5\n\u8f93\u51fa\uff1a4\n\u89e3\u91ca\uff1a4 \u8258\u8239\u5206\u522b\u8f7d (3), (3), (4), (5)\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;=\u00a0people.length &lt;= 50000\n1 &lt;= people[i] &lt;=\u00a0limit &lt;= 30000\n</code></pre>"},{"location":"leetcode/881/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>int compare(const void *p, const void *q)\n{\n    int a = *(int *)p;\n    int b = *(int *)q;\n    return b - a;\n}\nint numRescueBoats(int *people, int peopleSize, int limit)\n{\n    if (people == NULL || peopleSize &lt;= 0 || limit &lt;= 0)\n    {\n        return 0;\n    }\n\n    qsort(people, peopleSize, sizeof(int), compare);\n\n    int ans = 0;\n    int start = 0;\n    int end = peopleSize - 1;\n    while (start &lt; end)\n    {\n        // \u5982\u679c\u6700\u5927\u7684\u548c\u6700\u5c0f\u7684\u8d85\u8fc7limit\u9650\u5236\uff0c\u672c\u6b21\u4e00\u8258\u8239\u53ea\u80fd\u8fd0\u9001\u4e00\u4e2a\u4eba\n        if (people[start] + people[end] &gt; limit)\n        {\n            start++;\n        }\n        else\n        {\n            start++;\n            end--;\n        }\n        ans++;\n    }\n\n    if (start == end)\n        ans++;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/890/readme/","title":"890. \u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f","text":""},{"location":"leetcode/890/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4f60\u6709\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u00a0words\u00a0\u548c\u4e00\u4e2a\u6a21\u5f0f\u00a0\u00a0pattern\uff0c\u4f60\u60f3\u77e5\u9053 words \u4e2d\u7684\u54ea\u4e9b\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002</p> <p>\u5982\u679c\u5b58\u5728\u5b57\u6bcd\u7684\u6392\u5217 p\u00a0\uff0c\u4f7f\u5f97\u5c06\u6a21\u5f0f\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd x \u66ff\u6362\u4e3a p(x) \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u5355\u8bcd\u4e0e\u6a21\u5f0f\u662f\u5339\u914d\u7684\u3002</p> <p>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b57\u6bcd\u7684\u6392\u5217\u662f\u4ece\u5b57\u6bcd\u5230\u5b57\u6bcd\u7684\u53cc\u5c04\uff1a\u6bcf\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6ca1\u6709\u4e24\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\uff09</p> <p>\u8fd4\u56de words \u4e2d\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u5339\u914d\u7684\u5355\u8bcd\u5217\u8868\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>  \u8f93\u5165\uff1awords = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\n  \u8f93\u51fa\uff1a[\"mee\",\"aqq\"]\n  \u89e3\u91ca\uff1a\n  \"mee\" \u4e0e\u6a21\u5f0f\u5339\u914d\uff0c\u56e0\u4e3a\u5b58\u5728\u6392\u5217 {a -&gt; m, b -&gt; e, ...}\u3002\n  \"ccc\" \u4e0e\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a {a -&gt; c, b -&gt; c, ...} \u4e0d\u662f\u6392\u5217\u3002\n  \u56e0\u4e3a a \u548c b \u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;= words.length &lt;= 50\n  1 &lt;= pattern.length = words[i].length\u00a0&lt;= 20\n</code></pre>"},{"location":"leetcode/890/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>#define N 26\n\nint map[N];\nint unique[N];\nvoid init(int *array, int value)\n{\n    int i;\n    for (i = 0; i &lt; N; i++) {\n        array[i] = value;\n    }\n}\nint isMatch(char *str, char *pattern)\n{\n    int i;\n    char a, b;\n    int aa, bb;\n\n    int n1 = strlen(str);\n    int n2 = strlen(pattern);\n    if (n1 != n2) {\n        return false;\n    }\n\n    for (i = 0; i &lt; n1; i++) {\n        a = str[i];\n        b = pattern[i];\n        aa = a - 'a';\n        bb = b - 'a';\n        if (map[aa] == -1) {\n            map[aa] = bb;\n        } else if (map[aa] != bb) {\n            return false;\n        }\n        if (unique[bb] == -1) {\n            unique[bb] = aa;\n        } else if (unique[bb] != aa) {\n            return false;\n        }\n    }\n    return true;    \n}\nchar *copystr(char *str)\n{\n    int n = strlen(str);\n    int i;\n    char *newstr;\n    newstr = (char*)malloc(sizeof(char) * (n + 1));\n    for (i = 0; i &lt; n; i++) {\n        newstr[i] = str[i];\n    }\n    newstr[i] = '\\0';\n    return newstr;\n}\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** findAndReplacePattern(char ** words, int wordsSize, char * pattern, int* returnSize){\n    int i;\n    char **ans;\n    int ansEnd = 0;\n    ans = (char**)malloc(sizeof(char*) * wordsSize);\n    for (i = 0; i &lt; wordsSize; i++) {\n        init(map, -1);\n        init(unique, -1);\n        if (isMatch(words[i], pattern)) {\n            ans[ansEnd++] = copystr(words[i]);\n        }\n    }\n    *returnSize = ansEnd;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/9/readme/","title":"Readme","text":""},{"location":"leetcode/9/readme/#9","title":"9. \u56de\u6587\u6570","text":""},{"location":"leetcode/9/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002</p> <p>\u793a\u4f8b</p> <pre><code>\u793a\u4f8b 1:\n\n\u8f93\u5165: 121\n\u8f93\u51fa: true\n\n\n\u793a\u4f8b 2:\n\n\u8f93\u5165: -121\n\u8f93\u51fa: false\n\u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n\n\n\u793a\u4f8b 3:\n\n\u8f93\u5165: 10\n\u8f93\u51fa: false\n\u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n</code></pre>"},{"location":"leetcode/9/readme/#1","title":"\u89e3\u9898\u601d\u8def1","text":"<p>\u4f7f\u752864\u4f4d\u6570\u5b57\u4f5c\u4e3a\u5bb9\u5668\u53cd\u8f6cint\u7c7b\u578b\u7684\u6570\u5b57\uff0c\u5982\u679c\u53cd\u8f6c\u4e4b\u540e\u5927\u5c0f\u4e00\u6837\u5219\u662f\u56de\u6587\u6570\u5b57\u3002</p>"},{"location":"leetcode/9/readme/#c","title":"C++","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x &lt; 0) return false;\n        long int v = 0;\n        long int xx = x;\n        while(x)\n        {\n           v = v*10 + x % 10;\n           x = x / 10;\n        }\n        if (xx == v)\n        {\n            return true;\n        }\n\n        return false;\n    }\n};\n</code></pre>"},{"location":"leetcode/9/readme/#python","title":"python","text":"<pre><code>class Solution:\n    def isPalindrome(self, x: int) -&gt; bool:\n        if x &lt; 0:\n            return False\n        xx = x\n        v = 0\n        while(x):\n            v = v * 10 + x % 10\n            x = x // 10\n\n        if v == xx:\n            return True\n        return False\n</code></pre>"},{"location":"leetcode/9/readme/#2","title":"\u89e3\u9898\u601d\u8def2","text":"<p>\u601d\u8def\u4e00\u904d\u5386\u7684\u4e00\u6b21\u624d\u5f97\u5230\u7ed3\u679c\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u904d\u5386\u4e8c\u5206\u4e4b\u4e00\u5373\u53ef\u5f97\u5230\u7ed3\u679c\u3002</p>"},{"location":"leetcode/9/readme/#c_1","title":"C++","text":""},{"location":"leetcode/9/readme/#python_1","title":"python","text":""},{"location":"leetcode/91/readme/","title":"91. \u89e3\u7801\u65b9\u6cd5","text":""},{"location":"leetcode/91/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd\u00a0A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p> <p>'A' -&gt; 1 'B' -&gt; 2 ... 'Z' -&gt; 26 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p> <p>\u793a\u4f8b 1:</p> <pre><code>\u8f93\u5165: \"12\"\n\u8f93\u51fa: 2\n\u89e3\u91ca:\u00a0\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"AB\"\uff081 2\uff09\u6216\u8005 \"L\"\uff0812\uff09\u3002\n</code></pre> <p>\u793a\u4f8b\u00a02:</p> <pre><code>\u8f93\u5165: \"226\"\n\u8f93\u51fa: 3\n\u89e3\u91ca:\u00a0\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a \"BZ\" (2 26), \"VF\" (22 6), \u6216\u8005 \"BBF\" (2 2 6) \u3002\n</code></pre>"},{"location":"leetcode/91/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5f88\u5bb9\u6613\u60f3\u5230\uff0c\u7528DFS\u7684\u65b9\u5f0f\u5728\u6bcf\u4e2a\u53ef\u4ee5\u5206\u5272\u7684\u5730\u65b9\u5c1d\u8bd5\u662f\u5426\u5206\u5272\u3002 \u4f8b\u5982 s = \"123412\", i = 0\u65f6 1 --&gt; A \u53ef\u4ee5\u89e3\u7801\uff0c \u53ef\u4ee5\u4ece\u8fd9\u91cc\u65ad\u5f00\uff0c \u4e5f\u53ef\u4ee5\u4e0d\u65ad\u5f00 12 --&gt; L.</p> <pre><code>void dfs(char *s, int i, int *ans)\n{\n    int num;\n\n    if (i == strlen(s)) {\n        (*ans)++;\n        return;\n    }\n    // \u6d88\u8017\u4e00\u4e2a\u6570\u5b57\n    num = s[i] - '0';\n    if (num &lt; 1 || num &gt; 9) {\n        return;\n    } else {\n        dfs(s, i + 1, ans);\n    }\n\n    // \u6d88\u8017\u4e24\u4e2a\u6570\u5b57\n    if (i + 1 &lt; strlen(s)) {\n        num = (s[i] - '0') * 10 + (s[i + 1] - '0');\n        if (num &gt;= 1 &amp;&amp; num &lt;= 26) {\n            dfs(s, i + 2, ans);\n        }\n    }\n    return;\n}\nint numDecodings(char * s){\n    int ans = 0;\n    //dfs(s, 0, &amp;ans);\n    return ans;\n}\n</code></pre> <p>239 / 258 \u4e2a\u901a\u8fc7\u6d4b\u8bd5\u7528\u4f8b. \u8fd9\u79cd\u65b9\u6cd5\u5b58\u5728\u5927\u91cf\u7684\u91cd\u590d\u8ba1\u7b97\uff0c\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u7528\u4f8b\u3002</p> <p>\u628a\u4e0a\u9762\u7684\u7528\u4f8b\u6309\u7167\u9012\u5f52\u8fc7\u7a0b\u5c55\u5f00</p> <pre><code>1 - 1 \n2   - 2\n3         - 3\n4             - 4\n5                 - 1 \n6                       - 2   --&gt; 1,2,3,4,1,2\n7                 - 12      --&gt; 1,2,3,4,12\n8   - 23\n9         - 4\n10          - 1\n11                - 2      --&gt; 1,23,4,1,2\n12          - 12         --&gt; 1,23,4,12\n13 - 12\n14      - 3\n15          - 4\n16              - 1\n17                    - 2      --&gt; 12,3,4,1,2\n18              - 12         --&gt; 12,3,4,12\n</code></pre> <p>\u53ef\u4ee5\u53d1\u73b03-7\u884c\u4e0e14-18\u884c\u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c \u5f53\u5b57\u7b26\u4e32\u957f\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u91cd\u590d\u8ba1\u7b97\u66f4\u52a0\u660e\u663e\uff0c \u8fd9\u542f\u53d1\u6211\u4eec\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002  \u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u4ece\u540e\u9762\u5f00\u59cb\u5411\u524d\u8fdb\u884c\u89e3\u7801\uff0c\u8bb0\u5f55\u5df2\u7ecf\u83b7\u5f97\u7684\u89e3\u7801\u6570\u91cf\uff0c\u7528\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002</p> <pre><code>/*\n    \u8bbedp[i] \u8868\u793a s[i...n) \u89e3\u7801\u7684\u6570\u91cf\uff0c dp[n] = 0, dp[n-1] = 1 if dp[n-1] in [1,9] else dp[n-1] = 0\n    \"0\" \u4e0d\u80fd\u89e3\u7801\uff0c \"01\" \u4e5f\u4e0d\u80fd\u89e3\u7801\n    dp[n-2] = dp[n] if s[n-2] s[n-1] in [1, 26], \u5bf9\u5e94\u60c5\u51b5\u662f s[n-1], s[n-2] \u4e24\u4e2a\u6570\u5b57\u89e3\u7801\u6210\u4e00\u4e2a\u5b57\u6bcd\n            = dp[n-1], \u5bf9\u5e94\u60c5\u51b5\u662f s[n-2] \u5355\u72ec\u89e3\u7801\u6210\u4e00\u4e2a\u5b57\u6bcd\n    dp[n-2] \u5c31\u662f\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u7684\u548c \n*/\nint numDecodings(char * s){\n    if (s == NULL) return 0;\n    int n = strlen(s);\n    int nextNext = 1;\n    int next = (s[n-1] == '0') ? 0 : 1;\n    int curr;\n    for (int i = n - 2; i &gt;= 0; i--) {\n        if (s[i] == '0') {\n            curr = 0; // '0' \u65e0\u6cd5\u89e3\u7801\uff0c\u5bf9\u5e94\u89e3\u7801\u65b9\u6cd5\u6570\u91cf\u4e3a0\n        } else {\n            int number = (s[i] - '0') * 10 + s[i + 1] - '0';\n            curr = 0;\n            if (number &gt;= 1 &amp;&amp; number &lt;= 26) {\n                curr = nextNext;\n            }\n            curr += next;\n        }\n\n        nextNext = next;\n        next = curr;\n    }\n\n    return next;\n}\n</code></pre>"},{"location":"leetcode/915/readme/","title":"915. \u5206\u5272\u6570\u7ec4","text":""},{"location":"leetcode/915/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u00a0A\uff0c\u5c06\u5176\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\uff08\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff09\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u00a0left\u00a0\u548c\u00a0right\uff0c\u00a0\u4f7f\u5f97\uff1a</p> <p>left\u00a0\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e\u00a0right\u00a0\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 left \u548c\u00a0right\u00a0\u90fd\u662f\u975e\u7a7a\u7684\u3002 left\u00a0\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002 \u5728\u5b8c\u6210\u8fd9\u6837\u7684\u5206\u7ec4\u540e\u8fd4\u56de\u00a0left\u00a0\u7684\u957f\u5ea6\u3002\u53ef\u4ee5\u4fdd\u8bc1\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\u65b9\u6cd5\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1a[5,0,3,8,6]\n  \u8f93\u51fa\uff1a3\n  \u89e3\u91ca\uff1aleft = [5,0,3]\uff0cright = [8,6]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1a[1,1,1,0,6,12]\n  \u8f93\u51fa\uff1a4\n  \u89e3\u91ca\uff1aleft = [1,1,1,0]\uff0cright = [6,12]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  2 &lt;= A.length\u00a0&lt;= 30000\n  0 &lt;= A[i] &lt;= 10^6\n  \u53ef\u4ee5\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u6309\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u5bf9 A \u8fdb\u884c\u5212\u5206\u3002\n</code></pre>"},{"location":"leetcode/915/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>class Solution:\n     def partitionDisjoint(self, A):\n        n = len(A)\n        left_max = A[0]\n        right_min = min(A[1:])\n        right_count = A[1:].count(right_min)\n\n        for i in range(1, n):\n            if left_max &lt;= right_min:\n                return i\n            # A[i] \u52a0\u5165\u5de6\u4fa7\n            if A[i] &gt; left_max:\n                left_max = A[i]\n            # \u53f3\u4fa7\u6392\u9664 A[i]\n            if A[i] == right_min:\n                if right_count &gt; 1:\n                    right_count -= 1\n                else:\n                    right_min = min(A[i+1:])\n                    right_count = A[i+1:].count(right_min)\n\n        return -1\n</code></pre>"},{"location":"leetcode/921/readme/","title":"921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0","text":""},{"location":"leetcode/921/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 '(' \u548c ')' \u62ec\u53f7\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 S\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6700\u5c11\u7684\u62ec\u53f7\uff08 '(' \u6216\u662f ')'\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\uff09\uff0c\u4ee5\u4f7f\u5f97\u5230\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\u6709\u6548\u3002</p> <p>\u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u53ea\u6709\u6ee1\u8db3\u4e0b\u9762\u51e0\u70b9\u4e4b\u4e00\uff0c\u62ec\u53f7\u5b57\u7b26\u4e32\u624d\u662f\u6709\u6548\u7684\uff1a</p> <pre><code>\u5b83\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6216\u8005\n\u5b83\u53ef\u4ee5\u88ab\u5199\u6210 AB \uff08A \u4e0e B \u8fde\u63a5\uff09, \u5176\u4e2d A \u548c B \u90fd\u662f\u6709\u6548\u5b57\u7b26\u4e32\uff0c\u6216\u8005\n\u5b83\u53ef\u4ee5\u88ab\u5199\u4f5c (A)\uff0c\u5176\u4e2d A \u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002\n</code></pre> <p>\u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e3a\u4f7f\u7ed3\u679c\u5b57\u7b26\u4e32\u6709\u6548\u800c\u5fc5\u987b\u6dfb\u52a0\u7684\u6700\u5c11\u62ec\u53f7\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1a\"())\"\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1a\"(((\"\n\u8f93\u51fa\uff1a3\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1a\"()\"\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1a\"()))((\"\n\u8f93\u51fa\uff1a4\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>S.length &lt;= 1000\nS \u53ea\u5305\u542b '(' \u548c ')' \u5b57\u7b26\u3002\n</code></pre>"},{"location":"leetcode/921/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u6808\u8bc6\u522b\u51fa\u5339\u914d\u7684\u62ec\u53f7\u6d88\u9664\u6389\u3002</p> <p>\u7b97\u6cd5\uff1a 1. \u521d\u59cb\u5316\u7a7a\u6808s, ans = 0 2. \u987a\u5e8f\u904d\u5386\uff0c     \u9047\u5230\u5de6\u62ec\u53f7\u5165\u6808\uff1b     \u9047\u5230\u53f3\u62ec\u53f7\uff1a         \u5982\u679c\u6808\u9876\u6709\u5de6\u62ec\u53f7\uff0c\u5f39\u51fa\u7ee7\u7eed\u4e0b\u4e00\u4e2a         \u5982\u679c\u6808\u4e3a\u7a7a\uff0cans++ 3. \u5b8c\u6210\u904d\u5386\u4e4b\u540e\uff0c ans + len(stack), \u6808\u4e2d\u6240\u6709\u5269\u4f59\u7684\u5de6\u62ec\u53f7\u90fd\u9700\u8981\u5339\u914d</p>"},{"location":"leetcode/921/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/924/readme/","title":"924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad","text":""},{"location":"leetcode/924/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53 graph[i][j] = 1 \u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9 i \u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9 j\u3002</p> <p>\u4e00\u4e9b\u8282\u70b9 initial \u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002</p> <p>\u5047\u8bbe M(initial) \u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316 M(initial)\uff0c \u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u5df2\u4ece\u53d7\u611f\u67d3\u8282\u70b9\u7684\u5217\u8868 initial \u4e2d\u5220\u9664\uff0c\u5b83\u4ee5\u540e\u53ef\u80fd\u4ecd\u7136\u56e0\u6076\u610f\u8f6f\u4ef6\u4f20\u64ad\u800c\u53d7\u5230\u611f\u67d3\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1agraph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1agraph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1agraph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt; graph.length = graph[0].length &lt;= 300\n0 &lt;= graph[i][j] == graph[j][i] &lt;= 1\ngraph[i][i] == 1\n1 &lt;= initial.length &lt; graph.length\n0 &lt;= initial[i] &lt; graph.length\n</code></pre>"},{"location":"leetcode/924/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u5e76\u67e5\u96c6\u786e\u5b9a\u56fe\u4e2d\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff0c\u627e\u5230\u53ea\u6709\u4e00\u4e2a\u6c61\u67d3\u70b9\u7684\u6700\u5927\u7684\u8fde\u901a\u5206\u91cf\uff0c\u79fb\u9664\u8fd9\u4e2a\u6c61\u67d3\u70b9\u53ef\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u6536\u76ca\u3002 \u56e0\u4e3a\uff0c \u5982\u679c\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6c61\u67d3\u70b9\uff0c\u79fb\u9664\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u5269\u4e0b\u7684\u8fd8\u662f\u4f1a\u5168\u90e8\u88ab\u6c61\u67d3\u3002 \u53ea\u6709\u4e00\u70b9\u6c61\u67d3\u70b9\u7684\u6240\u6709\u8fde\u901a\u5206\u91cf\uff0c\u79fb\u9664\u6700\u5927\u7684\u90a3\u4e2a\u4fdd\u62a4\u7684\u8282\u70b9\u6700\u591a\u3002</p> <p>python</p>"},{"location":"leetcode/927/readme/","title":"927. \u4e09\u7b49\u5206","text":""},{"location":"leetcode/927/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u6570\u7ec4\u00a0A\uff0c\u5c06\u6570\u7ec4\u5206\u6210 3\u00a0\u4e2a\u975e\u7a7a\u7684\u90e8\u5206\uff0c\u4f7f\u5f97\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\u8868\u793a\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u503c\u3002</p> <p>\u5982\u679c\u53ef\u4ee5\u505a\u5230\uff0c\u8bf7\u8fd4\u56de\u4efb\u4f55\u00a0[i, j]\uff0c\u5176\u4e2d i+1 &lt; j\uff0c\u8fd9\u6837\u4e00\u6765\uff1a</p> <p>A[0], A[1], ..., A[i]\u00a0\u7ec4\u6210\u7b2c\u4e00\u90e8\u5206\uff1b A[i+1], A[i+2], ..., A[j-1]\u00a0\u4f5c\u4e3a\u7b2c\u4e8c\u90e8\u5206\uff1b A[j], A[j+1], ..., A[A.length - 1] \u662f\u7b2c\u4e09\u90e8\u5206\u3002 \u8fd9\u4e09\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u503c\u76f8\u7b49\u3002 \u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u8fd4\u56de\u00a0[-1, -1]\u3002</p> <p>\u6ce8\u610f\uff0c\u5728\u8003\u8651\u6bcf\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u65f6\uff0c\u5e94\u5f53\u5c06\u5176\u770b\u4f5c\u4e00\u4e2a\u6574\u4f53\u3002\u4f8b\u5982\uff0c[1,1,0]\u00a0\u8868\u793a\u5341\u8fdb\u5236\u4e2d\u7684\u00a06\uff0c\u800c\u4e0d\u4f1a\u662f\u00a03\u3002\u6b64\u5916\uff0c\u524d\u5bfc\u96f6\u4e5f\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u6240\u4ee5\u00a0[0,1,1] \u548c\u00a0[1,1]\u00a0\u8868\u793a\u76f8\u540c\u7684\u503c\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1a[1,0,1,0,1]\n  \u8f93\u51fa\uff1a[0,3]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u51fa\uff1a[1,1,0,1,1]\n  \u8f93\u51fa\uff1a[-1,-1]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  3 &lt;= A.length &lt;= 30000\n  A[i] == 0\u00a0\u6216\u00a0A[i] == 1\n</code></pre>"},{"location":"leetcode/927/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u57fa\u672c\u601d\u8def\u662f\u9996\u5148\u4fdd\u8bc11\u7684\u4e2a\u6570\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u624d\u53ef\u80fd\u503c\u662f\u76f8\u7b49\u7684\u3002 \u524d\u5bfc0\u7684\u4e2a\u6570\u53ef\u4ee5\u4e0d\u540c\u3002 <pre><code>int* threeEqualParts(int* A, int ASize, int* returnSize){\n    int count = 0;\n    int c1;\n    int i, j, right;\n    int *ans;\n    ans = (int*)malloc(sizeof(int) * 2);\n    ans[0] = -1;\n    ans[1] = -1;\n    *returnSize = 2;\n    for (i = 0; i &lt; ASize; i++) {\n        if (A[i] == 1) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        ans[0] = 0;\n        ans[1] = 2;\n        return ans;\n    }\n    if (count % 3 != 0) {\n        return ans;\n    }\n    c1 = count / 3; // \u6bcf\u4e2a\u503c\u5e94\u8be5\u5305\u542bc1\u4e2a1\n    for (i = ASize - 1; i &gt;= 0; i--) {\n        if (A[i] == 1) {\n            c1--;\n        }\n        if (c1 == 0) {\n            right = i;\n            break;\n        }\n    }\n    // right ... ASize-1 \u7ec4\u6210\u7684\u503c\u662f\u6700\u7ec8\u4e09\u4e2a\u7ec4\u90fd\u5e94\u8be5\u8fbe\u5230\u7684\u503c\n    // \u4f46\u662fright\u53ef\u80fd\u4e0d\u662f\u7b2c\u4e09\u7ec4\u7684\u5f00\u59cb\uff0c\u5982\u679c\u67090\u53ef\u4ee5\u63d0\u524d\n\n    // \u4ece\u5f00\u59cb\u627e\u5230\u7b2c\u4e00\u4e2a\u4e3a1\u7684\u4f4d\u7f6e\uff0c\u662f\u5426\u5b8c\u5168\u80fd\u548c right...ASize-1 \u5339\u914d\n    // \u5982\u679c\u4e0d\u80fd\u5339\u914d\uff0c\u5c31\u8fd4\u56defalse\n    // \u5982\u679c\u53ef\u4ee5\u5339\u914d\uff0c\u5c31\u786e\u5b9a\u4e86\u7b2c\u4e00\u7ec4\u7684\u4f4d\u7f6e\n    i = 0;\n    while (i &lt; ASize &amp;&amp; A[i] == 0) {\n        i++;\n    } \n    j = right;\n    while (i &lt; ASize &amp;&amp; j &lt; ASize &amp;&amp; A[i] == A[j]) {\n        i++;\n        j++;\n    }\n    if (j &lt; ASize) {\n        ans[0] = -1;\n        ans[1] = -1;\n        return ans;\n    }\n    // \u7b2c\u4e00\u7ec4\u5339\u914d\u4e0a\u4e86\uff0c i \u7684\u4f4d\u7f6e\u5c31\u662f\u7b2c\u4e8c\u7ec4\u5f00\u59cb\u7684\u4f4d\u7f6e\n    ans[0] = i - 1;\n    while (i &lt; ASize &amp;&amp; A[i] == 0) {\n        i++;\n    }\n    j = right;\n    while (i &lt; ASize &amp;&amp; j &lt; ASize &amp;&amp; A[i] == A[j]) {\n        i++;\n        j++;\n    }\n    if (j &lt; ASize) {\n        ans[0] = -1;\n        ans[1] = -1;\n        return ans;\n    }\n    if (i == right) {\n        ans[1] = i;\n    } else {\n        ans[1] = i;\n    }\n    return ans;\n}\n</code></pre></p>"},{"location":"leetcode/93/readme/","title":"93. \u590d\u539fIP\u5730\u5740","text":""},{"location":"leetcode/93/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002</p> <p>\u6709\u6548\u7684 IP \u5730\u5740\u6b63\u597d\u7531\u56db\u4e2a\u6574\u6570\uff08\u6bcf\u4e2a\u6574\u6570\u4f4d\u4e8e 0 \u5230 255 \u4e4b\u95f4\u7ec4\u6210\uff09\uff0c\u6574\u6570\u4e4b\u95f4\u7528 '.' \u5206\u9694\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>\u8f93\u5165: \"25525511135\"\n\u8f93\u51fa: [\"255.255.11.135\", \"255.255.111.35\"]\n</code></pre>"},{"location":"leetcode/93/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c \u5224\u65ad\u5f53\u524d\u662f\u5426\u53ef\u4ee5\u5206\u5272\uff0c\u5982\u679c\u4e0d\u80fd\u5206\u5272\uff0c\u5411\u540e\u626b\u63cf\uff1b \u5982\u679c\u53ef\u4ee5\u5206\u5272\uff0c\u5c1d\u8bd5\u5206\u5272\u548c\u4e0d\u5206\u5272\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>\u6ce8\u610f0\u7684\u7279\u6b8a\u5904\u7406\uff0c\u524d\u5bfc0\u662f\u4e0d\u5141\u8bb8\u51fa\u73b0\u7684\uff0c 00 \u4e5f\u4e0d\u80fd\u4f5c\u4e3a\u5408\u6cd5\u7684IP\u5730\u5740\u7684\u7ec4\u6210\u90e8\u5206\u3002</p> <pre><code>class Solution:\n    def restoreIpAddresses(self, s: str) -&gt; List[str]:\n        def dfs(start, end, count, ip):\n            \"\"\"\n            count = len(ip) \u8868\u793a\u5f53\u524d\u5df2\u7ecf\u89e3\u6790\u51fa\u6765\u7684IP\u5730\u5740\u7684\u6570\u91cf\uff0c example: len(2.244) = 2\n            [start, end] \u8868\u793a\u5f53\u524d\u7684\u4e0b\u6807\uff0c \u591a\u7ef4\u62a4\u4e00\u4e2acount\u907f\u514d\u6bcf\u6b21\u90fd\u53bb\u83b7\u53d6\u957f\u5ea6\n            \"\"\"\n            # \u8d85\u8fc7 n \u76f4\u63a5\u9000\u51fa\n            if start &gt; n or end &gt; n:\n                return\n\n            if start == end == n:\n                # \u5982\u679c\u6ca1\u6709\u5206\u5272\u4e3a4\u4e2a\u90e8\u5206\uff0c\u4e22\u5f03\u6389\u7ed3\u679c\n                if count != 4:\n                    return\n                ipString = [str(num) for num in ip[:]]\n                ipString = \".\".join(ipString)\n                ans.append(ipString)\n                return\n\n            # \u53ea\u6709\u67d0\u4e00\u4e2a\u4e3an\uff0c\u76f4\u63a5\u9000\u51fa\n            if start == n or end == n:\n                return\n\n            max_leave = (3 - count) * 3 # \u5982\u679c\u4ece end \u5904\u65ad\u5f00\uff0c \u6700\u5927\u5269\u4f59\u6570\u5b57\u4e2a\u6570\n            # \u5982\u679c\u5f53\u524d\u5269\u4f59\u7684\u6570\u5b57\u6570\u91cf\u8d85\u8fc7\u4e86\u6700\u5927\u9700\u8981\u7684\u6570\u91cf\uff0c \u4e0d\u80fd\u4ece\u8fd9\u91cc\u65ad\u5f00\uff0c end + 1 \u5411\u540e\u5c1d\u8bd5\n            # \u4f8b\u5982 s = \"2322512225\", ip = [23], count = 1, start = 2, end = 2, \n            # max_leave = 6, \u4eceend\u5904\u65ad\u5f00\u5269\u4f597\u4e2a\u6570\u5b57\uff0c \u800c\u5269\u4e0b\u7684IP\u5730\u5740\u6700\u591a\u9700\u8981 6\u4e2a\u6570\u5b57\uff0c \u4e0d\u80fd\u4ece\u8fd9\u91cc\u65ad\u5f00\n            if n - 1 - end &gt; max_leave:\n                dfs(start, end + 1, count, ip)\n                return\n            else:\n                # \u5982\u679c\u6709\u524d\u5bfc0\uff0c\u5fc5\u987b\u53ea\u5305\u542b0\u4e00\u4e2a\u6570\u5b57\n                # 00\uff0c 01\uff0c 025 \u90fd\u662f\u975e\u6cd5\u7684\n                if s[start] == '0':\n                    if end &gt; start:\n                        return\n                number = int( s[start:end+1] ) # \u8f6c\u6362\u6210\u6570\u5b57\n                # \u6570\u5b57\u8d85\u8fc7\u8303\u56f4\uff0c\u8bf4\u660e\u5206\u5272\u5931\u8d25\uff0c\u8fd4\u56de\n                if number &gt; 255:\n                    return\n                # \u53ef\u4ee5\u4ece end \u5904\u5206\u5272\uff0c \u5c1d\u8bd5\u5206\u5272\u548c\u4e0d\u5206\u5272\u4e24\u79cd\u60c5\u51b5\n                # \u5206\u5272\u7684\u60c5\u51b5\n                ip.append(number)\n                dfs(end + 1, end + 1, count + 1, ip)\n                ip.pop()\n\n                # \u4e0d\u5206\u5272\u7684\u60c5\u51b5, \u4f4d\u6570\u5927\u4e8e\u7b49\u4e8e3\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u5fc5\u8981\u5c1d\u8bd5\u4e0d\u5206\u5272\u7684\u60c5\u51b5\n                if end - start + 1 &lt; 3:\n                    dfs(start, end + 1, count, ip)\n            return\n\n        n = len(s)\n        ip = []\n        ans = []\n        start, end, count = 0, 0, 0\n        dfs(start, end, count, ip)\n        return ans\n</code></pre> <p>\u6d4b\u8bd5\u7528\u4f8b\uff1a 010010</p>"},{"location":"leetcode/946/readme/","title":"946. \u9a8c\u8bc1\u6808\u5e8f\u5217","text":""},{"location":"leetcode/946/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a pushed \u548c popped \u4e24\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u4e2d\u7684 \u503c\u90fd\u4e0d\u91cd\u590d\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u53ef\u80fd\u662f\u5728\u6700\u521d\u7a7a\u6808\u4e0a\u8fdb\u884c\u7684\u63a8\u5165 push \u548c\u5f39\u51fa pop \u64cd\u4f5c\u5e8f\u5217\u7684\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1apushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\uff1a\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1apushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n\u8f93\u51fa\uff1afalse\n\u89e3\u91ca\uff1a1 \u4e0d\u80fd\u5728 2 \u4e4b\u524d\u5f39\u51fa\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>0 &lt;= pushed.length == popped.length &lt;= 1000\n0 &lt;= pushed[i], popped[i] &lt; 1000\npushed \u662f popped \u7684\u6392\u5217\u3002\n</code></pre>"},{"location":"leetcode/946/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<ol> <li>\u904d\u5386poped\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c \u521d\u59cb\u5316 start = 0, stack = []</li> <li>\u5bf9\u4e8epoped[i], \u5148\u6bd4\u8f83\u662f\u5426\u7b49\u4e8epushed[start], \u5982\u679c\u76f8\u7b49\uff0c\u8bf4\u660e\u5c1a\u672a\u5165\u6808\uff0c\u53ef\u4ee5\u5165\u6808\u9a6c\u4e0a\u5f39\u51fa\uff0c poped[i]\u6210\u529f\u5339\u914d    \u518d\u6bd4\u8f83\u662f\u5426\u7b49\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0cpoped[i]\u6210\u529f\u5339\u914d\uff0c    \u5426\u5219\uff0c\u6301\u7eed\u5165\u6808\u76f4\u5230\u4e0epoped[i]\u76f8\u7b49</li> <li>\u904d\u5386\u5b8cpoped\u4e4b\u540e\uff0c\u6bcf\u4e2a\u90fd\u80fd\u5339\u914d\uff0c\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse</li> </ol>"},{"location":"leetcode/946/readme/#ac","title":"AC\u4ee3\u7801","text":"<ul> <li>C</li> <li>C++</li> <li>Python</li> </ul>"},{"location":"leetcode/973/readme/","title":"973. \u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9","text":""},{"location":"leetcode/973/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 points\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa K \u4e2a\u8ddd\u79bb\u539f\u70b9 (0, 0) \u6700\u8fd1\u7684\u70b9\u3002</p> <p>\uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>  \u8f93\u5165\uff1apoints = [[1,3],[-2,2]], K = 1\n  \u8f93\u51fa\uff1a[[-2,2]]\n  \u89e3\u91ca\uff1a \n  (1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c\n  (-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c\n  \u7531\u4e8e sqrt(8) &lt; sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002\n  \u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>  \u8f93\u5165\uff1apoints = [[3,3],[5,-1],[-2,4]], K = 2\n  \u8f93\u51fa\uff1a[[3,3],[-2,4]]\n  \uff08\u7b54\u6848 [[-2,4],[3,3]] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\uff09\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>  1 &lt;= K &lt;= points.length &lt;= 10000\n  -10000 &lt; points[i][0] &lt; 10000\n  -10000 &lt; points[i][1] &lt; 10000\n</code></pre>"},{"location":"leetcode/973/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<pre><code>void swap(int **points, int index1, int index2)\n{\n    int tmp1, tmp2;\n\n    tmp1 = points[index1][0];\n    tmp2 = points[index1][1];\n\n    points[index1][0] = points[index2][0];\n    points[index1][1] = points[index2][1];\n\n    points[index2][0] = tmp1;\n    points[index2][1] = tmp2;\n\n    return;\n}\nint less(int *a, int *b)\n{\n    if ((a[0] * a[0] + a[1] * a[1]) &lt;= (b[0] * b[0] + b[1] * b[1])) {\n        return 1;\n    }\n    return 0;\n}\n\nint partition(int **points, int start, int end)\n{\n    int *x = points[end];\n    int i;\n    int j = start - 1;\n\n    for (i = start; i &lt; end; i++) {\n        if (less(points[i], x) == 1) {\n            j = j + 1;\n            swap(points, i, j);\n        }\n    }\n    swap(points, j + 1, end);\n    return j + 1;\n}\nvoid sorted(int **points, int start, int end)\n{\n    int mid;\n    if (start &gt;= end) {\n        return;\n    }\n    mid = partition(points, start, end);\n    sorted(points, start, mid - 1);\n    sorted(points, mid + 1, end);\n    return;\n}\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** kClosest(int** points, int pointsSize, int* pointsColSize, int K, int* returnSize, int** returnColumnSizes){\n    int **ans;\n    int *cols;\n    int i, j;\n\n    // \u4e3a\u7b54\u6848\u5f00\u8f9f\u7a7a\u95f4\n    ans = (int**)malloc(sizeof(int*) * K);\n    for (i = 0; i &lt; K; i++) {\n        ans[i] = (int*)malloc(sizeof(int) * 2);\n    }\n    cols = (int*)malloc(sizeof(int) * K);\n\n    // \u6309\u7167\u8ddd\u79bb\u539f\u70b9\u7684\u8ddd\u79bb\u6392\u5e8f\n    sorted(points, 0, pointsSize - 1);\n\n    // \u53d6\u524dK\u4e2a\u653e\u5165\u7ed3\u679c\u4e2d\n    for (i = 0; i &lt; K; i++) {\n        ans[i][0] = points[i][0];\n        ans[i][1] = points[i][1];\n        cols[i] = 2;\n    }\n\n    *returnSize = K;\n    *returnColumnSizes = cols;\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/974/readme/","title":"974. \u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4","text":""},{"location":"leetcode/974/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 A\uff0c\u8fd4\u56de\u5176\u4e2d\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K\u00a0\u6574\u9664\u7684\uff08\u8fde\u7eed\u3001\u975e\u7a7a\uff09\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>\u8f93\u5165\uff1aA = [4,5,0,-2,-3,1], K = 5\n\u8f93\u51fa\uff1a7\n\u89e3\u91ca\uff1a\n\u6709 7 \u4e2a\u5b50\u6570\u7ec4\u6ee1\u8db3\u5176\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K = 5 \u6574\u9664\uff1a\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= A.length &lt;= 30000\n-10000 &lt;= A[i] &lt;= 10000\n2 &lt;= K &lt;= 10000\n</code></pre>"},{"location":"leetcode/974/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u7edf\u8ba1\u524d\u7f00\u548c\uff0c \u5229\u7528\u54c8\u5e0c\u8868\u8ba1\u7b97\u524d\u7f00\u548c\u6570\u7ec4\u5bf9K\u53d6\u4f59\u4e4b\u540e\u5269\u4e0b\u7684\u503c\uff0c \u8bb0\u5f55\u6bcf\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <pre><code>#define N 10001\nint hashMap[N];\nvoid init()\n{\n    int i;\n    for (i = 0; i &lt; N; i++) {\n        hashMap[i] = 0;\n    }\n}\nint subarraysDivByK(int* A, int ASize, int K){\n    int *sums;\n    int i;\n    int ans = 0;\n\n    sums = (int*)malloc(sizeof(int) * ASize);\n    sums[0] = A[0];\n    for (i = 1; i &lt; ASize; i++) {\n        sums[i] = sums[i - 1] + A[i];\n    }\n    init();\n    for (i = 0; i &lt; ASize; i++) {\n        sums[i] = (sums[i] % K + K) % K;\n        hashMap[sums[i]]++;\n        if (sums[i] == 0) {\n            ans++;\n        }\n    }\n    for (i = 0; i &lt; N; i++) {\n        if (hashMap[i] != 0) {\n            ans += hashMap[i] * (hashMap[i] - 1) / 2;\n        }\n    }\n    return ans;\n}\n</code></pre>"},{"location":"leetcode/991/readme/","title":"991. \u574f\u4e86\u7684\u8ba1\u7b97\u5668","text":""},{"location":"leetcode/991/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u5728\u663e\u793a\u7740\u6570\u5b57\u7684\u574f\u8ba1\u7b97\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <pre><code>\u53cc\u500d\uff08Double\uff09\uff1a\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u4e58 2\uff1b\n\u9012\u51cf\uff08Decrement\uff09\uff1a\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u51cf 1 \u3002\n</code></pre> <p>\u6700\u521d\uff0c\u8ba1\u7b97\u5668\u663e\u793a\u6570\u5b57\u00a0X\u3002</p> <p>\u8fd4\u56de\u663e\u793a\u6570\u5b57\u00a0Y\u00a0\u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1aX = 2, Y = 3\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u5148\u8fdb\u884c\u53cc\u500d\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97 {2 -&gt; 4 -&gt; 3}.\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1aX = 5, Y = 8\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u5148\u9012\u51cf\uff0c\u518d\u53cc\u500d {5 -&gt; 4 -&gt; 8}.\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1aX = 3, Y = 10\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\u5148\u53cc\u500d\uff0c\u7136\u540e\u9012\u51cf\uff0c\u518d\u53cc\u500d {3 -&gt; 6 -&gt; 5 -&gt; 10}.\n</code></pre> <p>\u793a\u4f8b 4\uff1a</p> <pre><code>\u8f93\u5165\uff1aX = 1024, Y = 1\n\u8f93\u51fa\uff1a1023\n\u89e3\u91ca\uff1a\u6267\u884c\u9012\u51cf\u8fd0\u7b97 1023 \u6b21\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= X &lt;= 10^9\n1 &lt;= Y &lt;= 10^9\n</code></pre>"},{"location":"leetcode/991/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8003\u8651\u4eceY\u5f97\u5230X\u6bd4\u8f83\u5bb9\u6613\uff0c\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u6cd5\u3002 \u5982\u679cY\u662f\u5947\u6570\uff0c\u5148\u52a01\u518d\u96642 \u5982\u679cY\u662f\u5076\u6570\uff0c\u76f4\u63a5\u96642 \u77e5\u9053Y\u5c0f\u4e8eX\u7684\u65f6\u5019\uff0c \u518d\u6267\u884cX-Y\u6b21\u52a0\u6cd5\u64cd\u4f5c</p> <p>\u56e0\u4e3a\u96642\u53ef\u4ee5\u4e00\u6b21\u64cd\u4f5c\u51cf\u5c11\u4e00\u534a\uff0c\u53ef\u4ee5\u66f4\u5feb\u7684\u4f7fY\u903c\u8fd1X\u9644\u8fd1</p> <pre><code>class Solution(object):\n    def brokenCalc(self, X, Y):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :rtype: int\n        \"\"\"\n        ans = 0\n        while Y &gt; X:\n            ans += 1\n            if Y % 2:\n                Y += 1\n            else:\n                Y = Y // 2\n        return ans + X - Y\n</code></pre>"},{"location":"lintcode/link/","title":"\u94fe\u8868\u76f8\u5173\u9898\u76ee","text":""},{"location":"lintcode/link/#_2","title":"\u53cd\u8f6c\u94fe\u8868","text":"<pre><code>/**\n* 1. \u5982\u679c\u662f\u7a7a\u94fe\u8868\uff0c\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de\u5934\u8282\u70b9\n* 2. pre --&gt; head, iter --&gt; head-&gt;next, pre-&gt;next = nullptr;\n* pre \u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0citer\u6307\u5411\u7b2c\u4e8c\u4e2a\u8282\u70b9(\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u8bf4\u660e\u5230\u8fbe\u4e86\u94fe\u8868\u7684\u7ed3\u5c3e)\uff0c\u65ad\u5f00\u524d\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\n* 3. while(iter!=nullptr) \u8f6c\u6362pre iter\u6307\u5411\u7684\u8282\u70b9\u7684\u8fde\u63a5\u3002\n* \u9996\u5148\u7528\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u53d8\u91cf\u5b58\u50a8iter\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u4fe1\u606f\uff0cnode = iter-&gt;next\n* iter-&gt;next = pre;\n* pre = iter;\n* iter = node;\n*/\nListNode *reverse(ListNode *head){\n    if(!head || !head-&gt;next) return head;\n    ListNode* pre = head;\n    ListNode* iter = head-&gt;next;\n    pre-&gt;next = nullptr;\n    while(iter){\n        ListNode* next = iter-&gt;next;\n        iter-&gt;next = pre;\n        pre = iter;\n        iter = next;\n    }\n    return pre;\n}\n</code></pre>"},{"location":"lintcode/link/#_3","title":"\u5c40\u90e8\u7ffb\u8f6c\u94fe\u8868","text":"<pre><code>ListNode * reverseBetween(ListNode * head, int m, int n) {\n    // \u7ffb\u8f6c\u4ecem\u5230n\u4e4b\u95f4\u7684\u94fe\u8868\uff0c\u8fde\u63a5\u5728\u539f\u6765\u7684\u94fe\u8868\u4e0a\n    if(!head || !head-&gt;next || m &lt;=0 || n &lt;=0 || m &gt;= n) return head;\n    // 1. \u589e\u52a0\u4e00\u4e2a\u5934\u8282\u70b9\n    ListNode* g = new ListNode(0);\n    g-&gt;next = head;\n    head = g;\n\n    ListNode* pre_start = head;\n    ListNode* end_next = head;\n    // 1. \u627e\u5230\u7b2cm\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n    m = m - 1;\n    while(pre_start &amp;&amp; m--){\n        pre_start = pre_start-&gt;next;\n    }\n    // 2. \u627e\u5230\u7b2cn\u4e2a\u8282\u70b9\u7684\u540e\u4e00\u4e2a\u8282\u70b9\n    n = n + 1;\n    while(end_next &amp;&amp; n--){\n        end_next = end_next-&gt;next;\n    }\n\n    if(m &gt;0 || n&gt;0) return head;\n\n    // 3. \u7ffb\u8f6cm \u5230 n\u4e4b\u95f4\u7684\u94fe\u8868\n    ListNode* stmp = pre_start-&gt;next;\n    ListNode* start = pre_start-&gt;next;\n    ListNode* end = start-&gt;next;\n    start-&gt;next = nullptr;\n    while(end != end_next){\n        ListNode* tmp = end-&gt;next;\n        end-&gt;next = start;\n        start = end;\n        end = tmp;\n    }\n    // 4. \u8fde\u63a5\u5230\u539f\u6765\u7684\u94fe\u8868\u4e0a\n    pre_start-&gt;next = start;\n    stmp-&gt;next = end;\n    return head-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#k","title":"K\u7ec4\u7ffb\u8f6c\u94fe\u8868","text":"<pre><code>ListNode *reverseKGroup(ListNode *head, int k) {\n    // \u6bcfK\u4e2a\u8282\u70b9\u7ffb\u8f6c\u4e00\u4e0b\u94fe\u8868\n    if(!head || k &lt;= 1) return head;\n    // \u589e\u52a0\u4e00\u4e2a\u5934\u8282\u70b9\n    ListNode* g = new ListNode(0);\n    g-&gt;next = head;\n    head = g;\n\n    ListNode* pre_start = head;\n    ListNode* end_next = head;\n    while(true){\n        // 1. \u627e\u5230\u7b2cK\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        int cc = k + 1;\n        while(end_next &amp;&amp; cc--){\n            end_next = end_next-&gt;next;\n        }\n\n        if(cc &gt; 0) break; // \u4e0d\u8db3K\u4e2a\u8282\u70b9\u7684\u90e8\u5206\u4e0d\u7ffb\u8f6c\n\n        // 2. \u7ffb\u8f6cK\u4e2a\u8282\u70b9\n        ListNode* start = pre_start-&gt;next;\n        ListNode* stmp = pre_start-&gt;next;\n        ListNode* end = start-&gt;next;\n        while(end &amp;&amp; end != end_next){\n            ListNode* tmp = end-&gt;next;\n            end-&gt;next = start;\n            start = end;\n            end = tmp;\n        }\n        //3. \u8fde\u63a5\u5230\u539f\u6765\u7684\u94fe\u8868\n        pre_start-&gt;next = start;\n        stmp-&gt;next = end_next;\n\n        //4. \u7ef4\u62a4pre_start, end_start\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6267\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\n        pre_start = end_next = stmp;\n    }\n    return head-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#n","title":"\u5220\u9664\u94fe\u8868\u4e2d\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9","text":"<p>\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u904d\u5386\u4e00\u904d\u94fe\u8868\u5c31\u80fd\u89e3\u51b3\uff1b</p> <pre><code>/**\n*  \u5220\u9664\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u5012\u6570\u7b2cK+1\u4e2a\u8282\u70b9\n* 1. \u8bbe\u94fe\u8868\u7684\u957f\u5ea6\u662fn, 1&lt;=k&lt;=n\n* 2. \u7528\u4e24\u4e2a\u95f4\u9694\u662fK\u7684\u6307\u9488\uff0c\u5f53\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u94fe\u8868\u7684null\u5143\u7d20\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5bfc\u6570\u7b2cK+1\u4e2a\u8282\u70b9\n* 3. \u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9guard; first --&gt; guard\n* 4. second = guard-&gt;next; second\u5411\u540e\u79fb\u52a8K\u6b65\uff0c\u5982\u679c\u5728K\u5927\u4e8e0\u7684\u65f6\u5019\u5faa\u73af\u7ed3\u675f\uff0c\u8868\u793a\u6ca1\u6709\u5bfc\u6570\u7b2cK\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u539f\u6765\u7684\u94fe\u8868\n* \u5faa\u73af\u9000\u51fa\u7684\u65f6\u5019\uff0cfirst \u548csecond\u95f4\u9694K\u4e2a\u8282\u70b9\uff0c\u6b64\u65f6\u540c\u65f6\u79fb\u52a8first second, second\u5230\u8fbe\u94fe\u8868\u7ed3\u5c3e\u7684\u65f6\u5019\uff0cfirst\u6307\u5411\u5bfc\u6570\u7b2cK+1\u4e2a\u8282\u70b9\uff0c\n* 5. \u5220\u9664\u8282\u70b9\uff1a first-&gt;next = first-&gt;next-&gt;next;\n*/\nListNode *removeNthFromEnd(ListNode *head, int n) {\n    ListNode *g = new ListNode(0);\n    g-&gt;next = head;\n    head = g;\n    ListNode* first = g;\n    ListNode* second = g-&gt;next;\n    while(second &amp;&amp; n--){\n        second = second -&gt; next;\n    }\n    if(n &gt; 0) return head-&gt;next; // n\u8d85\u8fc7\u4e86\u94fe\u8868\u7684\u957f\u5ea6\n    while(second){\n        first = first-&gt;next;\n        second = second-&gt;next;\n    }\n    first-&gt;next = first-&gt;next-&gt;next;\n    return head-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#_4","title":"\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af","text":"<pre><code>/**\n* 1. head=null \u6216\u8005 head-&gt;next = null\uff0c\u80af\u5b9a\u65e0\u73af\n* 2. first = second = head;\n* 3. do{}while();  first == second\u65f6\u5019\u5faa\u73af\u7ed3\u675f\uff0c\u8bf4\u660e\u94fe\u8868\u6709\u73af\uff1b\n* 4. \u4e00\u65e6\u627e\u5230\u73af\uff0c\u628afirst = head, \u7136\u540e\u4e00\u6b65\u4e00\u6b65\u7684\u79fb\u52a8first second, \u518d\u6b21\u76f8\u9047\u7684\u5730\u65b9\u5c31\u662f\u73af\u7684\u5165\u53e3\u3002\n*/\nbool hasCycle(ListNode *head) {\n    if(!head || !head-&gt;next) return false;\n    ListNode* first = head;\n    ListNode* second = head;\n    do{\n        first = first-&gt;next;\n        second = second-&gt;next-&gt;next;\n    }while(first &amp;&amp; second &amp;&amp; second-&gt;next &amp;&amp; second != first);\n\n    if(!first || !second || !second-&gt;next) return false;\n    // \u627e\u5230\u5165\u53e3\u8282\u70b9\n    first = head;\n    while(first != second){\n        first = first-&gt;next;\n        second = second-&gt;next;\n    }\n    return true;\n}\n</code></pre>"},{"location":"lintcode/link/#_5","title":"\u5224\u65ad\u94fe\u8868\u662f\u5426\u76f8\u4ea4","text":"<p>\u4e24\u79cd\u601d\u8def\uff1a \u4e00\u79cd\u5148\u904d\u5386\u4e00\u904d\u4e24\u4e2a\u94fe\u8868\uff0c\u5f97\u51fa\u6bcf\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5c06\u5c3e\u90e8\u5bf9\u5176\uff0c\u5224\u65ad</p> <p>\u53e6\u5916\u4e00\u79cd\uff0c\u5c06\u4e00\u4e2a\u94fe\u8868\u7684\u5c3e\u90e8\u8fde\u63a5\u5230\u5176\u5934\u7ed3\u70b9\uff0c\u4ece\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u8f6c\u6362\u6210\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af\u7684\u95ee\u9898\u3002</p> <pre><code>bool hasCycle(ListNode *head,ListNode* &amp;enter) {\n    if(!head || !head-&gt;next || !head-&gt;next-&gt;next) return false;\n    ListNode* first = head;\n    ListNode* second = head;\n    do{\n        first = first-&gt;next;\n        second = second-&gt;next-&gt;next;\n    }while(first &amp;&amp; second &amp;&amp; second-&gt;next &amp;&amp; first != second);\n    if(!first || !second || !second-&gt;next) return false;\n    // \u627e\u5230\u5165\u53e3\u8282\u70b9\n    first = head;\n    while(first != second){\n        first = first-&gt;next;\n        second = second-&gt;next;\n    }\n    enter = first;\n    return true;\n}\n\nListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n    if(!headA || !headB) return nullptr;\n    ListNode* iterA = headA;\n    while(iterA-&gt;next !=nullptr){\n        iterA = iterA-&gt;next;\n    }\n    iterA-&gt;next = headA;\n    ListNode* enter;\n    hasCycle(headB,enter);\n    return enter;\n}\n</code></pre>"},{"location":"lintcode/link/#k_1","title":"\u5408\u5e76K\u4e2a\u6392\u5e8f\u7684\u94fe\u8868","text":"<ol> <li> <p>\u7b2c\u4e00\u65b9\u6cd5\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58K\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488\uff0c\u6bcf\u6b21\u90fd\u6bd4\u8f83K\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u9009\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u94fe\u63a5\u5230\u65b0\u7684\u94fe\u8868\u7684\u7ed3\u5c3e\uff0c\u7136\u540e\u8be5\u94fe\u8868\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8\u4e00\u4f4d\u3002</p> </li> <li> <p>\u5229\u7528\u4e0a\u9762\u7684\u601d\u8def\uff0c\u6bcf\u6b21\u90fd\u8981\u4eceK\u4e2a\u5143\u7d20\u4e2d\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2aK\u4e2a\u5143\u7d20\u7684\u6700\u5c0f\u5806\u5b9e\u73b0\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> </li> <li> <p>\u5229\u7528\u5f52\u5e76\u7684\u601d\u60f3\uff0c\u4e24\u4e24\u5408\u5e76\uff1b</p> </li> </ol> <pre><code>// \u7b2c\u4e00\u79cd\u65b9\u6cd5\n\n// \u6bcf\u6b21\u627e\u51fa\u6700\u5c0f\u503c\u7684\u65b9\u5f0f\n ListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;lists) {\n    // write your code here\n    ListNode* guard = new ListNode(0);\n    ListNode* head = guard;\n\n    // current \u6307\u5411K\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488\n    vector&lt;ListNode*&gt; currents;\n    for(auto link : lists){\n        if(link != nullptr)\n            currents.push_back(link);\n    }\n\n    int index = 0;\n    while(!currents.empty()){\n        int minV = INT32_MAX;\n        for(int i = 0; i &lt; currents.size();++i){\n            // \u53bb\u6389\u5df2\u7ecf\u4e3a\u7a7a\u7684\u94fe\u8868\n            if(currents[i] == nullptr){\n                currents.erase(currents.begin()+i);\n            }\n            if(currents[i]-&gt;val &lt; minV){\n                index = i;\n                minV = currents[i]-&gt;val;\n            }\n        }\n        guard-&gt;next = currents[index];\n        guard = guard-&gt;next;\n        if(currents[index]-&gt;next != nullptr)\n            currents[index] = currents[index]-&gt;next;\n        else\n            currents.erase(currents.begin()+index);\n    }\n    return head-&gt;next;\n}\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c \u6700\u5c0f\u5806</p> <pre><code>// \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c \u6700\u5c0f\u5806\nListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;lists) {\n    priority_queue&lt;ListNode*,vector&lt;ListNode*&gt;,bigger&gt; minHeap;\n    if(lists.empty()) return nullptr;\n    for(int i=0;i&lt;lists.size();i++){\n        if(lists[i]) minHeap.push(lists[i]);\n    }\n    ListNode *head = nullptr;\n    ListNode *iter = nullptr;\n    while(!minHeap.empty()){\n        if(head == nullptr){\n            head = minHeap.top();\n            iter = head;\n            if(minHeap.top()-&gt;next){\n                minHeap.push(minHeap.top()-&gt;next);\n            }\n            minHeap.pop();\n        }else{\n            iter-&gt;next = minHeap.top();\n            iter = iter-&gt;next;\n            if(minHeap.top()-&gt;next){\n                minHeap.push(minHeap.top()-&gt;next);\n            }\n            minHeap.pop();\n        }\n    }\n    return head;\n}\n</code></pre> <p>\u7b2c\u4e09\u79cd\u65b9\u6cd5,\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u5f0f</p> <pre><code>// \u7b2c\u4e09\u79cd\u65b9\u6cd5,\u5f52\u5e76\u6392\u5e8f\u7684\u65b9\u5f0f\n// \u901a\u8fc7\u8c03\u7528\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\u7684\u65b9\u5f0f\u5b9e\u73b0\nListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\n    // write your code here\n    ListNode* guard = new ListNode(0);\n    ListNode* head = guard;\n    while(l1 &amp;&amp; l2){\n        if(l1-&gt;val &gt; l2-&gt;val){\n            guard-&gt;next = l2;\n            guard = guard-&gt;next;\n            l2 = l2-&gt;next;\n        }else{\n            guard-&gt;next = l1;\n            guard = guard-&gt;next;\n            l1 = l1-&gt;next;\n        }\n    }\n    if(l1){\n        guard-&gt;next = l1;\n    }\n    if(l2){\n        guard-&gt;next = l2;\n    }\n    return head-&gt;next;\n}\n\nListNode *mergeKLists(const vector&lt;ListNode *&gt; &amp;lists) {\n    if(lists.empty()) return nullptr;\n    if(lists.size() == 1) return lists[0];\n    if(lists.size() == 2) return mergeTwoLists(lists[0],lists[1]);\n\n    size_t n = lists.size();\n    vector&lt;ListNode*&gt; left((n+1)/2),right(n-(n+1)/2);\n    copy(lists.begin(),lists.begin()+(n+1)/2,left.begin());\n    copy(lists.begin()+(n+1)/2,lists.end(),right.begin());\n    return mergeTwoLists(mergeKLists(left),mergeKLists(right));\n}\n</code></pre> <p>\u4e0a\u9762\u91c7\u7528\u7684\u662f\u81ea\u9876\u5411\u4e0b\u7684\u9012\u5f52\u5f52\u5e76\u7684\u65b9\u5f0f\uff0c\u4e0b\u9762\u91c7\u7528\u975e\u9012\u5f52\u7684\u81ea\u5e95\u5411\u4e0a\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0</p> <pre><code>// \u7b80\u5355\u7684\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7684\u5f52\u5e76\u6c42\u548c\n// \u81ea\u5e95\u5411\u4e0a\u5f52\u5e76\nint solve(vector&lt;int&gt; &amp;v){\n    size_t end = v.size() - 1;\n    if(end &lt; 0) throw \"\";\n    if(end == 0) return v[0];\n    while(end &gt; 0){\n        int index = 0;\n        for(int i=0;i&lt;=end;i+=2){\n            if(i+1 &lt;= end){\n                v[index] = add(v[i],v[i+1]);\n                index++;\n            }else{\n                v[index] = v[i];\n                index++;\n            }\n        }\n        end = index - 1;\n    }\n    return v[0];\n}\n</code></pre> <pre><code>ListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;lists) {\n\n    if(lists.empty()) return nullptr;\n    if(lists.size() == 1) return lists[0];\n    if(lists.size() == 2) return mergeTwoLists(lists[0],lists[1]);\n\n    size_t end = lists.size() - 1;\n    while(end &gt; 0){\n        int index = 0;\n        for(int i=0;i&lt;=end;i+=2){\n            if(i+1 &lt;= end){\n                lists[index] = mergeTwoLists(lists[i],lists[i+1]);\n                index++;\n            }else{\n                lists[index] = lists[i];\n                index++;\n            }\n        }\n        end = index - 1;\n    }\n    return lists[0];\n}\n</code></pre>"},{"location":"lintcode/link/#_6","title":"\u5e26\u968f\u673a\u6307\u9488\u94fe\u8868\u7684\u590d\u5236|\u590d\u6742\u94fe\u8868\u7684\u590d\u5236","text":"<p>\u4f7f\u7528O\uff081\uff09\u7684\u989d\u5916\u7a7a\u95f4\u5b8c\u6210\u94fe\u8868\u7684\u590d\u5236\uff0c\u57fa\u672c\u601d\u8def\u662f\u628a\u62f7\u8d1d\u7684\u65b0\u8282\u70b9\u94fe\u63a5\u5728\u539f\u6765\u8282\u70b9\u7684\u540e\u9762\uff0c\u8bbe\u7f6e\u5b8c\u968f\u673a\u6307\u9488\u4e4b\u540e\u518d\u65ad\u5f00\u4e0e\u539f\u6765\u65e7\u94fe\u8868\u7684\u8fde\u63a5\u3002</p> <pre><code>RandomListNode *copyRandomList(RandomListNode *head) {\n    // write your code here\n    if(!head) return head;\n    RandomListNode* iter = head;\n    // 1. \u590d\u5236\u6bcf\u4e2a\u8282\u70b9\u8fde\u63a5\u5728\u539f\u6765\u8282\u70b9\u7684\u540e\u9762\n    while(iter){\n        RandomListNode* node = new RandomListNode(iter-&gt;label);\n        node-&gt;next = iter-&gt;next;\n        iter-&gt;next = node;\n        iter = node-&gt;next;\n    }\n    // 2. \u8bbe\u7f6e\u968f\u673a\u6307\u9488\n    RandomListNode* newHead = head-&gt;next;\n    head-&gt;next-&gt;random = head-&gt;random==nullptr ? nullptr : head-&gt;random-&gt;next;\n    iter = newHead-&gt;next;\n    while(iter){\n        RandomListNode* next = iter-&gt;next-&gt;next;\n        iter-&gt;next-&gt;random = iter-&gt;random == nullptr ? nullptr : iter-&gt;random-&gt;next;\n        iter = next;\n    }\n    // 3. \u65ad\u5f00\u548c\u65e7\u94fe\u8868\u7684\u8fde\u63a5\n    iter = newHead;\n    while(iter-&gt;next){\n        iter-&gt;next = iter-&gt;next-&gt;next;\n        iter = iter-&gt;next;\n    }\n    return newHead;\n}\n</code></pre>"},{"location":"lintcode/link/#_7","title":"\u5220\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u5220\u9664\u94fe\u8868\u8282\u70b9\u4e3a\u67d0\u4e2a\u503c\u7684\u6240\u6709\u5143\u7d20\u3002(\u67d0\u4e2a\u503c\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u4e5f\u53ef\u80fd\u5168\u90e8\u90fd\u662f)</p> <pre><code>ListNode *removeElements(ListNode *head, int val) {\n       // Write your code here\n       ListNode *guard=new ListNode(0);\n       guard-&gt;next = head;\n       head = guard;\n\n       ListNode *pre = guard;\n       ListNode *tmp = guard-&gt;next;\n       while(tmp){\n           if(tmp-&gt;val == val){\n               pre-&gt;next = tmp-&gt;next;\n               tmp = tmp-&gt;next;\n           }else{\n               pre = tmp;\n               tmp = tmp -&gt; next;\n           }\n\n       }\n       return head-&gt;next;\n   }\n</code></pre> <p>\u4e0d\u4f7f\u7528\u54e8\u5175\u7684\u65b9\u6cd5\uff0c\u5728\u8981\u6c42\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002</p> <pre><code>ListNode *removeElements(ListNode *head, int val) {\n       // Write your code here\n       // \u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503cval\u7684\u6240\u6709\u8282\u70b9\n       while(head &amp;&amp; head-&gt;val == val){\n           head = head-&gt;next;\n       }\n       if(head == nullptr) return head;\n       ListNode *pre = head;\n       ListNode *c = head-&gt;next; // \u5934\u7ed3\u70b9\u5df2\u7ecf\u4e0d\u53ef\u80fd==val\u4e86\uff0c\u56e0\u4e3a\u524d\u9762\u5df2\u7ecf\u5220\u9664\u4e86\n       while(c){\n           if(c-&gt;val == val){\n               pre-&gt;next = c-&gt;next;\n               c-&gt;next= nullptr;\n               c = pre-&gt;next;\n           }else{\n               pre = c;\n               c = c-&gt;next;\n           }\n       }\n       return head;\n}\n</code></pre>"},{"location":"lintcode/link/#o1","title":"\u5728O(1)\u65f6\u95f4\u590d\u6742\u5ea6\u5220\u9664\u94fe\u8868\u8282\u70b9","text":"<p>\u601d\u8def\uff1a\u7ed9\u51fa\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u662f\u4e0d\u53ef\u80fd\u5728O(1)\u7684\u65f6\u95f4\u5185\u5220\u9664\u8be5\u8282\u70b9\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5fc5\u987b\u627e\u5230\u5b83\u524d\u9762\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ea\u80fd\u4ece\u5934\u904d\u5386(\u5728\u6ca1\u6709\u6307\u5411\u524d\u9762\u7684\u6307\u9488\u7684\u60c5\u51b5\u4e0b)\uff0c\u590d\u6742\u5ea6\u4e0d\u53ef\u80fd\u662fO(1). \u4f46\u662f\u53ef\u4ee5\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\u7684\u503c\u8d4b\u7ed9\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u518d\u5220\u9664\u8981\u5220\u9664\u7684\u8282\u70b9\u540e\u9762\u7684\u8282\u70b9\uff0c\u8fd9\u6837'\u770b\u8d77\u6765'\u597d\u50cf\u5220\u9664\u4e86\u5f53\u524d\u7684\u8282\u70b9\u3002\u5b9e\u9645\u4e0a\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u771f\u6b63\u7684\u53d8\u5316\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\u53d8\u6210\u4e86\u5b83\u540e\u9762\u8282\u70b9\u7684\u503c.</p> <pre><code>void deleteNode(ListNode *node) {\n        // write your code here\n        node-&gt;val = node-&gt;next-&gt;val;\n        node-&gt;next = node-&gt;next-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#_8","title":"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u6bcf\u4e2a\u91cd\u590d\u5143\u7d20\u53ea\u7559\u4e0b\u4e00\u4e2a\u3002</p> <p>\u9047\u5230\u4e0d\u540c\u7684\u5143\u7d20\u7684\u65f6\u5019\u518d\u5220\u9664\u3002</p> <pre><code>ListNode *deleteDuplicates(ListNode *head) {\n        // write your code here\n        if(head == nullptr || head-&gt;next == nullptr) return head;\n        ListNode *pre = head;\n        ListNode *current = head-&gt;next;\n        while(current){\n            if(pre-&gt;val == current-&gt;val){\n                current = current-&gt;next;\n            }else{\n                pre-&gt;next = current;\n                pre = current;\n                current = current-&gt;next;\n            }\n\n        }\n        // \u94fe\u8868\u7ed3\u5c3e\u6709\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5\n        pre-&gt;next = current;\n        return head;\n}\n</code></pre> <p>\u4e00\u65e6\u9047\u5230\u76f8\u540c\u7684\u5143\u7d20\u5c31\u5220\u9664\u3002</p> <pre><code>ListNode *deleteDuplicates(ListNode *head) {\n        // \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u6bcf\u4e2a\u5143\u7d20\u53ea\u7559\u4e0b\u4e00\u4e2a\u3002\n        if(head == nullptr || head-&gt;next == nullptr) return head;\n        if(head-&gt;next-&gt;next == nullptr &amp;&amp; head-&gt;val == head-&gt;next-&gt;val) return head-&gt;next;\n        ListNode *pre = head;\n        ListNode *c = head-&gt;next;\n        while(c){\n            if(pre-&gt;val == c-&gt;val){\n                pre-&gt;next = c-&gt;next;\n                c = c-&gt;next;\n            }else{\n                pre = pre-&gt;next;\n                c = c-&gt;next;\n            }\n        }\n        return head;\n}\n</code></pre>"},{"location":"lintcode/link/#2","title":"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d202","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</p> <pre><code>ListNode * deleteDuplicates(ListNode *head) {\n       //\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002\n       ListNode *guard = new ListNode(0);\n       guard-&gt;next = head;\n       head = guard;\n\n       ListNode *pre = guard;\n       ListNode *start = guard-&gt;next;\n       ListNode *end = guard-&gt;next;\n       while(end){\n           while(end &amp;&amp; start-&gt;val == end-&gt;val){\n               end = end-&gt;next;\n           }\n           if(start-&gt;next == end){\n               pre = start;\n               start = end;\n           }else{\n               pre-&gt;next = end;\n               start = end;\n           }\n       }\n       return head-&gt;next;\n}\n</code></pre> <p>\u4e0d\u4f7f\u7528\u54e8\u5175\u8282\u70b9\u7684\u65b9\u6848</p> <pre><code>ListNode * deleteDuplicates(ListNode *head) {\n    //\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\u53ea\u7559\u4e0b\u539f\u94fe\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002\n    ListNode *pre = head;\n    ListNode *start = head;\n    ListNode *end = head;\n    while(end){\n        while(end &amp;&amp; start-&gt;val == end-&gt;val){\n            end = end-&gt;next;\n        }\n        if(start-&gt;next == end){\n            pre = start;\n            start = end;\n        }else{\n            if(pre == start &amp;&amp; pre == head){\n                head = end;\n                pre = end;\n            }\n            else    pre-&gt;next = end;\n            start = end;\n        }\n    }\n    return head;\n}\n</code></pre>"},{"location":"lintcode/link/#k_2","title":"\u5220\u9664\u5355\u5411\u94fe\u8868\u4e2d\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9","text":"<p>\u4f8b\u5982\uff1a<code>head--&gt;1--&gt;2--&gt;3--&gt;4--&gt;5--&gt;6</code>  K=2 \u8fd4\u56de\uff1a<code>head--&gt;1--&gt;2--&gt;3--&gt;4--&gt;6</code></p> <p>\u601d\u8def\u4e00\uff1a \u5148\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u7edf\u8ba1\u94fe\u8868\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u77e5\u9053\u5012\u6570\u7b2cK\u4e2a\u5143\u7d20\u5c31\u662f \u6b63\u6570\u7b2cn-k+1\u4e2a\u5143\u7d20\uff0c\u4ecehead\u5f00\u59cb\u79fb\u52a8\u6307\u9488\uff0c\u79fb\u52a8n-k\u6b21\u5c31\u662f\u8981\u5220\u9664\u7684\u8282\u70b9\u3002 \u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u628a\u539f\u6765\u6307\u5411\u8fd9\u4e2a\u5143\u7d20\u7684\u6307\u9488\u6307\u5411\u5b83\u540e\u9762\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684 \u64cd\u4f5c\u5c31\u662f\u4ecehead\u5f00\u59cb\uff0c\u79fb\u52a8n-k-1\u6b21\uff0c\u627e\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\u524d\u9762\u7684\u8282\u70b9a,\u7136\u540e\u6267\u884ca-&gt;next = a-&gt;next-&gt;next</p> <pre><code>ListNode *removeNthFromEnd(ListNode *head, int n) {\n    // write your code here\n    int len = 0;\n    ListNode *tmp = head;\n    while(tmp){\n        len ++;\n        tmp = tmp-&gt;next;\n    }\n    if(len &lt; n) return nullptr;\n    if(len == n) return head-&gt;next;\n\n    tmp = head;\n    int count = len + 1 - n  ;// \u6b63\u6570\u7b2ccount\u4e2a\u8282\u70b9\n    count = count - 2;\n    while(count--){\n        tmp = tmp-&gt;next;\n    }\n    tmp-&gt;next = tmp-&gt;next-&gt;next;\n    return head;\n}\n</code></pre> <p>\u601d\u8def\u4e8c\uff1a\u4f7f\u7528\u4e24\u4e2a\u95f4\u9694K\u4e2a\u5143\u7d20\u7684\u6307\u9488\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u5f53\u524d\u9762\u7684\u6307\u9488\u8d70\u5230\u5c3e\u8282\u70b9\u7684\u65f6\u5019\uff0c\u540e\u9762\u7684\u8282\u70b9\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2cK\u4e2a\u8282\u70b9\u3002</p> <pre><code>ListNode *removeNthFromEnd(ListNode *head, int n) {\n    // write your code here\n    if(head == nullptr) return nullptr;\n    ListNode *first = head;\n    ListNode *second = head;\n    int count = n + 1;\n    while(first &amp;&amp; count--){\n        first = first-&gt;next;\n    }\n    if(first == nullptr) return head-&gt;next; // \u5220\u9664\u7b2c\u4e00\u4e2a\u8282\u70b9\n    if(count &gt; 0) return nullptr; // \u6ca1\u6709\u5bfc\u6570\u7b2cn\u4e2a\u8282\u70b9\n    while(first){\n        first = first-&gt;next;\n        second = second-&gt;next;\n    }\n    second-&gt;next = second-&gt;next-&gt;next;\n    return head;\n}\n</code></pre>"},{"location":"lintcode/link/#_9","title":"\u67e5\u627e\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9","text":"<p>\u601d\u8def\uff1a \u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u6307\u5411\u5934\u90e8\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e24\u6b65\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65\uff0c\u8fd9\u6837\u5728\u5feb\u7684\u6307\u9488\u8d70\u5230\u5c3d\u5934\u7684\u65f6\u5019\uff0c\u6162\u7684\u6307\u9488\u6070\u597d\u8d70\u5230\u4e86\u4e2d\u90e8\u3002</p> <pre><code>/**\n * \u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u5e76\u8fd4\u56de\n * @param head\n * @return\n */\nListNode* findMiddle(ListNode* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    ListNode *first = head, *second = head;\n    while(second-&gt;next &amp;&amp; second-&gt;next-&gt;next){\n        first = first-&gt;next;\n        second = second-&gt;next-&gt;next;\n    }\n    return first;\n}\n</code></pre>"},{"location":"lintcode/link/#_10","title":"\u63d2\u5165\u6392\u5e8f\uff08\u4f7f\u7528\u5355\u94fe\u8868\u5b9e\u73b0\uff09","text":"<pre><code>ListNode *insertionSortList(ListNode *head) {\n    // \u4f7f\u7528\u94fe\u8868\u5b9e\u73b0\u63d2\u5165\u6392\u5e8f\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n\n    ListNode *guard = new ListNode(INT32_MIN);\n    guard-&gt;next = head;\n    head = guard;\n\n    ListNode *sorted = guard;\n    ListNode *ends = guard-&gt;next;\n    ListNode *unsorted = ends-&gt;next;\n    ends-&gt;next = nullptr; // \u94fe\u8868\u65ad\u5f00\n    while(unsorted){\n        // \u627e\u5230\u63d2\u5165\u7684\u4f4d\u7f6e\n        while(sorted != ends){\n            if(unsorted-&gt;val &gt;= sorted-&gt;val &amp;&amp; unsorted-&gt;val &lt; sorted-&gt;next-&gt;val){\n                // \u63d2\u5165\u5230iter1\u540e\u9762\n                ListNode *tmp = unsorted;\n                unsorted = unsorted-&gt;next;\n                tmp-&gt;next = sorted-&gt;next;\n                sorted-&gt;next = tmp;\n                sorted = guard;\n                break;\n            }\n            sorted = sorted-&gt;next;\n        }\n        if(sorted == ends &amp;&amp; unsorted-&gt;val &gt;= ends-&gt;val){\n            ends-&gt;next = unsorted;\n            unsorted = unsorted-&gt;next;\n            ends = ends-&gt;next;\n            ends-&gt;next = nullptr;\n            sorted = guard;\n        }\n\n    }\n    return head-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#_11","title":"\u5feb\u901f\u6392\u5e8f(\u5355\u94fe\u8868\u5b9e\u73b0)","text":"<p>\u5feb\u901f\u6392\u5e8f\u4e00\u822c\u7684\u601d\u60f3\u662f\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u76f8\u5411\u8fd0\u52a8\uff0c\u4f46\u662f\u5355\u94fe\u8868\u6ca1\u6709\u5411\u524d\u7684\u6307\u9488\uff0c\u8fd9\u8981\u6c42\u6211\u4eec\u6362\u4e00\u79cd\u601d\u8def\u3002\u5982\u4f55\u4ece\u524d\u5f80\u540e\u904d\u5386\u627e\u5230\u652f\u70b9\u7684\u4f4d\u7f6e\u3002\u5047\u8bbe\u652f\u70b9\u7684\u503c\u662fvalue. \u6211\u4eec\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8evalue\u7684\u503c\u90fd\u5728\u524d\u9762\uff0c\u6240\u6709\u5927\u4e8evalue\u7684\u503c\u90fd\u5728\u540e\u9762\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u627e\u5230\u7684value\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002</p> <pre><code>// \u5355\u94fe\u8868\u5b9e\u73b0\u5feb\u6392\n</code></pre>"},{"location":"lintcode/link/#_12","title":"\u4ea4\u6362\u94fe\u8868\u5f53\u4e2d\u4e24\u4e2a\u8282\u70b9","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u4ee5\u53ca\u4e24\u4e2a\u6743\u503cv1\u548cv2\uff0c\u4ea4\u6362\u94fe\u8868\u4e2d\u6743\u503c\u4e3av1\u548cv2\u7684\u8fd9\u4e24\u4e2a\u8282\u70b9\u3002\u4fdd\u8bc1\u94fe\u8868\u4e2d\u8282\u70b9\u6743\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u8282\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u4e5f\u4e0d\u7528\u505a\u3002</p> <pre><code>ListNode* swapNodes(ListNode* head, int v1, int v2) {\n    // Write your code here\n    if(head==nullptr) return head;\n\n    // add a guard\n    ListNode *guard = new ListNode(0);\n    guard-&gt;next = head;\n    head = guard;\n\n    //search the value\n    ListNode *pre_v1=nullptr;\n    ListNode *pre_v2=nullptr;\n    ListNode *pre_tmp=guard;\n    ListNode *tmp=pre_tmp-&gt;next;\n    while(tmp){\n        if(tmp-&gt;val==v1){\n            pre_v1 = pre_tmp;\n        }\n        if(tmp-&gt;val==v2){\n            pre_v2 = pre_tmp;\n        }\n        pre_tmp = tmp;\n        tmp = tmp-&gt;next;\n    }\n\n    // not find v1 or v2\n    if(pre_v1==nullptr || pre_v2==nullptr){\n        return head-&gt;next;\n    }\n\n    // swap the two nodes\n    ListNode *v1s = pre_v1-&gt;next;\n    ListNode *v2s = pre_v2-&gt;next;\n    ListNode *next_v1 = v1s-&gt;next;\n    ListNode *next_v2 = v2s-&gt;next;\n\n    if(pre_v1 == v2s){\n        pre_v2-&gt;next = v1s;\n        v1s-&gt;next = v2s;\n        v2s-&gt;next = next_v1;\n    }else if(pre_v2 == v1s){\n        pre_v1-&gt;next = v2s;\n        v2s-&gt;next = v1s;\n        v1s-&gt;next = next_v2;\n    }else{\n        v1s-&gt;next = next_v2;\n        v2s-&gt;next = next_v1;\n        pre_v1-&gt;next = v2s;\n        pre_v2-&gt;next = v1s;\n    }\n\n    return head-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#_13","title":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u7684\u8282\u70b9\uff0c\u7136\u540e\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002</p> <pre><code>ListNode* swapPairs(ListNode* head) {\n        // Write your code here\n        if(head==nullptr || head-&gt;next==nullptr) return head;\n\n        ListNode *guard = new ListNode(0);\n        guard-&gt;next = head;\n        head = guard;\n\n        ListNode *pres1 = guard;\n        ListNode *s1 = guard-&gt;next;\n        ListNode *s2 = guard-&gt;next-&gt;next;\n        while(s1!=nullptr &amp;&amp; s2!=nullptr){\n            pres1-&gt;next = s2;\n            s1-&gt;next = s2-&gt;next;\n            s2-&gt;next = s1;\n            if(s1-&gt;next==nullptr || s1-&gt;next-&gt;next==nullptr){\n                return head-&gt;next;\n            }else{\n                pres1 = s1;\n                s1 = s1-&gt;next;\n                s2 = s2-&gt;next-&gt;next-&gt;next;\n            }\n        }\n        return head-&gt;next;\n    }\n</code></pre>"},{"location":"lintcode/link/#_14","title":"\u65cb\u8f6c\u94fe\u8868","text":"<pre><code>ListNode *rotateRight(ListNode *head, int k) {\n    //\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8k\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2dk\u662f\u4e00\u4e2a\u975e\u8d1f\u6570\n    if(head == nullptr || head-&gt;next == nullptr || k &lt;= 0) return head;\n    ListNode *end = head;\n    int len = 1;\n    while(end-&gt;next){\n        end = end-&gt;next;\n        len++;\n    }\n    k = k % len;\n    if(k == 0) return head;\n    int index = (len - 1 - k) % len;\n    ListNode *tmp = head;\n    while(tmp &amp;&amp; index --){\n        tmp = tmp-&gt;next;\n    }\n    if(index == -1){\n        end-&gt;next = head;\n        head = tmp-&gt;next;\n        tmp-&gt;next = nullptr;\n    }\n    return head;\n}\n</code></pre>"},{"location":"lintcode/link/#_15","title":"\u9996\u5c3e\u4ea4\u9519\u91cd\u6392\u94fe\u8868","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln,\u91cd\u65b0\u6392\u5217\u540e\u4e3a\uff1aL0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026\u5fc5\u987b\u5728\u4e0d\u6539\u53d8\u8282\u70b9\u503c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u539f\u5730\u64cd\u4f5c\u3002</p> <pre><code>/**\n * \u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9\u5e76\u8fd4\u56de\n * @param head\n * @return\n */\nListNode* findMiddle(ListNode* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    ListNode *first = head, *second = head;\n    while(second-&gt;next &amp;&amp; second-&gt;next-&gt;next){\n        first = first-&gt;next;\n        second = second-&gt;next-&gt;next;\n    }\n    return first;\n}\n/**\n * \u53cd\u8f6c\u94fe\u8868\n * @param head\n * @return\n */\nListNode *reverse(ListNode *head) {\n    // write your code here\n    if(head==nullptr || head-&gt;next==nullptr) return head;\n    ListNode *iter =head;\n    ListNode *next_iter = head-&gt;next;\n    iter-&gt;next=nullptr;\n    while(next_iter){\n        ListNode *tmp = next_iter-&gt;next;\n        next_iter-&gt;next = iter;\n        iter = next_iter;\n        next_iter = tmp;\n    }\n    head = iter;\n    return head;\n}\n/**\n * \u4ea4\u53c9\u5408\u5e76\u4e24\u4e2a\u94fe\u8868\n * @param l1\n * @param l2\n * @return\n */\nListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\n    // \u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u94fe\u8868\u5c31\u662f\u7ed3\u679c\n    if(l1 == nullptr) return l2;\n    if(l2 == nullptr) return l1;\n    ListNode *head = l1;\n    l1 = l1-&gt;next;\n    ListNode *iter = head;\n    bool odd = false;\n    while(l1 != nullptr || l2 != nullptr){\n        if(!odd){\n            if(l2){\n                iter-&gt;next = l2;\n                l2 = l2-&gt;next;\n                iter = iter-&gt;next;\n            }\n        }\n        if(odd){\n            if(l1){\n                iter-&gt;next = l1;\n                l1 = l1-&gt;next;\n                iter = iter-&gt;next;\n            }\n\n        }\n        odd = !odd;\n    }\n    return head;\n}\n\nListNode* reorderList(ListNode *head) {\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    // \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln,\u91cd\u65b0\u6392\u5217\u540e\u4e3a\uff1aL0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026\u5fc5\u987b\u5728\u4e0d\u6539\u53d8\u8282\u70b9\u503c\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u539f\u5730\u64cd\u4f5c\n    // \u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c \u53cd\u8f6c\u540e\u534a\u6bb5\uff0c\u7136\u540e\u4ea4\u53c9\u62fc\u63a5\u8d77\u6765\uff0c\u53ef\u4ee5\u786e\u4fdd\u4e0d\u9002\u7528\u989d\u5916\u7684\u7a7a\u95f4\n    ListNode* middle = findMiddle(head);\n    ListNode* head2 = reverse(middle-&gt;next);\n    middle-&gt;next = nullptr;\n    head = mergeTwoLists(head,head2);\n    return head;\n}\n</code></pre>"},{"location":"lintcode/link/#_16","title":"\u56de\u6587\u94fe\u8868","text":"<p>\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u4e2d\u7684\u503c\u662f\u5426\u662f\u56de\u6587</p> <p>\u627e\u5230\u4e2d\u95f4\u8282\u70b9\uff0c\u628a\u540e\u9762\u7684\u94fe\u8868\u53cd\u8f6c\uff0c\u7136\u540e\u4e0e\u524d\u9762\u7684\u9010\u4e2a\u8282\u70b9\u6bd4\u8f83\uff0c\u5982\u679c\u5b8c\u5168\u4e00\u6837\u6216\u8005\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e0d\u4e00\u6837\uff0c\u5219\u662f\u56de\u6587\u7684\u3002</p> <pre><code>bool isPalindrome(ListNode* head) {\n    // Write your code here\n    if(head == nullptr) return true;\n    ListNode *middle = findMiddle(head);\n    ListNode *head2 = reverse(middle-&gt;next);\n    middle-&gt;next = nullptr;\n    ListNode *iter1 = head, *iter2 = head2;\n    while(iter1 &amp;&amp; iter2){\n        if(iter1-&gt;val != iter2-&gt;val) return false;\n        iter1 = iter1-&gt;next;\n        iter2 = iter2-&gt;next;\n    }\n    if(iter1 &amp;&amp; iter1-&gt;next == nullptr){\n        return true;\n    }\n    if(iter2 &amp;&amp; iter2-&gt;next == nullptr){\n        return true;\n    }\n    if(iter1 == nullptr &amp;&amp; iter2 == nullptr){\n        return true;\n    }\n    return false;\n}\n</code></pre>"},{"location":"lintcode/link/#_17","title":"\u94fe\u8868\u6c42\u548c","text":"<p>\u4f60\u6709\u4e24\u4e2a\u7528\u94fe\u8868\u4ee3\u8868\u7684\u6574\u6570\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002\u6570\u5b57\u5b58\u50a8\u6309\u7167\u5728\u539f\u6765\u6574\u6570\u4e2d\u76f8\u53cd\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u6570\u5b57\u4f4d\u4e8e\u94fe\u8868\u7684\u5f00\u5934\u3002\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u5c06\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u7528\u94fe\u8868\u5f62\u5f0f\u8fd4\u56de\u548c\u3002</p> <pre><code>ListNode *addLists(ListNode *l1, ListNode *l2) {\n    if(l1 == nullptr) return l2;\n    if(l2 == nullptr) return l1;\n    // \u94fe\u8868\u6c42\u548c\n    int carry = 0;\n    ListNode *head = new ListNode(0);\n    ListNode *iter = head;\n    int number;\n    while(l1 != nullptr &amp;&amp; l2 != nullptr){\n        number = (l1-&gt;val + l2-&gt;val + carry ) % 10 ;\n        carry = (l1-&gt;val + l2-&gt;val + carry ) / 10 ;\n        ListNode *node = new ListNode(number);\n        iter-&gt;next = node;\n        iter = iter-&gt;next;\n        l1 = l1-&gt;next;\n        l2 = l2-&gt;next;\n    }\n    while(l1){\n        number = (l1-&gt;val + carry) % 10;\n        carry = (l1-&gt;val + carry) / 10;\n        ListNode *node = new ListNode(number);\n        iter-&gt;next = node;\n        iter = iter-&gt;next;\n        l1 = l1-&gt;next;\n\n    }\n    while(l2){\n        number = (l2-&gt;val + carry) % 10;\n        carry = (l2-&gt;val + carry) / 10;\n        ListNode *node = new ListNode(number);\n        iter-&gt;next = node;\n        iter = iter-&gt;next;\n        l2 = l2-&gt;next;\n    }\n    if(carry){\n        ListNode *node = new ListNode(carry);\n        iter-&gt;next = node;\n    }\n    return head-&gt;next;\n}\n</code></pre>"},{"location":"lintcode/link/#ii","title":"\u94fe\u8868\u6c42\u548c II","text":"<p>\u5047\u5b9a\u7528\u4e00\u4e2a\u94fe\u8868\u8868\u793a\u4e24\u4e2a\u6570\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ec5\u5305\u542b\u4e00\u4e2a\u6570\u5b57\u3002\u5047\u8bbe\u8fd9\u4e24\u4e2a\u6570\u7684\u6570\u5b57\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u8bbe\u8ba1\u4e00\u79cd\u65b9\u6cd5\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u5c06\u5176\u7ed3\u679c\u8868\u73b0\u4e3a\u94fe\u8868\u7684\u5f62\u5f0f\u3002</p> <p>\u5148\u7ffb\u8f6c\u94fe\u8868\uff0c\u6c42\u548c\uff0c\u5728\u7ffb\u8f6c\u56de\u53bb\u3002</p> <pre><code>ListNode *addLists2(ListNode *l1, ListNode *l2) {\n    return reverse(addLists(reverse(l1),reverse(l2)));\n}\n</code></pre>"},{"location":"lintcode/stack/","title":"\u6808\u7684\u76f8\u5173\u9898\u76ee","text":"<p>\u6808\u662f\u4e00\u79cd\u5b9e\u73b0\u4e86\u540e\u8fdb\u5148\u51fa\u7684\u89c4\u5219\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u5b9e\u73b0<code>stack</code>.\u4f7f\u7528\u7684\u65f6\u5019<code>include &lt;stack&gt;</code>,\u652f\u6301\u7684\u64cd\u4f5c\u6709<code>push(),pop(),top()</code>;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>pop</code>\u7684\u4f5c\u7528\u662f\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u8fd4\u56de\u6808\u9876\u5143\u7d20\uff0c\u5b9e\u73b0\u8fd4\u56de\u6808\u9876\u5143\u7d20\u5e76\u5f39\u51fa\u7684\u64cd\u4f5c\u5e94\u8be5\u662f<code>int a = s.top(); s.pop();</code>.</p> <p>\u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u4e24\u79cd\u5b9e\u73b0\uff0c \u4e00\u79cd\u662f\u666e\u901a\u7684\u961f\u5217<code>queue</code>,\u4f7f\u7528\u7684\u65f6\u5019<code>include&lt;queue&gt;</code>,\u652f\u6301\u7684\u64cd\u4f5c\u548c\u6808\u7c7b\u4f3c\uff0c<code>push(),pop(),top()</code>\u5206\u522b\u5b9e\u73b0\u6570\u636e\u7684\u5165\u961f\uff0c\u51fa\u961f\u548c\u8bfb\u53d6\u961f\u5217\u7684\u5934\u90e8\u5143\u7d20\u3002<code>deque</code>\u5b9e\u73b0\u4e86\u53cc\u7aef\u961f\u5217\uff0c\u652f\u6301\u4ece\u4e24\u7aef\u5165\u961f\u548c\u51fa\u961f.\u4f7f\u7528\u7684\u65f6\u5019<code>include&lt;deque&gt;</code>\u3002</p>"},{"location":"lintcode/stack/#_2","title":"\u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217","text":"<p>\u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217</p> <p>\u4f7f\u7528\u6808\u5b58\u50a8\u6240\u6709\u7684\u5de6\u62ec\u53f7\uff0c\u4e00\u65e6\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u4e0e\u6808\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse.</p> <pre><code>bool isValidParentheses(string&amp; s) {\n    // \u62ec\u53f7\u5339\u914d\u95ee\u9898\n    stack&lt;char&gt; cc;\n    map&lt;char,char&gt; m;\n    m['('] = ')';\n    m['['] = ']';\n    m['{'] = '}';\n    for(int i=0;i&lt;s.size();++i){\n        if(s[i] == '(' || s[i] == '['|| s[i]=='{'){\n            cc.push(s[i]);\n        }\n        if(s[i] == ')' || s[i] == ']' || s[i] == '}'){\n            if (cc.empty()) return false;\n            char tmp = cc.top();\n            if(m[tmp] != s[i]){\n                return false;\n            }\n            cc.pop();\n        }\n    }\n    if(cc.empty()) return true;\n    return false;\n}\n</code></pre>"},{"location":"lintcode/stack/#_3","title":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<p>\u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002</p> <p>\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c</p>"},{"location":"lintcode/stack/#_4","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f","text":"<p>\u5229\u7528\u6808\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u6b65\u9aa4(\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f)\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u6808cc\u4e3a\u7a7a\u7528\u6765\u5b58\u653e\u8fd0\u7b97\u7b26\uff0c\u521d\u59cb\u5316string s\u4e3a\u7a7a\u7528\u6765\u5b58\u50a8\u8f6c\u6362\u4e4b\u540e\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\uff1b</li> <li>\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u9047\u5230\u6570\u5b57\u76f4\u63a5\u8f93\u51fa\u5230s.</li> <li>\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u5982\u679c\u5f53\u524d\u7684\u6808cc\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u5165\u6808\uff1b\u5982\u679c\u9047\u5230\u7684\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\uff1b\u5982\u679c\u9047\u5230\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5165\u6808\uff1b</li> <li>\u5982\u679c\u9047\u5230\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u6808\u9876\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6301\u7eed\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u5143\u7d20\u7684\u8fd0\u7b97\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20 \u6216\u8005 \u6808\u4e3a\u7a7a \u4e3a\u6b62\u3002\u5faa\u73af\u9000\u51fa\u540e\u5c06\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808\u3002</li> <li>\u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4f46\u4e0d\u8f93\u51fa\u5230s.</li> </ol> <p>\u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f</p> <pre><code>bool isNumber(string &amp;s){\n    // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57\n    if(s.empty()) return false;\n    if(s.size() == 1 &amp;&amp; s[0] == '-') return false;\n    for(size_t i=0;i&lt;s.length();i++){\n        // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse\n        if( (i&gt;0 &amp;&amp; (s[i]&lt;'0'||s[i]&gt;'9')) ) return false;\n        // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse.\n        if(i==0&amp;&amp;(s[i]!='-')&amp;&amp;(s[i]&lt;'0'||s[i]&gt;'9') ) return false;\n    }\n    return true;\n}\nvector&lt;string&gt; convertToRPN(vector&lt;string&gt; &amp;expression) {\n    // write your code here\n    vector&lt;string&gt; ans;\n    if(expression.empty()) return ans;\n\n    // \u64cd\u4f5c\u7b26\n    stack&lt;string&gt; s;\n    // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\n    map&lt;string,int&gt; kv; \n    kv[\"+\"] = 3; kv[\"-\"] = 3; \n    kv[\"*\"] = 4; kv[\"/\"] = 4; \n    kv[\"(\"] = 2; kv[\")\"] = 6;\n    for(size_t i=0;i&lt;expression.size();i++){\n        // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa\n        if(isNumber(expression[i])){\n            ans.push_back(expression[i]);\n        }\n        // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406\n        else if(kv[expression[i]] &gt;= 2 &amp;&amp; kv[expression[i]] &lt;= 6){\n            // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\n            if(s.empty() || kv[expression[i]]==2 ){\n                s.push(expression[i]);\n            }\n            // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62\n            else if(kv[expression[i]] == 6){\n                while(!s.empty() &amp;&amp; s.top() != \"(\"){\n                    ans.push_back(s.top()); s.pop();\n                }\n                if(!s.empty()) s.pop(); // \u5f39\u51fa\u5de6\u62ec\u53f7\n            }\n            // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c\n            // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62\n            else if(kv[expression[i]]==3 || kv[expression[i]]==4){\n                 // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808\n                 if(kv[expression[i]] &gt; kv[s.top()]){\n                     s.push(expression[i]);\n                 }else{\n                     while(!s.empty() &amp;&amp; kv[expression[i]] &lt;= kv[s.top()]){\n                         ans.push_back(s.top()); s.pop();\n                     }\n                     s.push(expression[i]);\n                 }\n            }\n        }\n    }\n    // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa\n    while(!s.empty()){\n        ans.push_back(s.top()); s.pop(); \n    } \n    return ans;\n}\n</code></pre>"},{"location":"lintcode/stack/#_5","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<p>\u5148\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u6c42\u503c\u3002</p> <p>\u8868\u8fbe\u5f0f\u6c42\u503c</p> <pre><code>int evaluateExpression(vector&lt;string&gt; expression) {\n    // write your code here\n    vector&lt;string&gt; r = convert(expression);\n    if(r.empty()) return  0;\n    return evalRPN(r);\n}\n</code></pre>"},{"location":"lintcode/stack/#_6","title":"\u8868\u8fbe\u6811\u6784\u9020","text":"<p>\u8868\u8fbe\u6811\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u7528\u4e8e\u8861\u91cf\u7279\u5b9a\u7684\u8868\u8fbe\u3002\u6240\u6709\u8868\u8fbe\u6811\u7684\u53f6\u5b50\u90fd\u6709\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u503c\u3002\u800c\u6240\u6709\u8868\u8fbe\u6811\u7684\u975e\u53f6\u5b50\u90fd\u6709\u53e6\u4e00\u4e2a\u64cd\u4f5c\u5b57\u7b26\u4e32\u503c\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u6570\u7ec4\uff0c\u8bf7\u6784\u9020\u8be5\u8868\u8fbe\u7684\u8868\u8fbe\u6811\uff0c\u5e76\u8fd4\u56de\u8be5\u8868\u8fbe\u6811\u7684\u6839\u3002</p> <p>\u8868\u8fbe\u6811\u6784\u9020</p> <p>\u601d\u8def\uff1a \u53ef\u4ee5\u5229\u7528\u4ee5\u524d\u505a\u8fc7\u7684\u9898\u76ee\uff0c\u5c06\u672c\u9898\u5206\u89e3\u6210\u51e0\u4e2a\u5b50\u95ee\u9898\u3002\u901a\u8fc7\u5206\u6790\u6211\u4eec\u53d1\u73b0\uff0c\u4e2d\u7f00\u8868\u8fbe\u5f0f\u662f\u8868\u8fbe\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u540e\u7f00\u8868\u8fbe\u5f0f\u662f\u8868\u8fbe\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u901a\u8fc7\u4e2d\u7f00\u8868\u8fbe\u5f0f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u505a\u8fc7\u3002\u800c\u901a\u8fc7\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u4e5f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u6240\u4ee5\u8be5\u95ee\u9898\u5206\u89e3\u4e3a\u8fd9\u6837\u51e0\u4e2a\u5b50\u95ee\u9898\uff1a</p> <ol> <li>\u6c42\u540e\u7f00\u8868\u8fbe\u5f0f</li> <li>\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u91cd\u5efa\u4e8c\u53c9\u6811</li> </ol> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u672c\u9898\u4e2d\u4ee5\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u8282\u70b9\u7684\u503c\uff0c\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u8282\u70b9\u503c\u7684\u552f\u4e00\uff0c\u800c\u91cd\u5efa\u4e8c\u53c9\u6811\u7684\u65f6\u5019\u8981\u6c42\u8282\u70b9\u503c\u552f\u4e00\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u5b9a\u4e49\u65b0\u7ed3\u6784\u7684\u65b9\u6cd5\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u552f\u4e00\u7684\u3002\u5177\u4f53\u89c1\u4ee3\u7801\u3002</p> <pre><code>struct uniqueNode{\n    string description;\n    int id;\n    uniqueNode():description(\"\"), id(0){}\n    uniqueNode(string s, int i) : description(s), id(i){}\n};\n\n//Definition of ExpressionTreeNode:\nclass ExpressionTreeNode {\npublic:\n    string symbol;\n    ExpressionTreeNode *left, *right;\n    ExpressionTreeNode(string symbol) {\n        this-&gt;symbol = symbol;\n        this-&gt;left = this-&gt;right = NULL;\n    }\n};\n\n//\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811\nExpressionTreeNode* buildTree(vector&lt;uniqueNode&gt;&amp; inorder, vector&lt;uniqueNode&gt;&amp; postorder) {\n    if (inorder.empty() || postorder.empty()) { return nullptr; }\n    ExpressionTreeNode *node = new ExpressionTreeNode(postorder[postorder.size()-1].description);// \u5148\u5efa\u7acb\u6839\u8282\u70b9\n    int len = inorder.size();\n    for (size_t i = 0; i &lt; inorder.size(); ++i) {\n        if (inorder[i].id == postorder[postorder.size()-1].id) {\n            // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002\n            vector&lt;uniqueNode&gt; left_post(i);\n            vector&lt;uniqueNode&gt; left_vin(i);\n            vector&lt;uniqueNode&gt; right_post(len - 1 - i);\n            vector&lt;uniqueNode&gt; right_vin(len - 1 - i);\n            copy(inorder.begin(), inorder.begin() + i, left_vin.begin());\n            copy(inorder.begin() + i + 1, inorder.end(), right_vin.begin());\n            copy(postorder.begin(), postorder.begin() + i, left_post.begin());\n            copy(postorder.begin() + i, postorder.end()-1, right_post.begin());\n            node-&gt;left = buildTree(left_vin,left_post);\n            node-&gt;right = buildTree(right_vin,right_post);\n        }\n    }\n    return node;\n}\n\ninline bool isnumber(string &amp;s){\n    for(auto a : s){\n        if(a &gt; '9' || a &lt; '0'){\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * \u4e2d\u7f00\u8868\u8fbe\u5f0f -&gt; \u540e\u7f00\u8868\u8fbe\u5f0f\n * @param expression\n * @return\n */\nvector&lt;uniqueNode&gt; convert(vector&lt;uniqueNode&gt; expression) {\n    vector&lt;uniqueNode&gt; re;\n    stack&lt;uniqueNode&gt; cc;\n    // \u8bbe\u7f6e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\n    map&lt;string,int&gt; p;\n    p[\"+\"] = 3;\n    p[\"-\"] = 3;\n    p[\"*\"] = 4;\n    p[\"/\"] = 4;\n    p[\"(\"] = 2;\n    p[\")\"] = 1;\n    for(int i=0; i&lt; expression.size();i++){\n        // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u5165\u6808\n        if(isnumber(expression[i].description)){\n            re.push_back(expression[i]);\n            continue;\n        }\n        // \u9047\u5230\u64cd\u4f5c\u7b26\n        if(p[expression[i].description] &gt;= 1 &amp;&amp; p[expression[i].description] &lt;= 4){\n            //\u6808\u4e3a\u7a7a\u6216\u8005\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\n            if(cc.empty() || p[expression[i].description] == 2 || p[expression[i].description] &gt; p[cc.top().description]){\n                cc.push(expression[i]);\n            }\n                //\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u4e2d\u5de6\u62ec\u53f7\u4e4b\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u53f7\uff0c\u8f93\u51fa\uff0c\u6700\u540e\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4e0d\u8f93\u51fa\n            else if(p[expression[i].description] == 1){\n                while(cc.top().description != \"(\"){\n                    auto tmp = cc.top();\n                    re.push_back(tmp);\n                    cc.pop();\n                }\n                cc.pop(); // \u5f39\u51fa\u5de6\u62ec\u53f7\n            }\n                //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u8be5\u5148\u8ba1\u7b97\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\uff0c\u628a\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808\n            else if(p[expression[i].description] &lt;= p[cc.top().description]){\n                // \u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26\n                while(!cc.empty() &amp;&amp; p[expression[i].description] &lt;= p[cc.top().description]){\n                    re.push_back(cc.top());\n                    cc.pop();\n                }\n                // \u5f53\u6808\u4e3a\u7a7a \u6216\u8005 \u9047\u5230\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f\u4f4e\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c\u5faa\u73af\u9000\u51fa\n                cc.push(expression[i]);\n                //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5165\u6808\n            }\n            continue;\n        }\n        cout&lt;&lt;\"error 1.\"&lt;&lt;endl;\n    }\n    while(!cc.empty()){\n        re.push_back(cc.top());\n        cc.pop();\n    }\n    return re;\n}\n\nExpressionTreeNode* build(vector&lt;string&gt; &amp;expression) {\n    vector&lt;uniqueNode&gt; v;\n    for (int i = 0; i &lt; expression.size(); ++i) {\n        v.push_back(uniqueNode(expression[i],i+1));\n    }\n    auto last = convert(v);\n    for (int j = 0; j &lt; v.size(); ++j) {\n        if(v[j].description == \"(\" || v[j].description == \")\"){\n            v.erase(v.begin()+j);\n            j--;\n        }\n    }\n    auto head = buildTree(v,last);\n    return head;\n}\n</code></pre> <p>\u8868\u8fbe\u6811\u7684\u7279\u6b8a\u7ed3\u6784\u51b3\u5b9a\u4e86\u6211\u4eec\u53ea\u6839\u636e\u540e\u7f00\u8868\u8fbe\u5f0f\u4e5f\u80fd\u6784\u9020\u51fa\u6765\u4e00\u68f5\u8868\u8fbe\u6811(\u6ce8\u610f\uff1a\u53ea\u6839\u636e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u662f\u4e0d\u80fd\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\uff0c\u56e0\u4e3a\u7b54\u6848\u4e0d\u552f\u4e00\u3002)\uff0c\u5177\u4f53\u7684\u505a\u6cd5\u662f\u6a21\u62df\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u987a\u5e8f\u3002</p> <pre><code>//Definition of ExpressionTreeNode:\nclass ExpressionTreeNode {\npublic:\n    string symbol;\n    ExpressionTreeNode *left, *right;\n    ExpressionTreeNode(string symbol) {\n        this-&gt;symbol = symbol;\n        this-&gt;left = this-&gt;right = NULL;\n    }\n};\nbool isnumber(string &amp;s){\n    for (int i = 0; i &lt; s.size(); ++i) {\n        if(s[i] &lt; '0' || s[i] &gt; '9') return false;\n    }\n    return true;\n}\nbool isoperator(string &amp;s){\n    if(s == \"+\" || s == \"-\" || s == \"*\" || s == \"/\") return true;\n    return false;\n}\nvector&lt;string&gt; convert(vector&lt;string&gt; expression) {\n    vector&lt;string&gt; re;\n    stack&lt;string&gt; cc;\n    // \u8bbe\u7f6e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\n    map&lt;string,int&gt; p;\n    p[\"+\"] = 3;\n    p[\"-\"] = 3;\n    p[\"*\"] = 4;\n    p[\"/\"] = 4;\n    p[\"(\"] = 2;\n    p[\")\"] = 1;\n    for(int i=0; i&lt; expression.size();i++){\n        // \u9047\u5230\u6570\u5b57\u76f4\u63a5\u5165\u6808\n        if(isnumber(expression[i])){\n            re.push_back(expression[i]);\n            continue;\n        }\n        // \u9047\u5230\u64cd\u4f5c\u7b26\n        if(p[expression[i]] &gt;= 1 &amp;&amp; p[expression[i]] &lt;= 4){\n            //\u6808\u4e3a\u7a7a\u6216\u8005\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\n            if(cc.empty() || p[expression[i]] == 2 || p[expression[i]] &gt; p[cc.top()]){\n                cc.push(expression[i]);\n            }\n                //\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u4e2d\u5de6\u62ec\u53f7\u4e4b\u524d\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u53f7\uff0c\u8f93\u51fa\uff0c\u6700\u540e\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u4e0d\u8f93\u51fa\n            else if(p[expression[i]] == 1){\n                while(cc.top() != \"(\"){\n                    string tmp = cc.top();\n                    re.push_back(tmp);\n                    cc.pop();\n                }\n                cc.pop(); // \u5f39\u51fa\u5de6\u62ec\u53f7\n            }\n                //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u7b49\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u5e94\u8be5\u5148\u8ba1\u7b97\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u6240\u4ee5\u5f39\u51fa\u6808\u9876\u7684\u8fd0\u7b97\u7b26\uff0c\u8f93\u51fa\uff0c\u628a\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808\n            else if(p[expression[i]] &lt;= p[cc.top()]){\n                // \u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u7b26\n                while(!cc.empty() &amp;&amp; p[expression[i]] &lt;= p[cc.top()]){\n                    re.push_back(cc.top());\n                    cc.pop();\n                }\n                // \u5f53\u6808\u4e3a\u7a7a \u6216\u8005 \u9047\u5230\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f\u4f4e\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\uff0c\u5faa\u73af\u9000\u51fa\n                cc.push(expression[i]);\n                //\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5927\u4e8e\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\uff0c\u76f4\u63a5\u5165\u6808\n            }\n            continue;\n        }\n        cout&lt;&lt;\"error 1.\"&lt;&lt;endl;\n    }\n    while(!cc.empty()){\n        re.push_back(cc.top());\n        cc.pop();\n    }\n    return re;\n}\nExpressionTreeNode* build(vector&lt;string&gt; &amp;expression) {\n    expression = convert(expression);\n    if(expression.empty())\n        return nullptr;\n    stack&lt;ExpressionTreeNode*&gt; cc;\n    for (int i = 0; i &lt; expression.size(); ++i) {\n        if(isnumber(expression[i])){\n            ExpressionTreeNode *node = new ExpressionTreeNode(expression[i]);\n            cc.push(node);\n        }\n        if(isoperator(expression[i])){\n            ExpressionTreeNode *node = new ExpressionTreeNode(expression[i]);\n            ExpressionTreeNode *right = cc.top();\n            cc.pop();\n            ExpressionTreeNode *left = cc.top();\n            cc.pop();\n            node-&gt;left = left;\n            node-&gt;right = right;\n            cc.push(node);\n        }\n    }\n    return cc.top();\n}\n</code></pre>"},{"location":"lintcode/stack/#_7","title":"\u7b80\u6613\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u89e3\u6790","text":"<ul> <li>s = abc3[a], return abcaaa</li> <li>s = 3[abc], return abcabcabc</li> <li>s = 4[ac]dy, return acacacacdy</li> <li>s = 3[2[ad]3[pf]]xyz, return adadpfpfpfadadpfpfpfadadpfpfpfxyz</li> </ul> <p>Expression Expand</p> <pre><code>string expressionExpand(string&amp; s) {\n    bool finished = true;\n    for(int i = 0; i &lt; s.length(); ++i){\n        if(s[i]  == '[' || s[i] == ']'){\n            finished = false;\n            break;\n        }\n    }\n    if(finished) return s;\n    int left, right,pre_left;\n    for(int i=0;i&lt;s.length();++i){\n        if(s[i] == '['){\n            left = i;\n        }\n        if(s[i] == ']'){\n            for(int j = left-1; j &gt;= 0;--j){\n                if(s[j]&gt;='0' &amp;&amp; s[j]&lt;='9'){\n                    pre_left = j;\n                }else{\n                    break;\n                }\n            }\n\n            string num = s.substr(pre_left,left-pre_left);\n            int count = stoi(num);\n            string cycle = s.substr(left+1,i-left-1);\n            string cycle_with_count = \"\";\n            while(count--){\n                cycle_with_count += cycle;\n            }\n            s.erase(pre_left,i-pre_left+1);\n            s.insert(pre_left,cycle_with_count);\n            return expressionExpand(s);\n        }\n    }\n    return expressionExpand(s);\n}\n</code></pre>"},{"location":"lintcode/stack/#getmin","title":"\u5e26\u6709getMin()\u7684\u6808","text":"<p>\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u5728O(1)\u65f6\u95f4\u5185\u5f97\u5230\u6700\u5c0f\u503c\u7684\u6808\u7ed3\u6784\u3002\u652f\u6301<code>pop(),push(),top(),getMin()</code>\u56db\u79cd\u64cd\u4f5c\u3002</p> <p>\u5e26\u6700\u5c0f\u503c\u64cd\u4f5c\u7684\u6808</p> <p>\u601d\u8def  \u4f7f\u7528\u4e24\u4e2a\u6808\u6765\u6a21\u62df\u8fd9\u4e2a\u6808\uff0c\u4e00\u4e2a\u6808\u7528\u6765\u4fdd\u5b58\u5b9e\u9645\u7684\u6570\u636e\uff0c\u4e00\u4e2a\u6808\u7528\u6765\u4fdd\u5b58\u5bf9\u5e94\u6570\u636e\u7684\u6700\u5c0f\u503c\u3002\u6bcf\u6b21\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5224\u65ad\u6700\u5c0f\u503c\u6709\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u5982\u679c\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u76f4\u63a5\u5f39\u51fa\u6570\u636e\uff0c\u5982\u679c\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u66f4\u65b0\u5b58\u50a8\u6700\u5927\u503c\u6700\u5c0f\u503c\u7684\u6808\u3002</p> <pre><code>class StackWithGetMin2{\npublic:\n    stack&lt;int&gt; data;\n    stack&lt;int&gt; min_data;\n    void push(int val){\n        data.push(val);\n        if(!min_data.empty()){\n            if(min_data.top()&gt;=val){\n                min_data.push(val);\n            }\n        }\n        else{\n           min_data.push(val);\n       }\n    }\n    int pop(){\n        auto v = data.top();\n        if(v &gt; min_data.top()){\n            data.pop();\n            return v;\n        }else{\n            data.pop();\n            min_data.pop();\n            return v;\n        }\n    }\n    int getMin(){\n      if(min_data.empty){throw new exception;}\n      else{\n         return min_data.top();\n      }\n    }\n    int top(){\n        return data.top();\n    }\n};\n</code></pre>"},{"location":"lintcode/stack/#132","title":"132\u5e8f\u5217","text":"<p>Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i &lt; j &lt; k and ai &lt; ak &lt; aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p> <p>n will be less than 20,000.</p> <p>pattern</p> <pre><code>bool find132pattern(vector&lt;int&gt;&amp; nums) {\n    int third = INT32_MIN;\n    stack&lt;int&gt; s;\n    for (int i = nums.size() - 1; i &gt;= 0; --i) {\n        if (nums[i] &lt; third) return true;\n        else while (!s.empty() &amp;&amp; nums[i] &gt; s.top()) {\n                third = s.top(); s.pop();\n            }\n        s.push(nums[i]);\n    }\n    return false;\n}\n</code></pre>"},{"location":"lintcode/stack/#_8","title":"\u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>\u7528\u6808\u5b9e\u73b0\u961f\u5217</p> <pre><code>class MyQueue {\npublic:\n    stack&lt;int&gt; stack1;\n    stack&lt;int&gt; stack2;\n\n    MyQueue() {\n        // do intialization if necessary\n    }\n\n    void push(int element) {\n        // write your code here\n        stack1.push(element);\n    }\n\n    int pop() {\n        // write your code here\n        if(stack2.empty()){\n            if(stack1.empty()){\n               return -1;\n            }\n            while(!stack1.empty()){\n                int a = stack1.top();\n                stack1.pop();\n                stack2.push(a);\n            }\n        }\n        int a = stack2.top();\n        stack2.pop();\n        return a;\n    }\n\n    int top() {\n        // write your code here\n        if(stack2.empty()){\n            if(stack1.empty()){\n               return -1;\n            }\n            while(!stack1.empty()){\n                int a = stack1.top();\n                stack1.pop();\n                stack2.push(a);\n            }\n        }\n        int a = stack2.top();\n        return a;\n    }\n};\n</code></pre>"},{"location":"lintcode/stack/#_9","title":"\u7528\u4e00\u4e2a\u6808\u6392\u5e8f\u53e6\u5916\u4e00\u4e2a\u6808","text":"<p>\u8981\u6c42\u6392\u5e8f\u597d\u7684\u6570\u636e\u5c31\u5728\u539f\u6765\u7684\u6808\u91cc\u9762\u3002</p> <p>\u601d\u8def  \u8bbe\u5b58\u653e\u6570\u636e\u7684\u6808\u662f<code>s</code>, \u8f85\u52a9\u6392\u5e8f\u7684\u6808\u662f<code>help</code>,\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf<code>v</code>\u7528\u6765\u6682\u5b58\u4ece\u6808\u91cc\u9762\u51fa\u6765\u7684\u6570\u636e\u3002\u6211\u4eec\u53ea\u8981\u786e\u4fdd\u628a<code>s</code>\u4e2d\u7684\u6570\u6709\u5e8f\u7684\u5165\u6808<code>help</code>,\u7136\u540e\u5728\u53cd\u5411\u4ece<code>help</code>\u538b\u5165<code>s</code>\u5c31\u80fd\u5f97\u5230\u9700\u8981\u7684\u7ed3\u679c\u3002\u5982\u679c\u8981\u6c42\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5373<code>s</code>\u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48<code>help</code>\u4e2d\u5c31\u5e94\u8be5\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f,\u6808\u9876\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684\u3002\u6bcf\u6b21\u4ece<code>s</code>\u5411<code>help</code>\u79fb\u52a8\u6570\u636e\u7684\u65f6\u5019\uff0c\u90fd\u8981\u548c<code>help</code>\u7684\u6808\u9876\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5165\u6808\uff0c\u5982\u679c\u5927\u4e8e\u6808\u9876\u7684\u5143\u7d20\uff0c\u628a\u6808\u9876\u5143\u7d20\u5165\u6808\u5230<code>s</code>,\u76f4\u5230<code>v</code>\u4e2d\u7684\u6570\u5c0f\u4e8e<code>help</code>\u7684\u6808\u9876\u5143\u7d20\uff0c\u624d\u5c06<code>v</code>\u5165\u6808\u5230<code>help</code>,\u5176\u5b9e\u8fd9\u6709\u70b9\u5411\u6c49\u8bfa\u5854\u95ee\u9898\uff0c\u5faa\u73af\u5229\u7528\u4e24\u4e2a\u6808\u505a\u4e2d\u8f6c\uff0c\u53ea\u4e0d\u8fc7\u66f4\u52a0\u7b80\u5355\u3002</p> <pre><code>void sortStack(stack&lt;int&gt; s){\n    stack&lt;int&gt; help;\n    help.push( s.top() );\n    s.pop();\n    auto v = s.top();\n    if(help.top()&gt;v){\n        help.push(v);\n        s.pop();\n    }\n    else{\n        while(help.top()&lt;=v){\n            auto temp = help.top();\n            help.pop();\n            s.push(temp);\n        }\n        help.push(v);\n    }\n\n}\n</code></pre>"},{"location":"lintcode/stack/#_10","title":"\u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217","text":"<p>\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u5217<code>1,2,3,4,5</code>\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217<code>4,5,3,2,1</code>\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217,<code>4,3,5,1,2</code>\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09</p> <p>\u601d\u8def  \u8bbe\u538b\u5165\u5e8f\u5217\u662f<code>pushV</code>,\u5f39\u51fa\u5e8f\u5217\u662f<code>popV</code>,\u4ece<code>pushV</code>\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u548c<code>popV</code>\u9996\u5143\u7d20\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5047\u8bbe\u662f<code>a</code>,\u53ef\u4ee5\u77e5\u9053<code>a</code>\u5fc5\u5b9a\u662f\u538b\u5165\u6808\u4e4b\u540e\u5c31\u88ab\u5f39\u51fa\u6765\u4e86\u3002\u5047\u8bbe\u7528\u4e00\u4e2a\u4e34\u65f6\u7684\u6808<code>s1</code>\u4fdd<code>a</code>\u4e4b\u524d\u5165\u6808\u7684\u5143\u7d20\u548c<code>a</code>,\u90a3\u4e48\u6b64\u65f6<code>popV</code>\u548c<code>s1</code>\u7684\u6808\u9876\u5143\u7d20\u5e94\u8be5\u662f\u4e00\u81f4\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u904d\u5386<code>popV</code>\u4e2d\u7684\u5143\u7d20\uff0c\u4e0e<code>s1</code>\u4e2d\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5f39\u51fa\u8be5\u5143\u7d20,<code>popV</code>\u7684\u6307\u9488\u52a01,\u7ee7\u7eed\u4e0b\u4e00\u6b21\u6bd4\u8f83.\u5982\u679c\u4e0d\u76f8\u7b49,\u5c31\u628a<code>pushV</code>\u4e2d<code>a</code>\u540e\u9762\u7684\u5143\u7d20\u7ee7\u7eed\u5165\u6808\u5230<code>s1</code>,<code>popV</code>\u7684\u6307\u9488\u4e0d\u52a8\uff0c\u7ee7\u7eed\u6bd4\u8f83<code>popV</code>\u548c\u5f53\u524d<code>s1</code>\u7684\u6808\u9876\u5143\u7d20\u662f\u4e0d\u662f\u76f8\u7b49\u3002\u6309\u7167\u8fd9\u6837\u7684\u89c4\u5219\u5904\u7406\uff0c\u76f4\u5230\u6307\u9488\u8d70\u5230\u5c3d\u5934\uff0c\u770b<code>s1</code>\u4e2d\u7684\u5143\u7d20\u662f\u5426\u975e\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\u7684\uff0c<code>popV</code>\u5c31\u662f<code>pushV</code>\u7684\u5f39\u51fa\u5e8f\u5217\u3002</p> <pre><code>bool IsPopOrder(vector&lt;int&gt; pushV,vector&lt;int&gt; popV) {\n       if(pushV.size() != popV.size()) return false;\n       stack&lt;int&gt; s1;\n       //\u627e\u5230\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\u5143\u7d20\n       size_t i = 0;\n       while(pushV[i] != popV[0] &amp;&amp; i&lt;pushV.size()){\n           s1.push(pushV[i]);\n           i++;\n       }\n       s1.push(pushV[i]); //\u6b64\u65f6\u662fs1\u6808\u9876\u548cpopV\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff1b\n       i++;//i\u6307\u5411\u4e0b\u4e00\u5143\u7d20\uff1b\n       for(size_t j=0;j&lt;=popV.size();j++){\n           if( j&lt;popV.size() &amp;&amp; popV[j] == s1.top() ){\n              s1.pop();\n           }else if(i&lt;pushV.size()){\n               s1.push(pushV[i]);\n               j--;\n               i++;\n           }else if( j== popV.size() &amp;&amp; s1.empty()){\n               return true;\n           }else{\n               return false;\n           }\n       }\n       return false;\n   }\n</code></pre>"},{"location":"lintcode/tree/","title":"\u6811\u7684\u76f8\u5173\u9898\u76ee","text":"<p>\u3010\u524d\u5e8f\u904d\u5386\u3011\u3010\u4e2d\u5e8f\u904d\u5386\u3011\u3010\u540e\u5e8f\u904d\u5386\u3011\u3010\u8def\u5f84\u641c\u7d22\u3011\u3010\u516c\u5171\u7956\u5148\u3011\u3010\u5806\u3011\u3010top K\u3011\u3010\u7ebf\u6bb5\u6811\u3011\u3010\u6811\u72b6\u6570\u7ec4\u3011\u3010\u5e76\u67e5\u96c6\u3011</p>"},{"location":"lintcode/tree/#_2","title":"\u524d\u5e8f\u904d\u5386","text":"<pre><code>class TreeNode {\npublic:\n    int val;\n    TreeNode *left, *right;\n    TreeNode(int val) {\n        this-&gt;val = val;\n        this-&gt;left = this-&gt;right = NULL;\n    }\n};\n// \u9012\u5f52\u524d\u5e8f\u904d\u5386\nvector&lt;int&gt; preorderTraversal(TreeNode * root) {\n    vector&lt;int&gt; re;\n    if(!root) return re;\n\n    re.push_back(root-&gt;val);\n    if(root-&gt;left){\n        auto tmp = preorderTraversal(root-&gt;left);\n        re.insert(re.end(),tmp.begin(),tmp.end());\n    }\n    if(root-&gt;right){\n        auto tmp = preorderTraversal(root-&gt;right);\n        re.insert(re.end(),tmp.begin(),tmp.end());\n    }\n    return re;\n}\n\n// \u975e\u9012\u5f52\u524d\u5e8f\u904d\u5386\nvector&lt;int&gt; preorder(TreeNode* root){\n    vector&lt;int&gt; re;\n    if(!root) return re;\n\n    stack&lt;TreeNode*&gt; s;\n    TreeNode* iter = root;\n    while(iter || !s.empty()){\n        while(iter){\n            // \u9996\u5148\u8f93\u51fa\u6839\n            re.push_back(iter-&gt;val);\n            s.push(iter);\n            iter = iter-&gt;left;\n        }\n        iter = s.top();\n        s.pop();\n        iter = iter-&gt;right;\n    }\n    return re;\n}\n</code></pre>"},{"location":"lintcode/tree/#_3","title":"\u4e2d\u5e8f\u904d\u5386","text":"<pre><code>// \u9012\u5f52\u4e2d\u5e8f\u904d\u5386\nvector&lt;int&gt; inorderTraversal(TreeNode *root) {\n    vector&lt;int&gt; re;\n    if(!root) return re;\n\n    if(root-&gt;left){\n        auto tmp = inorderTraversal(root-&gt;left);\n        re.insert(re.end(),tmp.begin(),tmp.end());\n    }\n    re.push_back(root-&gt;val);\n    if(root-&gt;right){\n        auto tmp = inorderTraversal(root-&gt;right);\n        re.insert(re.end(),tmp.begin(),tmp.end());\n    }\n    return re;\n}\n\n// \u975e\u9012\u5f52\u4e2d\u5e8f\u904d\u5386\nvector&lt;int&gt; inorder(TreeNode* root){\n    vector&lt;int&gt; re;\n    if(!root) return re;\n\n    stack&lt;TreeNode*&gt; s;\n    TreeNode* iter = root;\n    while(iter || !s.empty()){\n        while(iter){\n            s.push(iter);\n            iter = iter-&gt;left;\n        }\n        iter = s.top();\n        s.pop();\n        // \u8f93\u51fa\n        re.push_back(iter-&gt;val);\n        iter = iter-&gt;right;\n    }\n    return re;\n}\n</code></pre>"},{"location":"lintcode/tree/#_4","title":"\u540e\u5e8f\u904d\u5386","text":"<pre><code>// \u9012\u5f52\u540e\u5e8f\u904d\u5386\nvector&lt;int&gt; postorderTraversal(TreeNode *root) {\n    vector&lt;int&gt; re;\n    if(!root) return re;\n\n    if(root-&gt;left){\n        auto tmp = postorderTraversal(root-&gt;left);\n        re.insert(re.end(),tmp.begin(),tmp.end());\n    }\n    if(root-&gt;right){\n        auto tmp = postorderTraversal(root-&gt;right);\n        re.insert(re.end(),tmp.begin(),tmp.end());\n    }\n    re.push_back(root-&gt;val);\n    return re;\n}\n// \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; postOrder(TreeNode *root)\n{\n    vector&lt;int&gt; re;\n    if(!root) return re;\n\n    TreeNode *iter = root;\n    stack&lt;TreeNode *&gt; s;\n    TreeNode *last = root;\n    s.push(iter);\n    while (!s.empty())\n    {\n        iter = s.top();\n        // 1. \u5f53\u524d\u8282\u70b9\u662f\u53f6\u8282\u70b9(\u6ca1\u6709\u5de6\u53f3\u5b69\u5b50)\uff0c\u8f93\u51fa\n        // 2. \u4e0a\u6b21\u8bbf\u95ee\u4e86\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b69\u5b50\uff0c\u800c\u4e14\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u8f93\u51fa\n        // 3. \u4e0a\u6b21\u8bbf\u95ee\u4e86\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b69\u5b50\uff0c\u8f93\u51fa\n        if( (iter-&gt;left == nullptr &amp;&amp; iter-&gt;right == nullptr) ||\n                (iter-&gt;right == nullptr &amp;&amp; last == iter-&gt;left) ||\n                    (last == iter-&gt;right) )\n        {\n            re.push_back(iter-&gt;val);\n            last = iter;\n            s.pop();\n        }\n        else\n        {\n            // \u6808\u662f\u540e\u8fdb\u5148\u51fa\u7684\uff0c\u8981\u5148\u5904\u7406\u5de6\u5b69\u5b50\uff0c\u6240\u4ee5\u8981\u5148\u653e\u5165\u53f3\u8017\u8d44\n            if(iter-&gt;right)\n                s.push(iter-&gt;right);\n            if(iter-&gt;left)\n                s.push(iter-&gt;left);\n        }\n    }\n    return re;\n}\n</code></pre>"},{"location":"lintcode/tree/#_5","title":"\u4e8c\u53c9\u6811\u7684\u8def\u5f84\u641c\u7d22","text":"<pre><code>// \u641c\u7d22\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6240\u6709\u8def\u5f84 [http://lintcode.com/zh-cn/problem/binary-tree-paths/#]\nvector&lt;vector&lt;int&gt;&gt; vv;\nvoid binaryTreePaths(TreeNode *root,vector&lt;int&gt; &amp;tmp) {\n    // write your code here\n    if(!root-&gt;left &amp;&amp; !root-&gt;right){\n        tmp.push_back(root-&gt;val);\n        vv.push_back(tmp);\n        tmp.clear();\n        return;\n    }else{\n        tmp.push_back(root-&gt;val);\n        vector&lt;int&gt; tmp1(tmp);\n        vector&lt;int&gt; tmp2(tmp);\n        if(root-&gt;left) binaryTreePaths(root-&gt;left,tmp1);\n        if(root-&gt;right) binaryTreePaths(root-&gt;right,tmp2);\n    }\n}\n</code></pre>"},{"location":"lintcode/tree/#_6","title":"\u4e8c\u53c9\u6811\u6700\u5927\u6df1\u5ea6","text":"<pre><code>// \u8c03\u7528\u65b9\u5f0f\uff1a maxDepth2(root,0)\nint maxDepth2(TreeNode *root, const int dep){\n    if(!root) return dep;\n    if(!root-&gt;left &amp;&amp; !root-&gt;right) return dep+1;\n    if(root-&gt;left &amp;&amp; !root-&gt;right) return maxDepth2(root-&gt;left,dep+1);\n    if(root-&gt;right &amp;&amp; !root-&gt;left) return maxDepth2(root-&gt;right,dep+1);     \n    return max(maxDepth2(root-&gt;left,dep+1),maxDepth2(root-&gt;right,dep+1));   \n}\n</code></pre>"},{"location":"lintcode/tree/#_7","title":"\u4e8c\u53c9\u6811\u6700\u5c0f\u6df1\u5ea6","text":"<pre><code>// \u6700\u5c0f\u6df1\u5ea6 \nint minDepth2(TreeNode* root,const int dep){\n    if(!root) return dep;\n    if(!root-&gt;left &amp;&amp; !root-&gt;right) return dep+1;\n    if(root-&gt;left &amp;&amp; !root-&gt;right)  return minDepth2(root-&gt;left,dep+1);\n    if(!root-&gt;left &amp;&amp; root-&gt;right)  return minDepth2(root-&gt;right,dep+1);\n    return min(minDepth2(root-&gt;left,dep+1),minDepth2(root-&gt;right,dep+1));\n}\n</code></pre>"},{"location":"lintcode/tree/#_8","title":"\u53f6\u5b50\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u7684\u641c\u7d22","text":"<pre><code>map&lt;TreeNode*,vector&lt;TreeNode*&gt;&gt; nodes; // \u5b58\u50a8\u6811\u7684\u7ed3\u6784\nmap&lt;TreeNode*,bool&gt; visited;\nvector&lt;vector&lt;int&gt;&gt; vv;\nvoid dfs(TreeNode* leaf,vector&lt;int&gt; &amp;v){\n    visited[leaf] = true;\n    vector&lt;TreeNode*&gt; tmp = nodes[leaf];\n    bool is = true;\n    v.push_back(leaf-&gt;val);\n    for(int i=0;i&lt;tmp.size();i++){\n        if(visited[tmp[i]] == false){\n            vector&lt;int&gt; v1(v);\n            dfs(tmp[i],v1);\n            is = false;\n        }\n    }\n    if(is){ // \u53f6\u8282\u70b9\n        vv.push_back(v);\n    }\n    return;\n}\n</code></pre>"},{"location":"lintcode/tree/#top-k","title":"top K \u95ee\u9898","text":"<p>\u5982\u679c\u662f\u6700\u5927\u7684K\u4e2a\u6570\uff0c\u90a3\u4e48\u9996\u5148\u4f7f\u7528\u524dK\u4e2a\u6570\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7136\u540e\u4ece\u7b2cK+1\u4e2a\u6570\u5f00\u59cb\u548c\u5806\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5927\u4e8e\u5806\u9876\u7684\u5143\u7d20\uff0c\u5c31\u628a\u5806\u9876\u7684\u5143\u7d20\u5f39\u51fa\uff0c\u628a\u8be5\u5143\u7d20push\u8fdb\u5806\u3002</p> <pre><code>vector&lt;int&gt; topk(vector&lt;int&gt; &amp;v, int k){\n    priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; heap; // \u6700\u5c0f\u5806\uff08\u5806\u9876\u5143\u7d20\u6700\u5c0f\uff09\n    for(int i=0;i&lt;k;i++){\n        heap.push(v[i]);\n    }\n    for(int i=k;i&lt;v.size();i++){\n        if(v[i] &gt; heap.top()){\n            heap.pop();\n            heap.push(v[i]);\n        }\n\n    }\n    vector&lt;int&gt; re;\n    while(!heap.empty()){\n        re.push_back(heap.top());\n        heap.pop();\n    }\n    return re;\n}\n</code></pre>"},{"location":"lintcode/tree/#_9","title":"\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570","text":"<p>\u4f7f\u7528\u5927\u9876\u5806(<code>priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt;</code>) \u4fdd\u5b58\u524d\u534a\u90e8\u5206\u7684\u6570\u636e\uff0c\u4f7f\u7528\u5c0f\u9876\u5806(<code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</code>) \u4fdd\u5b58\u540e\u534a\u90e8\u5206\u7684\u6570\u636e, \u4fdd\u8bc1\u5927\u9876\u5806\u7684\u9876 \u5c0f\u4e8e\u7b49\u4e8e \u5c0f\u9876\u5806\u7684\u9876\uff0c \u90a3\u4e48\u5728\u6bcf\u6b21\u9700\u8981\u6c42\u5f53\u524d\u7684\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\u3002</p> <pre><code>class MedianFinder {\nprivate:\n    priority_queue&lt;int,vector&lt;int&gt;,less&lt;int&gt;&gt; maxHeap;\n    priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; minHeap;\n    long long n;\n    bool is_left;\npublic:\n    MedianFinder() {\n        this-&gt;n = 0;\n        this-&gt;is_left = true;\n    }\n\n    void addNum(int num) {\n        // \u8f6e\u6d41\u52a0\u5165\u5de6\u53f3\u4e24\u4e2a\u5806\n        if(is_left){\n            // \u5982\u679cright\u7684\u5806\u4e3a\u7a7a\uff0c\u53ef\u4ee5\u786e\u4fdd\u5de6\u8fb9\u6700\u5927\u7684\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u8fb9\u6700\u5c0f\u7684\uff0c\u76f4\u63a5\u52a0\u5165\n            // \u5982\u679c\u8981\u52a0\u5165\u7684\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8eright\u7684\u5806\u9876\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u4e0a\u8ff0\u6761\u4ef6\n            if(minHeap.empty() || num &lt;= minHeap.top()){\n                maxHeap.push(num);\n            }\n            // \u5982\u679cnum &gt; minHeap.top(); \u4e0d\u80fd\u76f4\u63a5\u52a0\u5165maxHeap,\u56e0\u4e3a\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5c31\u4e0d\u80fd\u4fdd\u8bc1maxHeap\u4e2d\u7684\u6240\u6709\u7684\u6570\u5b57\u90fd\u5c0f\u4e8e\u7b49\u4e8eminHeap\u4e2d\u7684\u6570\u5b57\u3002\n            // \u8fd9\u4e2a\u65f6\u5019\u7684\u505a\u6cd5\u662f\uff0c \u5148\u628anum\u52a0\u5165minHeap, \u5728\u628aminHeap.top()\u5f39\u51fa\uff0c\u52a0\u5165maxHeap;\n            else{\n                minHeap.push(num);\n                maxHeap.push(minHeap.top());\n                minHeap.pop();\n            }\n            is_left = !is_left;\n        }\n        if(!is_left){\n            if(maxHeap.empty() || num &gt;= maxHeap.top()){\n                minHeap.push(num);\n            }else{\n                maxHeap.push(num);\n                minHeap.push(maxHeap.top());\n                maxHeap.pop();\n            }\n            is_left = !is_left;\n        }\n        this-&gt;n++;\n    }\n\n    double findMedian() {\n        if(n &gt;&gt; 1){\n            return (maxHeap.top() + minHeap.top()) / 2.0;\n        }else{\n            return maxHeap.top();\n        }\n    }\n};\n</code></pre>"},{"location":"lintcode/tree/#k","title":"\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868","text":"<p>\u8fd9\u91cc\u4f7f\u7528\u5c0f\u9876\u5806\u8fd9\u79cd\u7ed3\u6784\u4fdd\u5b58K\u4e2a\u94fe\u8868\uff0c\u6bcf\u6b21\u53d6\u5f97\u5806\u9876\u7684\u5143\u7d20\u5c31\u53ef\u4ee5\u5f97\u5230K\u4e2a\u94fe\u8868\u4e2d\u6700\u5c0f\u7684\u3002</p> <pre><code>ListNode *mergeKLists(vector&lt;ListNode *&gt; &amp;lists) {\n    priority_queue&lt;ListNode*,vector&lt;ListNode*&gt;,bigger&gt; minHeap;\n    if(lists.empty()) return nullptr;\n    for(int i=0;i&lt;lists.size();i++){\n        if(lists[i]) minHeap.push(lists[i]);\n    }\n    ListNode *head = nullptr;\n    ListNode *iter = nullptr;\n    while(!minHeap.empty()){\n        if(head == nullptr){\n            head = minHeap.top();\n            iter = head;\n            if(minHeap.top()-&gt;next){\n                minHeap.push(minHeap.top()-&gt;next);\n            }\n            minHeap.pop();\n        }else{\n            iter-&gt;next = minHeap.top();\n            iter = iter-&gt;next;\n            if(minHeap.top()-&gt;next){\n                minHeap.push(minHeap.top()-&gt;next);\n            }\n            minHeap.pop();\n        }\n    }\n    return head;\n}\n</code></pre>"},{"location":"lintcode/tree/#_10","title":"\u5806\u6392\u5e8f","text":"<p>\u4f7f\u7528\u5806\u8fd9\u79cd\u7ed3\u6784\u7ef4\u62a4\u6570\u636e\u7684\u6709\u5e8f\u6027\uff0c\u4ece\u800c\u8fdb\u884c\u6392\u5e8f\u7684\u7b97\u6cd5\u662f\u5806\u6392\u5e8f\u3002\u5806\u6392\u5e8f\u7684\u5177\u4f53\u6b65\u9aa4\u662f\uff1a \u4f7f\u7528\u8981\u6392\u5e8f\u7684\u6574\u4e2a\u6570\u7ec4\u5efa\u7acb\u5806\u3002\u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u5806\u9876\u5143\u7d20\u4ea4\u6362\uff0c\u5806\u7684\u5927\u5c0f\u51cf1\uff0c\u8c03\u6574\u5806\uff0c\u7136\u540e\u518d\u628a\u65b0\u7684\u5806\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u548c\u5806\u9876\u5143\u7d20\u4ea4\u6362\uff0c\u8c03\u6574\u5806\uff0c\u76f4\u5230\u5168\u90e8\u6570\u636e\u6709\u5e8f\u4e3a\u6b62\u3002</p> <pre><code>void heapSort(vector&lt;int&gt; &amp;v){\n    // \u5efa\u7acb\u6700\u5927\u5806\n    make_heap(v.begin(),v.end(),less&lt;int&gt;());\n    int index = v.size();\n    while(index &gt; 0){\n        // \u4ea4\u6362\u5806\u9876\u548c\u5806\u5c3e\u7684\u5143\u7d20\uff0c\u91cd\u65b0\u8c03\u6574\u5806\n        pop_heap(v.begin(),v.begin()+index,less&lt;int&gt;());\n        index--;\n    }\n}\n</code></pre>"},{"location":"lintcode/tree/#_11","title":"\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\ntemplate &lt;typename T&gt;\nstruct Node{\n    T val;\n    Node  *left,*right;\n    Node(){}\n    Node(T init) : val(init), left(nullptr), right(nullptr) {}\n};\n/**\n * \u4e8c\u53c9\u6811\u7684\u5148\u6839\u904d\u5386\uff0c\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u4f7f\u7528\u6808\n * @param root\n * @return\n */\nvector&lt;int&gt; preOrder(Node&lt;int&gt;* root){\n    vector&lt;int&gt; ans;\n    if(!root) return ans;\n    stack&lt;Node&lt;int&gt;*&gt; s;\n    Node&lt;int&gt;* iter = root;\n    while(iter || !s.empty()){\n        while(iter){\n            ans.push_back(iter-&gt;val);\n            s.push(iter);\n            iter = iter-&gt;left;\n        }\n        iter = s.top();\n        s.pop();\n        iter = iter-&gt;right;\n    }\n    return ans;\n}\n/**\n * \u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4f7f\u7528\u961f\u5217\n * @param root\n * @return\n */\nvector&lt;int&gt; levelOrder(Node&lt;int&gt;* root){\n    vector&lt;int&gt; ans;\n    if(!root) return ans;\n    queue&lt;Node&lt;int&gt;*&gt; q;\n    q.push(root);\n    Node&lt;int&gt;* iter;\n    while(!q.empty()){\n        iter = q.front();\n        if(iter){\n            ans.push_back(iter-&gt;val);\n            if(iter-&gt;left) q.push(iter-&gt;left);\n            if(iter-&gt;right) q.push(iter-&gt;right);\n        }\n        q.pop();\n    }\n    return ans;\n}\n\n/**\n * \u4f7f\u7528\u5c42\u6b21\u904d\u5386\u7684\u65b9\u6cd5\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\n * @param root\n * @return\n */\nvector&lt;string&gt; levelOrderSeries(Node&lt;int&gt;* root){\n    vector&lt;string&gt; ans;\n    if(!root) return ans;\n    queue&lt;Node&lt;int&gt;*&gt; q;\n    q.push(root);\n    Node&lt;int&gt;* iter;\n    while(!q.empty()){\n        iter = q.front();\n        if(iter){\n            if(iter-&gt;val != -1){\n                ans.push_back(to_string(iter-&gt;val));\n                if(iter-&gt;left){\n                    q.push(iter-&gt;left);\n                }else{\n                    q.push(new Node&lt;int&gt;(-1));\n                }\n                if(iter-&gt;right){\n                    q.push(iter-&gt;right);\n                }else{\n                    q.push(new Node&lt;int&gt;(-1));\n                }\n            }else{\n                ans.push_back(\"#\");\n            }\n        }\n        q.pop();\n    }\n    while(*(--ans.end()) == \"#\") ans.erase(--ans.end());\n    return ans;\n}\n/**\n * \u6839\u636e\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\u91cd\u5efa\u4e8c\u53c9\u6811\n * @param c\n * @return\n */\nNode&lt;int&gt;* reConstructTree(const vector&lt;string&gt; &amp;c){\n    if(c.empty()) return nullptr;\n\n    queue&lt;Node&lt;int&gt;*&gt; q;\n    int index = 0;\n    if(c[index] == \"#\") return nullptr;\n    auto root = new Node&lt;int&gt;( stoi(c[index]) );  index++;\n    q.push(root);\n\n    while(!q.empty()){\n        Node&lt;int&gt;* parent = q.front(); q.pop();\n        Node&lt;int&gt;* left = nullptr;\n        Node&lt;int&gt;* right = nullptr ;\n        if(index &lt; c.size() &amp;&amp; c[index] != \"#\") { left = new Node&lt;int&gt;(stoi(c[index]));  }  index++;\n        if(index &lt; c.size() &amp;&amp; c[index] != \"#\") { right = new Node&lt;int&gt;(stoi(c[index])); }  index++;\n        if(left) { parent-&gt;left = left; q.push(left); }\n        if(right) { parent-&gt;right = right; q.push(right); }\n    }\n    return root;\n}\nint main(){\n    vector&lt;string&gt; v = {\"3\",\"9\",\"20\",\"#\",\"#\",\"15\",\"7\"};\n    auto re = reConstructTree(v);\n\n    auto hh = levelOrderSeries(re);\n    return 0;\n\n}\n</code></pre>"},{"location":"lintcode/tree/#_12","title":"\u4f7f\u7528\u975e\u9012\u5f52\u3001\u975e\u6808\u7684\u65b9\u5f0f\u904d\u5386\u4e8c\u53c9\u6811","text":"<p>\u6838\u5fc3\u7684\u601d\u60f3\u662f\u4f7f\u7528\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8fb9\u7684\u7a7a\u6307\u9488\u6307\u5411  \u5728\u904d\u5386\u5b8c\u5de6\u5b50\u6811\u4e4b\u540e \u9700\u8981\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002 \u5177\u4f53\u7684\u6b65\u9aa4\u662f\uff1a</p> <ol> <li>\u4ee4<code>iter = root</code>,<code>root</code>\u8868\u793a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9\u3002\u9996\u5148\u8ba9<code>iter</code>\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u7684<code>right</code>\u6307\u9488\u6307\u5411<code>iter</code>. \u5b8c\u6210\u8fd9\u4e00\u6b65\u7684\u4ee3\u7801\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a</li> </ol> <pre><code>Node* tp = iter-&gt;left; // tp \u6307\u5411iter\u7684\u5de6\u5b50\u6811\nif(tp){\n    // \u901a\u8fc7\u5faa\u73af\u627e\u5230\u6700\u53f3\u8fb9\u7684\u8282\u70b9\n    while(tp-&gt;right != nullptr){\n         tp = tp-&gt;right;\n    }\n    // \u6700\u53f3\u8282\u70b9\u7684right\u6307\u9488\u6307\u5411iter\n    if(tp-&gt;right == nullptr){\n        tp-&gt;right = iter; \n}\n</code></pre> <ol> <li>\u5904\u7406\u5b8c<code>root</code>\u8282\u70b9\u4e4b\u540e\uff0c\u5faa\u73af\u5904\u7406<code>iter=iter-&gt;left</code>\u76f4\u5230<code>iter</code>\u7684<code>left</code>\u6307\u9488\u4e3a\u7a7a\u4e3a\u6b62\uff0c\u4e5f\u5c31\u662f\u4e0a\u6587\u4e2d\u7684<code>tp==nullptr</code>\u7684\u60c5\u51b5\u3002</li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;map&gt;\n\nusing namespace std;\n\nstruct Node{\n    int val;\n    Node* left;\n    Node* right;\n    Node(){}\n    Node(int v) : val(v),left(nullptr),right(nullptr){}\n};\n\n/**\n * \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4e0d\u7528\u6808\n * @param root\n * @return\n */\nvector&lt;int&gt; preOrder(Node* root){\n    vector&lt;int&gt; ans;\n    if(!root) return ans;\n\n    Node* iter = root;\n    Node* tp = nullptr;\n    while(iter != nullptr){\n        // \u5904\u7406iter\u7684\u5de6\u5b50\u6811\n        tp = iter-&gt;left;\n        if(tp != nullptr){\n            // \u627e\u5230 iter \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\n            while(tp-&gt;right != nullptr &amp;&amp; tp-&gt;right != iter){\n                tp = tp-&gt;right;\n            }\n            // \u5982\u679c\u662f\u4e0d\u6ee1\u8db3tp-&gt;right != nullptr \u800c\u9000\u51fa\u4e86\u4e0a\u9762\u7684\u5faa\u73af\uff0c\n            // \u8bf4\u660e\u627e\u5230\u7684\u8282\u70b9iter\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u9762\u7684\u7a7a\u8282\u70b9\uff0c\n            // \u628a\u8be5\u8282\u70b9\u6307\u5411iter\n            // \u7ee7\u7eed\u5904\u7406 iter \u7684\u5de6\u5b69\u5b50\n            if(tp-&gt;right == nullptr){\n                tp-&gt;right = iter; // \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u6307\u5411\u4e4b\u524d\u7684\u8282\u70b9\n                ans.push_back(iter-&gt;val); // \u4e00\u65e6\u627e\u5230\u5de6\u5b50\u6811\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u5c31\u8f93\u51faiter\uff0c\u56e0\u4e3a\u524d\u5e8f\u904d\u5386\u6839\u8282\u70b9\u8981\u6700\u5148\u8f93\u51fa\n                iter = iter-&gt;left;\n                continue;\n            }\n            // \u5982\u679c\u662f\u56e0\u4e3a\u4e0d\u6ee1\u8db3tp-&gt;right != iter \u9000\u51fa\u4e86\u5faa\u73af\uff0c\n            // \u5c31\u662f\u8bf4tp-&gt;right == iter\n            // \u8bf4\u660e\u5df2\u7ecf\u904d\u5386\u8fc7\u4e00\u904d(\u5426\u5219\u4e0d\u53ef\u80fd\u6709\u6307\u5411iter\u7684\u6307\u9488)\n            // \u628atp-&gt;right \u7f6e\u7a7a\uff0c\u6062\u590d\u4e8c\u53c9\u6811\u539f\u6765\u7684\u6837\u5b50\n            else{\n                tp-&gt;right = nullptr;\n            }\n        }else{\n            // \u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u4e5f\u8981\u8f93\u51fa\u6839\n            ans.push_back(iter-&gt;val);\n        }\n        iter = iter-&gt;right;\n    }\n    return ans;\n}\n\n/**\n * \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u975e\u9012\u5f52\uff0c\u4e0d\u7528\u6808\n * @param root\n * @return\n */\nvector&lt;int&gt; inOrder(Node* root){\n    vector&lt;int&gt; ans;\n    if(!root) return ans;\n\n    Node* iter = root;\n    Node* tp = nullptr;\n    while(iter != nullptr){\n        // \u5904\u7406iter\u7684\u5de6\u5b50\u6811\n        tp = iter-&gt;left;\n        if(tp != nullptr){\n            // \u627e\u5230 iter \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\n            while(tp-&gt;right != nullptr &amp;&amp; tp-&gt;right != iter){\n                tp = tp-&gt;right;\n            }\n            // \u5982\u679c\u662f\u4e0d\u6ee1\u8db3tp-&gt;right != nullptr \u800c\u9000\u51fa\u4e86\u4e0a\u9762\u7684\u5faa\u73af\uff0c\n            // \u8bf4\u660e\u627e\u5230\u7684\u8282\u70b9iter\u7684\u5de6\u5b50\u6811\u7684\u6700\u53f3\u9762\u7684\u7a7a\u8282\u70b9\uff0c\n            // \u628a\u8be5\u8282\u70b9\u6307\u5411iter\n            // \u7ee7\u7eed\u5904\u7406 iter \u7684\u5de6\u5b69\u5b50\n            if(tp-&gt;right == nullptr){\n                tp-&gt;right = iter; // \u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u6307\u5411\u4e4b\u524d\u7684\u8282\u70b9\n                iter = iter-&gt;left;\n                continue;\n            }\n            // \u5982\u679c\u662f\u56e0\u4e3a\u4e0d\u6ee1\u8db3tp-&gt;right != iter \u9000\u51fa\u4e86\u5faa\u73af\uff0c\n            // \u5c31\u662f\u8bf4tp-&gt;right == iter\n            // \u8bf4\u660e\u5df2\u7ecf\u904d\u5386\u8fc7\u4e00\u904d(\u5426\u5219\u4e0d\u53ef\u80fd\u6709\u6307\u5411iter\u7684\u6307\u9488)\n            // \u628atp-&gt;right \u7f6e\u7a7a\uff0c\u6062\u590d\u4e8c\u53c9\u6811\u539f\u6765\u7684\u6837\u5b50\n            else{\n                tp-&gt;right = nullptr;\n            }\n        }\n        ans.push_back(iter-&gt;val);\n        iter = iter-&gt;right;\n    }\n    return ans;\n}\n\nint main(){\n\n    return 0;\n}\n</code></pre>"},{"location":"lintcode/368/readme/","title":"368. \u8868\u8fbe\u5f0f\u6c42\u503c","text":""},{"location":"lintcode/368/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u4e00\u4e2a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u8868\u8fbe\u5f0f\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p> <p>\u8868\u8fbe\u5f0f\u53ea\u5305\u542b\u6574\u6570, +, -, *, /, (, ).</p> <p>\u6837\u4f8b 1:</p> <pre><code>\u5bf9\u4e8e\u8868\u8fbe\u5f0f `2*6-(23+7)/(1+2)`,\n\u8f93\u5165:\n[\"2\", \"*\", \"6\", \"-\", \"(\",\"23\", \"+\", \"7\", \")\", \"/\", \"(\", \"1\", \"+\", \"2\", \")\"]\n\u8f93\u51fa:\n2\n</code></pre> <p>\u6837\u4f8b 2:</p> <pre><code>\u5bf9\u4e8e\u8868\u8fbe\u5f0f `4-(2-3)*2+5/5`,\n\u8f93\u5165:\n[\"4\", \"-\", \"(\", \"2\",\"-\", \"3\", \")\", \"*\", \"2\", \"+\", \"5\", \"/\", \"5\"]\n\u8f93\u51fa:\n7\n</code></pre>"},{"location":"lintcode/368/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u5148\u628a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6362\u6210\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u518d\u5229\u7528\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u6700\u540e\u7684\u7ed3\u679c</p>"},{"location":"lintcode/368/readme/#ac","title":"AC\u4ee3\u7801","text":""},{"location":"lintcode/370/readme/","title":"370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f","text":""},{"location":"lintcode/370/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u8be5\u8868\u8fbe\u5f0f\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002\uff08\u53bb\u6389\u62ec\u53f7\uff09</p> <p>\u6837\u4f8b 1:</p> <pre><code>\u8f93\u5165: [\"3\", \"-\", \"4\", \"+\", \"5\"]\n\u8f93\u51fa: [\"3\", \"4\", \"-\", \"5\", \"+\"]\n\u89e3\u91ca: 3 - 4 + 5 = -1 + 5 = 4\n    3 4 - 5 + = -1 5 + = 4\n</code></pre> <p>\u6837\u4f8b 2:</p> <pre><code>\u8f93\u5165: [\"(\", \"5\", \"-\", \"6\", \")\", \"*\", \"7\"]\n\u8f93\u51fa: [\"5\",\"6\",\"-\",\"7\",\"*\"]\n\u89e3\u91ca: (5 - 6) * 7 = -1 * 7 = -7\n    5 6 - 7 * = -1 7 * = -7\n</code></pre>"},{"location":"lintcode/370/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":""},{"location":"lintcode/370/readme/#ac","title":"AC \u4ee3\u7801","text":"<pre><code>bool isNumber(string &amp;s){\n    // 1. \u7a7a\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57\n    if(s.empty()) return false;\n    if(s.size() == 1 &amp;&amp; s[0] == '-') return false;\n    for(size_t i=0;i&lt;s.length();i++){\n        // 2. \u5982\u679c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u53ca\u4ee5\u540e\u7684\u4e0d\u662f0--9\uff0c\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse\n        if( (i&gt;0 &amp;&amp; (s[i]&lt;'0'||s[i]&gt;'9')) ) return false;\n        // 3. \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f0--9\uff0c\u4e5f\u4e0d\u662f-\uff0c\u5219\u4e0d\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8fd4\u56defalse.\n        if(i==0&amp;&amp;(s[i]!='-')&amp;&amp;(s[i]&lt;'0'||s[i]&gt;'9') ) return false;\n    }\n    return true;\n}\nvector&lt;string&gt; convertToRPN(vector&lt;string&gt; &amp;expression) {\n    // write your code here\n    vector&lt;string&gt; ans;\n    if(expression.empty()) return ans;\n\n    // \u64cd\u4f5c\u7b26\n    stack&lt;string&gt; s;\n    // \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\n    map&lt;string,int&gt; kv; \n    kv[\"+\"] = 3; kv[\"-\"] = 3; \n    kv[\"*\"] = 4; kv[\"/\"] = 4; \n    kv[\"(\"] = 2; kv[\")\"] = 6;\n    for(size_t i=0;i&lt;expression.size();i++){\n        // 1. \u5982\u679c\u662f\u6570\u5b57\uff0c\u76f4\u63a5\u8f93\u51fa\n        if(isNumber(expression[i])){\n            ans.push_back(expression[i]);\n        }\n        // 2. \u5982\u679c\u662f\u7b26\u53f7+,-,*,/,(,),\u9700\u8981\u6309\u7167\u4f18\u5148\u7ea7\u987a\u5e8f\u5904\u7406\n        else if(kv[expression[i]] &gt;= 2 &amp;&amp; kv[expression[i]] &lt;= 6){\n            // 2.1 \u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u6216\u8005\u662f\u5de6\u62ec\u53f7\uff0c\u76f4\u63a5\u5165\u6808\n            if(s.empty() || kv[expression[i]]==2 ){\n                s.push(expression[i]);\n            }\n            // 2.2 \u5982\u679c\u9047\u5230\u7684\u662f\u53f3\u62ec\u53f7\uff0c\u6301\u7eed\u8f93\u51fa\u6808\u4e2d\u7684\u5143\u7d20\uff0c\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\u4e3a\u6b62\n            else if(kv[expression[i]] == 6){\n                while(!s.empty() &amp;&amp; s.top() != \"(\"){\n                    ans.push_back(s.top()); s.pop();\n                }\n                if(!s.empty()) s.pop(); // \u5f39\u51fa\u5de6\u62ec\u53f7\n            }\n            // \u5982\u679c\u662f+,-,*,/\uff0c\u5c31\u8981\u6bd4\u8f83\u548c\u5f53\u524d\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4e86\uff0c\u5982\u679c\u6bd4\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u4f4e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5165\u6808\uff0c\n            // \u5982\u679c\u9ad8\uff0c\u9700\u8981\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u7684\u8fd0\u7b97\u7b26\u4f4e\u4e8e\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u6216\u8005\u6808\u4e3a\u7a7a\u4e3a\u6b62\n            else if(kv[expression[i]]==3 || kv[expression[i]]==4){\n                 // 2.3 \u5982\u679c\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6808\u9876\u7684\uff0c\u76f4\u63a5\u5165\u6808\n                 if(kv[expression[i]] &gt; kv[s.top()]){\n                     s.push(expression[i]);\n                 }else{\n                     while(!s.empty() &amp;&amp; kv[expression[i]] &lt;= kv[s.top()]){\n                         ans.push_back(s.top()); s.pop();\n                     }\n                     s.push(expression[i]);\n                 }\n            }\n        }\n    }\n    // \u628a\u6808\u4e2d\u7684\u64cd\u4f5c\u7b26\u8f93\u51fa\n    while(!s.empty()){\n        ans.push_back(s.top()); s.pop(); \n    } \n    return ans;\n}\n</code></pre>"},{"location":"lintcode/423/readme/","title":"423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217","text":""},{"location":"lintcode/423/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6240\u8868\u793a\u7684\u62ec\u53f7\u5e8f\u5217\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u7b26\uff1a '(', ')', '{', '}', '[' and ']'\uff0c \u5224\u5b9a\u662f\u5426\u662f\u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217\u3002 \u62ec\u53f7\u5fc5\u987b\u4f9d\u7167 \"()\" \u987a\u5e8f\u8868\u793a\uff0c \"()[]{}\" \u662f\u6709\u6548\u7684\u62ec\u53f7\uff0c\u4f46 \"([)]\" \u5219\u662f\u65e0\u6548\u7684\u62ec\u53f7\u3002</p> <p>\u6837\u4f8b     \u6837\u4f8b 1\uff1a     \u8f93\u5165\uff1a\"([)]\"     \u8f93\u51fa\uff1aFalse     \u6837\u4f8b 2\uff1a     \u8f93\u5165\uff1a\"()[]{}\"     \u8f93\u51fa\uff1aTrue</p> <p>\u6311\u6218     O(n)\u7684\u65f6\u95f4\uff0cn \u4e3a\u62ec\u53f7\u7684\u4e2a\u6570\u3002</p>"},{"location":"lintcode/423/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u4f7f\u7528\u6808\u5b58\u50a8\u6240\u6709\u7684\u5de6\u62ec\u53f7\uff0c\u4e00\u65e6\u9047\u5230\u53f3\u62ec\u53f7\u5c31\u4e0e\u6808\u9876\u7684\u5143\u7d20\u6bd4\u8f83\uff0c\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7ee7\u7eed\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u76f4\u63a5\u8fd4\u56defalse.</p>"},{"location":"lintcode/423/readme/#ac","title":"AC \u4ee3\u7801","text":"<pre><code>class Solution {\npublic:\n    /**\n     * @param s: A string\n     * @return: whether the string is a valid parentheses\n     */\n    bool isValidParentheses(string&amp; s) {\n        stack&lt;char&gt; cc;\n        map&lt;char,char&gt; m;\n        m['('] = ')';\n        m['['] = ']';\n        m['{'] = '}';\n        for(int i=0;i&lt;s.size();++i){\n            if(s[i] == '(' || s[i] == '['|| s[i]=='{'){\n                cc.push(s[i]);\n            }\n            if(s[i] == ')' || s[i] == ']' || s[i] == '}'){\n                if (cc.empty()) return false;\n                char tmp = cc.top();\n                if(m[tmp] != s[i]){\n                    return false;\n                }\n                cc.pop();\n            }\n        }\n        if(cc.empty()) return true;\n        return false;\n    }\n};\n</code></pre>"},{"location":"lintcode/424/readme/","title":"424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","text":""},{"location":"lintcode/424/readme/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002 \u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002</p> <p>\u6837\u4f8b 1:</p> <pre><code>\u8f93\u5165: [\"2\", \"1\", \"+\", \"3\", \"*\"] \n\u8f93\u51fa: 9\n\u89e3\u91ca: [\"2\", \"1\", \"+\", \"3\", \"*\"] -&gt; (2 + 1) * 3 -&gt; 9\n</code></pre> <p>\u6837\u4f8b 2:</p> <pre><code>\u8f93\u5165: [\"4\", \"13\", \"5\", \"/\", \"+\"]\n\u8f93\u51fa: 6\n\u89e3\u91ca: [\"4\", \"13\", \"5\", \"/\", \"+\"] -&gt; 4 + 13 / 5 -&gt; 6\n</code></pre>"},{"location":"lintcode/424/readme/#_2","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u6c42\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u7684\u503c\u3002\u5728\u9006\u6ce2\u5170\u8868\u8fbe\u6cd5\u4e2d\uff0c\u5176\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u62ec +, -, *, / \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8ba1\u6570\u8868\u8fbe\u3002</p>"},{"location":"lintcode/424/readme/#ac","title":"AC \u4ee3\u7801","text":"<pre><code>// \u8fd0\u7b97\u7b26\u53ea\u8003\u8651\u4e86\u52a0\u51cf\u4e58\u9664\ntemplate&lt;typename T&gt;\nT compute(T first, T second,string op){\n    if(op == \"+\") return first + second;\n    if(op == \"-\") return first - second;\n    if(op == \"*\") return first * second;\n    if(op == \"/\" &amp;&amp; second != 0) return first / second;\n    return -1000; // \u8bf4\u660e\u8f93\u5165\u7684\u6570\u636e\u6709\u95ee\u9898\n}\nint evalRPN(vector&lt;string&gt; &amp;tokens) {\n    // write your code here\n    stack&lt;int &gt; s;\n    set&lt;string&gt; op = {\"+\",\"-\",\"*\",\"/\"}; // \u90fd\u662f\u53cc\u76ee\u8fd0\u7b97\u7b26\uff0c\u5904\u7406\u903b\u8f91\u662f\u76f8\u540c\u7684\n    for(size_t i=0;i&lt;tokens.size();i++){\n        if(op.count(tokens[i]) &gt; 0){\n            int first=0,second=0;\n            if(!s.empty()){ first = s.top() ; s.pop(); }\n            if(!s.empty()){ second = s.top() ; s.pop(); }\n            s.push(compute(second,first,tokens[i]));\n        }else{\n            s.push(stoi(tokens[i]));\n        }\n    }\n    return s.top();\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u4e8c\u53c9\u6811","text":"<p>\u6811\u662f\u6ca1\u6709\u73af\u7684\u56fe\u3002\u6811\u548c\u94fe\u8868\u3001\u56fe\u90fd\u6709\u5173\u8054\u3002\u94fe\u8868\u662f\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u800c\u56fe\u90fd\u53ef\u4ee5\u5bf9\u5e94\u4e00\u68f5\u751f\u6210\u6811\u3002\u5b66\u4e60\u5b8c\u94fe\u8868\uff0c\u5b66\u4e60\u6811\uff0c\u7136\u540e\u5b66\u4e60\u56fe\uff0c\u662f\u4e00\u4e2a\u6bd4\u8f83\u5bb9\u6613\u63a5\u53d7\u7684\u8fc7\u7a0b\u3002\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u6811\u53eb\u505a\u4e8c\u53c9\u6811\u3002\u4e8c\u53c9\u6811\u662f\u9012\u5f52\u5b9a\u4e49\u7684\uff0c\u8fd9\u5bfc\u81f4\u5f88\u591a\u6d89\u53ca\u4e8c\u53c9\u6811\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u6c42\u89e3\u3002\u6309\u7167\u8282\u70b9\u6570\u76ee\u7684\u4e0d\u540c\uff0c\u4e8c\u53c9\u6811\u7684\u7c7b\u578b\u6709\uff1a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6ee1\u4e8c\u53c9\u6811\u548c\u5b8c\u7f8e\u4e8c\u53c9\u6811\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u4e8c\u53c9\u6811\u7684\u901a\u7528\u6027\u8d28","text":"<ul> <li>\u4e8c\u53c9\u6811\u7684\u7b2ci\u5c42\u8282\u70b9\u6570\u76ee\u81f3\u591a\u662f<code>2^(i-1); (i&gt;=1)</code></li> <li>\u6df1\u5ea6\u4e3aK\u7684\u4e8c\u53c9\u6811\u81f3\u591a\u6709<code>2^(K-1)</code>\u4e2a\u8282\u70b9\u3002</li> <li>\u4e8c\u53c9\u6811\u4e2d\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\u6570\u76ee\u8bb0\u4f5cn2, \u53f6\u8282\u70b9\u8bb0\u4f5cn0; \u5219\u6709<code>n0 = n2 + 1</code></li> <li>\u6df1\u5ea6\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u7684\u6570\u76ee\u662f<code>2^n -1</code>, \u53f6\u8282\u70b9\u6570\u76ee\u662f<code>2^(n-1)</code>, \u975e\u53f6\u8282\u70b9\u7684\u6570\u76ee\u662f<code>2^(n-1)-1</code></li> <li>\u8282\u70b9\u6570\u76ee\u4e3an\u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6df1\u5ea6\u662f<code>log2(n+1)</code></li> <li>\u8282\u70b9\u6570\u76ee\u4e3an\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6df1\u5ea6\u662f<code>[log2(n)] + 1</code>  \u5176\u4e2d[]\u8868\u793a\u5411\u4e0b\u53d6\u6574</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","title":"\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49","text":"<p>\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u548c\u53cc\u5411\u94fe\u8868\u6bd4\u8f83\u76f8\u4f3c\uff0c\u9700\u8981\u4e24\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u3002</p> <pre><code>// \u5b9a\u4e49\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\nclass TreeNode {\npublic:\n   int val;\n   TreeNode *left, *right;\n   TreeNode(int val) {\n       this-&gt;val = val;\n       this-&gt;left = this-&gt;right = nullptr;\n   }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","title":"\u4e8c\u53c9\u6811\u7684\u521b\u5efa(\u751f\u6210)","text":"<p>\u521b\u5efa\u4e00\u68f5\u4e8c\u53c9\u6811\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u7b97\u6cd5\u4e2d\u6307\u5b9a\u4e8c\u53c9\u6811\u901a\u5e38\u4f7f\u7528\"#\"\u8868\u793a\u4e0d\u5b58\u5728\u7684\u8282\u70b9\uff0c\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e24\u4e2a\u904d\u5386\u5e8f\u5217\u7684\u65b9\u5f0f\u6765\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u3002\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e5f\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","title":"\u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811","text":"<p>\u6839\u636e\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u521b\u5efa\u4e8c\u53c9\u6811\uff0c\u6839\u636e\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u53ef\u4ee5\u552f\u4e00\u7684\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u524d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u662fpre; \u4e2d\u5e8f\u904d\u5386\u7684\u5e8f\u5217\u662fvin;\u91cc\u9762\u90fd\u4e0d\u542b\u6709\u91cd\u590d\u6570\u5b57\uff1b\u9996\u5148\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u80af\u5b9a\u662fpre[0], \u7136\u540e\u5728vin\u4e2d\u5bfb\u627epre[0], \u5b83\u524d\u9762\u7684\u4e00\u5b9a\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c\u540e\u9762\u7684\u90fd\u662f\u53f3\u5b50\u6811\u4e0a\u7684\u3002\u5047\u8bbepre[0]\u51fa\u73b0\u5728vin[3],\u53ef\u4ee5\u77e5\u9053\u5de6\u5b50\u6811\u4e0a\u6709\u4e09\u4e2a\u8282\u70b9\uff0c\u5206\u522b\u662fvin[0],vin[1],vin[2], \u5728pre\u4e2d\u4ecepre[0]\u4ee5\u540e\u65703\u4e2a\u6570\u5b57\u8fd9\u4e09\u4e2a\u6570\u5b57\u4e00\u5b9a\u662f\u4f4d\u4e8e\u5de6\u5b50\u6811\u4e0a\u7684\uff0c\u5269\u4e0b\u7684\u5c5e\u4e8e\u53f3\u5b50\u6811\u3002\u5206\u522b\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u9012\u5f52\u5904\u7406\u5de6\u53f3\u5b50\u6811\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u7b54\u6848\uff1b\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5047\u8bbe<code>pre = [1,2,4,7,3,5,6,8]</code> <code>vin=[4,7,2,1,5,3,8,6]</code>\u7b2c\u4e00\u6b21\uff1a \u53ef\u77e51\u662f\u6839\uff0c2\uff0c4\uff0c7\u662f1\u7684\u5de6\u5b50\u6811\u4e0a\u7684\uff0c3,5,6,8,\u662f1\u7684\u53f3\u5b50\u6811\u4e0a\u7684\u3002 \u5206\u522b\u5904\u7406\u5e8f\u5217<code>[2,4,7] [4,7,2]</code> \u548c<code>[3,5,6,8] [5,3,6,8]</code>\u7b2c\u4e8c\u6b21\uff1a \u5bf9\u4e8e<code>[2,4,7] [4,7,2]</code> \u53ef\u4ee5\u5f97\u52302\u662f\u6839\uff0c\u800c4\uff0c7\u90fd\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c \u63a5\u7740\u5904\u7406<code>[4,7] [4,7]</code> \u6b64\u65f64\u662f\u6839\uff0c\u800c7\u4f4d\u4e8e\u53f3\u5b50\u6811\u4e0a\uff0c\u8fd9\u8fb9\u5904\u7406\u5b8c\u6bd5\uff1b\u5bf9\u4e8e<code>[3,5,6,8] [5,3,8,6]</code> \u53ef\u4ee5\u5f97\u52303\u662f\u6839\uff0c5\u662f\u5de6\u5b50\u6811\u4e0a\u7684\uff0c<code>[6,8]</code>\u662f\u53f3\u5b50\u6811\u4e0a\u7684\u3002\u63a5\u7740\u5904\u7406<code>[6,8][8,6]</code> \u6b64\u65f66\u662f\u6839\uff0c\u800c8\u4f4d\u4e8e\u5de6\u5b50\u6811\u4e0a\u3002</p> <p>\u7efc\u5408\u4e0a\u9762\u7684\u5206\u6790\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u4e8c\u53c9\u6811\u7684\u5f62\u72b6\u5982\u4e0b\uff1a</p> <p></p> <pre><code>//\u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811\nTreeNode* reConstructBinaryTree(vector&lt;int&gt; pre,vector&lt;int&gt; vin) {\n        if(pre.empty() || vin.empty()){return nullptr;}\n        TreeNode* node = new TreeNode(pre[0]);// \u5148\u5efa\u7acb\u6839\u8282\u70b9\n        int len = pre.size();\n        for(size_t i=0;i&lt;vin.size();++i){\n            if(vin[i] == pre[0]){\n                // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002\n                vector&lt;int&gt; left_pre(i,0);\n                vector&lt;int&gt; left_vin(i,0);\n                vector&lt;int&gt; right_pre(len-1-i,0);\n                vector&lt;int&gt; right_vin(len-1-i,0);\n                copy(vin.begin(),vin.begin()+i,left_vin.begin());\n                copy(vin.begin()+i+1,vin.end(),right_vin.begin());\n                copy(pre.begin()+1,pre.begin()+1+i,left_pre.begin());\n                copy(pre.begin()+i+1,pre.end(),right_pre.begin());\n                node-&gt;left =  reConstructBinaryTree(left_pre,left_vin);\n                node-&gt;right = reConstructBinaryTree(right_pre,right_vin);\n            }\n\n        }\n        return node;\n</code></pre> <p>leetcode gist</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","title":"\u6839\u636e\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811","text":"<pre><code>//\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u91cd\u5efa\u4e8c\u53c9\u6811\nTreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {\n    if (inorder.empty() || postorder.empty()) { return nullptr; }\n    TreeNode *node = new TreeNode(postorder[postorder.size()-1]);// \u5148\u5efa\u7acb\u6839\u8282\u70b9\n    int len = inorder.size();\n    for (size_t i = 0; i &lt; inorder.size(); ++i) {\n        if (inorder[i] == postorder[postorder.size()-1]) {\n            // \u627e\u5230\u4e86\u4e2d\u5e8f\u904d\u5386\u7684\u6839\u8282\u70b9\uff0c\u5219\u5de6\u9762\u7684\u5168\u90e8\u662f\u5de6\u5b50\u6811\uff0c\u53f3\u9762\u7684\u5168\u90e8\u662f\u53f3\u5b50\u6811\u3002\n            vector&lt;int&gt; left_post(i, 0);\n            vector&lt;int&gt; left_vin(i, 0);\n            vector&lt;int&gt; right_post(len - 1 - i, 0);\n            vector&lt;int&gt; right_vin(len - 1 - i, 0);\n            copy(inorder.begin(), inorder.begin() + i, left_vin.begin());\n            copy(inorder.begin() + i + 1, inorder.end(), right_vin.begin());\n            copy(postorder.begin(), postorder.begin() + i, left_post.begin());\n            copy(postorder.begin() + i, postorder.end()-1, right_post.begin());\n            node-&gt;left = buildTree(left_vin,left_post);\n            node-&gt;right = buildTree(right_vin,right_post);\n        }\n    }\n    return node;\n}\n</code></pre> <p>leetcode gist</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","title":"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6","text":"<p>\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7ecf\u8fc7\u7684\u8282\u70b9\u6570\u91cf\u5b9a\u4e49\u4e3a\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","title":"\u6700\u5927\u6df1\u5ea6","text":"<pre><code> // \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6\nint maxDepth2(TreeNode *root, const int dep){\n    if(!root) return dep;\n    if(!root-&gt;left &amp;&amp; !root-&gt;right) return dep+1;\n    if(root-&gt;left &amp;&amp; !root-&gt;right) return maxDepth2(root-&gt;left,dep+1);\n    if(root-&gt;right &amp;&amp; !root-&gt;left) return maxDepth2(root-&gt;right,dep+1);     \n    return max(maxDepth2(root-&gt;left,dep+1),maxDepth2(root-&gt;right,dep+1));   \n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","title":"\u6700\u5c0f\u6df1\u5ea6","text":"<pre><code>// \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6\nint minDepth2(TreeNode* root,const int dep){\n    if(!root) return dep;\n    if(!root-&gt;left &amp;&amp; !root-&gt;right) return dep+1;\n    if(root-&gt;left &amp;&amp; !root-&gt;right)  return minDepth2(root-&gt;left,dep+1);\n    if(!root-&gt;left &amp;&amp; root-&gt;right)  return minDepth2(root-&gt;right,dep+1);\n    return min(minDepth2(root-&gt;left,dep+1),minDepth2(root-&gt;right,dep+1));\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u4e8c\u53c9\u6811\u6709\u4e09\u79cd\u5e38\u89c1\u7684\u904d\u5386\u65b9\u5f0f\uff1a\u524d\u5e8f\u904d\u5386\u3001\u4e2d\u5e8f\u904d\u5386\u3001\u540e\u5e8f\u904d\u5386\u3002\u524d\u4e2d\u540e\u6307\u7684\u90fd\u662f\u6839\u8282\u70b9\u76f8\u5bf9\u4e8e\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u987a\u5e8f\u3002\u6240\u4ee5\u524d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f <code>root-left-right</code>, \u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f <code>left-root-right</code>, \u540e\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u662f <code>left-right-root</code>. </p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","title":"\u524d\u5e8f\u904d\u5386(\u9012\u5f52)","text":"<p>\u524d\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4\uff1a</p> <ol> <li>\u8f93\u51fa\u5f53\u524d\u8282\u70b9</li> <li>\u5982\u679c\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u505a\u53c2\u6570\u9012\u5f52</li> <li>\u5982\u679c\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u7531\u5b69\u5b50\u505a\u53c2\u6570\u9012\u5f52</li> </ol> <pre><code>// \u524d\u5e8f\u904d\u5386\n vector&lt;int&gt; preorderTraversal(TreeNode *root) {\n        // write your code here\n        vector&lt;int&gt; re;\n        if(root == nullptr) return re;\n        re.push_back(root-&gt;val);\n        if(root-&gt;left){\n            vector&lt;int&gt; ll = preorderTraversal(root-&gt;left);\n            re.insert(re.end(), ll.begin(), ll.end());\n        }\n        if(root-&gt;right){\n            vector&lt;int&gt; rr = preorderTraversal(root-&gt;right);\n            re.insert(re.end(), rr.begin(), rr.end());\n        }\n        return re;\n    }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","title":"\u524d\u5e8f\u904d\u5386(\u975e\u9012\u5f52)","text":"<p>\u975e\u9012\u5f52\u7684\u5b9e\u73b0\uff0c\u9012\u5f52\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u4f7f\u7528\u5806\u6808\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u628a\u9012\u5f52\u8c03\u7528\u7684\u51fd\u6570\u6539\u5199\u6210\u975e\u9012\u5f52\u7684\u5f62\u5f0f\u4e00\u822c\u4e5f\u662f\u4f7f\u7528\u5806\u6808\u4f5c\u4e3a\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u904d\u5386\u6b65\u9aa4</p> <ol> <li>\u8f93\u51fa\u5f53\u524d\u7684\u8282\u70b9\u503c\uff0c\u5e76\u628a\u5f53\u524d\u7684\u8282\u70b9\u538b\u5165\u6808</li> <li><code>current = current-&gt;left</code>;\u5faa\u73af\u4ee5\u4e0a\u6b65\u9aa4\u76f4\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4</li> <li>\u53d6\u6808\u9876\u5143\u7d20\u7684\u53f3\u5b69\u5b50\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u7136\u540e\u56de\u5230\u6b65\u9aa41.</li> </ol> <pre><code>//\u524d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; preorderTraversal(TreeNode *root) {\n    vector&lt;int&gt; re;\n     if(root == nullptr) return re;\n     stack&lt;TreeNode*&gt; s;\n     TreeNode *tmp = root;\n     while(tmp!=nullptr || !s.empty()){ // \u903b\u8f91\u6216\u662f\u77ed\u8def\u7684\n        while(tmp!=nullptr){\n            re.push_back(tmp-&gt;val);\n            s.push(tmp);\n            tmp = tmp-&gt;left;\n        }\n        // \u5faa\u73af\u9000\u51fa\u8bf4\u660e\u6ca1\u6709\u4e86\u5de6\u5b69\u5b50\n        if(!s.empty()){\n           tmp = s.top();\n           s.pop();\n           tmp = tmp-&gt;right;\n        }\n     }\n     return re;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_13","title":"\u4e2d\u5e8f\u904d\u5386(\u9012\u5f52)","text":"<p>\u4e2d\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4</p> <ol> <li>\u5982\u679c\u5f53\u524d\u7684\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52</li> <li>\u8f93\u51fa\u5f53\u524d\u8282\u70b9</li> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u53f3\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52</li> </ol> <pre><code>// \u4e2d\u5e8f\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; inorderTraversal(TreeNode *root) {\n        // write your code here\n        vector&lt;int&gt; re;\n        if(root == nullptr) return re;\n        if(root-&gt;left){\n            vector&lt;int&gt; ll = inorderTraversal(root-&gt;left);\n            re.insert(re.end(),ll.begin(),ll.end());\n        }\n        re.push_back(root-&gt;val);\n        if(root-&gt;right){\n            vector&lt;int&gt; rr = inorderTraversal(root-&gt;right);\n            re.insert(re.end(),rr.begin(),rr.end());\n        }\n        return re;\n    }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_14","title":"\u4e2d\u5e8f\u904d\u5386(\u975e\u9012\u5f52)","text":"<p>\u4e2d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0</p> <ol> <li>\u5bf9\u4e8e\u5f53\u524d\u7684\u8282\u70b9\uff0c\u653e\u5165\u5806\u6808\uff0c\u7136\u540e\u641c\u7d22\u6709\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u4e00\u76f4\u5411\u4e0b\u641c\u7d22\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\u4e3a\u6b62\u3002</li> <li>\u4ece\u5806\u6808\u53d6\u51fa\u6808\u9876\u5143\u7d20\uff0c\u8f93\u51fa\uff0c\u7136\u540e\u641c\u7d22\u53f3\u5b69\u5b50</li> </ol> <pre><code>//\u4e2d\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0\n vector&lt;int&gt; inorderTraversal(TreeNode * root) {\n        // write your code here\n        vector&lt;int&gt; re;\n        if(root == nullptr) return re;\n\n        TreeNode* iter = root;\n        stack&lt;TreeNode*&gt; s;\n\n        while(iter || !s.empty()){\n            while(iter){\n                s.push(iter);\n                iter = iter-&gt;left;\n            }\n            if(!s.empty()){\n                iter = s.top();\n                s.pop();\n                re.push_back(iter-&gt;val);\n                iter = iter-&gt;right;\n            }\n        }\n\n        return re;\n    }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_15","title":"\u540e\u5e8f\u904d\u5386(\u9012\u5f52)","text":"<p>\u540e\u5e8f\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4\u662f</p> <ol> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u7528\u5de6\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52</li> <li>\u5982\u679c\u5f53\u524d\u8282\u70b9\u6709\u53f3\u5b69\u5b50\uff0c\u7528\u53f3\u5b69\u5b50\u4f5c\u4e3a\u53c2\u6570\u9012\u5f52</li> <li>\u8f93\u51fa\u5f53\u524d\u8282\u70b9</li> </ol> <pre><code>// \u540e\u7eed\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0\n vector&lt;int&gt; postorderTraversal(TreeNode *root) {\n        // write your code here\n        vector&lt;int&gt; re;\n        if(root == nullptr) return re;\n        if(root-&gt;left){\n            vector&lt;int&gt; ll = postorderTraversal(root-&gt;left);\n            re.insert(re.end(),ll.begin(),ll.end());\n        }\n        if(root-&gt;right){\n            vector&lt;int&gt; rr = postorderTraversal(root-&gt;right);\n            re.insert(re.end(),rr.begin(),rr.end());\n        }\n        re.push_back(root-&gt;val);\n        return re;\n    }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_16","title":"\u540e\u5e8f\u904d\u5386(\u975e\u9012\u5f52)","text":"<p>\u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0</p> <p>\u7b2c\u4e00\u79cd\u601d\u8def\uff1a\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9P\uff0c\u5c06\u5176\u5165\u6808\uff0c\u7136\u540e\u6cbf\u5176\u5de6\u5b50\u6811\u4e00\u76f4\u5f80\u4e0b\u641c\u7d22\uff0c\u76f4\u5230\u641c\u7d22\u5230\u6ca1\u6709\u5de6\u5b69\u5b50\u7684\u7ed3\u70b9\uff0c\u6b64\u65f6\u8be5\u7ed3\u70b9\u51fa\u73b0\u5728\u6808\u9876\uff0c\u4f46\u662f\u6b64\u65f6\u4e0d\u80fd\u5c06\u5176\u51fa\u6808\u5e76\u8bbf\u95ee\uff0c\u56e0\u6b64\u5176\u53f3\u5b69\u5b50\u8fd8\u4e3a\u88ab\u8bbf\u95ee\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u6309\u7167\u76f8\u540c\u7684\u89c4\u5219\u5bf9\u5176\u53f3\u5b50\u6811\u8fdb\u884c\u76f8\u540c\u7684\u5904\u7406\uff0c\u5f53\u8bbf\u95ee\u5b8c\u5176\u53f3\u5b69\u5b50\u65f6\uff0c\u8be5\u7ed3\u70b9\u53c8\u51fa\u73b0\u5728\u6808\u9876\uff0c\u6b64\u65f6\u53ef\u4ee5\u5c06\u5176\u51fa\u6808\u5e76\u8bbf\u95ee\u3002\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6b63\u786e\u7684\u8bbf\u95ee\u987a\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u4e24\u6b21\u51fa\u73b0\u5728\u6808\u9876\uff0c\u53ea\u6709\u5728\u7b2c\u4e8c\u6b21\u51fa\u73b0\u5728\u6808\u9876\u65f6\uff0c\u624d\u80fd\u8bbf\u95ee\u5b83\u3002\u56e0\u6b64\u9700\u8981\u591a\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u8be5\u7ed3\u70b9\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\u5728\u6808\u9876\u3002</p> <pre><code>//\u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u601d\u8def\uff1a\u8981\u4fdd\u8bc1\u6839\u7ed3\u70b9\u5728\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u8bbf\u95ee\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9P\uff0c\u5148\u5c06\u5176\u5165\u6808\u3002\u5982\u679cP\u4e0d\u5b58\u5728\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5b83\uff1b\u6216\u8005P\u5b58\u5728\u5de6\u5b69\u5b50\u6216\u8005\u53f3\u5b69\u5b50\uff0c\u4f46\u662f\u5176\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u5df2\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff0c\u5219\u540c\u6837\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8be5\u7ed3\u70b9\u3002\u82e5\u975e\u4e0a\u8ff0\u4e24\u79cd\u60c5\u51b5\uff0c\u5219\u5c06P\u7684\u53f3\u5b69\u5b50\u548c\u5de6\u5b69\u5b50\u4f9d\u6b21\u5165\u6808\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u6b21\u53d6\u6808\u9876\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5de6\u5b69\u5b50\u5728\u53f3\u5b69\u5b50\u524d\u9762\u88ab\u8bbf\u95ee\uff0c\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u5728\u6839\u7ed3\u70b9\u524d\u9762\u88ab\u8bbf\u95ee\u3002</p> <pre><code>// \u540e\u5e8f\u904d\u5386\u7684\u975e\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; postOrder(TreeNode *root)\n{\n    vector&lt;int&gt; re;\n    if(root == nullptr) return re;\n\n    TreeNode *p = root;\n    stack&lt;TreeNode *&gt; s; \n    TreeNode *last = root;\n    s.push(p);\n    while (!s.empty())\n    {\n        p = s.top();\n        if( (p-&gt;left == nullptr &amp;&amp; p-&gt;right == nullptr) || (p-&gt;right == nullptr &amp;&amp; last == p-&gt;left) || (last == p-&gt;right) )\n        {\n            re.push_back(p-&gt;val);\n            last = p;\n            s.pop();\n        }\n        else\n        {\n            if(p-&gt;right)\n                s.push(p-&gt;right);\n            if(p-&gt;left)\n                s.push(p-&gt;left);\n        }\n    }\n    return re;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_17","title":"\u5c42\u6b21\u904d\u5386","text":"<p>\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7c7b\u4f3c\u4e0e\u56fe\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u53ef\u4ee5\u4f7f\u7528\u961f\u5217\u6765\u5b9e\u73b0\u3002\u601d\u8def\u662f\uff1a \u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u4fdd\u5b58\u76f8\u90bb\u4e24\u5c42\u7684\u8282\u70b9\uff0c\u5faa\u73af\u8f93\u51fa\u6bcf\u5c42\u7684\u8282\u70b9</p> <p>\u5c42\u6b21\u904d\u5386\u904d\u5386\u7684\u6b65\u9aa4</p> <ol> <li>\u521d\u59cb\u5316\u4e24\u4e2a\u961f\u5217d1,d2;\u4ee4d1\u4fdd\u5b58root,d2\u4e3a\u7a7a</li> <li>\u6e05\u7a7ad2,\u904d\u5386d1\u4e2d\u7684\u8282\u70b9\uff0c\u628ad1\u4e2d\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u6309\u7167\u987a\u5e8f\u653e\u5165d2\u4e2d</li> <li>\u6253\u5370d1\u4e2d\u7684\u8282\u70b9</li> <li>\u4ea4\u6362d1\u548cd2;\u8f6c\u52302</li> </ol> <p>\u5faa\u73af\u76f4\u5230d2\u4e2d\u4e3a\u7a7a\uff0c\u7ed3\u675f\u3002</p> <pre><code>// \u4ece\u5e95\u5411\u4e0a\u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811\n vector&lt;vector&lt;int&gt;&gt; levelOrderBottom(TreeNode *root) {\n        // write your code here\n        vector&lt;vector&lt;int&gt;&gt; result;\n        vector&lt;TreeNode*&gt; v1,v2;\n        if(root == nullptr){\n            return result;\n        }\n        v1.push_back(root);\n        while(!v1.empty()){\n            // \u904d\u5386v1\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u5c06\u4e0b\u4e00\u5c42\u8282\u70b9\u4fdd\u5b58\u5728v2\u4e2d\n            for(int i=0;i&lt;v1.size();i++){\n                if(v1[i]-&gt;left){\n                    v2.push_back(v1[i]-&gt;left);\n                }\n                if(v1[i]-&gt;right){\n                    v2.push_back(v1[i]-&gt;right);\n                }\n            }\n            vector&lt;int&gt; tmp;\n            //\u6253\u5370v1\n            for(int i=0;i&lt;v1.size();i++){\n                tmp.push_back(v1[i]-&gt;val);\n            }\n            result.insert(result.begin(),tmp);\n            swap(v1,v2);\n            v2.clear();\n        }\n        return result;\n }\n</code></pre> <pre><code>// \u81ea\u9876\u5411\u4e0b\u904d\u5386\u4e8c\u53c9\u6811\n vector&lt;vector&lt;int&gt;&gt; zigzagLevelOrder(TreeNode *root) {\n        // write your code here\n        vector&lt;vector&lt;int&gt;&gt; result;\n        if(!root) return result;\n        vector&lt;TreeNode*&gt; v1,v2;\n        v1.push_back(root);\n        int level = 1;\n        while(!v1.empty()){\n            //\u904d\u5386v1\u4e2d\u7684\u8282\u70b9\uff0c\u628av1\u4e2d\u6240\u6709\u8282\u70b9\u7684\u4e0b\u4e00\u7ea7\u8282\u70b9\u5b58\u50a8\u5728v2\u4e2d\n            for(int i=0;i&lt;v1.size();i++){\n                if(v1[i]-&gt;left){\n                    v2.push_back(v1[i]-&gt;left);\n                }\n                if(v1[i]-&gt;right){\n                    v2.push_back(v1[i]-&gt;right);\n                }\n            }\n            // \u6253\u5370v1\u4e2d\u7684\u8282\u70b9,\u5982\u679clevel \u662f\u5947\u6570\uff0c\u5219\u4ece\u5de6\u5411\u53c8\u6253\u5370\uff0c\n            // \u5982\u679clevel\u662f\u5076\u6570\uff0c\u5219\u4ece\u53f3\u5411\u5de6\u6253\u5370\n            vector&lt;int&gt; tmp;\n            if(level % 2 == 0){\n                for(int i=v1.size()-1;i&gt;=0;i--){\n                    tmp.push_back(v1[i]-&gt;val);\n                }\n            }\n            if(level % 2 ){\n                for(int i=0;i&lt;v1.size();i++){\n                    tmp.push_back(v1[i]-&gt;val);\n                }\n            }\n            result.push_back(tmp);\n            // \u66f4\u65b0\u8be5\u66f4\u65b0\u7684\u6570\u636e\n            swap(v1,v2);\n            v2.clear();\n            level++;\n        }\n        return result;\n    }\n</code></pre> <pre><code>// \u4e4b\u5b57\u5f62\u904d\u5386\u4e8c\u53c9\u6811\nvector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) {\n    vector&lt;vector&lt;int&gt; &gt; output;\n    vector&lt;int&gt; row;\n    if(pRoot == nullptr) return output;\n    vector&lt;TreeNode*&gt; first;\n    vector&lt;TreeNode*&gt; second;\n    bool odd = true;\n    first.push_back(pRoot);\n    while(!first.empty()){\n        if(odd){\n            for (int i = 0; i &lt; first.size(); ++i) {\n                row.push_back(first[i]-&gt;val);\n                if(first[i]-&gt;left){\n                    second.push_back(first[i]-&gt;left);\n                }\n                if(first[i]-&gt;right){\n                    second.push_back(first[i]-&gt;right);\n                }\n            }\n            output.push_back(row);\n            row.clear();\n            swap(first,second);\n            second.clear();\n            odd = !odd;\n        }else{\n            for (int i = first.size()-1; i &gt;= 0; --i) {\n                row.push_back(first[i]-&gt;val);\n            }\n            output.push_back(row);\n            row.clear();\n            for (int j = 0; j &lt; first.size(); ++j) {\n                if(first[j]-&gt;left){\n                    second.push_back(first[j]-&gt;left);\n                }\n                if(first[j]-&gt;right){\n                    second.push_back(first[j]-&gt;right);\n                }\n            }\n            swap(first,second);\n            second.clear();\n            odd = !odd;\n        }\n    }\n    return output;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_18","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_19","title":"\u539f\u7406","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_20","title":"\u904d\u5386\u4e8c\u53c9\u6811","text":"<p>\u5229\u7528\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u601d\u60f3\u53ef\u4ee5\u5b9e\u73b0\u5728 O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5bf9\u4e8c\u53c9\u6811\u8fdb\u884c\u904d\u5386\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#morris","title":"morris \u5148\u5e8f\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#morris_1","title":"morris \u4e2d\u5e8f\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#morris_2","title":"morris \u540e\u5e8f\u904d\u5386","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_21","title":"\u5e73\u8861\u4e8c\u53c9\u6811","text":"<p>\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u662f\uff1a\u8981\u4e48\u662f\u4e00\u68f5\u7a7a\u6811\uff0c\u8981\u4e48\u6839\u8282\u70b9\u5de6\u53f3\u4e24\u68f5\u5b50\u6811\u7684\u9ad8\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_22","title":"\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5224\u5b9a","text":"<pre><code>// \u6c42\u6811\u7684\u6700\u5927\u6df1\u5ea6\nint maxDepth(TreeNode* root) {\n    if(root == nullptr) return 0;\n    int left = 1;\n    int right = 1;\n    int depth = 1;\n    if(root-&gt;left){\n        left += maxDepth(root-&gt;left);\n    }\n    if(root-&gt;right){\n        right += maxDepth(root-&gt;right);\n    }\n    depth = max(left,right);\n    return depth;\n}\n// \u5224\u65ad\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\nbool isBalanced(TreeNode* root) {\n    if(root == nullptr) return true;\n    if(root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) return true;\n    if(root-&gt;left &amp;&amp; root-&gt;right == nullptr){\n        if(root-&gt;left-&gt;left== nullptr &amp;&amp; root-&gt;left-&gt;right == nullptr){\n            return true;\n        }\n        return false;\n    }\n    if(root-&gt;left == nullptr &amp;&amp; root-&gt;right){\n        if(root-&gt;right-&gt;left == nullptr &amp;&amp; root-&gt;right-&gt;right == nullptr){\n            return true;\n        }\n        return false;\n    }\n    bool left = isBalanced(root-&gt;left);\n    bool right = isBalanced(root-&gt;right);\n    int ldepth = maxDepth(root-&gt;left);\n    int rdepth = maxDepth(root-&gt;right);\n    if(abs(ldepth-rdepth)&lt;=1 &amp;&amp; left &amp;&amp; right) return true;\n    return false;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_23","title":"\u4e8c\u53c9\u641c\u7d22\u6811(\u4e8c\u53c9\u67e5\u627e\u6811)","text":"<p>\u4e8c\u53c9\u67e5\u627e\u6811\uff08Binary Search Tree\uff09\uff0c\u4e5f\u79f0\u6709\u5e8f\u4e8c\u53c9\u6811\uff08ordered binary tree\uff09,\u6392\u5e8f\u4e8c\u53c9\u6811\uff08sorted binary tree\uff09\uff0c\u662f\u6307\u4e00\u68f5\u7a7a\u6811\u6216\u8005\u5177\u6709\u4e0b\u5217\u6027\u8d28\u7684\u4e8c\u53c9\u6811\uff1a</p> <ul> <li>\u82e5\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b</li> <li>\u82e5\u4efb\u610f\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b</li> <li>\u4efb\u610f\u7ed3\u70b9\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u67e5\u627e\u6811\u3002</li> <li>\u6ca1\u6709\u952e\u503c\u76f8\u7b49\u7684\u7ed3\u70b9\uff08no duplicate nodes\uff09\u3002</li> </ul> <p>\u56e0\u4e3a\uff0c\u4e00\u68f5\u7531n\u4e2a\u7ed3\u70b9\uff0c\u968f\u673a\u6784\u9020\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6\u4e3algn\uff0c\u6240\u4ee5\u987a\u7406\u6210\u7ae0\uff0c\u4e00\u822c\u64cd\u4f5c\u7684\u6267\u884c\u65f6\u95f4\u4e3aO\uff08lgn\uff09.\uff08\u81f3\u4e8en\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6\u4e3algn\u7684\u8bc1\u660e\uff0c\u53ef\u53c2\u8003\u7b97\u6cd5\u5bfc\u8bba \u7b2c12\u7ae0 \u4e8c\u53c9\u67e5\u627e\u6811 \u7b2c12.4\u8282\uff09\u3002</p> <p>\u4f46\u4e8c\u53c9\u6811\u82e5\u9000\u5316\u6210\u4e86\u4e00\u68f5\u5177\u6709n\u4e2a\u7ed3\u70b9\u7684\u7ebf\u6027\u94fe\u540e\uff0c\u5219\u6b64\u4e9b\u64cd\u4f5c\u6700\u574f\u60c5\u51b5\u8fd0\u884c\u65f6\u95f4\u4e3aO\uff08n\uff09\u3002\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u79cd\u57fa\u4e8e\u4e8c\u53c9\u67e5\u627e\u6811-\u7ea2\u9ed1\u6811\uff0c\u5b83\u901a\u8fc7\u4e00\u4e9b\u6027\u8d28\u4f7f\u5f97\u6811\u76f8\u5bf9\u5e73\u8861\uff0c\u4f7f\u5f97\u6700\u7ec8\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4f9d\u7136\u4e3aO\uff08lgn\uff09\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_24","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u57fa\u672c\u64cd\u4f5c","text":"<pre><code>class BinaryTree():\n    def __init__(self, parent=None, left=None, right=None):\n        self.parent = parent\n        self.left = left\n        self.right = right\n        self.value = value\n\ndef insert(root, value):\n    if not root:\n        root = Node(value)\n        return root\n    if root.value == value:\n        return root\n    if value &lt; root.value:\n        root.left = insert(root.left, value)\n    else:\n        root.right = insert(root.right, value)\n    return root\n\ndef search(root, value):\n    if not root:\n        return None\n    if root.value == value:\n        return root\n    if value &lt; root.value:\n        return search(root.left, value)\n    else:\n        return search(root.right, value)\n\ndef delete(root, value):\n    if root is None:\n        return root\n    if value &lt; root.value:\n        root.left = delete(root.left, value)\n    elif value &gt; root.value:\n        root.right = delete(root.right, value)\n    else:\n        if root.left is None and root.right is None:\n            return None\n        if root.left is None:\n            tmp = root.right\n            root = None\n            return tmp\n        if root.right is None:\n            tmp = root.left\n            root = None\n            return tmp\n        current = root.right\n        currentParent = None\n        while current.left is not None:\n            currentParent = current\n            current = current.left\n        currentParent.left = current.right\n        root.value = current.value\n    return root\n\ndef build(array):\n    tree = None\n    for v in array:\n        tree = insert(tree, v)\n    return tree\n\ndef max(root):\n    if root is None:\n        return None\n    current = root\n    while current.right is not None:\n        current = current.right\n    return current.value\n\ndef min(root):\n    if root is None:\n        return None\n    current = root\n    while current.left is not None:\n        current = current.left\n    return current.value\n\n# \u67e5\u627e\u6bd4node\u8282\u70b9\u5c0f\u7684\u8282\u70b9\ndef pre(node):\n    if node is None:\n        return None\n    if node.left is not None:\n        tmp = node.left\n        while tmp.right is not None:\n            tmp = tmp.right\n        return tmp\n    parent = node.parent\n    current = node\n    while parent is not None and parent.left == current:\n        parent = parent.parent\n        current = parent\n    return parent\n\ndef next(node):\n    if node is None:\n        return None\n    if node.right is not None:\n        tmp = node.right\n        while tmp.left is not None:\n            tmp = tmp.left\n        return tmp\n    parent = node.parent\n    current = node\n    while parent is not None and parent.right == current:\n        parent = parent.parent\n        current = parent\n    return parent\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_25","title":"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u904d\u5386\u5e8f\u5217","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002</p> <pre><code>// \u601d\u8def\uff1a\u5982\u679c\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u4e00\u5b9a\u662f\u6839\uff0c\u5e76\u4e14\u4e00\u5b9a\u53ef\u4ee5\u5b58\u5728\u8fd9\u6837\u7684\u5173\u7cfb\uff1a\u6839\u524d\u9762\u7684\u5143\u7d20\u5206\u6210\u4e24\u90e8\u5206\uff0c\u524d\u4e00\u90e8\u5206\u90fd\u6bd4\u6839\u5c0f\uff0c\u540e\u4e00\u90e8\u5206\u90fd\u6bd4\u6839\u5927\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u524d\u4e00\u90e8\u5206\u548c\u540e\u4e00\u90e8\u5206\u90fd\u53ef\u80fd\u4e3a\u7a7a\u3002\u5224\u65ad\u7ed9\u51fa\u7684\u5e8f\u5217\u662f\u5426\u6ee1\u8db3\u8fd9\u6837\u7684\u89c4\u5f8b\uff0c\u7136\u540e\u5206\u522b\u9012\u5f52\u5224\u65ad\u5de6\u53f3\u4e24\u4e2a\u5206\u652f\u3002\nbool bst(vector&lt;int&gt; &amp;a,int l,int r){\n       // 1. \u627e\u5230\u7b2c\u4e00\u4e2a\u6bd4\u6839(r)\u5c0f\u7684\u5143\u7d20\uff0c\u8fd9\u91cc\u4f5c\u4e3a\u5de6\u53f3\u5b50\u6811\u7684\u5206\u754c\n       if(l&gt;=r) return true;\n       int i=r-1;\n       while(i&gt;=l &amp;&amp; a[i]&gt;a[r]){\n           --i;\n       }\n       // \u6b64\u65f6i\u6307\u5411\u4ece\u540e\u5411\u524d\u7b2c\u4e00\u4e2a\u5c0f\u4e8ea[r]\u7684\u5143\u7d20\n       // 2. \u68c0\u67e5\u4ecei\u5230l\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u5c0f\u4e8ea[r]\n       int mid = i;\n       while(i&gt;=l){\n           if(a[i] &gt;= a[r]){\n               return false;\n           }\n           i--;\n       }\n       // \u6b64\u65f6 i\u5e94\u8be5\u7b49\u4e8el-1\n       // 3. \u5212\u5206\u51fa\u5de6\u53f3\u5b50\u6811\u5e76\u4e14\u786e\u4fdd\u7b26\u5408\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8981\u6c42\uff0c\u9012\u5f52\u5de6\u53f3\u5b50\u6811\uff0c\u770b\u662f\u5426\u7b26\u5408\u8981\u6c42\n       return bst(a,l,mid) &amp;&amp; bst(a,mid+1,r-1);\n\n   }\n   bool VerifySquenceOfBST(vector&lt;int&gt; sequence) {\n   if(sequence.empty()) return false;\n       return bst(sequence,0,sequence.size()-1);\n   }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#avl","title":"AVL\u6811","text":"<p>\u5b9a\u4e49\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a \u5de6\u5b50\u6811\u7684\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\uff0c AVL\u6811\u662f\u6ee1\u8db3\u6240\u6709\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u90fd\u5c0f\u4e8e\u7b49\u4e8e1\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u5982\u679c\u63d2\u5165\uff0c\u5220\u9664\u64cd\u4f5c\u6bd4\u8f83\u5c11\uff0c \u67e5\u8be2\u64cd\u4f5c\u6bd4\u8f83\u591a\uff0c \u4f7f\u7528AVL\u6811\uff1b \u5982\u679c\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u5f88\u9891\u7e41\uff0c\u4f7f\u7528\u7ea2\u9ed1\u6811\uff0c\u56e0\u4e3a\u7ea2\u9ed1\u6811\u7684\u63d2\u5165\u5220\u9664\u6548\u7387\u9ad8\u3002</p> <pre><code>def get_height(node):\n    if node is None:\n        return 0\n    return node.height\ndef get_balance(node):\n    if node is None:\n        return 0\n    balance = get_height(node.left) - get_height(node.right)\n    return balance\ndef left_rotate(node):\n    node_right = node.right\n    node_right_left = node_right.left\n    # \u5de6\u65cb\n    node_right.left = node\n    node.right = node_right_left\n    # \u66f4\u65b0\u9ad8\u5ea6\n    node_left_height = get_height(node.left)\n    node_right_height = get_height(node.right)\n    root.height = 1 + max(node_left_height, node_right_height)\n    # \u8fd4\u56de\u65cb\u8f6c\u4e4b\u540e\u65b0\u7684\u6839\n    return node_right\ndef right_rotate(node):\n    node_left = node.left\n    node_left_right = node_left.right\n    # \u53f3\u65cb\n    node_left.right = node\n    node.left = node_left_right\n\n    node_left_height = get_height(node.left)\n    node_right_height = het_height(node.right)\n    node.height = 1 + max(node_left_height, node_right_height)\n\n    return node_left\ndef insert(root, value):\n    if root is None:\n        root = Node(value)\n        return root\n    if value == root.value:\n        return root\n    if value &lt; root.value:\n        root.left = insert(root.left, value)\n    else:\n        root.right = insert(root.right, value)\n\n    # \u63d2\u5165\u5b8c\u6210\u4e4b\u540e\u8c03\u6574\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    root.height = 1 + max(left_height, right_height)\n    balance = get_balance(root)\n    # LL type\n    if balance &gt; 1 and value &lt; root.left.value:\n        return right_rotate(root)\n    # RR type\n    if balance &lt; -1 and value &gt; root.right.value:\n        return left_rotate(root)\n    # LR type\n    if balance &gt; 1 and value &gt; root.left.value:\n        return right_rotate(root)\n    # RL type\n    if balance &lt; - 1 and value &lt; root.right.value:\n        return  left_rotate(root)\ndef delete(root, value):\n    if root is None:\n        return root\n    if value &lt; root.value:\n        root.left = delete(root.left, value)\n    elif value &gt; root.value:\n        root.right = delete(root.right, value)\n    else:\n        if root.left is None and root.right is None:\n            return None\n        if root.left is None:\n            tmp = root.right\n            root = None\n            return tmp\n        if root.right is None:\n            tmp = root.left\n            root = None\n            return tmp\n        current = root.right\n        currentParent = None\n        while current.left is not None:\n            currentParent = current\n            current = current.left\n        currentParent.left = current.right\n        root.value = current.value\n    if root is None:\n        return root\n    root.height = 1 + max(get_height(root.left), get_height(root.right))\n    balance = get_balance(root)\n    # LL\n    if balace &gt; 1 and get_balance(root.left) &gt;= 0:\n        return right_rotate(root)\n    # LR\n    if balance &gt; 1 and get_balance(root.left) &lt; 0:\n        root.left = left_rotate(root.left)\n        return right_rotate(root)\n    # RR\n    if balance &lt; -1 and get_balance(root.right) &lt;= 0:\n        return left_rotate(root)\n    # RL\n    if balance &lt; -1 and get_balance(root.right) &gt; 0:\n        root.right = right_rotate(root.right)\n        return left_rotate(root)\n    return root\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_26","title":"\u7ea2\u9ed1\u6811","text":"<p>\u53c2\u8003\u6587\u7ae0\uff1ahttp://blog.csdn.net/chenhuajie123/article/details/11951777 \u7ea2\u9ed1\u6811\uff0c\u672c\u8d28\u4e0a\u6765\u8bf4\u5c31\u662f\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u4f46\u5b83\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u7740\u8272\u548c\u76f8\u5173\u7684\u6027\u8d28\u4f7f\u5f97\u7ea2\u9ed1\u6811\u76f8\u5bf9\u5e73\u8861\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u7ea2\u9ed1\u6811\u7684\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4e3aO(log n)</p> <p>\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff1a</p> <ol> <li>\u6bcf\u4e2a\u7ed3\u70b9\u8981\u4e48\u662f\u7ea2\u7684\uff0c\u8981\u4e48\u662f\u9ed1\u7684\u3002</li> <li>\u6839\u7ed3\u70b9\u662f\u9ed1\u7684\u3002</li> <li>\u6bcf\u4e2a\u53f6\u7ed3\u70b9\uff08\u53f6\u7ed3\u70b9\u5373\u6307\u6811\u5c3e\u7aefNIL\u6307\u9488\u6216NULL\u7ed3\u70b9\uff09\u662f\u9ed1\u7684\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u662f\u7ea2\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4fe9\u4e2a\u513f\u5b50\u90fd\u662f\u9ed1\u7684\u3002</li> <li>\u5bf9\u4e8e\u4efb\u4e00\u7ed3\u70b9\u800c\u8a00\uff0c\u5176\u5230\u53f6\u7ed3\u70b9\u6811\u5c3e\u7aefNIL\u6307\u9488\u7684\u6bcf\u4e00\u6761\u8def\u5f84\u90fd\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u7ed3\u70b9\u3002</li> </ol> <p>\u7ea2\u9ed1\u6811\u7684\u793a\u4f8b\uff1a</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/#_27","title":"\u4e8c\u53c9\u6811\u76f8\u5173\u9898\u76ee","text":"<p>\u4e8c\u53c9\u6811</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"\u4f4d\u8fd0\u7b97","text":"<p>\u6bcf\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u4f1a\u6709\u76f8\u5173\u7684\u4f4d\u8fd0\u7b97\u64cd\u4f5c\u7b26\uff0c\u5b9e\u73b0\u4e8c\u8fdb\u5236\u7684\u6309\u4f4d\u8fd0\u7b97\u3002 \u4f4d\u8fd0\u7b97\u6709\u56db\u79cd\uff1a\u4e0e(&amp;)\uff0c\u6216(|)\uff0c\u975e(~),\u5f02\u6216(^) \u719f\u6089\u6bcf\u79cd\u4f4d\u8fd0\u7b97\u7684\u7279\u70b9\uff0c\u662f\u505a\u4e0e\u4f4d\u8fd0\u7b97\u6709\u5173\u7684\u9898\u76ee\u7684\u57fa\u7840\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","title":"\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_3","title":"\u4e0e(&amp;)","text":"<ul> <li><code>0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1;</code></li> <li>\u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u4e0e\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0e\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7684\u8fdb\u4f4d\u89c4\u5219\u975e\u5e38\u4e00\u81f4\u3002 <code>0+0=0 ; 0+1=0; 1+0=0; 1+1 = 1;</code> (\u6b64\u5904\u7b49\u53f7\u540e\u9762\u7684\u6570\u5b57\u8868\u793a\u5e94\u8be5\u7684\u8fdb\u4f4d)</li> <li><code>n = n&amp;(n-1)</code> \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u628an\u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u52361\u53d8\u4e3a0. \u6b64\u64cd\u4f5c\u5728\u6d89\u53ca\u7edf\u8ba1\u4e8c\u8fdb\u5236\u6570\u4e2d1\u7684\u4e2a\u6570\u7684\u65f6\u5019\u6bd4\u8f83\u6709\u7528\u3002</li> <li><code>n = n&amp;(~n+1)</code> \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u628an\u7684\u6700\u53f3\u8fb9\u7684\u4e8c\u8fdb\u52361\u7559\u4e0b\uff0c\u5176\u4f59\u76841\u5168\u90e8\u7f6e0.</li> <li><code>n = n&amp;(-n)</code> \u8be5\u64cd\u4f5c\u7684\u6548\u679c\u662f\u5f97\u5230n\u7684\u6700\u540e\u4e00\u4e2a1</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_4","title":"\u6216(|)","text":"<ul> <li><code>0|0=0; 0|1=1; 1|0=1; 1|1=1;</code></li> <li>``</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_5","title":"\u975e(~)","text":"<ul> <li><code>~0=1; ~1=0</code></li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_6","title":"\u5f02\u6216(^)","text":"<ul> <li><code>0^0=0;1^1=0; 0^1=1;1^0=1;</code></li> <li>\u4ed4\u7ec6\u89c2\u5bdf\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u5f02\u6216\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0e\u4e8c\u8fdb\u5236\u52a0\u6cd5(\u5ffd\u7565\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b)\u89c4\u5219\u4e00\u81f4\u3002 <code>0+0=0;0+1=1;1+0=1;1+1=0;</code>(\u6b64\u5904\u7b49\u53f7\u540e\u9762\u7684\u6570\u5b57\u662f\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7684\u7ed3\u679c)</li> <li><code>a^0=a; a^a=0; a^a^a=a</code> \u5076\u6570\u4e2aa\u5f02\u6216\u7684\u7ed3\u679c\u662f0\uff0c\u5947\u6570\u4e2aa\u5f02\u6216\u7684\u7ed3\u679c\u662fa.</li> <li><code>a^(a^b)=b;b^(a^b)=a;</code>  \u6b64\u89c4\u5219\u53ef\u4ee5\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u6570\u5b57\uff0c\u65e0\u9700\u989d\u5916\u7684\u7a7a\u95f4</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_7","title":"\u9664\u6cd5","text":"<ul> <li><code>(a)/(a &amp; (-a));</code>, \u53bb\u9664\u672b\u5c3e\u7684\u82e5\u5e72\u4e2a0. \u4f8b\u5982 1011000 -&gt; 1011</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_8","title":"\u76f8\u5173\u7684\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_9","title":"\u4ea4\u6362\u4e24\u4e2a\u6574\u6570(\u4e0d\u9002\u7528\u989d\u5916\u7684\u7a7a\u95f4)","text":"<p>\u6b64\u9898\u662f\u5178\u578b\u7684\u5229\u7528\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\u6c42\u89e3\u7684\u9898\u3002 - <code>a^a = 0;  a^0 = a;</code> - <code>a^(a^b) = b ; b^(a^b) = a ;</code> \u5177\u4f53\u7684\u4ea4\u6362\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>a = a^b;\nb = a^b;\na = a^b;\n</code></pre> \u5206\u6790\u4e00\u4e0b\u8fd9\u4e09\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u628a\u539f\u6765\u7684a,b \u8bb0\u4f5ca1,b1;\u628a\u4ea4\u6362\u4e4b\u540e\u7684\u8bb0\u4f5ca2,b2;\u6700\u540e\u8981\u8fbe\u5230\u7684\u7ed3\u679c\u662fa2=b1;b2=a1; \u7b2c\u4e00\u884c\uff0c<code>a=a^b</code>, \u6b64\u65f6a\u7684\u503c\u5df2\u7ecf\u6539\u53d8\uff0c\u53d8\u6210\u4e86<code>a^b</code>\u7684\u503c\uff1b \u7b2c\u4e8c\u884c\u53d8\u6210<code>b = (a^b)^b = a</code>, \u6b64\u65f6b\u7684\u503c\u5df2\u7ecf\u6539\u53d8\uff0c\u53d8\u6210\u4e86a\u7684\u503c\u3002 \u7b2c\u4e09\u884c\uff0c\u6b64\u65f6\u7684<code>a=a^b</code>,\u800c<code>b=a</code>,\u6240\u4ee5 <code>a=a^b=(a^b)^a=b</code>,a\u53d8\u6210\u4e86b\u7684\u503c\u3002 \u901a\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u5145\u5f53\u6682\u5b58\u4e2d\u95f4\u7ed3\u679c\u7684\u53d8\u91cf\u662fa, a\u5148\u5b58\u50a8\u4e86a^b\u7684\u503c\uff0c\u7136\u540e\u53bb\u8ddfb\u5f02\u6216\u5f97\u5230a,\u518d\u8ddf\u5f97\u5230\u7684a\u5f02\u6216\u5f97\u5230b. \u800c\u4e00\u822c\u7684\u9700\u8981\u7b2c\u4e09\u4e2a\u53d8\u91cf\u505a\u4e2d\u4ecb\u7684\u4ea4\u6362\u601d\u8def\u662f\u9996\u5148\u628ab\u5b58\u8d77\u6765\uff0c\u56e0\u4e3a\u5728b=a\u65f6\uff0cb\u7684\u503c\u4e22\u5931\u4e86\u3002\u4e4b\u6240\u4ee5\u5229\u7528\u5f02\u6216\u4e0d\u6015b\u7684\u503c\u4e22\u5931\uff0c \u662f\u56e0\u4e3a\u53ef\u4ee5\u5229\u7528\u5f97\u5230\u7684a\u518d\u6b21\u5f97\u5230b.</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_10","title":"\u4e0d\u7528\u6bd4\u8f83\u627e\u51fa\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u6570","text":"<p>\u4e0d\u7528\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u6570\u5b57\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u51cf\u6cd5\u8fd0\u7b97\u7b26\u3002 \u5982\u679c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u51cf\u6cd5\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u8003\u8651\u53ea\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u51cf\u6cd5\u8fd0\u7b97\u3002 <code>a-b = c</code> \u5982\u679c<code>c&gt;0,a&gt;b;</code> \u5982\u679c<code>c&lt;0;c&lt;b;</code>\u4f46\u662f\u4e0d\u5e78\u7684\u662f\uff0c\u8fd8\u662f\u7528\u5230\u7684<code>&lt;</code>\u6216\u8005<code>&gt;</code> C++\u4e2d\u6709\u51fd\u6570<code>signbit(x)</code>\u53ef\u4ee5\u8fd4\u56dex\u7684\u7b26\u53f7\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\u5305\u542b\u5934\u6587\u4ef6<code>#include &lt;cmath&gt;</code> \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u5c31\u662f\u6574\u6570\u7684\u6ea2\u51fa\uff0c<code>a-b</code>\u5982\u679ca\u662f\u6b63\u6570\uff0cb\u662f\u8d1f\u6570\uff0c\u5c31\u4f1a\u53d8\u6210\u4e24\u4e2a\u6574\u6570\u76f8\u52a0\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u4e8c\u8005\u90fd\u63a5\u8fd1 INT\u7c7b\u578b\u8868\u793a\u7684\u8fb9\u754c\uff0c\u5c31\u4f1a\u8d85\u51fa\u80fd\u591f\u8868\u793a\u7684\u6700\u5927\u7684\u6570\u7684\u8303\u56f4\uff0c\u4ea7\u751f\u6b63\u6ea2\u51fa\u3002 \u540c\u7406\uff0c\u5982\u679ca\u662f\u8d1f\u6570,b\u662f\u6b63\u6570\uff0c\u540c\u6837\u53ef\u80fd\u8d85\u51fa \u80fd\u591f\u8868\u793a\u7684\u6700\u5c0f\u7684\u8d1f\u6570\u7684\u8303\u56f4\uff0c\u4ea7\u751f\u8d1f\u6ea2\u51fa\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5982\u679c\u77e5\u9053\u4e8c\u8005\u5f02\u53f7\uff0c\u5f88\u5bb9\u6613\u5224\u65ad\u8c01\u5927\u8c01\u5c0f\u3002\u6240\u4ee5\u5148\u5224\u65ad\u662f\u5426\u662f\u5f02\u53f7\u6bd4\u8f83\u597d\uff0c\u53ef\u4ee5\u9632\u6b62\u6570\u636e\u6ea2\u51fa\u4ea7\u751f\u9519\u8bef\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n//\u627e\u51fa\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u6570\u5b57\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u6bd4\u8f83\u8fd0\u7b97\n// \u4e0d\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\uff0c\u53ea\u80fd\u505a\u5dee\n//\u4e24\u4e2a\u6570\u505a\u5dee\u6216\u6d89\u53ca\u5230\u6ea2\u51fa\u7684\u95ee\u9898\n// a - b \u5982\u679ca \u63a5\u8fd1\u6700\u5927\u7684\u6574\u6570\uff0cb\u63a5\u8fd1\u6700\u5927\u7684\u8d1f\u6570\uff0c \u5c31\u4f1a\u6ea2\u51fa\n// a- b \u5982\u679ca \u63a5\u8fd1\u6700\u5927\u7684\u8d1f\u6570\uff0cb\u63a5\u8fd1\u6700\u5927\u7684\u6b63\u6570\uff0c\u4e5f\u4f1a\u6ea2\u51fa\n//\u6240\u4ee5\u5148\u5224\u65ad\u6b63\u8d1f\uff0c\u518d\u505a\u5dee\nint getMax(int a,int b){\n    if(signbit(a) &amp;&amp; !signbit(b)){return b;}\n    if(signbit(b) &amp;&amp; !signbit(a)){return a;}\n    if(signbit(a-b)){return b;}\n    return a;\n}\nint main() {\n    cout&lt;&lt;getMax(5435651,-2393)&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_11","title":"\u4e0d\u4f7f\u7528\u4efb\u4f55\u7b97\u672f\u8fd0\u7b97\u53ea\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u52a0\u51cf\u4e58\u9664","text":"<ul> <li> <p>\u52a0\u6cd5\u8fd0\u7b97\u7684\u601d\u8def \u4e0d\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c <code>a^b</code> \u5c31\u662f<code>a+b</code>\u7684\u7ed3\u679c \u53ea\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c <code>(a&amp;b)&lt;&lt;1</code> \u5c31\u662f<code>a+b</code>\u7684\u7ed3\u679c \u6240\u4ee5\u7efc\u5408\u4e8c\u8005\uff0c\u5c31\u80fd\u5f97\u5230\u52a0\u6cd5\u7684\u6b63\u786e\u7b54\u6848\u3002</p> </li> <li> <p>\u51cf\u6cd5\u7684\u601d\u8def <code>a-b = a+(-b);</code> \u800c<code>-b = ~b+1</code> \u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\u518d\u52a01.</p> </li> <li> <p>\u4e58\u6cd5\u8fd0\u7b97\u7684\u601d\u8def a*b \u628ab\u770b\u6210\u4e8c\u8fdb\u5236\u4f4d\uff0c\u6bcf\u6b21\u628aa\u5de6\u79fb\uff08\u76f8\u5f53\u4e8e\u4e58\u4ee52\uff09\uff0c\u770bb\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u662f\u5426\u662f1\uff0c \u662f1\u5c31\u5c06\u7ed3\u679c\u52a0\u5230\u6700\u7ec8\u7684\u7ed3\u679c\u4e0a\uff0c\u662f0\u5c31\u4e0d\u52a0\uff0c\u8fd4\u56de\u6700\u540e\u7684\u7ed3\u679c\u3002</p> </li> <li> <p>\u9664\u6cd5\u8fd0\u7b97\u7684\u601d\u8def  </p> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n/**\n * \u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97\n * \u6309\u7167\u4e8c\u8fdb\u5236\u4f4d\u52a0\u6cd5 0 + 0 = 0 | 0 + 1 = 1 | 1 + 1 = 0\n * \u5982\u679c\u4e0d\u8003\u8651\u8fdb\u4f4d\uff0c\u8be5\u89c4\u5219\u6b63\u597d\u4e0e\u5f02\u6216\u76f8\u540c\n *\n * \u8003\u8651\u4ec0\u4e48\u65f6\u5019\u4f1a\u4ea7\u751f\u8fdb\u4f4d 0 + 0 = 0 0 + 1 = 0 1+ 1 = 1\n * \u8be5\u89c4\u5219\u6b63\u597d\u4e0e  &amp; \u8fd0\u7b97\u4e00\u81f4\n *\n * \u6240\u4ee5\u5206\u522b\u8003\u8651\u65e0\u8fdb\u4f4d\u76f8\u52a0\u548c\u53ea\u8003\u8651\u8fdb\u4f4d\u7684\u7ed3\u679c  \u52a0\u5728\u4e00\u8d77\u5c31\u597d\u4e86\u3002\n * @return\n */\nint add(int a,int b){\n    int sum =a ;\n    while(b!=0){\n        sum = a ^ b;\n        b = (a &amp; b) &lt;&lt; 1;\n        a = sum;\n    }\n    return a;\n}\n/**\n * \u7528\u4f4d\u5b9e\u73b0\u51cf\u6cd5\u8fd0\u7b97\uff0c \u4e0d\u80fd\u7528-\u8fd0\u7b97\u7b26\n * @param a\n * @param b\n * @return\n */\nint minus2(int a,int b){\n    // a - b == a + (-b)\n    // -b == ~b + 1\n    add(a,add(~b,1));\n}\n/**\n * \u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u4e58\u6cd5\n *\n * @return\n */\nint cheng(int a,int b){\n    int sum = 0;\n    while(b!=0){\n        if(b&amp;1!=0){\n            sum = add(sum,a);\n        }\n        a&lt;&lt;=1;\n        b&gt;&gt;=1;\n    }\n}\n\nint main() {\n    std::cout &lt;&lt; cheng(-20,500) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#1","title":"\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1","text":"<p>\u9898\u76ee\uff1a \u7ed9\u5b9a\u4e00\u4e2a32\u4f4d\u7684\u6574\u6570\uff0c\u53ef0\uff0c\u53ef\u6b63\uff0c\u53ef\u8d1f\uff0c\u8fd4\u56de\u8be5\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1. \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u6bcf\u6b21\u53f3\u79fb\uff0c\u7136\u540e\u7edf\u8ba11\u7684\u4e2a\u6570\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u7edf\u8ba132\u6b21\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u53ea\u6709\u539f\u6765\u6570\u5b57\u4e2d\u6709\u591a\u5c11\u4e2a1\u6709\u5173\uff0c1\u8d8a\u5c11\u901f\u5ea6\u8d8a\u5feb\u3002 n = n&amp;(n-1) \u8be5\u64cd\u4f5c\u53ef\u4ee5\u62b9\u6389n\u6700\u53f3\u8fb9\u76841 n = n&amp;(~n+1) \u8be5\u64cd\u4f5c\u53ef\u4ee5\u5f97\u5230n\u6700\u53f3\u4fa7\u76841 \u4f7f\u7528\u4e0a\u9762\u7684\u4efb\u610f\u4e00\u79cd\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u7b97\u6cd5\u5b9e\u73b0\u53ea\u4e0e1\u7684\u4e2a\u6570\u6709\u5173\u7684\u7b97\u6cd5\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n/**\n * \u7edf\u8ba1\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u4e2d\u6709\u591a\u5c11\u4e2a1\n * @return\n */\nint getSum(int a){\n   int sum = 0;\n    while(a!=0){\n        if(a&amp;1 == 1){\n            sum++;\n        }\n        a = a&gt;&gt;1;\n    }\n    return sum;\n}\n/**\n * n&amp;(n-1)\u7684\u4f5c\u7528\u5c31\u662f\u6d88\u9664n\u6700\u53f3\u8fb9\u76841\n * @param a\n * @return\n */\nint getSumA(int a){\n    int sum = 0;\n    while(a!=0){\n        a = a&amp;(a-1);\n        ++sum;\n    }\n    return sum;\n}\nint main() {\n    std::cout &lt;&lt; getSumA(8)&lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_12","title":"\u627e\u51fa\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","text":"<p>\u9898\u76ee\uff1a \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 \u53d8\u79cd\uff1a \u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u5b57\u3002 \u4e86\u89e3\u5f02\u6216\u8fd0\u7b97\u7279\u70b9\uff0c<code>a^a = 0;  a^0 = a; a^a^a = a;</code> \u51fa\u73b0\u5076\u6570\u6b21\u7684\u6570\u5728\u5f02\u6216\u8fd0\u7b97\u4e0b\u90fd\u662f0\uff0c\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u5f02\u6216\u4e4b\u540e\u5c31\u662f\u5b83\u672c\u8eab\u3002 <pre><code>/**\n * \u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u5176\u4f59\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\n * \u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\n * @param v\n * @return\n */\nint research(vector&lt;int&gt; v){\n    int re = 0;\n    for(auto a:v){\n        re = re ^ a;\n    }\n    return re;\n}\n</code></pre> \u8fd9\u4e2a\u9898\u76ee\u8fd8\u53ef\u4ee5\u4ece\u53e6\u5916\u4e00\u4e2a\u89d2\u5ea6\u53bb\u7406\u89e3\uff0cK\u4e2aK\u8fdb\u5236\u7684\u6570\u5b57\u5982\u679c\u5ffd\u7565\u8fdb\u4f4d\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c\u4e00\u5b9a\u662f0.\u90a3\u4e48nK\u4e2aK\u8fdb\u5236\u7684\u6570\u5b57\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c \u4e5f\u4e00\u5b9a\u662f0. \u800c\u5f02\u6216\u6070\u597d\u662f\u4e8c\u8fdb\u5236\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u5b9e\u73b0\u3002 \u4e86\u89e3\u4e86\u8fd9\u4e00\u70b9\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u50cf\u5f02\u6216\u8fd9\u6837\uff0c\u5b9e\u73b0\u4efb\u610f\u7684K\u8fdb\u5236\u6570\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u7ed3\u679c\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e0b\u9762\u8fd9\u6837\u7684\u95ee\u9898\uff1a \u5728\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0K\u6b21\u7684\u6570\u7ec4\u4e2d\u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_13","title":"\u627e\u51fa\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","text":"<p>\u9898\u76ee\uff1a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e24\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570\u5b57\u3002 \u601d\u8def\uff1a\u5f02\u6216\u4e00\u904d\u4e4b\u540e\u5f97\u5230\u7684\u7ed3\u679c\u662fa^b\uff0c a,b\u5fc5\u7136\u6709\u4e00\u4f4d\u662f\u4e0d\u540c\u7684(\u5982\u679c\u7ed3\u679c\u662f0\uff0c\u90a3\u4e48a=b\uff0c\u8bf4\u660e\u5e76\u6ca1\u6709\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57)\u3002 \u6839\u636e\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5c06\u539f\u6765\u7684\u6570\u636e\u5206\u6210\u4e24\u7ec4\uff0c\u5206\u522b\u5f02\u6216\u4e00\u904d\u5373\u53ef\u5f97\u5230\u8fd9\u4e24\u4e2a\u6570\u5b57\u3002</p> <pre><code>/**\n * \u53ea\u6709\u4e24\u4e2a\u6570\u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570\n * @param v\n * @return\n */\nvector&lt;int&gt; research2(vector&lt;int&gt; v){\n    vector&lt;int&gt; result;\n    int r1 = 0;\n    for(auto i : v){\n        r1 = r1 ^ i;\n    }\n    int bit1 = r1 &amp; (~r1 +1);\n    int ab = 0; // \u73b0\u5728r1\u4fdd\u5b58\u7684\u662f\u4e24\u4e2a\u51fa\u73b0\u5947\u6570\u6b21\u7684\u6570\u7684\u5f02\u6216\n    for(auto j : v){\n        if((j&amp;bit1) != 0){\n           ab = ab ^ j;\n        }\n    }\n    result.push_back(ab);\n    result.push_back(ab^r1);\n    return result;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#_14","title":"\u627e\u51fa\u4e09\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57","text":"<p>\u9898\u76ee\uff1a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u4e2d\uff0c\u53ea\u6709\u4e09\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u90fd\u51fa\u73b0\u7684\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u3002 \u601d\u8def\uff1a\u6574\u4f53\u5f02\u6216\u4e00\u904d\uff0c\u5f97\u5230<code>x=a^b^c</code>. \u8bbe<code>f(x)</code>\u8868\u793a\u83b7\u53d6x\u7684\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\uff0c\u4f8b\u5982<code>f(10100)=00100</code>. <code>n = f(x^a)^f(x^b)^f(x^c)</code>, \u8bben\u7684\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d1\u5728\u7b2cm\u4f4d\u4e0a\u3002\u5219\u6709<code>x^a,x^b,x^c</code>\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u5728\u7b2cm\u4f4d\u4e0a\u662f1\uff0c\u5176\u4f59\u7684\u4e24\u4e2a\u6570\u5b57\u5728\u7b2cm\u4f4d\u4e0a\u90fd\u662f0. (\u5177\u4f53\u7684\u63a8\u5bfc\u8fc7\u7a0b\u53c2\u8003\u8fd9\u91cc).</p> <p>\u7b97\u6cd5\u6b65\u9aa4\uff1a</p> <ol> <li><code>abc = 0;  \u5faa\u73af\u4e00\u904d\uff1aabc^=v[i]</code> , \u5f97\u5230<code>x=a^b^c</code>;</li> <li><code>g1 = 0; \u5faa\u73af\u4e00\u904d\uff1ag1^=getLastOne(abc^v[i]);</code>, \u5f97\u5230\u4e0a\u9762\u63d0\u5230\u7684n.</li> <li><code>g1 = getLastOne(g1)</code>, \u5f97\u5230\u5206\u754c\u6570\u5b57\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u7b2cm\u4f4d\u7f6e1\u7684\u6570\u5b57\u3002</li> <li>\u628a\u6240\u6709\u6ee1\u8db3<code>getLastOne( v[i] ^ abc ) == g1</code>\u6761\u4ef6\u7684\u5206\u6210\u4e00\u7ec4\uff0c\u8be5\u7ec4\u4e2d\u53ea\u5305\u542b<code>a,b,c</code>\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u4e00\u4e2a\u6570\u5b57\uff0c\u5f02\u6216\u4e00\u904d\uff0c\u5f97\u5230a.</li> <li>\u5269\u4e0b\u7684\u5c31\u662f\u627e\u5230\u4e24\u4e2a\u6570\u5b57\u4e86\u3002</li> </ol> <pre><code>int getLastOne(int n){\n    return n &amp; -(n-1);\n}\nvoid solve(vector&lt;int&gt; v,int &amp;a,int &amp;b,int &amp;c){\n    if(v.size() == 0) return;\n    int abc = 0;\n    for(int i=0;i&lt;v.size();i++){\n        abc = abc ^ v[i];\n    }\n    int g1 = 0;\n    for(int i=0;i&lt;v.size();i++){\n        g1 = g1 ^ getLastOne(abc^v[i]);\n    }\n    // g1 \u53ea\u67091\u4f4d\u662f1\uff0ca,b,c\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u8fd9\u4e00\u4f4d\u662f1\n    g1 = getLastOne(g1);\n    a = 0;\n    for(int i=0;i&lt;v.size();i++){\n        if(getLastOne( v[i] ^ abc ) == g1){\n            a = a ^ v[i];\n        }\n    }\n    int bc = abc ^ a;\n    int g2 = getLastOne(bc);\n    b = 0;\n    for(int i=0;i&lt;v.size();i++){\n        if(v[i]&amp;g2 &amp;&amp; v[i]!=a){\n            b = b ^ v[i];\n        }\n    }\n    c = bc ^ b;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#k","title":"\u5728\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0K\u6b21\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570","text":"<p>\u8fd9\u91cc\u8981\u660e\u767d\u4e00\u4e2a\u89c4\u5f8b\uff0cK\u4e2a\u76f8\u540c\u7684K\u8fdb\u5236\u7684\u6570\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u8bdd\uff0c\u7ed3\u679c\u5fc5\u7136\u662f0\uff0c\u56e0\u4e3a\u6240\u6709\u662f0\u7684\u4f4d\u8fd8\u662f0\uff0c\u6240\u6709\u4e0d\u662f0\u7684\u4f4d\u90fd\u52a0\u5230\u4e86\u9700\u8981\u8fdb\u4f4d\uff0c\u9664\u53bb\u8fdb\u4f4d\uff0c\u5c31\u662f0. \u660e\u767d\u4e86\u4e0a\u9762\u7684\u4e00\u70b9\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u5bb9\u6613\u89e3\u51b3\u4e86\u3002\u9996\u5148\u628a\u6240\u6709\u7684\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236\uff0c\u7136\u540e\u5b9e\u73b0\u65e0\u8fdb\u4f4d\u76f8\u52a0\u7684\u51fd\u6570,\u518d\u628a\u7ed3\u679c\u8f6c\u6362\u56de\u5341\u8fdb\u5236\u8f93\u51fa\u5373\u53ef\u3002</p> <p>\u53e6\u5916\u4e00\u79cd\u89e3\u6cd5\uff1a</p> <p>\u53ef\u4ee5\u7edf\u8ba1\u6240\u6709\u6570\u5b57\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0a1\u7684\u4e2a\u6570\u3002\u7136\u540e\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u5bf9K\u53d6\u4f59\uff0c\u54ea\u4e9b\u51fa\u73b0K\u6b21\u7684\u6570\u5b57\u7d2f\u52a0\u5230\u5bf9\u5e94\u4f4d\u4e0a\u7684\u548c\u80af\u5b9a\u662fK\u7684\u500d\u6570\uff0c\u53d6\u4f59\u4e4b\u540e\u5c31\u662f0.\u5269\u4e0b\u6765\u7684\u5c31\u662f\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002</p> <pre><code>/**\n * \u5c06\u4e00\u4e2a\u5341\u8fdb\u5236\u7684\u6570\u8f6c\u6362\u6210K\u8fdb\u5236\n * @param n\n * @return\n */\ndeque&lt;int&gt; Kin(int n,int k){\n    deque&lt;int&gt; result;\n    while(n/k != 0){\n        result.push_front(n%k);\n        n = n / k;\n    }\n    result.push_front(n);\n    return result;\n}\n/**\n * \u5c06K\u8fdb\u5236\u7684deque\u8f6c\u6362\u621010\u8fdb\u5236\n * @param v\n * @return\n */\nint Kinverse(deque&lt;int&gt; v,int k){\n    int s = 0;\n    int i = 0;\n    while(!v.empty()){\n        s += v.back() * std::pow(float(k),i);\n        ++i;\n    }\n    return s;\n}\n/**\n * \u5b9e\u73b0\u4e24\u4e2avector\u6309\u7167K\u8fdb\u5236\u76f8\u52a0\uff0c\u5ffd\u7565\u8fdb\u4f4d\n * @param v1\n * @param v2\n * @return\n */\ndeque&lt;int&gt; addV(deque&lt;int&gt; v1,deque&lt;int&gt; v2,int k){\n    deque&lt;int&gt; result;\n    if(v1.size() &lt; v2.size()){\n        auto tmp = v1;\n        v1 = v2;\n        v2 = tmp;\n    }\n    while(!v2.empty()){\n        result.push_front( (v1.back() + v2.back() ) % k );\n        v1.pop_back();\n        v2.pop_back();\n    }\n    while(!v1.empty()){\n        result.push_front( v1.back() );\n        v1.pop_back();\n    }\n    return result;\n}\n/**\n * \u5b9e\u73b0v\u4e2d\u7684\u5341\u8fdb\u5236\u6570\u6309\u7167K\u8fdb\u5236\u76f8\u52a0\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff0c\u8fd4\u56de\u548c\n * @param v\n * @param k\n * @return\n */\nint Kplus(vector&lt;int&gt; v,int k){\n    deque&lt;int&gt; result;\n    for(auto i : v){\n        result = addV(result,Kin(i,k),k);\n    }\n    return Kinverse(result,k);\n}\nint main() {\n//    vector&lt;int&gt; v = {1,2,2,3,3,4,4,5,5,70};\n//    auto reuslt = research2(v);\n//    std::cout &lt;&lt; reuslt[0] &lt;&lt;\" \"&lt;&lt;reuslt[1] &lt;&lt; std::endl;\n    vector&lt;int&gt; v = {3,4,5,6};\n    cout&lt;&lt;Kplus(v,10);\n    return 0;\n}\n</code></pre> <pre><code>int solve(vector&lt;int&gt; &amp;v,int k){\n    vector&lt;int&gt; counts(64,0);\n    for(int i=0;i&lt;v.size();i++){\n        int index = 0;\n        int tmp = v[i];\n        while(tmp){\n            if(tmp&amp;1){\n                counts[index]++;\n            }\n            tmp = tmp&gt;&gt;1;\n            index++;\n        }\n    }\n    for(int i=0;i&lt;v.size();i++){\n        counts[i] = counts[i] % k;\n    }\n    int number = 0;\n    int base = 1;\n    for(int i=0;i&lt;counts.size();i++){\n        number += counts[i] * base;\n        base  = base *2;\n    }\n    return number;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BD%8D%E8%BF%90%E7%AE%97/#n","title":"\u5feb\u901f\u7684\u6c42\u4e00\u4e2a\u6574\u6570\u7684N\u6b21\u65b9","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cmath&gt;\n#include &lt;bitset&gt;\nusing namespace std;\n/**\n * f(n) = f(n-1) + f(n-2)\n * 1 1 2 3 5 8 ...\n * \u8981\u6c42\u5b9e\u73b0O(logn)\u7684\u7b97\u6cd5\n * @return\n */\nint getNum(int n){\n    vector&lt;int&gt; v;\n    for(int i=0;i&lt;n;i++){\n        if(i==0){\n            v.insert(v.end(),1);\n        }\n        else if(i==1){\n            v.insert(v.end(),1);\n        }\n        else{\n            v.insert(v.end(),v[i-2]+v[i-1]);\n        }\n    }\n    for(auto i:v){\n        cout&lt;&lt;i&lt;&lt;endl;\n    }\n    return v.back();\n}\n/**\n *\n * @param n\n * @return\n */\nint getNum2(int a,int n){\n    int i = 0;\n    double sum = 0;\n    while(n!=0){\n        int s = n&amp;1;\n        if(s==1){\n            double t = powf(2,i);\n            sum += powf(a,t);\n        }\n        n&gt;&gt;1;\n        ++i;\n    }\n    cout&lt;&lt;sum&lt;&lt;endl;\n}\n\nint main() {\n    int a = 3;\n    int n = 5;\n    while(n!=0){\n\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/","title":"\u5b57\u5178\u6811(Trie\u6811)","text":"<p>Trie\u6811\uff0c \u524d\u7f00\u6811\uff0c\u5b57\u5178\u6811\uff0c \u6307\u7684\u90fd\u662f\u540c\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u4ee5\u7a7a\u5b57\u7b26\u4e3a\u6839\u8282\u70b9\uff0c \u5176\u5b83\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\u3002 \u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u4e00\u6761\u8def\u5f84\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e00\u4e2a\u662f\u5426\u6709\u5355\u8bcd\u7684\u6807\u8bb0\u3002 \u524d\u7f00\u6811\u80fd\u5b8c\u6210\u5b57\u7b26\u4e32\u7684\u9ad8\u6548\u67e5\u627e\u548c\u589e\u5220\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#_1","title":"\u5b57\u5178\u6811\u7684\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#python","title":"Python","text":"<pre><code>class Trie:\n    def __init__(self):\n        self.root = {}\n        self.end = 'END'\n    def insert(self, word):\n        cur_node = self.root\n        for c in word:\n            if c not in cur_node:\n                cur_node[c] = {}\n            cur_node = cur_node[c]\n        cur_node[self.end] = True\n    def search(self, word):\n        current = self.root\n        for c in word:\n            if c not in current:\n                return False\n            current = current[c]\n        if self.end not in current:\n            return False\n        return True\n    def indexof(self, word):\n        # \u8fd4\u56de\u662f\u5426\u662f\u67d0\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\n        current = self.root\n        for c in word:\n            if c not in current:\n                return False\n            current = current[c]\n        if self.end in current:\n            current.pop(self.end)\n        if len(current) &gt; 0:\n            return True\n        return False\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#c","title":"C++","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#c_1","title":"C","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#_2","title":"\u76f8\u5173\u9898\u76ee","text":"<p>208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) 212. \u5355\u8bcd\u641c\u7d22 II 336. \u56de\u6587\u5bf9 472. \u8fde\u63a5\u8bcd</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#2017","title":"\u5f02\u6216\uff08\u4eca\u65e5\u5934\u67612017\u79cb\u62db\u771f\u9898\uff09","text":"<p>\u5f02\u6216\uff08\u4eca\u65e5\u5934\u67612017\u79cb\u62db\u771f\u9898\uff09</p> <p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u7ed9\u5b9a\u6574\u6570m\u4ee5\u53can\u4e2a\u6570\u5b57A1, A2, \u2026, An\uff0c\u5c06\u6570\u5217A\u4e2d\u6240\u6709\u5143\u7d20\u4e24\u4e24\u5f02\u6216\uff0c\u5171\u80fd\u5f97\u5230n(n-1)/2\u4e2a\u7ed3\u679c\u3002\u8bf7\u6c42\u51fa\u8fd9\u4e9b\u7ed3\u679c\u4e2d\u5927\u4e8em\u7684\u6709\u591a\u5c11\u4e2a\u3002</p> <p>\u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570n, m\u3002 \u7b2c\u4e8c\u884c\u7ed9\u51fan\u4e2a\u6574\u6570A1, A2, \u2026, An\u3002 \u6837\u4f8b\u8f93\u5165 3 10 6 5 10 \u8f93\u51fa \u8f93\u51fa\u4ec5\u5305\u62ec\u4e00\u884c\uff0c\u5373\u6240\u6c42\u7684\u7b54\u6848\u3002 \u6837\u4f8b\u8f93\u51fa 2 \u65f6\u95f4\u9650\u5236 C/C++\u8bed\u8a00\uff1a1000MS\u5176\u5b83\u8bed\u8a00\uff1a3000MS  \u5185\u5b58\u9650\u5236 C/C++\u8bed\u8a00\uff1a65536KB\u5176\u5b83\u8bed\u8a00\uff1a589824K</p> <p>\u601d\u8def\uff1a</p> <ol> <li>\u4ece\u6700\u9ad8\u4f4d\u5f00\u59cb\u5efa\u7acb\u5b57\u5178\u6811\uff0c\u5de6\u5b50\u6811\u8868\u793a\u4e8c\u8fdb\u52360\uff0c\u53f3\u5b50\u6811\u8868\u793a\u4e8c\u8fdb\u5236\u4f4d1. \u6bcf\u4e2a\u8282\u70b9\u7edf\u8ba1\u5728n\u4e2a\u6570\u5b57\u4e2d\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u6709\u591a\u5c11\u4e2a\u5bf9\u5e94\u76840\u6216\u80051.</li> <li> <p>\u67e5\u8be2\u6bcf\u4e2a\u6570\u5b57a\u548cm\uff0c\u6bd4\u8f83a\u548cm\u5bf9\u5e94\u7684\u4f4d\uff0c\u6709\u5982\u4e0b\u60c5\u51b5    2.1 a = 0, m = 0, \u8fd9\u4e2a\u65f6\u5019 b=0 , a^b = 0 \u4e0d\u80fd\u786e\u5b9a\u8c01\u5927\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d    2.2 a = 0, m = 1, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u80af\u5b9a\u6709a^b &lt; m, \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8df3\u8fc7\uff1b b = 1, \u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d    2.3 a = 1, m = 0, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u80af\u5b9a\u6709a^b &gt; m, \u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u5c06\u5bf9\u5e94\u7684count\u52a0\u5728\u7ed3\u679c\u4e0a\uff0c b=1,\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d    2.4 a = 1, m = 1, \u8fd9\u4e2a\u65f6\u5019 b=0 , \u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4f4d\uff0cb = 1,\u80af\u5b9a\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c</p> </li> <li> <p>\u6700\u540e\u7684\u7ed3\u679c\u9664\u4ee52\u8fd4\u56de\uff0c \u56e0\u4e3a\u6211\u4eec\u65e2\u7edf\u8ba1\u4e86a\u4e0eb\u7684\u5f02\u6216\uff0c\u4e5f\u7edf\u8ba1\u4e86b\u4e0ea\u7684\u5f02\u6216\u3002</p> </li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct TrieTree\n{\n    int count;\n    struct TrieTree* next[2]{NULL,NULL};\n    TrieTree():count(1){}\n};\n\nTrieTree* buildTrieTree(const vector&lt;int&gt;&amp; array)\n{\n    TrieTree* trieTree = new TrieTree();\n    for(int i=0;i&lt;(int)array.size();++i)\n    {\n        TrieTree* cur = trieTree;\n        for(int j=16;j&gt;=0;--j)\n        {\n            int digit = (array[i] &gt;&gt; j) &amp; 1;\n            if(NULL == cur-&gt;next[digit])\n                cur-&gt;next[digit] = new TrieTree();\n            else\n                ++(cur-&gt;next[digit]-&gt;count);\n            cur = cur-&gt;next[digit];\n        }\n    }\n    return trieTree;\n}\n\nlong long queryTrieTree(TrieTree*&amp; trieTree, const int a, const int m, const int index)\n{\n    if(NULL == trieTree)\n        return 0;\n\n    TrieTree* cur = trieTree;\n\n    for(int i=index;i&gt;=0;--i)\n    {\n        int aDigit = (a &gt;&gt; i) &amp; 1;\n        int mDigit = (m &gt;&gt; i) &amp; 1;\n\n        if(1==aDigit &amp;&amp; 1==mDigit)\n        {\n            if(NULL == cur-&gt;next[0])\n                return 0;\n            cur = cur-&gt;next[0];\n        }\n        else if(0 == aDigit &amp;&amp; 1==mDigit)\n        {\n            if(NULL == cur-&gt;next[1])\n                return 0;\n            cur = cur-&gt;next[1];\n        }\n        else if(1 == aDigit &amp;&amp; 0 == mDigit)\n        {\n            long long val0 =  (NULL == cur-&gt;next[0]) ? 0 : cur-&gt;next[0]-&gt;count;\n            long long val1 =  queryTrieTree(cur-&gt;next[1],a,m,i-1);\n            return val0+val1;\n        }\n        else if(0 == aDigit &amp;&amp; 0 == mDigit)\n        {\n            long long val0 =  queryTrieTree(cur-&gt;next[0],a,m,i-1);\n            long long val1 =  (NULL == cur-&gt;next[1]) ? 0 : cur-&gt;next[1]-&gt;count;\n            return val0+val1;\n        }\n    }\n    return 0;\n}\n\nlong long solve(const vector&lt;int&gt;&amp; array, const int&amp; m)\n{\n    TrieTree* trieTree = buildTrieTree(array);\n    long long result = 0;\n    for(int i=0;i&lt;(int)array.size();++i)\n    {\n        result += queryTrieTree(trieTree,array[i],m,16);\n    }\n    return result /2;\n}\n\nint main()\n{\n    freopen(\"d:/A.in\",\"r\",stdin);\n    int n,m;\n    while(cin&gt;&gt;n&gt;&gt;m)\n    {\n        vector&lt;int&gt; array(n);\n        for(int i=0;i&lt;n;++i)\n            cin&gt;&gt;array[i];\n        cout&lt;&lt; solve(array,m) &lt;&lt;endl;\n    }\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n\nusing namespace std;\nusing ll = long long;\n\nconst int MAXBIT = 17;\n\nstruct trieTree{\n    ll count = 0;\n    trieTree* next[2] = {nullptr, nullptr};\n    trieTree() : count(0){}\n    trieTree(int c) : count(c){}\n};\n\ntrieTree* createTree(const vector&lt;int&gt; &amp;arr){\n    trieTree* root = new trieTree(1);\n    for (int i = 0; i &lt; arr.size(); ++i) {\n        int index = MAXBIT; // int \u6574\u5f62\u6700\u591a32\u4f4d\n        trieTree* cur = root;\n        while(index &gt;= 0){\n            int digit = (arr[i] &gt;&gt; index) &amp; 1; // \u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u7b2cindex+1\u4f4d\u7684\u503c\n            if(cur-&gt;next[digit] == nullptr){\n                cur-&gt;next[digit] = new trieTree(1);\n            }else{\n                cur-&gt;next[digit]-&gt;count ++;\n            }\n            cur = cur-&gt;next[digit];\n            index--;\n        }\n    }\n    return root;\n}\n/**\n * \u67e5\u8be2trie\u6811\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u6ee1\u8db3a^b&gt;m\n * @param root\n * @param a\n * @param m\n * @param index\n * @return\n */\nll queryTree(trieTree* root,int a, int m, int index){\n    if(root == nullptr) return 0;\n    for (int i = index; i &gt;= 0; --i) {\n        int aDigit = (a &gt;&gt; i) &amp; 1;\n        int mDigit = (m &gt;&gt; i) &amp; 1;\n        if(aDigit == 0 &amp;&amp; mDigit == 0){\n            ll v0 = 0 , v1 = 0;\n            if(root-&gt;next[1] != nullptr){\n                v0 = root-&gt;next[1]-&gt;count;\n            }\n            v1 = queryTree(root-&gt;next[0],a,m,i-1);\n            return v0 + v1;\n        }else if(aDigit == 0 &amp;&amp; mDigit == 1){\n            if(root-&gt;next[1] == nullptr) return 0;\n            return queryTree(root-&gt;next[1],a,m,i-1);\n        }else if(aDigit == 1 &amp;&amp; mDigit == 0){\n            ll v0 = 0 , v1 = 0;\n            if(root-&gt;next[0] != nullptr){\n                v0 = root-&gt;next[0]-&gt;count;\n            }\n            v1 = queryTree(root-&gt;next[1],a,m,i-1);\n            return v0 + v1;\n        }else if(aDigit == 1 &amp;&amp; mDigit == 1){\n            if(root-&gt;next[0] == nullptr) return 0;\n            return queryTree(root-&gt;next[0],a,m,i-1);\n        }else{\n            cout&lt;&lt;\"error\"&lt;&lt;endl;\n        }\n    }\n    return 0;\n}\nll solve(vector&lt;int&gt; &amp;v, int m){\n    trieTree* root = createTree(v);\n    ll result = 0;\n    for (int i = 0; i &lt; v.size(); ++i) {\n        result += queryTree(root,v[i],m,MAXBIT);\n    }\n    return result / 2;\n}\n\nint main(){\n    freopen(\"d:/A.in\",\"r\",stdin);\n    int n, m ;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; v(n,0);\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; v[i];\n    }\n    cout&lt;&lt;solve(v,m)&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#_3","title":"\u7edf\u8ba1\u5b50\u76ee\u5f55","text":"<p>\u7edf\u8ba1\u5b50\u76ee\u5f55</p> <p>\u63cf\u8ff0 \u5c0fHi\u7684\u7535\u8111\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e00\u5171\u6709N\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a</p> <p>/hihocoder/offer22/solutions/p1</p> <p>/hihocoder/challenge30/p1/test  </p> <p>/game/moba/dota2/uninstall  </p> <p>\u5c0fHi\u60f3\u7edf\u8ba1\u5176\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b50\u76ee\u5f55\u3002\u4e0a\u4f8b\u4e2d\u4e00\u5171\u67098\u4e2a\u4e0d\u540c\u7684\u5b50\u76ee\u5f55\uff1a</p> <p>/hihocoder</p> <p>/hihocoder/offer22</p> <p>/hihocoder/offer22/solutions</p> <p>/hihocoder/challenge30</p> <p>/hihocoder/challenge30/p1</p> <p>/game</p> <p>/game/moba</p> <p>/game/moba/dota2/</p> <p>\u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (1 \u2264 N \u2264 10000)  </p> <p>\u4ee5\u4e0bN\u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002\u4fdd\u8bc1\u8def\u5f84\u4ece\u6839\u76ee\u5f55\"/\"\u5f00\u59cb\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u548c\u76ee\u5f55\u540d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002  </p> <p>\u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc710000  </p> <p>\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc7500000</p> <p>\u8f93\u51fa \u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u4e0d\u540c\u5b50\u76ee\u5f55\u7684\u6570\u76ee\u3002</p> <p>\u6837\u4f8b\u8f93\u5165 3 /hihocoder/offer22/solutions/p1  /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u6837\u4f8b\u8f93\u51fa 8</p> <p>\u601d\u8def\uff1a \u7528\u6bcf\u4e2a\u76ee\u5f55\u7684\u540d\u5b57\u5efa\u7acb\u5b57\u5178\u6811\uff0c\u6839\u662f\u7a7a\u5b57\u7b26\uff0c\u7136\u540e\u7edf\u8ba1\u6574\u68f5\u6811\u8282\u70b9\u7684\u6570\u76ee\uff0c\u6700\u540e\u8fd4\u56de\u8282\u70b9\u7684\u6570\u76ee-1.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;deque&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n/*\n * [\u7edf\u8ba1\u5b50\u76ee\u5f55](http://hihocoder.com/problemset/solution/1157194)\n * \n */\nstruct trieTree{\n    string description;\n    vector&lt;trieTree*&gt; sons;\n    trieTree() : description(\"\"){}\n    trieTree(string &amp;s) : description(s){}\n};\n\n/**\n * \u5c42\u6b21\u904d\u5386\u7edf\u8ba1\u8282\u70b9\u6570\u76ee\n * @param root\n * @return\n */\nint countNodes(trieTree* root){\n    if(root == nullptr) return 0;\n    if(root-&gt;sons.empty()) return 1;\n    vector&lt;trieTree*&gt; nodes, next;\n    nodes.push_back(root);\n\n    int re = 0;\n    while(!nodes.empty()){\n        for (int i = 0; i &lt; nodes.size(); ++i) {\n            next.insert(next.end(),nodes[i]-&gt;sons.begin(),nodes[i]-&gt;sons.end());\n        }\n        re += nodes.size();\n        nodes = next;\n        next.clear();\n    }\n    return re;\n}\n/**\n * \u9012\u5f52\u904d\u5386\u8282\u70b9\u6570\u76ee\n * @param root\n * @return\n */\nint countNode2(trieTree *root){\n    if(root == nullptr) return 0;\n    if(root-&gt;sons.empty()) return 1;\n    int re = 1;\n    for (int i = 0; i &lt; root-&gt;sons.size(); ++i) {\n        re += countNode2(root-&gt;sons[i]);\n    }\n    return re;\n}\nvector&lt;string&gt; splitString(const string &amp;s){\n    vector&lt;string&gt; re;\n    if(s.empty()) return re;\n    size_t index1 = 0;\n    size_t index2 = 1;\n    while(s.find('/',index2) != -1){\n        index2 = s.find('/',index1+1);\n        re.push_back(s.substr(index1+1,index2-index1-1));\n        index1 = index2;\n        index2++;\n    }\n    return re;\n}\n\nint solve(vector&lt;string&gt; &amp;pathes, int n){\n    if(pathes.empty() || n &lt;= 0) return 0;\n    int result = 0;\n    trieTree *root = new trieTree();\n    for (int i = 0; i &lt; n; ++i) {\n        vector&lt;string&gt; path = splitString(pathes[i]);\n        trieTree *cur = root;\n        for (int j = 0; j &lt; path.size(); ++j) {\n            if(cur-&gt;sons.empty()){\n                cur-&gt;sons.push_back(new trieTree(path[j]));\n                result++;\n                cur = cur-&gt;sons[0];\n            }else{\n                int index = cur-&gt;sons.size();\n                for (int k = 0; k &lt; cur-&gt;sons.size(); ++k) {\n                    if(cur-&gt;sons[k]-&gt;description == path[j]){\n                        index = k;\n                        break;\n                    }\n                }\n                if(index == cur-&gt;sons.size()){\n                    cur-&gt;sons.push_back(new trieTree(path[j]));\n                    result++;\n                    cur = cur-&gt;sons[cur-&gt;sons.size()-1];\n                }else{\n                    cur = cur-&gt;sons[index];\n                }\n            }\n        }\n    }\n    int re = countNode2(root) - 1;\n    return result;\n}\n\nint main(){\n    freopen(\"d:/A.in\",\"r\",stdin);\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;string&gt; pathes(n,\"\");\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; pathes[i];\n    }\n    cout&lt;&lt;solve(pathes,n)&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%89%8D%E7%BC%80%E6%A0%91/#_4","title":"\u5408\u5e76\u5b50\u76ee\u5f55","text":"<p>\u5408\u5e76\u5b50\u76ee\u5f55</p> <p>\u63cf\u8ff0 \u5c0fHi\u7684\u7535\u8111\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4e00\u5171\u6709N\u4e2a\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a</p> <p>/hihocoder/offer23/solutions/p1</p> <p>/hihocoder/challenge30/p1/test  </p> <p>/game/moba/dota2/uninstall  </p> <p>\u7ecf\u8fc7\u7edf\u8ba1\uff0c\u5c0fHi\u8ba4\u4e3a\u4ed6\u7684\u7535\u8111\u4e2d\u5b50\u76ee\u5f55\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u51cf\u5c11\u5b50\u76ee\u5f55\u7684\u6570\u91cf\u3002\u5c0fHi\u53d1\u73b0\u5176\u4e2d\u4e00\u4e9b\u5b50\u76ee\u5f55\u53ea\u5305\u542b\u53e6\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u4f8b\u5982/hihocoder/offer22\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55solution\uff0c/game\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55moba\uff0c\u800cmoba\u4e5f\u53ea\u5305\u542b\u4e00\u4e2a\u5b50\u76ee\u5f55dota2\u3002\u5c0fHi\u51b3\u5b9a\u628a\u8fd9\u6837\u7684\u5b50\u76ee\u5f55\u5408\u5e76\u6210\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u5e76\u4e14\u5c06\u88ab\u5408\u5e76\u7684\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u7528'-'\u8fde\u8d77\u6765\u4f5c\u4e3a\u65b0\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u3002\u5408\u5e76\u4e4b\u540e\u4e0a\u4f8b\u76843\u4e2a\u6587\u4ef6\u7684\u8def\u5f84\u4f1a\u53d8\u4e3a\uff1a</p> <p>/hihocoder/offer23-solutions/p1</p> <p>/hihocoder/challenge30-p1/test</p> <p>/game-moba-dota2/uninstall</p> <p>\u8f93\u5165 \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570N (1 \u2264 N \u2264 10000)  </p> <p>\u4ee5\u4e0bN\u884c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002\u4fdd\u8bc1\u8def\u5f84\u4ece\u6839\u76ee\u5f55\"/\"\u5f00\u59cb\uff0c\u5e76\u4e14\u6587\u4ef6\u540d\u548c\u76ee\u5f55\u540d\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b57\u3002  </p> <p>\u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc710000  </p> <p>\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4e0d\u8d85\u8fc7500000</p> <p>\u8f93\u51fa \u5bf9\u4e8e\u8f93\u5165\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\uff0c\u8f93\u51fa\u5408\u5e76\u5b50\u76ee\u5f55\u4e4b\u540e\u8be5\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u3002</p> <p>\u6837\u4f8b\u8f93\u5165 3 /hihocoder/offer23/solutions/p1 /hihocoder/challenge30/p1/test /game/moba/dota2/uninstall \u6837\u4f8b\u8f93\u51fa /hihocoder/offer23-solutions/p1 /hihocoder/challenge30-p1/test /game-moba-dota2/uninstall</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;deque&gt;\n#include &lt;stack&gt;\nusing namespace std;\n/*\n * [\u7edf\u8ba1\u5b50\u76ee\u5f55](http://hihocoder.com/problemset/solution/1157194)\n *\n */\nstruct trieTree{\n    string description;\n    vector&lt;trieTree*&gt; sons;\n    trieTree() : description(\"\"){}\n    trieTree(string &amp;s) : description(s){}\n};\n\nvector&lt;string&gt; splitString(string &amp;s){\n    vector&lt;string&gt; re;\n    if(s.empty()) return re;\n    s.push_back('/');\n    size_t index1 = 0;\n    size_t index2 = 1;\n    while(s.find('/',index2) != -1){\n        index2 = s.find('/',index1+1);\n        re.push_back(s.substr(index1+1,index2-index1-1));\n        index1 = index2;\n        index2++;\n    }\n    return re;\n}\n\ntrieTree* createTree(vector&lt;string&gt; &amp;pathes){\n    if(pathes.empty()) return 0;\n    int result = 0;\n    trieTree *root = new trieTree();\n    for (int i = 0; i &lt; pathes.size(); ++i) {\n        vector&lt;string&gt; path = splitString(pathes[i]);\n        trieTree *cur = root;\n        for (int j = 0; j &lt; path.size(); ++j) {\n            if(cur-&gt;sons.empty()){\n                cur-&gt;sons.push_back(new trieTree(path[j]));\n                result++;\n                cur = cur-&gt;sons[0];\n            }else{\n                int index = cur-&gt;sons.size();\n                for (int k = 0; k &lt; cur-&gt;sons.size(); ++k) {\n                    if(cur-&gt;sons[k]-&gt;description == path[j]){\n                        index = k;\n                        break;\n                    }\n                }\n                if(index == cur-&gt;sons.size()){\n                    cur-&gt;sons.push_back(new trieTree(path[j]));\n                    result++;\n                    cur = cur-&gt;sons[cur-&gt;sons.size()-1];\n                }else{\n                    cur = cur-&gt;sons[index];\n                }\n            }\n        }\n    }\n    return root;\n}\n\ntrieTree* reduceTree(trieTree* root){\n    trieTree* re = root;\n    if(root-&gt;sons.empty()) return root;\n    if(root-&gt;sons.size() &gt;= 2){\n        for (int i = 0; i &lt; root-&gt;sons.size(); ++i) {\n            reduceTree(root-&gt;sons[i]);\n        }\n    }\n    if(root-&gt;sons.size() == 1){\n        trieTree* next = root-&gt;sons[0];\n        if(next-&gt;sons.empty()){\n//            root-&gt;description = root-&gt;description + \"-\";\n//            root-&gt;description = root-&gt;description + next-&gt;description;\n//            root-&gt;sons.clear();\n            return root;\n        }\n        root-&gt;sons.clear();\n        for (int i = 0; i &lt; next-&gt;sons.size(); ++i) {\n            root-&gt;sons.push_back(next-&gt;sons[i]);\n        }\n        root-&gt;description = root-&gt;description + \"-\";\n        root-&gt;description = root-&gt;description + next-&gt;description;\n        reduceTree(root);\n    }\n    return re;\n}\n\nvoid printTree(trieTree* root,string out){\n    if(nullptr == root) return;\n    out += root-&gt;description + \"/\";\n    if(root-&gt;sons.empty()){\n        if(out.find_last_of('/') == out.size() - 1){\n            out.erase(out.size()-1);\n        }\n        cout&lt;&lt;out&lt;&lt;endl;\n    }else{\n        for (int i = 0; i &lt; root-&gt;sons.size(); ++i) {\n            printTree(root-&gt;sons[i],out);\n        }\n    }\n}\nvoid solve(vector&lt;string&gt; &amp;pathes, int n){\n    int result = 0;\n    trieTree* root = createTree(pathes);\n    trieTree* reduced = reduceTree(root);\n    string out = \"\";\n    printTree(reduced,out);\n}\n\nint main(){\n    freopen(\"d:/A.in\",\"r\",stdin);\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;string&gt; pathes(n,\"\");\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; pathes[i];\n    }\n    solve(pathes,n);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/","title":"\u54c8\u5e0c\u8868","text":"<p>\u54c8\u5e0c\u8868\u662f\u6570\u7ec4\u7684\u6269\u5c55\uff0c\u6570\u7ec4\u53ea\u80fd\u7528\u8fde\u7eed\u7684\u6574\u6570\u8868\u793a\u952e\uff1b\u54c8\u5e0c\u8868\u53ef\u4ee5\u7528\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","title":"\u54c8\u5e0c\u8868\u7684\u539f\u7406","text":"<p>\u7b80\u5355\u7684\u7406\u89e3\uff0c \u54c8\u5e0c\u8868\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u5c06\u952e\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u6570\u5b57\uff0c \u7528\u8be5\u6570\u5b57\u4f5c\u4e3a\u4e0b\u6807\u8fbe\u5230\u76f4\u63a5\u5bfb\u5740\u7684\u76ee\u7684\u3002</p> <p>\u4e0d\u540c\u7684\u952e\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u4e4b\u540e\u53ef\u80fd\u7ed3\u679c\u76f8\u540c\uff0c\u8fd9\u6837\u7ed3\u679c\u5c31\u4f1a\u51b2\u7a81\uff0c\u6240\u4ee5\u6bcf\u4e2a\u4e0b\u6807\u5b58\u50a8\u7684\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u8bb0\u5f55\u4e86\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u4e4b\u540e\u6709\u591a\u5c11\u4e2a\u952e\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002</p> <p>\u9009\u62e9\u597d\u7684\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u4f7f\u94fe\u8868\u7684\u957f\u5ea6\u5747\u5300\u5206\u5e03\uff0c\u8fd9\u6837\u67e5\u627e\u7684\u6548\u7387\u8fd1\u4f3cO(1).</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_3","title":"\u54c8\u5e0c\u8868\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 1. \u4e24\u6570\u4e4b\u548c \u7b80\u5355 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u56f0\u96be 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u4e2d\u7b49 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 \u56f0\u96be 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 \u4e2d\u7b49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/","title":"\u5806","text":"<p>\u5806\uff0c\u6216\u8005\u66f4\u51c6\u786e\u7684\u53eb\u4f5c\u4e8c\u53c9\u5806\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u901a\u5e38\u5206\u4e3a\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u3002\u6700\u5927\u5806\u662f\u6307\u5806\u9876\u7684\u5143\u7d20\u6700\u5927\uff0c\u5806\u9876\u7684\u5de6\u53f3\u5b69\u5b50\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5b83\uff0c\u7136\u540e\u5de6\u53f3\u5b50\u6811\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002\u6700\u5c0f\u5806\u662f\u6307\u5806\u9876\u7684\u5143\u7d20\u6700\u5c0f\uff0c\u5de6\u53f3\u5b69\u5b50\u5927\u4e8e\u7b49\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u5de6\u53f3\u5b50\u6811\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5806\u662f\u9012\u5f52\u5b9a\u4e49\u4e86\uff0c\u800c\u4e14\u662f\u4e00\u79cd\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u8282\u70b9\u4e4b\u95f4\u662f\u6709\u5927\u5c0f\u6b21\u5e8f\u5173\u7cfb\u7684\u3002\u4f46\u662f\u5de6\u53f3\u5b50\u6811\u662f\u6ca1\u6709\u987a\u5e8f\u7684\u3002\u800c\u4e8c\u53c9\u641c\u7d22\u6811\u5de6\u53f3\u5b69\u5b50\u662f\u6709\u6b21\u5e8f\u7684\uff0c\u4e0d\u80fd\u98a0\u5012\u3002</p> <p>\u65e2\u7136\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6765\u7b80\u4fbf\u7684\u8868\u793a\u4e00\u68f5\u6811\u3002\u5047\u8bbe\u4e00\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u662f<code>i</code>,\u90a3\u4e48\u5b83\u7684\u5de6\u5b69\u5b50\u4e3a<code>2*i</code>,\u53f3\u5b69\u5b50\u4e3a<code>2*i+1</code>,\u7236\u8282\u70b9\u4e3a<code>i/2</code>. \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e8c\u53c9\u5806\u7684\u6784\u5efa\uff0c\u8c03\u6574\u548c\u6709\u5173\u5e94\u7528(\u5806\u6392\u5e8f\u548c\u4f18\u5148\u961f\u5217)\u3002\u6ce8\u610f\u8fd9\u91cc\u5047\u8bbe\u6839\u8282\u70b9\u7684\u6807\u53f7\u662f1.</p> <p>\u5982\u679c\u6839\u8282\u70b9\u662f\u4ece0\u5f00\u59cb\u6807\u53f7\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9<code>i</code>, \u5de6\u5b69\u5b50\u4e3a<code>2*i+1</code>,\u53f3\u5b69\u5b50\u4e3a<code>2*i+2</code>,\u7236\u8282\u70b9\u4e3a<code>(i-1)/2</code>.</p> <p></p> <pre><code>// \u6839\u8282\u70b9\u4ece0\u5f00\u59cb\u6807\u53f7\uff0c\u5bf9\u4e8e\u8282\u70b9i\uff0c\u6c42\u5176\u5de6\u5b69\u5b50\uff0c\u53f3\u5b69\u5b50\u548c\u7236\u8282\u70b9\ninline int left(int i){\n    return (i&lt;&lt;1) + 1;\n}\ninline int right(int i){\n    return (i&lt;&lt;1) + 2;\n}\ninline int parent(int i){\n    if(i == 0) return -1;\n    return (i-1) &gt;&gt; 1;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_2","title":"\u6700\u5927\u5806","text":"<p>\u6700\u5927\u5806\u5c31\u662f\u6ee1\u8db3\u7236\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u5b50\u8282\u70b9\u7684\u5806\u3002\u6700\u5927\u5806\u7684\u6839\u8282\u70b9\u662f\u6240\u6709\u5143\u7d20\u4e2d\u6700\u5927\u7684(\u4f46\u53ef\u80fd\u4e0d\u662f\u552f\u4e00\u7684\u6700\u5927\u7684\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5927\u4e8e\u7b49\u4e8e)\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_3","title":"\u8c03\u6574\u6700\u5927\u5806","text":"<p>\u5047\u8bbe<code>A</code>\u662f\u5b58\u50a8\u5806\u7684\u6570\u7ec4,<code>A.length()</code>\u8868\u793a\u6570\u7ec4\u7684\u5927\u5c0f\uff0c<code>heap_size</code>\u8868\u793a\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570, \u6ee1\u8db3<code>heap_size &lt;= A.length()</code>.\u5047\u8bbe\u6211\u4eec\u9700\u8981\u8c03\u6574\u8282\u70b9<code>i</code>\u4ee5\u4f7f\u5f97\u5806\u91cd\u65b0\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28(\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u53ea\u6709\u8282\u70b9i\u662f\u4e0d\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\u7684)\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u627e\u51fa\u8282\u70b9<code>i</code>\u7684\u5de6\u53f3\u5b69\u5b50<code>l</code>,<code>r</code>;</li> <li>\u5982\u679c<code>l</code>,<code>r</code>\u8d85\u8fc7\u4e86\u5806\u7684\u5927\u5c0f\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5982\u679cA[i]\u5927\u4e8e\u7b49\u4e8e<code>l</code>,<code>r</code>,\u76f4\u63a5\u8fd4\u56de</li> <li>\u627e\u5230<code>l</code>,<code>r</code>\u4e2d\u7684\u8f83\u5927\u8005,\u8bb0\u4e3a<code>maxIndex</code>\uff0c\u548c<code>A[i]</code>\u4ea4\u6362</li> <li>\u4ee4i = maxIndex, \u8f6c\u52301\u3002</li> </ol> <pre><code>/**\n * \u8c03\u6574\u8282\u70b9i,\u4f7f\u5f97\u6574\u4e2a\u5806\u4fdd\u6301\u6700\u5927\u5806\u7684\u6027\u8d28\n * @param A\n * @param i\n */\nvoid max_heap(vector&lt;int&gt; &amp;A,int i){\n    int heap_size = A.size();\n    // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09\n    if(i &gt;= heap_size || i &lt; 0) return;\n    auto l = left(i);\n    auto r = right(i);\n    // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86\n    if(l &gt;= heap_size ) return;\n    int maxIndex = -1;\n    if(r &gt;= heap_size ){\n        if(A[i] &gt;= A[l]) return;\n        maxIndex = l;\n    }else{\n        // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5927\uff0c\u5219\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574\n        if(A[i] &gt;= A[l] &amp;&amp; A[i] &gt;= A[r]) return;\n        // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\n        A[l] &gt;= A[r] ? maxIndex = l : maxIndex = r;\n    }\n    swap(A[i],A[maxIndex]);\n    max_heap(A,maxIndex);\n}\n</code></pre> <pre><code>/**\n * \u8c03\u6574\u8282\u70b9i,\u4f7f\u5f97\u6574\u4e2a\u5806\u4fdd\u6301\u6700\u5c0f\u5806\u7684\u6027\u8d28\n * @param A \n * @param i \n */\nvoid min_heap(vector&lt;int&gt; &amp;A,int i){\n    int heap_size = A.size();\n    // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09\n    if(i &gt;= heap_size || i &lt; 0) return;\n    auto l = left(i);\n    auto r = right(i);\n    // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86\n    if(l &gt;= heap_size ) return;\n    int minIndex = -1;\n    if(r &gt;= heap_size ) {\n        if(A[i] &lt;= A[l]) return;\n        minIndex = l;\n    }else{\n        // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5c0f\uff0c\u5219\u6ee1\u8db3\u6700\u5c0f\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574\n        if(A[i] &lt;= A[l] &amp;&amp; A[i] &lt;= A[r]) return;\n        // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\n        A[l] &lt;= A[r] ? minIndex = l : minIndex = r;\n    }\n    swap(A[i],A[minIndex]);\n    min_heap(A,minIndex);\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_4","title":"\u5efa\u5806","text":"<p>\u5982\u4f55\u4ece\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\u5efa\u7acb\u4e00\u4e2a\u5806\u662f\u5806\u64cd\u4f5c\u4e2d\u4e00\u4e2a\u57fa\u672c\u7684\uff0c\u4f46\u5f88\u91cd\u8981\u7684\u95ee\u9898\uff0c\u5b83\u901a\u5e38\u662f\u5f88\u591a\u95ee\u9898\u7684\u7b2c\u4e00\u6b65\u3002</p> <p>\u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28\uff0c\u4e00\u4e2a\u5305\u542bn\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5f62\u6210\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0cn - ([n/2] + 1) + 1\u4e2a\u5143\u7d20\u662f\u53f6\u5b50\u8282\u70b9\u3002\u6211\u4eec\u53ea\u9700\u8981\u9488\u5bf9\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u4e4b\u5916\u7684\u8282\u70b9\u8c03\u7528\u4e0a\u9762\u7684\u91cd\u5efa\u5806\u7684\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u6700\u5927\u5806\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n).</p> <pre><code>/**\n * \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u6700\u5927\u5806\n * @param A\n */\nvoid build_max_heap(vector&lt;int&gt; &amp;A){\n    int leaf = A.size() / 2 ;\n    for (int i = leaf - 1; i &gt;= 0 ; --i) {\n        max_heap(A,i);\n    }\n}\n</code></pre> <pre><code>/**\n * \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u6700\u5c0f\u5806\n * @param A\n */\nvoid build_min_heap(vector&lt;int&gt; &amp;A){\n    int leaf = A.size() / 2;\n    for (int i = leaf - 1; i &gt;= 0 ; --i) {\n        min_heap(A,i);\n    }\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_5","title":"\u5806\u6392\u5e8f","text":"<p>\u5806\u6392\u5e8f\u5c31\u662f\u5229\u7528\u5806\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\u5b9e\u73b0\u6392\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u8fd9\u91cc\u4ee5\u6700\u5927\u5806\u4e3a\u4f8b\u6765\u8bf4\u660e\u3002 \u9996\u5148\u628a\u65e0\u5e8f\u6570\u7ec4\u91cd\u5efa\u4e00\u4e2a\u6700\u5927\u5806\uff0c\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u51fd\u6570\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u8f7b\u677e\u7684\u5728O(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u3002 \u6b64\u65f6A[0]\u5b58\u50a8\u7684\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u5c06\u5b83\u4e0e\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7136\u540e\u5806\u7684\u957f\u5ea6\u51cf\u5c111\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u518d\u5f53\u4f5c\u5806\u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5728\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u4e86\uff0c\u7136\u540e\u8c03\u6574\u5806\u4f7f\u4e4b\u7b26\u5408\u6700\u5927\u5806\u7684\u6027\u8d28\u3002 \u91cd\u590d\u8fd9\u4e2a\u6b65\u9aa4\u76f4\u5230\u6240\u6709\u7684\u5143\u7d20\u653e\u5230\u4e86\u6b63\u786e\u7684\u4f4d\u7f6e\u4e4b\u4e0a\u3002</p> <pre><code>void max_heap(vector&lt;int&gt; &amp;A,int heap_size,int i){\n    // \u4e0d\u5b58\u5728\u8fd9\u4e2a\u6837\u7684\u8282\u70b9\uff08\u8282\u70b9\u4ece0\u5f00\u59cb\u7f16\u53f7\uff09\n    if(i &gt;= heap_size || i &lt; 0) return;\n    auto l = left(i);\n    auto r = right(i);\n    // \u5982\u679c\u6ca1\u6709\u5b69\u5b50\u8282\u70b9\u4e86\uff0c\u4e0d\u9700\u8981\u8c03\u6574\u4e86\n    if(l &gt;= heap_size ) return;\n    int maxIndex = -1;\n    if(r &gt;= heap_size ){\n        if(A[i] &gt;= A[l]) return;\n        maxIndex = l;\n    }else{\n        // \u5982\u679c\u8282\u70b9i\u6bd4\u5b83\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u5927\uff0c\u5219\u6ee1\u8db3\u6700\u5927\u5806\u7684\u6027\u8d28\uff0c\u4e0d\u7528\u8c03\u6574\n        if(A[i] &gt;= A[l] &amp;&amp; A[i] &gt;= A[r]) return;\n        // \u627e\u5230\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u4e2d\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\n        A[l] &gt;= A[r] ? maxIndex = l : maxIndex = r;\n    }\n    swap(A[i],A[maxIndex]);\n    max_heap(A,heap_size,maxIndex);\n}\n\nvoid build_max_heap(vector&lt;int&gt; &amp;A){\n    int leaf = A.size() / 2 ;\n    for (int i = leaf - 1; i &gt;= 0 ; --i) {\n        max_heap(A,A.size(),i);\n    }\n}\n\nvoid sort_with_max_heap(vector&lt;int&gt; &amp;v){\n    build_max_heap(v);\n    int heap_size = v.size();\n    while(heap_size){\n        swap(v[0],v[heap_size-1]);\n        heap_size--;\n        max_heap(v,heap_size,0);\n    }\n}\n</code></pre> <p>\u5806\u6392\u5e8f\u7684\u65f6\u95f4\u6027\u80fd\u662fnlogn,\u4f46\u662f\u5b9e\u9645\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u5feb\u901f\u6392\u5e8f\u7684\u6027\u80fd\u66f4\u597d\u4e00\u4e9b\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_6","title":"\u4f18\u5148\u961f\u5217","text":"<p>\u4f18\u5148\u961f\u5217\u662f\u80fd\u591f<code>\u5feb\u901f</code>\u7684\u5b8c\u6210\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ol> <li>\u8fd4\u56de\u6700\u5927\u503c</li> <li>\u8fd4\u56de\u6700\u5927\u503c\u5e76\u5220\u9664\u8be5\u5143\u7d20</li> <li>\u5c06\u4efb\u610f\u4e00\u4e2a\u5df2\u5728\u4f18\u5148\u961f\u5217\u4e2d\u7684\u5143\u7d20\u589e\u52a0k.</li> <li>\u63d2\u5165\u4e00\u4e2a\u4efb\u610f\u503c</li> </ol> <p>\u80fd\u591f\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5feb\u901f\u7684\u5b9e\u73b0\u4ee5\u4e0a\u6240\u6709\u64cd\u4f5c\u7684\u53eb\u505a\u4f18\u5148\u961f\u5217\u3002\u4f7f\u7528\u5806\u6765\u5b9e\u73b0\u4f18\u5148\u961f\u5217\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u53ef\u4ee5\u5728<code>o(lgn)</code>\u5b8c\u6210\u3002</p> <ol> <li>\u8fd4\u56de\u6700\u5927\u503c</li> </ol> <p>\u4f7f\u7528\u6700\u5927\u5806\u5b9e\u73b0\u4f18\u5148\u961f\u5217\u8fd9\u79cd\u7ed3\u6784\uff0c\u76f4\u63a5\u8fd4\u56de<code>A[0]</code>\u5c31\u662f\u6700\u5927\u503c\u3002</p> <ol> <li>\u8fd4\u56de\u6700\u5927\u503c\u5e76\u5220\u9664\u8be5\u5143\u7d20</li> </ol> <p>\u9996\u5148\u8f93\u51fa<code>A[0]</code>, \u7136\u540e\u628a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9<code>A[0]</code>,\u8c03\u6574\u5806\u4f7f\u4e4b\u7b26\u5408\u6700\u5927\u5806\u6027\u8d28\u3002</p> <pre><code>int maxP(vector&lt;int&gt; &amp;A){\n    int maxV = A[0];\n    A[0] = A[A.size()-1];\n    int heap_size = A.size()-1;\n    max_heap(A,heap_size,0);\n    return maxV;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/","title":"\u591a\u53c9\u6811","text":"<p>\u8bb0\u5f55\u4e0d\u662f\u4e8c\u53c9\u6811\u7684\u5176\u4ed6\u6811\u578b\u7ed3\u6784</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_2","title":"\u4e00\u822c\u6811","text":"<p>\u5b66\u4e60\u6811\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u505a\u4e86\u5927\u91cf\u4e8c\u53c9\u6811\u7684\u9898\u76ee\uff0c\u4e86\u89e3\u4e86\u4e8c\u53c9\u6811\u7684\u8868\u793a\u7ed3\u6784\u548c\u5404\u79cd\u64cd\u4f5c\u3002\u4f46\u662f\u5f53\u9047\u5230\u666e\u901a\u7684\u6811\u7684\u65f6\u5019\uff0c\u4e00\u65f6\u7adf\u4e0d\u77e5\u9053\u5982\u4f55\u8868\u793a\u3002\u5176\u5b9e\u6811\u5c31\u662f\u6ca1\u6709\u73af\u7684\u56fe\u3002\u6240\u4ee5\u7528\u6765\u8868\u793a\u56fe\u7684\u4e24\u79cd\u65b9\u6cd5\u90fd\u53ef\u4ee5\u7528\u6765\u8868\u793a\u4e00\u822c\u7684\u6811\u7ed3\u6784\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_3","title":"\u8868\u793a","text":"<p>\u90bb\u63a5\u8868</p> <p>\u7528\u4e00\u4e2a\u4e8c\u7ef4\u7684\u6570\u7ec4(\u6216\u8005\u94fe\u8868)\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u76f8\u90bb\u7684\u8282\u70b9\u6709\u54ea\u4e9b\u3002</p> <p>\u90bb\u63a5\u77e9\u9635</p> <p>\u7528\u4e00\u4e2a\u77e9\u9635\u8868\u793a\u54ea\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u76f4\u63a5\u76f8\u8fde\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_4","title":"\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_5","title":"\u65e0\u6839\u6811\u5316\u4e3a\u6709\u6839\u6811","text":"<p>\u5c06\u4e00\u68f5\u6811\u8f6c\u6362\u6210\u4ee5\u5176\u4e2d\u67d0\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u6811\u3002</p> <p>hihocoder 1542</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nconst int maxn = 1005;\n\nvector&lt;int&gt; v[maxn];\n\nint n,rt;\n\nint par[maxn];\n\nvoid dfs(int x,int p)\n{\n    par[x] = p;\n    for(int i=0;i&lt;v[x].size();i++)\n    {\n        int toit = v[x][i];\n        if(toit!=p)\n            dfs(toit,x);\n    }\n}\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; rt;\n    int a, b;\n    for(int i=1;i&lt;n;i++)\n    {\n        cin &gt;&gt; a &gt;&gt; b;\n        v[a].push_back(b);\n        v[b].push_back(a);\n    }\n    dfs(rt,0);\n    for(int i=1;i&lt;=n;i++)\n        cout &lt;&lt; par[i] &lt;&lt; (i==n?'\\n':' ');\n\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_6","title":"\u970d\u592b\u66fc\u7f16\u7801","text":"<p>\u970d\u592b\u66fc\u7f16\u7801\u662f\u4e00\u79cd\u65e0\u635f\u7f16\u7801\u65b9\u6cd5\uff0c\u5b83\u662f\u65e0\u635f\u7f16\u7801\u65b9\u6848\u4e2d\u6700\u4f18\u7684\uff0c\u57fa\u672c\u601d\u60f3\u662f\u7ed9\u51fa\u73b0\u9891\u7387\u9ad8\u7684\u5b57\u7b26\u4ee5\u8f83\u77ed\u7684\u7f16\u7801\uff0c\u7ed9\u51fa\u73b0\u9891\u7387\u4f4e\u7684\u5b57\u7b26\u4ee5\u957f\u7684\u7f16\u7801\u3002\u672c\u6587\u5c06\u4ecb\u7ecd\u970d\u592b\u66fc\u7f16\u7801\u7684\u7b97\u6cd5\u6b65\u9aa4\u548c\u5177\u4f53\u5b9e\u73b0\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_7","title":"\u4e8c\u53c9\u970d\u592b\u66fc\u7f16\u7801","text":"<p>\u524d\u7f00\u7801\uff1a \u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u7f16\u7801\u662f\u5176\u4ed6\u7f16\u7801\u7684\u524d\u7f00\uff0c\u8fd9\u6837\u7684\u4e00\u5957\u7f16\u7801\u4f53\u7cfb\u53eb\u505a\u524d\u7f00\u7801\u3002\u4f8b\u5982a\u7684\u7f16\u7801\u662f010\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5b58\u5728\u7f16\u7801\u662f0\uff0c01\uff0c0101\uff0c0100\uff0c010**\u7684\u5b57\u7b26\u3002\u524d\u7f00\u7801\u786e\u4fdd\u4e86\u89e3\u7801\u65f6\u7684\u552f\u4e00\u6027\u3002</p> <p>\u970d\u592b\u66fc\u7f16\u7801\u7684\u7b97\u6cd5\u6b65\u9aa4\uff1a 1. \u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387\uff0c\u6309\u7167\u9891\u7387\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002 2. \u627e\u5230\u51fa\u73b0\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u5b57\u7b26\uff0c\u628a\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5de6\u53f3\u5b69\u5b50\uff0c\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5b83\u4eec\u5171\u540c\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u7236\u4eb2\u8282\u70b9\u7684\u503c\u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u9891\u7387\u7684\u548c\u3002 3. \u91cd\u590d\u6b65\u9aa42\u76f4\u5230\u603b\u6982\u7387\u4e3a1\u4e3a\u4e4b\u3002 4. \u4ee5\u4e0a\u6b65\u9aa4\u6784\u9020\u4e86\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u6839\u7684\u6982\u7387\u662f1.\u4ece\u6839\u5f00\u59cb\uff0c\u9012\u5f52\u7684\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\uff0c\u5de6\u5b69\u5b50\u6807\u8bb0\u4e3a0\uff0c\u53f3\u5b69\u5b50\u6807\u8bb0\u4e3a1\uff0c\u76f4\u5230\u5230\u8fbe\u53f6\u8282\u70b9\u3002 5. \u4ece\u8ddf\u51fa\u53d1\u5230\u6bcf\u4e2a\u53f6\u8282\u70b9\u7ecf\u8fc7\u76840--1\u8def\u5f84\u5c31\u662f\u8be5\u5b57\u7b26\u7684\u7f16\u7801\u3002</p> <p>\u4e0b\u9762\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff1a \u5047\u8bbe\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53ea\u5305\u542ba,b,c,d,e,f\u516d\u79cd\u5b57\u7b26\uff0c\u5b83\u4eec\u7684\u51fa\u73b0\u9891\u7387\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> a b c d e f \u51fa\u73b0\u6b21\u6570 45 13 12 16 9 5 \u51fa\u73b0\u9891\u7387 0.45 0.13 0.12 0.16 0.09 0.05 <p>\u7b2c\u4e00\u6b65\uff0c\u627e\u5230\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\uff0c\u5e94\u8be5\u662fe,f,\u6211\u4eec\u628ae\u548cf\u7684\u6839\u8bb0\u4f5cef\uff0c\u8fd9\u4e2a\u65f6\u5019\u6784\u9020\u4e86\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u6811\u7684\u6839\u662fef,\u9891\u7387\u662f(9+5)/100 = 0.14.  \u7b2c\u4e8c\u6b65\uff0c\u7528ef\u4ee3\u66ffe\u548cf\u4e4b\u540e\uff0c\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fb,c,\u6211\u4eec\u628ab\u548cc\u7684\u6839\u8bb0\u4f5cbc,\u8fd9\u4e2abc\u7684\u9891\u7387\u662f(12+13)/100 = 0.25.  \u7b2c\u4e09\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u4f4e\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fd\u548cef. \u6211\u4eec\u628ad\u548cef\u7684\u6839\u8bb0\u4f5cdef,\u5b83\u7684\u9891\u7387\u662f(16+14)/100 = 0.3.  \u7b2c\u56db\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u503c\u5408\u5e76\uff0c\u8fd9\u4e2a\u65f6\u5019\u662fbc\u548cdef,\u6211\u4eec\u8bb0\u4f5cbcdef,\u5b83\u7684\u9891\u7387\u662f0.55.  \u7b2c\u4e94\u6b65\uff0c\u7ee7\u7eed\u5bfb\u627e\u9891\u7387\u6700\u5c0f\u7684\u4e24\u4e2a\u503c\u5408\u5e76\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ea\u5269\u4e0b\u4e24\u4e2a\u503c\u4e86\uff0c\u5c31\u662fa\u548cbcde,\u5b83\u4eec\u548c\u7684\u9891\u7387\u662f1.  \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u6700\u7ec8\u5f62\u6210\u4e86\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u8c03\u6574\u4e00\u4e0b\u4f4d\u7f6e\uff0c\u4f7f\u4e4b\u66f4\u597d\u770b\u4e00\u4e9b\u3002\u7f16\u53f7\u4e4b\u540e\u7684\u60c5\u51b5\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a  \u4ece\u4e2d\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\uff1a</p> a b c d e f 00 0100 0101 0111 01100 01101 <p>\u8fd9\u5c31\u662f\u6574\u4e2a\u970d\u592b\u66fc\u7f16\u7801\u8fc7\u7a0b\u3002\u9664\u4e86\u4f7f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u8fdb\u5236\u7f16\u7801\uff0c\u53ea\u8981\u6269\u5c55\u5206\u652f\u7684\u6570\u76ee\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#n","title":"N\u53c9\u970d\u592b\u66fc\u7f16\u7801","text":"<p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u8fd8\u662f\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u7f16\u7801\u7684\u6570\u5b57\u5141\u8bb8\u4f7f\u75280\uff0c1\uff0c2\u4e09\u4e2a\u6570\u5b57\u3002\u90a3\u4e48\u970d\u592b\u66fc\u7f16\u7801\u7684\u6b65\u9aa4\u53d8\u4e3a\uff1a</p> <ol> <li>\u8bbe\u5b57\u7b26\u6570\u91cf\u4e3aK\uff0c\u5219\u7b2c\u4e00\u6b21\u9009\u62e9num = <code>K-2*[(K-1)/2]</code>,[]\u4ee3\u8868\u4e0b\u53d6\u6574\u7684\u610f\u601d\u3002\u8fd9\u91ccK=6\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u5bfb\u627e2\u4e2a\u9891\u7387\u6700\u4f4e\u7684\u5b57\u7b26\uff0ce,f.\u5982\u679cnum=0,\u53d62\uff0c\u5982\u679cnum=1,\u53d63.</li> <li>\u628a\u627e\u51fa\u6765\u7684\u5b57\u7b26\u7684\u6982\u7387\u5408\u5e76\u4f5c\u4e3a\u65b0\u7684\u4e00\u9879\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u539f\u6765\u7684\u5220\u6389\uff0c\u7ee7\u7eed\u75281\u4e2d\u7684\u65b9\u6cd5\u5bfb\u627e\u76f4\u5230\u6700\u540e\u5269\u4e0b\u4e09\u4e2a\u4e3a\u6b62\u3002</li> </ol> <p>\u5177\u4f53\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u4e3a\uff1a   \u8fd9\u4e2a\u65f6\u5019\uff0c\u5f97\u5230\u7684\u6700\u4f18\u7f16\u7801\u662f\uff1a</p> a d c b e f 0 2 10 12 110 111 <p>\u4e8e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u63a8\u5e7f\u5230N\u53c9\u970d\u592b\u66fc\u7f16\u7801\uff0c\u601d\u60f3\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u8d2a\u5fc3\u6cd5\u548c\u524d\u7f00\u7801\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%9A%E5%8F%89%E6%A0%91/#_8","title":"\u4e8c\u53c9\u54c8\u592b\u66fc\u7f16\u7801\u7684\u5b9e\u73b0","text":"<p>\u4e0b\u9762\u7ed9\u51fa\u4e8c\u53c9\u970d\u592b\u66fc\u7f16\u7801\u7684C++\u5b9e\u73b0\u7684\u7248\u672c\uff1a</p> <pre><code>struct Node{\n    int label; // \u8282\u70b9\u7684\u7f16\u7801\uff0c 0 \u6216\u8005 1\n    char c; // \u8282\u70b9\u8868\u793a\u7684\u5b57\u7b26\n    Node* left;\n    Node* right;\n    Node() : label(-1),left(nullptr), right(nullptr){}\n    Node(char cc) : label(-1), c(cc),left(nullptr), right(nullptr){}\n    Node(int la) : label(la),left(nullptr), right(nullptr){}\n};\n/**\n * \u8f93\u51fa\u5b57\u7b26\u7684\u7f16\u7801\n * @param root \n * @param s \n * @param re \n */\nvoid dfs(Node* root,string &amp;s,map&lt;char,string&gt; &amp;re){\n    if(!root) return;\n    if(!root-&gt;left &amp;&amp; !root-&gt;right){\n        re[root-&gt;c] = s + to_string(root-&gt;label);\n        s.clear();\n        return;\n    }else{\n        s += to_string( root-&gt;label );\n        string s1(s);\n        string s2(s);\n        if(root-&gt;left) dfs(root-&gt;left,s1,re);\n        if(root-&gt;right) dfs(root-&gt;right,s2,re);\n    }\n}\n/**\n * \u54c8\u592b\u66fc\u7f16\u7801\n * @param source \u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9891\u7387\n * @return  \u6bcf\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\n */\nmap&lt;char,string&gt; huff(map&lt;char,double&gt; &amp;source){\n    // 1. \u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\n    multimap&lt;double,Node*&gt; tree;\n    for(auto iter : source){\n        Node *newNode = new Node(iter.first);\n        tree.insert(make_pair(iter.second,newNode));\n    }\n    // 2. \u6784\u5efa\u54c8\u592b\u66fc\u6811\n    Node* newNode;\n    while( tree.size() &gt; 1){\n        auto ff = tree.begin();\n        auto ss = ++(tree.begin());\n        newNode = new Node();\n        newNode-&gt;left = ff-&gt;second;\n        ff-&gt;second-&gt;label = 0; // \u5de6\u5b50\u6811\u7f16\u7801\u4e3a0\n        newNode-&gt;right = ss-&gt;second;\n        ss-&gt;second-&gt;label = 1; // \u53f3\u5b50\u6811\u7f16\u7801\u4e3a1\n        tree.insert(make_pair(ff-&gt;first+ss-&gt;first,newNode));\n        tree.erase(ff);\n        tree.erase(ss);\n    }\n    newNode-&gt;label = 0; // \u6839\u8282\u70b9\u7f16\u7801\u4e3a0\n\n    // 3. \u8f93\u51fa\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7f16\u7801\n    Node* root = newNode;\n    string tmp = \"\";\n    map&lt;char,string&gt; re;\n    dfs(root,tmp,re);\n    return re;\n}\n</code></pre> <pre><code>import heapq\n\nclass Node:\n    def __init__(self, left=None, right=None, char=None, double):\n        self.left = left\n        self.right = right \n        self.char = char\n        self.double = double\ndef huffman(c):\n    \"\"\"\n    c: (double, char) \u6bcf\u4e2achar\u51fa\u73b0\u7684\u9891\u7387\n    \"\"\"\n    heap = heapq.heapify()\n    for char, double in c:\n        node = Node(char=char, double=double)\n        heapq.heappush(heap, [double, node])\n    while len(heap) &gt; 1:\n        a = heapq.heappop(heap)\n        b = heaq.heappop(heap)\n        node = Node(double=a[0]+b[0])\n        node.left = a\n        node.right = b\n        heapq.heappush(heap, [a[0]+b[0], node])\n    root = heap[0]\n    return root\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/","title":"\u5e76\u67e5\u96c6","text":"<p>\u5e76\u67e5\u96c6\u662f\u7528\u6765\u8868\u793a\u4e00\u7ec4\u4e00\u7ec4\u7684\u6570\u636e\u7684\uff0c\u4f7f\u7528\u5b83\u53ef\u4ee5 1. \u5feb\u901f\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4 2. \u5feb\u901f\u5408\u5e76\u4e24\u4e2a\u7ec4\u4e3a\u4e00\u4e2a\u7ec4</p> <p>\u5e76\u67e5\u96c6\u5176\u5b9e\u662f\u4e00\u4e2a\u68ee\u6797\uff0c \u68ee\u6797\u4e2d\u6bcf\u68f5\u6811\u8868\u793a\u4e00\u4e2a\u7ec4\uff0c \u7528\u6811\u7684\u6839\u8282\u70b9\u4ee3\u8868\u8be5\u7ec4\u3002 \u67e5\u8be2\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u7ec4\uff0c \u6cbf\u7740\u6811\u5bfb\u627e\u6839\uff0c\u6bd4\u8f83\u6839\u662f\u5426\u76f8\u540c \u5408\u5e76\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u6240\u5728\u7684\u7ec4\u7684\u65f6\u5019\uff0c \u628a\u4e24\u68f5\u6811\u8fde\u63a5\u5728\u4e00\u8d77\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","title":"\u5e76\u67e5\u96c6\u7684\u5b9e\u73b0","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_3","title":"\u5b9e\u73b0\u4e00","text":"<p>\u521d\u59cb\u5316\u7684\u65f6\u5019\u8d4b\u503c\u4e3a\u4e0e\u7d22\u5f15\u4e00\u6837\u7684\u503c\u3002 \u5982\u679c array[i] == i\uff0c \u8868\u793a\u662f\u6839\u8282\u70b9\u3002</p> <p><pre><code>0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n</code></pre> \u5408\u5e76\u4e24\u4e2a\u7ec4\u7684\u65f6\u5019\uff0c\u5148\u67e5\u627e\u5230\u5404\u81ea\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u9075\u5faa\u5411\u5de6\u5408\u5e76\u539f\u5219\u3002\u4f8b\u5982\uff0c merge(1, 9)\u7684\u65f6\u5019 <code>array[9] = 1</code>.</p> <p><pre><code>class BingSet:\n    \"\"\"\n    \u8be5\u5b9e\u73b0\u4e0d\u80fd\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u90fd\u662f\u8def\u5f84\u538b\u7f29\u5230\u6781\u81f4\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u662f\u5426\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5224\u65ad\n    \u4e3b\u8981\u662f\u5728merge\u7684\u65f6\u5019\u6ca1\u6709\u9012\u5f52\u66f4\u65b0\uff0c\u53ea\u5728parent\u7684\u65f6\u5019\u9012\u5f52\u538b\u7f29\u8def\u5f84\uff0c\u5bfc\u81f4\u53ea\u6709\u6267\u884c\u8fc7parent\u64cd\u4f5c\u7684\u8def\u5f84\u624d\u662f\u538b\u7f29\u7684\u3002\n    \"\"\"\n    def __init__(self, n):\n        self.array = [i for i in range(n)]\n        self.n = n\n\n    def parent(self, i):\n        \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9\n        array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9\n        \u5426\u5219\uff0c array\n        \"\"\"\n        if self.array[i] == i:\n            return i\n        self.array[i] = self.parent(self.array[i])\n        return self.array[i]\n\n    def merge(self, i, j):\n        \"\"\"\n        \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd\n        \"\"\"\n        if i &gt; j:\n            return self.merge(j, i)\n        pi = self.parent(i)\n        pj = self.parent(j)\n        if pi != pj:\n            self.array[pj] = pi\n            self.n -= 1\n    def count(self):\n        \"\"\"\n        \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf\n        \"\"\"\n        return self.n\n    def compress(self):\n        \"\"\" \u4fdd\u8bc1\u538b\u7f29\u5230\u6700\u77ed\u8def\u5f84 \"\"\"\n        for i in self.array:\n            self.parent(i)\n\n    def print(self):\n        \"\"\" \u6253\u5370\u5e76\u67e5\u96c6\u5f53\u524d\u7684\u72b6\u6001 \"\"\"\n        print([i for i in range(len(self.array))])\n        print(self.array)\n\n# \u6d4b\u8bd5\u4ee3\u7801\n# \u8282\u70b9\u6570\u91cf\nn = 20\n# \u5408\u5e76\u6570\u91cf\nm = 10\n# \u968f\u673a\u751f\u6210\u6570\u636e\nmerges = []\nfor i in range(m):\n    a = random.randint(0, n-1)\n    b = random.randint(0, n-1)\n    if a != b:\n        merges.append((a,b))\n\n# \u5408\u5e76\u96c6\u5408\nbs = BingSet(n)\nfor a, b in merges:\n    bs.merge(a, b)\n\nbs.print()\n# \u968f\u673a\u9009\u62e9\u4e00\u7ec4\uff0c\u67e5\u8be2\u662f\u5426\u5408\u5e76\u5230\u4e86\u540c\u4e00\u4e2a\u7ec4\u4e2d\nfor i in range(10):\n    index = random.randint(0, len(merges)-1)\n    p1 = bs.parent(merges[index][0])\n    p2 = bs.parent(merges[index][1])\n    assert p1 == p2\n</code></pre> \u8be5\u65b9\u6cd5\u7684\u95ee\u9898\u662f\u4e0d\u80fd\u5f88\u5feb\u7684\u6c42\u89e3\u6bcf\u4e2a\u7ec4\u6709\u51e0\u4e2a\u5143\u7d20\u3002 \u901a\u8fc7\u89c2\u5bdf\u4e0a\u9762\u7684\u5b9e\u73b0\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5229\u7528 array[i] == i \u6807\u8bb0\u6839\u8282\u70b9\uff0c \u9664\u6b64\u4e4b\u5916\u6ca1\u6709\u5176\u4ed6\u7684\u4fe1\u606f\u4e86\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8d1f\u6570\u6807\u8bb0\u6839\u8282\u70b9\uff0c \u7528\u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u8bb0\u5f55\u96c6\u5408\u4e2d\u6709\u51e0\u4e2a\u5143\u7d20\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_4","title":"\u5b9e\u73b0\u4e8c","text":"<p>\u4e0e\u4e0a\u9762\u7684\u5b9e\u73b0\u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u8d1f\u6570\u7684\u7b26\u53f7\u6307\u793a\u6839\uff0c\u5229\u7528\u5176\u7edd\u5bf9\u503c\u6307\u793a\u96c6\u5408\u7684\u5927\u5c0f\u3002</p> <pre><code>class BingSet:\n    \"\"\"\n    \u8be5\u5b9e\u73b0\u4e0d\u80fd\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u90fd\u662f\u8def\u5f84\u538b\u7f29\u5230\u6781\u81f4\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u662f\u5426\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u5224\u65ad\n    \u4e3b\u8981\u662f\u5728merge\u7684\u65f6\u5019\u6ca1\u6709\u9012\u5f52\u66f4\u65b0\uff0c\u53ea\u5728parent\u7684\u65f6\u5019\u9012\u5f52\u538b\u7f29\u8def\u5f84\uff0c\u5bfc\u81f4\u53ea\u6709\u6267\u884c\u8fc7parent\u64cd\u4f5c\u7684\u8def\u5f84\u624d\u662f\u538b\u7f29\u7684\u3002\n    \"\"\"\n    def __init__(self, n):\n        self.array = [-1 for _ in range(n)]\n        self.n = n\n\n    def parent(self, i):\n        \"\"\" \u8fd4\u56dei\u7684\u6839\u8282\u70b9\n        array[i] \u4e2d\u5b58\u653e i\u7684\u6839\uff0c \u5982\u679c array[i] == i, \u8bf4\u660e\u8fd9\u4e2a\u70b9\u662f\u6839\u8282\u70b9\n        \u5426\u5219\uff0c array\n        \"\"\"\n        if self.array[i] &lt; 0:\n            return i\n        self.array[i] = self.parent(self.array[i])\n        return self.array[i]\n\n    def merge(self, i, j):\n        \"\"\"\n        \u5408\u5e76i,j\u4e3a\u4e00\u7ec4\uff0c\u5982\u679c\u5df2\u7ecf\u662f\u4e00\u7ec4\uff0c\u65e0\u5f71\u54cd\n        \"\"\"\n        if i &gt; j:\n            return self.merge(j, i)\n        pi = self.parent(i)\n        pj = self.parent(j)\n        if pi != pj:\n            self.array[pi] += self.array[pj] # \u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u4e4b\u524d\u5148\u7ef4\u62a4\u96c6\u5408\u91cc\u9762\u5143\u7d20\u7684\u6570\u91cf\n            self.array[pj] = pi\n            self.n -= 1\n    def count(self):\n        \"\"\"\n        \u8fd4\u56de\u4e0d\u540c\u7684\u96c6\u5408\u6570\u91cf\n        \"\"\"\n        return self.n\n    def counti(self, i):\n        \"\"\"\n        \u8fd4\u56de i \u6240\u5728\u7ec4\u7684\u6570\u91cf\n        \"\"\"\n        pi = self.parent(i)\n        return 0 - self.array[i];\n    def compress(self):\n        \"\"\" \u4fdd\u8bc1\u538b\u7f29\u5230\u6700\u77ed\u8def\u5f84 \"\"\"\n        for i in self.array:\n            self.parent(i)\n\n    def print(self):\n        \"\"\" \u6253\u5370\u5e76\u67e5\u96c6\u5f53\u524d\u7684\u72b6\u6001 \"\"\"\n        print([i for i in range(len(self.array))])\n        print(self.array)\n\n# \u8282\u70b9\u6570\u91cf\nn = 20\n# \u5408\u5e76\u6570\u91cf\nm = 10\n# \u968f\u673a\u751f\u6210\u6570\u636e\nmerges = []\nfor i in range(m):\n    a = random.randint(0, n-1)\n    b = random.randint(0, n-1)\n    if a != b:\n        merges.append((a,b))\n\n# \u5408\u5e76\u96c6\u5408\nbs = BingSet(n)\nfor a, b in merges:\n    bs.merge(a, b)\n\nbs.print()\n# \u968f\u673a\u9009\u62e9\u4e00\u7ec4\uff0c\u67e5\u8be2\u662f\u5426\u5408\u5e76\u5230\u4e86\u540c\u4e00\u4e2a\u7ec4\u4e2d\nfor i in range(10):\n    index = random.randint(0, len(merges)-1)\n    p1 = bs.parent(merges[index][0])\n    p2 = bs.parent(merges[index][1])\n    assert p1 == p2\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_5","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 200. \u5c9b\u5c7f\u6570\u91cf \u4e2d\u7b49 547. \u670b\u53cb\u5708 \u4e2d\u7b49 684. \u5197\u4f59\u8fde\u63a5 \u4e2d\u7b49 685. \u5197\u4f59\u8fde\u63a5 II \u56f0\u96be 839. \u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4 \u56f0\u96be 924. \u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad \u4e2d\u7b49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/","title":"\u6392\u5e8f","text":"<p>\u6392\u5e8f\u7b97\u6cd5\uff0c\u662f\u5c06\u65e0\u5e8f\u6570\u636e\u53d8\u4e3a\u6709\u5e8f\u7684\u4e00\u79cd\u7b97\u6cd5\u3002\u901a\u5e38\u5206\u4e3a\u5185\u90e8\u6392\u5e8f\u548c\u5916\u90e8\u6392\u5e8f\u3002\u5185\u90e8\u6392\u5e8f\u662f\u6307\u6240\u6709\u5f85\u6392\u5e8f\u7684\u6570\u636e\u90fd\u5728\u5185\u5b58\u4e2d\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5f97\u5230\u3002 \u5916\u90e8\u6392\u5e8f\u662f\u6307\u6570\u636e\u5b58\u50a8\u5728\u5916\u90e8\uff0c\u901a\u5e38\u90fd\u6d89\u53ca\u5927\u91cf\u7684\u6570\u636e\u7684\u6392\u5e8f\u95ee\u9898\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u4e0d\u8ba8\u8bba\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e3b\u8981\u7684\u5185\u90e8\u6392\u5e8f\u7b97\u6cd5\u3002</p> <p>\u5185\u90e8\u6392\u5e8f\u6309\u7167\u7b97\u6cd5\u601d\u60f3\u7684\u4e0d\u540c\uff0c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a</p> <ul> <li>\u63d2\u5165\u6392\u5e8f</li> <li>\u9009\u62e9\u6392\u5e8f</li> <li>\u4ea4\u6362\u6392\u5e8f</li> <li>\u5f52\u5e76\u6392\u5e8f</li> <li>\u57fa\u6570\u6392\u5e8f</li> </ul>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_2","title":"\u63d2\u5165\u6392\u5e8f","text":"<p>\u63d2\u5165\u6392\u5e8f\u7684\u601d\u60f3\u662f\u5c06\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u4e00\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u5e8f\u5217\u4e2d\uff0c\u5728\u63d2\u5165\u7684\u65f6\u5019\u9010\u4e2a\u6bd4\u8f83\u5e26\u63d2\u5165\u5143\u7d20\u548c\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u627e\u5230\u65b0\u63d2\u5165\u5143\u7d20\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u63d2\u5165\u5230\u5e8f\u5217\u4e2d\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_3","title":"\u76f4\u63a5\u63d2\u5165\u6392\u5e8f","text":"<p>\u6700\u7b80\u5355\u7684\u63d2\u5165\u6392\u5e8f\uff0c\u76f4\u63a5\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\u7684\u601d\u60f3\u800c\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u7684\u4f18\u5316\u8fc7\u7a0b\u3002</p> <p><pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nvoid print(vector&lt;int&gt; v,int i){\n    int count = 0;\n    for(auto a : v){\n        if(count == i){\n            cout&lt;&lt;\" : \";\n        }\n        cout&lt;&lt;a&lt;&lt;\" \";\n        count ++;\n    }\n    cout&lt;&lt;endl;\n}\nvector&lt;int&gt; SimpleInsertSort(vector&lt;int&gt; &amp;a)\n{\n    int n = a.size();\n    // \u6bcf\u6b21\u5faa\u73af\uff0c\u90fd\u5047\u8bbei\u524d\u9762\u7684\u6570\u5b57\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\uff0ci\u662f\u8981\u63d2\u5165\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u6570\u5b57\uff0ci\u4e4b\u540e\u7684\u6570\u5b57\u90fd\u662f\u672a\u6392\u5e8f\u7684\u3002\n    for(int i = 1; i&lt;n; i++){\n        // \u6253\u5370\u5f53\u524d\u7684\u72b6\u6001\n        print(a,i);\n        // \u627e\u5230\u5f53\u524d\u6570\u5b57i\u5e94\u5f53\u63d2\u5165\u7684\u4f4d\u7f6e\n        int curValue = a[i];\n        int ii = i;\n        if(a[ii]&lt;a[0]){\n            //\u5e94\u5f53\u63d2\u5165\u9996\u4f4d\n            while(ii-1&gt;=0){\n                a[ii] = a[ii-1];\n                ii--;\n            }\n            a[0] = curValue;\n        }else if(a[ii]&gt;=a[ii-1]){\n            //\u5e94\u5f53\u63d2\u5165\u672b\u5c3e\n            continue; //\u5982\u679c\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u662f\u6709\u5e8f\u5217\u8868\u7684\u672b\u5c3e\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u7528\u505a\u3002\n        }else{\n            for(int j=0;j&lt;ii-1;j++){\n                if(a[ii]&gt;=a[j] &amp;&amp; a[ii]&lt;a[j+1]){\n                    //\u5e94\u5f53\u63d2\u5165j\u4e4b\u540e\n                    while(ii-1&gt;j){\n                        a[ii] = a[ii-1];\n                        ii--;\n                    }\n                    a[ii] = curValue;\n                }\n            }\n        }\n    }\n    print(a,a.size());\n    return  a;\n}\nint main() {\n    vector&lt;int&gt; v = {49,38,65,97,76,13,27,49};\n    auto re = SimpleInsertSort(v);\n    return 0;\n}\n</code></pre> \u8fd0\u884c\u7ed3\u679c\uff1a <pre><code>49  : 38 65 97 76 13 27 49\n38 49  : 65 97 76 13 27 49\n38 49 65  : 97 76 13 27 49\n38 49 65 97  : 76 13 27 49\n38 49 65 76 97  : 13 27 49\n13 38 49 65 76 97  : 27 49\n13 27 38 49 65 76 97  : 49\n13 27 38 49 49 65 76 97\n</code></pre> \u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f<code>o(n^2)</code>;</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_4","title":"\u6298\u534a\u63d2\u5165\u6392\u5e8f(\u4e8c\u5206\u63d2\u5165\u6392\u5e8f)","text":"<p>\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u7684\u8fc7\u7a0b\u4f18\u5316\uff0c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u5bfb\u627e\u5143\u7d20\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u8fd9\u4e00\u8fc7\u7a0b\u662f\u53ef\u4ee5\u4f18\u5316\u7684\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u5e8f\u5217\u4e2d\u67e5\u627e\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u65b9\u6cd5\u7f29\u77ed\u67e5\u627e\u7684\u65f6\u95f4\u3002\u8be5\u65b9\u6cd5\u88ab\u53eb\u505a\u4e8c\u5206\u63d2\u5165\u6392\u5e8f\u3002 STL\u4e2d<code>lower_bound(a.begin(),a.end()+ii,a[i]);</code>\u5b9e\u73b0\u4e86\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5b83\u66ff\u6362\u539f\u6765\u7684\u5faa\u73af\u8bed\u53e5\u67e5\u627e\u51fa\u63d2\u5165\u4f4d\u7f6e\u5373\u53ef\u3002 <pre><code>def binary_search(arr, start, end, value):\n    while start &lt;= end:\n        mid = (start + end) // 2\n        if value &gt; arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\ndef sort_insert(arr):\n    unorder = 1\n    while unorder &lt; len(arr):\n        ordered = binary_search(arr, 0, unorder-1, arr[unorder])\n        current = arr[unorder]\n        tmp_index = unorder\n        while tmp_index &gt; ordered:\n            arr[tmp_index] = arr[tmp_index-1]\n            tmp_index -= 1\n        arr[ordered] = current\n        unorder += 1\n    return arr\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_5","title":"\u4e8c\u8def\u63d2\u5165\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_6","title":"\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f\uff08\u5e0c\u5c14\u6392\u5e8f\uff09","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_7","title":"\u9009\u62e9\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_8","title":"\u7b80\u5355\u9009\u62e9\u6392\u5e8f","text":"<p>\u5728\u8981\u6392\u5e8f\u7684\u4e00\u7ec4\u6570\u4e2d\uff0c\u9009\u51fa\u6700\u5c0f\uff08\u6216\u8005\u6700\u5927\uff09\u7684\u4e00\u4e2a\u6570\u4e0e\u7b2c1\u4e2a\u4f4d\u7f6e\u7684\u6570\u4ea4\u6362\uff1b\u7136\u540e\u5728\u5269\u4e0b\u7684\u6570\u5f53\u4e2d\u518d\u627e\u6700\u5c0f\uff08\u6216\u8005\u6700\u5927\uff09\u7684\u4e0e\u7b2c2\u4e2a\u4f4d\u7f6e\u7684\u6570\u4ea4\u6362\uff0c\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u7b2cn-1\u4e2a\u5143\u7d20\uff08\u5012\u6570\u7b2c\u4e8c\u4e2a\u6570\uff09\u548c\u7b2cn\u4e2a\u5143\u7d20\uff08\u6700\u540e\u4e00\u4e2a\u6570\uff09\u6bd4\u8f83\u4e3a\u6b62\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_9","title":"\u4e8c\u5143\u9009\u62e9\u6392\u5e8f","text":"<p>\u7b80\u5355\u9009\u62e9\u6392\u5e8f\uff0c\u6bcf\u8d9f\u5faa\u73af\u53ea\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u6392\u5e8f\u540e\u7684\u5b9a\u4f4d\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6539\u8fdb\u4e3a\u6bcf\u8d9f\u5faa\u73af\u786e\u5b9a\u4e24\u4e2a\u5143\u7d20\uff08\u5f53\u524d\u8d9f\u6700\u5927\u548c\u6700\u5c0f\u8bb0\u5f55\uff09\u7684\u4f4d\u7f6e,\u4ece\u800c\u51cf\u5c11\u6392\u5e8f\u6240\u9700\u7684\u5faa\u73af\u6b21\u6570\u3002\u6539\u8fdb\u540e\u5bf9n\u4e2a\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u6700\u591a\u53ea\u9700\u8fdb\u884c[n/2]\u8d9f\u5faa\u73af\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_10","title":"\u4ea4\u6362\u6392\u5e8f","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_11","title":"\u5192\u6ce1\u6392\u5e8f","text":"<p>\u5192\u6ce1\u6392\u5e8f\u603b\u662f\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u4e2a\u503c\u3002</p> <p>\u5728\u8981\u6392\u5e8f\u7684\u4e00\u7ec4\u6570\u4e2d\uff0c\u5bf9\u5f53\u524d\u8fd8\u672a\u6392\u597d\u5e8f\u7684\u8303\u56f4\u5185\u7684\u5168\u90e8\u6570\uff0c\u81ea\u4e0a\u800c\u4e0b\u5bf9\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u4f9d\u6b21\u8fdb\u884c\u6bd4\u8f83\u548c\u8c03\u6574\uff0c\u8ba9\u8f83\u5927\u7684\u6570\u5f80\u4e0b\u6c89\uff0c\u8f83\u5c0f\u7684\u5f80\u4e0a\u5192\u3002\u5373\uff1a\u6bcf\u5f53\u4e24\u76f8\u90bb\u7684\u6570\u6bd4\u8f83\u540e\u53d1\u73b0\u5b83\u4eec\u7684\u6392\u5e8f\u4e0e\u6392\u5e8f\u8981\u6c42\u76f8\u53cd\u65f6\uff0c\u5c31\u5c06\u5b83\u4eec\u4e92\u6362\u3002 <pre><code>void print(vector&lt;int&gt; v,int i){\n    int count = 0;\n    for(auto a : v){\n        if(count == i){\n            cout&lt;&lt;\" | \";\n        }\n        cout&lt;&lt;a&lt;&lt;\" \";\n        count ++;\n    }\n    cout&lt;&lt;endl;\n}\n\n//\u5192\u6ce1\u6392\u5e8f\nvector&lt;int&gt; sortTop(vector&lt;int&gt; &amp;v){\n    int tmp;\n    for(int j=v.size()-1;j&gt;0;j--){\n        print(v,j+1);\n        for(int i=0;i&lt;j;i++){\n            if(v[i+1] &lt; v[i]){\n                tmp = v[i];\n                v[i] = v[i+1];\n                v[i+1] = tmp;\n            }\n        }\n    }\n    return v;\n}\n\nint main() {\n    vector&lt;int&gt; v = {49,38,65,97,76,13,27,12};\n    auto a = sortTop(v);\n    print(a);\n    return 0;\n}\n</code></pre> \u8fd0\u884c\u7ed3\u679c\uff1a <pre><code>49 38 65 97 76 13 27 12\n38 49 65 76 13 27 12  | 97\n38 49 65 13 27 12  | 76 97\n38 49 13 27 12  | 65 76 97\n38 13 27 12  | 49 65 76 97\n13 27 12  | 38 49 65 76 97\n13 12  | 27 38 49 65 76 97\n12 13 27 38 49 65 76 97  |\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_12","title":"\u7ebf\u6027\u65f6\u95f4\u6392\u5e8f","text":"<p>\u6bd4\u8f83\u6392\u5e8f\u4f9d\u8d56\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\uff0c\u6240\u4ee5\u6700\u4f18\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f1a\u4f4e\u4e8e<code>O(n*logn)</code>;\u5f52\u5e76\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f\u90fd\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e00\u6c34\u5e73\u3002\u8fd8\u6709\u4e00\u4e9b\u4e0d\u4f9d\u8d56\u5143\u7d20\u4e4b\u95f4\u7684\u6bd4\u8f83\u786e\u5b9a\u5143\u7d20\u987a\u5e8f\u7684\u6392\u5e8f\u7b97\u6cd5\u53ef\u4ee5\u8fbe\u5230\u66f4\u4f4e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f8b\u5982\uff1a\u8ba1\u6570\u6392\u5e8f\uff0c\u57fa\u6570\u6392\u5e8f\u548c\u6876\u6392\u5e8f\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_13","title":"\u8ba1\u6570\u6392\u5e8f","text":"<p>\u8ba1\u6570\u6392\u5e8f\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a \u5f00\u8f9f\u4e00\u4e2a\u4e0e\u6700\u5927\u6570\u7684\u503c\u5927\u5c0f\u4e00\u6837\u7684\u6570\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u4e2a\u6570\u5b57\u653e\u5230\u5bf9\u5e94\u7684\u6570\u7ec4\u4e2d\uff0c\u81ea\u7136\u800c\u7136\u5c31\u6709\u5e8f\u4e86\u3002\u4f8b\u5982\u5bf9<code>[9,23,2,100,34,398,5]</code>\u6392\u5e8f\uff0c\u5f00\u8f9f\u4e00\u4e2aa[399]\u7684\u6570\u7ec4\uff0c\u7136\u540e<code>\u4ee4a[9] = 1;a[23] = 1;a[2]=1;a[100] = 1; a[34] = 1;a[398] = 1;a[5] = 1</code>;\u7136\u540e\u4ece\u5934\u5f00\u59cb\u628a\u6709\u503c\u7684\u5143\u7d20\u53d6\u51fa\u6765\u5c31\u81ea\u7136\u6709\u4e86\u987a\u5e8f\u3002\u5982\u679c\u6709\u5143\u7d20\u7684\u503c\u76f8\u7b49\uff0c\u4f8b\u5982\u67092\u4e2a100\uff0c\u53ea\u9700\u8981\u8ba9a[100] = 2\u5c31\u884c\u4e86\u3002\u4e0b\u9762\u770b\u770b\u5982\u4f55\u53d6\u51fa\u6392\u5e8f\u597d\u7684\u6570\u636e\u3002 <pre><code>//\u8ba1\u6570\u6392\u5e8f\nvector&lt;int&gt; countSort(vector&lt;int&gt; &amp;v){\n    //1.\u627e\u5230\u6700\u5927\u503c\uff0c\u5f00\u8f9f\u6570\u7ec4\n    if(v.empty()) return v;\n    int maxValue = v[0];\n    for(int i=1;i&lt;v.size();i++){\n        maxValue = v[i] &gt; maxValue ? v[i] : maxValue;\n    }\n    //2. \u5f00\u8f9f\u5bf9\u5e94\u7684\u6570\u7ec4\u5e76\u8ba1\u6570\n    vector&lt;int&gt; b(maxValue + 1,0);\n    for(int i=0;i&lt;v.size();i++){\n        b[v[i]] = b[v[i]] + 1;\n    }\n    //3. \u53d6\u51fa\u7ed3\u679c\n    v.clear();\n    for(int i=0;i&lt;b.size();i++){\n        while(b[i]&gt;0){\n            v.push_back(i);\n            b[i] = b[i] - 1;\n        }\n    }\n    return v;\n}\n</code></pre> \u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u80fd\u5904\u7406\u975e\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8ba1\u6570\u6392\u5e8f\u5f53\u5904\u7406\u6709\u5927\u91cf\u91cd\u590d\u6570\u5b57\uff0c\u800c\u6570\u636e\u7684\u8303\u56f4\u4e0d\u5927\u7684\u65f6\u5019\u5f88\u6709\u7528\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_14","title":"\u57fa\u6570\u6392\u5e8f(\u6876\u6392\u5e8f)","text":"<p>\u6876\u6392\u5e8f\u662f\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(n)\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u4f46\u662f\u5b83\u4f7f\u7528\u7684\u7a7a\u95f4\u8f83\u591a\uff0c\u4e5f\u6709\u8f83\u5927\u7684\u9650\u5236\u6761\u4ef6\uff0c\u4e0d\u9002\u7528\u4e8e\u6240\u6709\u60c5\u51b5\u4e0b\u7684\u6392\u5e8f\uff0c\u53ea\u9002\u7528\u7279\u5b9a\u7684\u60c5\u51b5\u4e0b\u7684\u6392\u5e8f\u3002</p> <p>\u4e00\u79cd\u66f4\u4e00\u822c\u7684\u7b97\u6cd5\u601d\u60f3\u662f\u5206\u6876\u6cd5\u3002\u5b83\u7684\u601d\u60f3\u662f\u628a\u5143\u7d20\u6309\u7167\u4e00\u5b9a\u7684\u8303\u56f4\u5206\u522b\u653e\u5728\u5bf9\u5e94\u7684\u6876\u4e2d\uff0c\u7136\u540e\u518d\u505a\u76f8\u5e94\u7684\u5904\u7406\u3002\u5206\u7ec4\u540e\u5904\u7406\u7684\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4f4e\u5f88\u591a\uff0c\u7136\u540e\u518d\u60f3\u529e\u6cd5\u628a\u6bcf\u4e2a\u6876\u4e2d\u7684\u7ed3\u679c\u5408\u5e76\u8d77\u6765\u3002</p> <p>\u57fa\u6570\u6392\u5e8f\u4e13\u95e8\u9488\u5bf9\u7684\u662f\u6574\u6570\u7684\u6392\u5e8f\uff0c\uff08\u56e0\u4e3a\u5b57\u7b26\u4e32\u4e5f\u662f\u6574\u6570\u8868\u793a\u7684\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u7684\u6392\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6876\u6392\u5e8f\uff09\u3002\u8fd9\u91cc\u56fa\u5b9a\u7684\u628a\u6876\u5b9a\u4e3a10\u4e2a\uff0c\u5206\u522b\u5bf9\u5e94\u6570\u5b570--9.\u9996\u5148\u6309\u7167\u4e2a\u4f4d\u6570\u5b57\u5165\u6876\uff0c\u7136\u540e\u6309\u7167\u5341\u4f4d\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u767e\u4f4d\u6570\u5b57\uff0c...\u76f4\u5230\u6700\u9ad8\u4f4d\u6570\u5b57\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f\u53d6\u51fa\u6765\u5c31\u662f\u4e86\u3002\u4e0b\u9762\u4ee5<code>[521 310 72 373 15 546 385 856 187 147]</code>\u4e3a\u4f8b\u5b50\u8bf4\u660e\u5177\u4f53\u7684\u8fc7\u7a0b\u3002</p> <pre><code>// \u8fd4\u56dea\u7684\u7b2ci\u4f4d\u6570\u5b57\uff0c\n// i = 0 \u4e2a\u4f4d\n// i = 1 \u5341\u4f4d\nint gg(int a,int i){\n    int re;\n    while(i&gt;=0){\n        re = a % 10;\n        a = a / 10;\n        i--;\n    }\n    return re;\n}\nvector&lt;int&gt; baseSort(vector&lt;int&gt; &amp;v){\n    if(v.empty()) return v;\n    int maxValue = v[0];\n    //\u627e\u5230\u6700\u5927\u503c\n    for(int i=0;i&lt;v.size();i++){\n        maxValue = v[i] &gt; maxValue ? v[i] : maxValue;\n    }\n    int high = 0;  // \u83b7\u5f97\u6700\u9ad8\u4f4d\uff0c\u9700\u8981\u5faa\u73af\u8fd9\u4e48\u591a\u6b21\n    while(maxValue){\n        maxValue /= 10;\n        high ++;\n    }\n    // i = 0 \u6309\u7167\u4e2a\u4f4d\u5165\u6876\uff0c\u6536\u96c6\n    // i = 1 \u6309\u7167\u5341\u4f4d\u5165\u6876\uff0c\u6536\u96c6\n    // ...\n    for(int i=0;i&lt;high;i++){\n        vector&lt;vector&lt;int&gt;&gt; t(10,vector&lt;int&gt;(0));\n        // \u5165\u6876\u64cd\u4f5c\n        for(int j=0;j&lt;v.size();j++){\n            t[ gg(v[j],i) ].push_back(v[j]);\n        }\n        // \u4ece0\u53f7\u6876\u5f00\u59cb\u6309\u7167\u987a\u5e8f\u6536\u96c6\n        v.clear();\n        for(auto a : t){\n            for(auto b : a){\n                v.push_back(b);\n            }\n        }\n    }\n    return v;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_15","title":"\u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f<code>o(nlogn)</code>,\u5728\u6570\u636e\u6ca1\u6709\u7279\u6b8a\u7684\u89c4\u5f8b\u7684\u60c5\u51b5\u4e0b\uff0c\u5feb\u901f\u6392\u5e8f\u662f\u9996\u9009\u7684\u6392\u5e8f\u65b9\u6cd5\u3002\u5b83\u7684\u601d\u60f3\u4e5f\u7ecf\u5e38\u7528\u6765\u51fa\u5404\u79cd\u7b97\u6cd5\u9898\u76ee\u3002</p> <p>\u5feb\u901f\u6392\u5e8f\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20\uff0c \u901a\u8fc7\u6bd4\u8f83\u5176\u4ed6\u5143\u7d20\u548c\u8be5\u5143\u7d20\u7684\u5927\u5c0f\u79fb\u52a8\u4f4d\u7f6e\uff0c\u6700\u7ec8\u628a\u8be5\u5143\u7d20\u79fb\u52a8\u5230\u6392\u597d\u5e8f\u4e4b\u540e\u5b83\u5e94\u8be5\u5904\u4e8e\u7684\u4f4d\u7f6e\u4e0a\u3002</p> <p>\u5feb\u901f\u6392\u5e8f\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u505a\u5230 nlogn \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5feb\u901f\u6392\u5e8f\u7684\u5173\u952e\u5c31\u662f\u5b9e\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u901a\u5e38\u53eb\u505a <code>partition</code></p> <p>\u5728 partiton \u4e2d\uff0c i \u6307\u5411\u7684\u59cb\u7ec8\u662f\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c i + 1 \u53ef\u80fd\u662f j, \u4e5f\u53ef\u80fd\u662f\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019 i + 1 == j, \u4e00\u65e6\u9047\u5230\u5927\u4e8e\u57fa\u51c6\u7684\u503c\uff0c j++ \u800c i \u4e0d\u52a8\uff0c i \u548c j \u62c9\u5f00\u8ddd\u79bb\uff0c \u4e0b\u4e00\u6b21\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u51fa\u73b0\u7684\u65f6\u5019\uff0c \u4ea4\u6362\u7684\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\u548c j.</p> <p>\u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\uff0c i \u6307\u5411\u7684\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8ebase\u7684\u503c\uff0c\u6240\u4ee5\u53ea\u8981\u628a i + 1 \u548c base \u4ea4\u6362\uff0c base \u5c31\u653e\u5728\u4e86\u6392\u5e8f\u4e4b\u540e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002</p> <p>\u8be5\u51fd\u6570\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u57fa\u51c6\u5143\u7d20\u662f\u7b2c\u51e0\u5927(\u5c0f)\u3002</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#c","title":"C\u5b9e\u73b0","text":"<pre><code>// \u5feb\u901f\u6392\u5e8f\u7684\u4e00\u8d9f\u8fc7\u7a0b\nint partition(int *arr, int left, int right)\n{\n    int base = arr[right]; // \u9009\u62e9\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u57fa\u51c6\u5143\u7d20\n    int i = left - 1;\n    // \u904d\u5386[left, right-1], \u6bcf\u4e00\u4e2a\u90fd\u548c\u57fa\u51c6\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u57fa\u51c6\uff0c\u5c31\u4ea4\u6362\n    for (int j = left; j &lt; right; j++) {\n        if (arr[j] &lt;= arr[base]) {\n            i = i + 1;\n            swap(arr, i, j);\n        }\n    }\n    swap(arr, i + 1, right);\n    return i + 1;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#python","title":"Python \u5b9e\u73b0","text":"<pre><code>def partition(array, begin, end):\n    base = array[end]\n    i = begin - 1\n\n    for j in range(begin, end):\n        if array[j] &lt; base:\n            i += 1\n            array[i], array[j] = array[j], array[i]\n    array[i + 1], array[end] = array[end], array[i + 1]\n    return i + 1\n\n# \u9012\u5f52\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f\ndef quicksort(array, begin, end):\n    if begin &gt;= end:\n        return\n    mid = partition(array, begin, end)\n    quicksort(array, begin, mid - 1)\n    quicksort(array, mid + 1, end)\n    return array\n\n# \u975e\u9012\u5f52\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f\ndef quickquicksort(array):\n    begin = 0\n    end = len(array) - 1\n    stack = [(begin, end)]\n    while len(stack) &gt; 0:\n        begin, end = stack.pop()\n        if begin &gt;= end:\n            continue\n        mid = partition(array, begin, end)\n        stack.append((begin, mid - 1))\n        stack.append((mid + 1, end))\n    return array\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_16","title":"\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#k","title":"\u7b2cK\u5c0f\u7684\u5143\u7d20","text":"<p>\u5982\u679c\u67e5\u627e\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u53ea\u9700\u8981\u904d\u5386\u4e00\u904d\u6570\u7ec4\u5373\u53ef\u3002\u5982\u679c\u662f\u7b2c2\u5c0f\u7684\uff0c\u9996\u5148\u904d\u5386\u4e00\u904d\u627e\u5230\u6700\u5c0f\u7684\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\u5c31\u53ef\u4ee5\u627e\u5230\u7b2c\u4e8c\u5c0f\u7684\u4e86\u3002\u6240\u4ee5\uff0c\u6734\u7d20\u7684\u89e3\u6cd5\u9700\u8981\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(kn),\u4e0ek\u6709\u5173\u7cfb\u3002</p> <p>\u5feb\u901f\u6392\u5e8f<code>partition</code>\u51fd\u6570\u7684\u7279\u70b9\u662f\u6bcf\u6b21\u80fd\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u6392\u597d\u5e8f\u4e4b\u540e\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e\u3002\u5047\u8bbepartition(0,n-1) = i, \u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8fd9\u6837\u7684\u4fe1\u606f\uff0c[0..i-1]\u4f4d\u7f6e\u7684\u5143\u7d20\u90fd\u6bd4A[i]\u5c0f\uff0c\u800ci\u540e\u9762\u7684\u5143\u7d20\u90fd\u6bd4A[i]\u5927\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u6bcf\u6b21\u8c03\u7528<code>partition</code>\u90fd\u53ef\u4ee5\u53bb\u6389\u4e00\u534a\u5143\u7d20\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u80fd\u964d\u5230o(n)\u4e86\u3002</p> <p>lintcode</p> <pre><code>int Kth(vector&lt;int&gt; &amp;v, int k){\n    if(v.empty() || k &lt;= 0) return -1;\n    int begin = 0;\n    int end = v.size() - 1;\n    while(true){\n         int i = partition(v,begin,end);\n         if(i+1 == k) return v[i];\n         if(i+1 &lt; k){\n            begin = i + 1;\n         }else{\n            end = i - 1;\n         }\n    }\n}\n</code></pre> <p>leetcode</p> <pre><code>int partition(vector&lt;int&gt; &amp;v,int i, int j){\n    if(i &gt; j) return -1;\n    int tmp;\n    int start = i;\n    int end = j;\n    bool base = true; // \u6307\u793a i \u662f\u5426\u6307\u5411base \u5143\u7d20\uff0c\u5982\u679ci \u4e0d\u6307\u5411base\u5143\u7d20\uff0c\u5219j\u80af\u5b9a\u6307\u5411base\u5143\u7d20\u3002\n    while(i &lt; j){\n        if(v[i] &gt; v[j] &amp;&amp; base){\n            tmp = v[j];\n            v[j] = v[i];\n            v[i] = tmp;\n            i = i + 1;\n            base = false;\n        }else if(v[i] &gt; v[j] &amp;&amp; !base){\n            tmp = v[j];\n            v[j] = v[i];\n            v[i] = tmp;\n            j = j - 1;\n            base = true;\n        }else if(base){\n            j--;\n        }else{\n            i++;\n        }\n    }\n    return i;\n}\n\nint kthLargestElement(vector&lt;int&gt;&amp; nums, int k) {\n    int left = 0, right = nums.size() - 1, len = nums.size();\n    while (true) {\n        int pos = partition(nums, left, right);\n        if (len - pos == k ) return nums[pos];\n        if (len - pos &lt; k) right = pos - 1;\n        else left = pos + 1;\n    }\n    return -1;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_17","title":"\u67e5\u627e\u4e2d\u4f4d\u6570","text":"<p>\u4e00\u822c\u7684\u505a\u6cd5\u662f\u6392\u5e8f\uff0c\u8fd4\u56de\u4e2d\u95f4\u7684\u6570\u5b57\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fo(nlogn). \u5176\u5b9e\u8fd8\u6709o(n)\u7684\u7b97\u6cd5\uff0c\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u4e5f\u662f\u5229\u7528\u4e86\u5feb\u901f\u6392\u5e8f\u7684partition\u51fd\u6570\u3002</p> <p>lintcode</p> <pre><code>int median(vector&lt;int&gt; &amp;nums) {\n    if(nums.empty()) return -1;\n    int len = nums.size();\n    return kthLargestElement(nums,len / 2 + 1);\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_18","title":"\u5806\u6392\u5e8f","text":"<p>\u5806\u6392\u5e8f\u7684\u539f\u7406\u662f\u5148\u7528\u6240\u6709\u5143\u7d20\u5efa\u5806\uff0c \u7136\u540e\u6bcf\u6b21\u53d6\u5806\u9876\u5143\u7d20\u653e\u5728\u6700\u540e\uff0c\u8c03\u6574\u5806\uff0c \u7136\u540e\u518d\u53d6\u5806\u9876\u5143\u7d20\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u5230\u5806\u4e3a\u7a7a\u3002</p> <p>\u56e0\u4e3a\u8c03\u6574\u5806\u53ea\u9700\u8981\u6d88\u8017 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5806\u6392\u5e8f\u5171\u9700\u8981 nlogn \u7684\u65f6\u95f4\u3002</p> <p>\u5806\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0 \u5efa\u7acb\u5806 \u548c \u8c03\u6574\u5806 \u7684\u65b9\u6cd5\u3002</p> <pre><code>// \u8c03\u6574\u5806\u4e2d\u7684\u8282\u70b9 i\uff0c \u4f7f\u5f97\u91cd\u65b0\u6ee1\u8db3\u5927\u9876\u5806\nvoid heapify(int *arr, int size, int i)\n{\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    int large = i;\n    if (left &lt; size &amp;&amp; arr[left] &gt; arr[large]) {\n        large = left;\n    }\n    if (right &lt; size &amp;&amp; arr[right] &gt; arr[large]) {\n        large = right;\n    }\n    // \u5982\u679c\u627e\u5230\u5b50\u8282\u70b9\u4e2d\u6709\u8f83\u5927\u7684\uff0c\u548c\u90a3\u4e2a\u8f83\u5927\u7684\u4ea4\u6362\n    if (large != i) {\n        swap(arr, i, large);\n        heapify(arr, size, large);\n    }\n    return;\n}\n\n// \u5efa\u7acb\u5806\nvoid build_heap(int *arr, int size)\n{\n    // \u6570\u7ec4\u540e\u534a\u90e8\u5206\u662f\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u7528\u8c03\u6574\n    // \u5bf9\u6bcf\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\u8c03\u6574\u4e00\u904d\u5806\uff0c\u4f7f\u5806\u6ee1\u8db3\u6761\u4ef6\n    int middle = size / 2;\n    for (int i = middle; i &gt;= 0; i++) {\n        heapify(arr, size, i);\n    }\n    return;\n}\n\nvoid heap_sort(int *arr, int size)\n{\n    int end = size;\n    build_heap(arr, end);\n    while (end &gt; 0) {\n        // \u5806\u9876\u6700\u5927\u7684\u503c\u653e\u5728\u662f\u6700\u540e\uff0c\u5806\u5143\u7d20\u4e2a\u6570\u51cf\u4e00\n        swap(arr, 0, end - 1);\n        // \u5806\u9876\u5143\u7d20\u6362\u8fc7\uff0c\u8c03\u6574\u5b83\n        heapify(arr, end - 1, 0);\n        end--;\n    }\n    return;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_19","title":"\u6392\u5e8f\u65b9\u6cd5\u6bd4\u8f83","text":"<p>\u8bf4\u660e\uff1a</p> <p>\u5f53\u539f\u8868\u6709\u5e8f\u6216\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u548c\u5192\u6ce1\u6392\u5e8f\u5c06\u5927\u5927\u51cf\u5c11\u6bd4\u8f83\u6b21\u6570\u548c\u79fb\u52a8\u8bb0\u5f55\u7684\u6b21\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u964d\u81f3O\uff08n\uff09\uff1b</p> <p>\u800c\u5feb\u901f\u6392\u5e8f\u5219\u76f8\u53cd\uff0c\u5f53\u539f\u8868\u57fa\u672c\u6709\u5e8f\u65f6\uff0c\u5c06\u8715\u5316\u4e3a\u5192\u6ce1\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u63d0\u9ad8\u4e3aO\uff08n2\uff09\uff1b</p> <p>\u539f\u8868\u662f\u5426\u6709\u5e8f\uff0c\u5bf9\u7b80\u5355\u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u548c\u57fa\u6570\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5f71\u54cd\u4e0d\u5927\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/#_20","title":"\u6392\u5e8f\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u4e2d\u7b49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/","title":"\u6808","text":"<p>\u6808\u662f\u4e00\u79cd\u5b9e\u73b0\u4e86\u540e\u8fdb\u5148\u51fa\u7684\u89c4\u5219\u7684\u6570\u636e\u7ed3\u6784\u3002C++\u91cc\u9762\u6709\u5b9e\u73b0<code>stack</code>.\u4f7f\u7528\u7684\u65f6\u5019<code>include &lt;stack&gt;</code>,\u652f\u6301\u7684\u64cd\u4f5c\u6709<code>push(),pop(),top()</code>;\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>pop</code>\u7684\u4f5c\u7528\u662f\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u800c\u4e0d\u4f1a\u8fd4\u56de\u6808\u9876\u5143\u7d20\uff0c\u5b9e\u73b0\u8fd4\u56de\u6808\u9876\u5143\u7d20\u5e76\u5f39\u51fa\u7684\u64cd\u4f5c\u5e94\u8be5\u662f<code>int a = s.top(); s.pop();</code>.</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_2","title":"\u6808\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u4e2d\u7b49 456. 132\u6a21\u5f0f \u4e2d\u7b49 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 \u4e2d\u7b49 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u4e2d\u7b49 LintCode\u9898\u76ee \u96be\u5ea6 423. \u6709\u6548\u7684\u62ec\u53f7\u5e8f\u5217 424. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 370. \u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f 368. \u8868\u8fbe\u5f0f\u6c42\u503c lintcode"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","title":"\u6811\u72b6\u6570\u7ec4","text":"<p>\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u80fd\u591f\u5feb\u901f\u5b8c\u6210\u4e0b\u672f\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ul> <li>\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\u5168\u4e3a0\u7684\u6570\u5217\uff0ca1,a2,a3,a4,...an</li> <li>\u7ed9\u5b9ai,\u8ba1\u7b97a1+a2+...+ai</li> <li>\u7ed9\u5b9ai\u548cx,\u8ba1\u7b97ai = ai + x;</li> </ul> <p>\u4e00\u53e5\u8bdd\u603b\u7ed3\uff0c\u5c31\u662f\u65e2\u8981\u5feb\u901f\u6c42\u89e3\u533a\u95f4\u548c\uff0c\u53c8\u8981\u5feb\u901f\u66f4\u65b0\u533a\u95f4\u548c\u3002</p> <p>\u4e0a\u9762\u63d0\u5230\u7684\u7ebf\u6bb5\u6811\u5176\u5b9e\u5df2\u7ecf\u6ee1\u8db3\u4e86\u4e0a\u9762\u7684\u8981\u6c42\uff0c\u53ea\u4e0d\u8fc7\u6709\u4e9b(\u5927\u6750\u5c0f\u7528\u4e86)\u3002\u53ef\u4ee5\u7528\u66f4\u7b80\u5355\u7684\u7ed3\u6784\u5b9e\u73b0\u8fd9\u4e2a\u8981\u6c42\u3002</p> <p></p> <p>\u628a\u7ebf\u6bb5\u6811\u6240\u6709\u7684\u53f3\u8282\u70b9\u53bb\u6389\uff0c\u53ea\u5269\u4e0b\u5de6\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u6295\u5c04\u5230\u6700\u4e0b\u9762\u4e00\u884c\uff0c\u5c31\u5f62\u6210\u4e86\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u3002\u4f8b\u59828\u4e2a\u5143\u7d20\u7684\u6811\u72b6\u6570\u7ec4\u7684\u7ed3\u6784\u662f\uff1a</p> A[1] A[2] A[3] A[4] A[5] A[6] A[7] A[8] 1 [1,2] 3 [1,4] 5 [5,6] 7 [1,8] 0001 0010 0011 0100 0101 0110 0111 1000"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_2","title":"\u6c42\u548c\u64cd\u4f5c","text":"<p>\u6709\u4e86\u4e0a\u9762\u7684\u7ed3\u6784\uff0c\u5982\u679c\u60f3\u6c42<code>c[3]+c[4]+c[5]</code>\u5c31\u662f<code>A[4]-A[2]+A[5]</code>; \u5982\u679c\u60f3\u6c42<code>c[4]</code>,\u5c31\u662f<code>A[4]-A[3]-A[2]</code>; \u603b\u4e4b\uff0c\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u548c\u603b\u53ef\u4ee5\u5728\u5e38\u6570\u65f6\u95f4\u5185\u901a\u8fc7\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u503c\u6c42\u51fa\u6765\u3002\u6811\u72b6\u6570\u7ec4\u53ef\u4ee5\u4f7f\u7528\u4f4d\u6765\u4fdd\u5b58\uff0c\u901a\u8fc7\u5bfb\u627e\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b80\u5355\u7684\u4f4d\u64cd\u4f5c\u5b9e\u73b0\u6811\u72b6\u6570\u7ec4\u7684\u6c42\u548c\u548c\u66f4\u65b0\u3002\u4e0a\u9762\u8868\u683c\u7684\u6700\u540e\u4e00\u884c\u662f\u5bf9\u6811\u72b6\u6570\u7ec4A\u8fdb\u884c\u7684\u4e8c\u8fdb\u5236\u7684\u7f16\u7801\u3002 \u6c42\u6811\u72b6\u6570\u7ec4\u7684\u524di\u9879\u548c\uff1a</p> i \u8868\u8fbe\u5f0f \u4e8c\u8fdb\u5236\u8868\u793a 1 A[1] 0001 2 A[2] 0010 3 A[3]+A[2] 0011+0010 4 A[4] 0100 5 A[5]+A[4] 0101+0100 6 A[6]+A[4] 0110+0100 7 A[7]+A[6]+A[4] 0111+0110+0100 8 A[8] 1000 <p>\u4ece\u4e8c\u8fdb\u5236\u5f53\u4e2d\u5bfb\u627e\u89c4\u5f8b\uff0c\u6c42\u524di\u9879\uff1a</p> <ol> <li>\u521d\u59cb\u5316sum=0;</li> <li>\u4ece\u6811\u72b6\u6570\u7ec4A[i]\u5f00\u59cb\uff0c\u628aA[i]\u52a0\u5165\u5230\u7ed3\u679c\u4e2d\u53bb\u3002\u7136\u540e\u4ecei\u4e2d\u51cf\u53bbi\u6700\u4f4e\u4f4d1\u5bf9\u5e94\u7684\u6570\u5b57\u3002i\u7684\u6700\u4f4e\u4f4d\u76841\u5bf9\u5e94\u7684\u6570\u5b57\u7684\u503c\u7684\u5927\u5c0f\u53ef\u4ee5\u7528<code>i&amp;(-i)</code>\u6c42\u5f97\u3002</li> <li>\u76f4\u5230i\u7684\u7ed3\u679c\u4e3a0\u505c\u6b62\u3002</li> </ol> <p>\u6309\u7167\u4e0a\u9762\u7684\u6b65\u9aa4\u5206\u6790\u4e0a\u9762\u8868\u683c\u4e2d\u7684\u6bcf\u4e00\u884c\u7684\u6c42\u89e3\uff1a</p> <ul> <li>0001\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57\uff081\uff09\u4e4b\u540e\u4e3a0\uff0c\u6240\u4ee5\u6700\u540e\u7ed3\u679c\u662fA[1]</li> <li>0010\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(2)\u4e4b\u540e\u4e3a0\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[2]</li> <li>0011\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(1)\u4e4b\u540e\u4e3a(0010,A[2]),\u800c0010\u51cf\u53bb\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(2)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[3]+A[2]</li> <li>0100\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(4)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[4]</li> <li>0101\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(1)\u4e4b\u540e\u4e3a0100,0100\u51cf\u53bb\u6700\u540e\u4ee5\u4e3a\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u5b57(4)\u4e4b\u540e\u4e3a0,\u6240\u4ee5\u6700\u540e\u7684\u7ed3\u679c\u662fA[5]+A[4]</li> <li>0110 = 0110 + 0100 = A[6] + A[4]</li> <li>0111 = 0111 + 0110 + 0100 + A[7] + A[6] + A[4]</li> <li>1000 = 1000 = A[8]</li> </ul> <p>\u4e0a\u9762\u5c31\u662fBIT\u6570\u7ec4\u6c42\u548c\u7684\u8be6\u7ec6\u89e3\u91ca\uff0c\u4e86\u89e3\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5728\u77e5\u9053\u5982\u4f55\u6c42\u89e3\u4e00\u4e2a\u6570\u5b57\u6700\u4f4e\u4f4d1\u5bf9\u5e94\u7684\u503c\uff0c\u5b9e\u73b0BIT\u7684\u6c42\u548c\u5e94\u8be5\u4e0d\u96be\u3002\u4e0b\u9762\u770b\u770bBIT\u5982\u4f55\u66f4\u65b0\u3002 \u5047\u5982\u6211\u4eec\u60f3\u66f4\u65b0c[2]\u7684\u503c\uff0c\u90a3\u4e48A\u4e2d\u6240\u6709\u5305\u542bc[2]\u7684\u503c\u90fd\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u5230\u5e95\u54ea\u4e9b\u503c\u5305\u542bc[2]\u5462\uff1f\u4ece\u4e0a\u9762\u7684\u8868\u683c\u6211\u4eec\u770b\u51fa\uff0c\u5305\u542bc[2]\u7684A\u5143\u7d20\u6709A[2],A[4],A[8];\u4e0b\u9762\u518d\u5217\u4e00\u4e2a\u8868\u683c\uff0c\u663e\u793a\u6bcf\u4e2a\u5143\u7d20\u7684\u66f4\u65b0\u90fd\u6d89\u53ca\u54ea\u4e9b\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u6bd4\u8f83\u5bb9\u6613\u627e\u5230\u5176\u4e2d\u7684\u89c4\u5f8b\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_3","title":"\u66f4\u65b0\u64cd\u4f5c","text":"\u66f4\u65b0\u7684\u503c \u6d89\u53ca\u7684BIT \u4e8c\u8fdb\u5236\u8868\u793a c[1] A[1],A[2],A[4],A[8] 0001,0010,0100,1000 c[2] A[2],A[4],A[8] 0010,0100,1000 c[3] A[3],A[4],A[8] 0011,0100,1000 c[4] A[4],A[8] 0100,1000 c[5] A[5],A[6],A[8] 0101,0110,1000 c[6] A[6],A[8] 0110,1000 c[7] A[7],A[8] 0111,1000 c[8] A[8] 1000 <p>\u53ef\u4ee5\u770b\u5230\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u548c\u6c42\u548c\u7684\u65f6\u5019\u987a\u5e8f\u4f3c\u4e4e\u76f8\u53cd\uff0c\u89c4\u5f8b\u662f\uff1a\u5982\u679c\u8981\u66f4\u65b0c[i],\u90a3\u4e48\u5c31\u4ecei\u5f00\u59cb\uff0c\u66f4\u65b0A[i]\u4e4b\u540e\u5c06i\u66f4\u65b0\u4e3a<code>i = i+(i&amp;(-i))</code>,\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a\u6b62\u3002\u56e0\u4e3a\u65e0\u8bba\u66f4\u65b0\u54ea\u4e2a\u5143\u7d20\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u6240\u6709\u503c\u7684\u548c\uff0c\u6240\u4ee5\u5fc5\u987b\u66f4\u65b0\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002<code>i&amp;(-i)</code>\u662f\u5f97\u5230i\u7684\u6700\u540e\u4e00\u4f4d\u4e8c\u8fdb\u52361\u5bf9\u5e94\u7684\u6570\u503c\u7684\u5927\u5c0f\uff0c\u7136\u540e\u52a0\u5230i\u4e0a\uff0c\u5bf9\u6bd4\u4e0a\u9762\u7684\u8868\u683c\u3002i\u7684\u66f4\u65b0\u60c5\u51b5\u662f\uff1a</p> <ul> <li>0001(1)-0001+0001(2)-0010+0010(4)-0100+0100(8)=1000 \u505c\u6b62</li> <li>0010(2)-0010+0010(4)-0100+0100(8)=1000 \u505c\u6b62</li> <li>0011(3)-0011+0001(4)-0100+0100(8)=1000 \u505c\u6b62</li> <li>0100(4)-0100+0100(8)=1000 \u505c\u6b62</li> <li>0101(5)-0101+0001(6)-0110+0010(8)=1000 \u505c\u6b62</li> <li>0110(6)-0110+0010(8)=1000 \u505c\u6b62</li> <li>0111(7)-0111+0001(8)=1000 \u505c\u6b62</li> <li>1000(8) = 1000 \u505c\u6b62</li> </ul> <p>\u6811\u72b6\u6570\u7ec4\u7684\u5b9e\u73b0\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nclass BIT{\npublic:\n    vector&lt;int&gt; v;\n    int n;\n    BIT(){}\n    // \u6784\u5efan\u4e2a\u5143\u7d20\u7684\u7a7a\u6811\u72b6\u6570\u7ec4\n    BIT(int num){\n        n = num+1; // v[0]\u4e0d\u7528\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\u3002\n       for(int i=0;i&lt;n;i++){\n           v.push_back(0);\n       }\n    }\n    //\u6c42\u524di\u9879\u7684\u548c\n    int sum(int i){\n        int s = 0;\n        while(i&gt;0){\n            s += v[i];\n            i -= i &amp; (-i);\n        }\n        return s;\n    }\n    //\u7b2ci \u9879\u52a0\u4e0ax\n    void add(int i,int x){\n        while(i&lt;=n){\n           v[i] += x;\n            i += i&amp;(-i);\n        }\n    }\n    //\u6839\u636e\u4f20\u5165\u7684\u6570\u7ec4c\u6784\u5efa\u5b83\u7684\u6811\u72b6\u6570\u7ec4\n    void create(vector&lt;int&gt; &amp;c){\n        for(int i=0;i&lt;c.size();i++){\n            add(i+1,c[i]);\n        }\n    }\n\n};\nvoid printV(vector&lt;int&gt; a){\n    for(auto aa:a){\n        cout&lt;&lt;aa&lt;&lt;\" \";\n    }\n    cout&lt;&lt;endl;\n}\nint main() {\n    vector&lt;int&gt; c = {3,7,6,5,4,2,8,1};\n    BIT *b = new BIT(c.size());\n    b-&gt;create(c);\n    printV(b-&gt;v);\n    b-&gt;add(8,10);\n    printV(b-&gt;v);\n    b-&gt;add(1,1);\n    printV(b-&gt;v);\n    return 0;\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>0 3 10 6 21 4 6 8 36\n0 3 10 6 21 4 6 8 46\n0 4 11 6 22 4 6 8 47\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6811\u72b6\u6570\u7ec4\u4ec5\u4ec5\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6c42\u548c\u548c\u66f4\u65b0\uff0c\u6bd4\u7ebf\u6bb5\u6811\u7684\u5f00\u9500\u8981\u5c11\u5f88\u591a\uff0c\u6240\u4ee5\uff0c\u4e00\u4e9b\u80fd\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e0d\u5b9c\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002</p> <p>\u53c2\u8003\u535a\u6587\uff1a</p> <p>http://www.cnblogs.com/wuwangchuxin0924/p/5921130.html http://www.cnblogs.com/GeniusYang/p/5756975.html</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_4","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u4e2d\u7b49 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570   \u56f0\u96be"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/","title":"\u7ebf\u6bb5\u6811[\u533a\u95f4\u6811]","text":"<p>\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4ed6\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e86\u4e24\u4e2a\u989d\u5916\u7684\u5c5e\u6027<code>start</code>\u548c<code>end</code>\u7528\u4e8e\u8868\u793a\u8be5\u8282\u70b9\u6240\u4ee3\u8868\u7684\u533a\u95f4\u3002start\u548cend\u90fd\u662f\u6574\u6570\uff0c\u5e76\u6309\u7167\u5982\u4e0b\u7684\u65b9\u5f0f\u8d4b\u503c:</p> <p>\u6839\u8282\u70b9\u7684 <code>start</code> \u548c <code>end</code> \u7531 <code>build</code> \u65b9\u6cd5\u6240\u7ed9\u51fa\u3002 \u5bf9\u4e8e\u8282\u70b9 A \u7684\u5de6\u513f\u5b50\uff0c\u6709 <code>start=A.left, end=(A.left + A.right) / 2</code>\u3002 \u5bf9\u4e8e\u8282\u70b9 A \u7684\u53f3\u513f\u5b50\uff0c\u6709 <code>start=(A.left + A.right) / 2 + 1, end=A.right</code>\u3002 \u5982\u679c start \u7b49\u4e8e end, \u90a3\u4e48\u8be5\u8282\u70b9\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u518d\u6709\u5de6\u53f3\u513f\u5b50\u3002 \u5b9e\u73b0\u4e00\u4e2a build \u65b9\u6cd5\uff0c\u63a5\u53d7 start \u548c end \u4f5c\u4e3a\u53c2\u6570, \u7136\u540e\u6784\u9020\u4e00\u4e2a\u4ee3\u8868\u533a\u95f4<code>[start, end]</code>\u7684\u7ebf\u6bb5\u6811\uff0c\u8fd4\u56de\u8fd9\u68f5\u7ebf\u6bb5\u6811\u7684\u6839\u3002</p> <p>\u7ebf\u6bb5\u6811(\u53c8\u79f0\u533a\u95f4\u6811), \u662f\u4e00\u79cd\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u4ed6\u53ef\u4ee5\u652f\u6301\u8fd9\u6837\u7684\u4e00\u4e9b\u64cd\u4f5c:</p> <ul> <li>\u67e5\u627e\u7ed9\u5b9a\u7684\u70b9\u5305\u542b\u5728\u4e86\u54ea\u4e9b\u533a\u95f4\u5185</li> <li>\u67e5\u627e\u7ed9\u5b9a\u7684\u533a\u95f4\u5305\u542b\u4e86\u54ea\u4e9b\u70b9</li> </ul> <p>\u6837\u4f8b: \u6bd4\u5982\u7ed9\u5b9astart=1, end=6\uff0c\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u4e3a\uff1a</p> <pre><code>               [1,  6]\n             /        \\\n      [1,  3]           [4,  6]\n      /     \\           /     \\\n   [1, 2]  [3,3]     [4, 5]   [6,6]\n   /    \\           /     \\\n[1,1]   [2,2]     [4,4]   [5,5]\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_2","title":"\u7ebf\u6bb5\u6811\u7ed3\u6784\u7684\u5b9a\u4e49","text":"<pre><code>Definition of SegmentTreeNode:\n  class SegmentTreeNode {\n  public:\n      int start, end;\n      SegmentTreeNode *left, *right;\n      SegmentTreeNode(int start, int end) {\n          this-&gt;start = start, this-&gt;end = end;\n          this-&gt;left = this-&gt;right = NULL;\n      }\n  }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_3","title":"\u7ebf\u6bb5\u6811\u7684\u6784\u9020","text":"<pre><code>class Solution {\npublic:\n    /**\n     *@param start, end: Denote an segment / interval\n     *@return: The root of Segment Tree\n     */\n    SegmentTreeNode * build(int start, int end) {\n         // write your code here\n        if(start &gt; end)\n            return nullptr;\n        SegmentTreeNode *node = new SegmentTreeNode(start,end);\n        if( start &lt; end ) {\n            node-&gt;left = build(node-&gt;start,(node-&gt;start+node-&gt;end)/2);\n            node-&gt;right = build((node-&gt;start+node-&gt;end)/2+1,node-&gt;end);\n        }\n        return node;\n    }\n};\n</code></pre> <p>\u81ea\u5e95\u5411\u4e0a\u6784\u9020\u7ebf\u6bb5\u6811online judge</p> <pre><code> SegmentTreeNode * build(vector&lt;int&gt; A) {\n        // write your code here\n        if (A.size() &lt;= 0) {\n            return nullptr;\n        }\n        return build(0, A.size() - 1, A);\n    }\n\n    SegmentTreeNode * build(int start, int end, vector&lt;int&gt; &amp;nums) {\n        // write your code here\n        if (start &gt; end) {\n            return nullptr;\n        }\n        SegmentTreeNode *root = new SegmentTreeNode(start, end, 0);\n        if (start != end) {\n            root-&gt;left = build(start, (start + end) / 2, nums);\n            root-&gt;right = build((start + end) / 2 + 1, end, nums);\n            root-&gt;max = max(root-&gt;left-&gt;max, root-&gt;right-&gt;max);\n        }\n        else {\n            root-&gt;max = nums[start];\n        }\n        return root;\n    }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_4","title":"\u7ebf\u6bb5\u6811\u7684\u67e5\u8be2","text":"<pre><code>class Solution {\npublic:\n    /**\n     *@param root, start, end: The root of segment tree and\n     *                         an segment / interval\n     *@return: The maximum number in the interval [start, end]\n     */\n    int query(SegmentTreeNode *root, int start, int end) {\n        // write your code here\n        // \u533a\u95f4\u6bd4\u6839\u533a\u95f4\u8fd8\u5927\u7684\u60c5\u51b5\n        if(start &lt;= root-&gt;start &amp;&amp; end &gt;= root-&gt;end){\n            return root-&gt;max;\n        }\n        //\u5982\u679c\u5de6\u8fb9\u754c\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u53c8\u8fb9\u754c  \u6216\u8005  \u53f3\u8fb9\u754c\u5df2\u7ecf\u5927\u4e8e\u7b49\u4e8e\u5de6\u8fb9\u754c\uff0c \u5219\u4e0d\u5b58\u5728\u7684\u8fd9\u6837\u7684\u533a\u57df\n        //\u8fd4\u56de\u4e0d\u5f71\u54cd\u8ba1\u7b97\u6700\u5927\u503c\u7684\u6570\u5b57\n        if(start&gt;root-&gt;end || end &lt; root-&gt;start){\n            return 0;\n        }\n\n        int ll = query(root-&gt;left,start,end);\n        int rr = query(root-&gt;right,start,end);\n        return max(ll,rr);\n\n    }\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_5","title":"\u7ebf\u6bb5\u6811\u7684\u66f4\u65b0","text":"<pre><code>void modify(Node *root, int idx){\n        if (root == NULL)\n        {\n            return;\n        }\n        if (root-&gt;start == root-&gt;end &amp;&amp; root-&gt;start == idx)\n        {\n            ++(root-&gt;cnt);\n            return;\n        }\n        int mid = root-&gt;start + ((root-&gt;end - root-&gt;start) &gt;&gt; 1);\n        if (mid &gt;= idx)\n        {\n            modify(root-&gt;left, idx);\n        }\n        else\n        {\n            modify(root-&gt;right, idx);\n        }\n        root-&gt;cnt = root-&gt;left-&gt;cnt + (root-&gt;right ? root-&gt;right-&gt;cnt : 0);\n    }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_6","title":"\u7ebf\u6bb5\u6811\u7684\u5e94\u7528","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_7","title":"\u7edf\u8ba1\u524d\u9762\u6bd4\u81ea\u5df1\u5927\u7684\u6570\u6709\u591a\u5c11\u4e2a","text":"<p>\u4f7f\u7528\u7ebf\u6bb5\u6811\u5b58\u50a8\u6bcf\u4e2a\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nclass Node\n{\npublic:\n    Node(int _start, int _end) :\n            start(_start), end(_end), left(nullptr), right(nullptr),\n            cnt(0) {}\n\n    int start, end;\n    Node *left, *right;\n    int cnt;\n};\n\nNode *build(int start, int end)\n{\n    if (start &gt; end)\n    {\n        return NULL;\n    }\n    if (start == end)\n    {\n        return new Node(start, end);\n    }\n\n    int mid = start + ((end - start) &gt;&gt; 1);\n\n    Node *root = new Node(start, end);\n    root-&gt;left = build(start, mid);\n    root-&gt;right = build(mid + 1, end);\n\n    return root;\n}\n\nvoid modify(Node *root, int idx){\n    if (root == NULL)\n    {\n        return;\n    }\n\n    if (root-&gt;start == root-&gt;end &amp;&amp; root-&gt;start == idx)\n    {\n        ++(root-&gt;cnt);\n        return;\n    }\n\n    int mid = root-&gt;start + ((root-&gt;end - root-&gt;start) &gt;&gt; 1);\n    if (mid &gt;= idx)\n    {\n        modify(root-&gt;left, idx);\n    }\n    else\n    {\n        modify(root-&gt;right, idx);\n    }\n\n    root-&gt;cnt = root-&gt;left-&gt;cnt + (root-&gt;right ? root-&gt;right-&gt;cnt : 0);\n}\n\nint query(Node *root, int start, int end)\n{\n    if (root-&gt;end &lt; start || root-&gt;start &gt; end)\n    {\n        return 0;\n    }\n    if (root-&gt;start &gt;= start &amp;&amp; root-&gt;end &lt;= end)\n    {\n        return root-&gt;cnt;\n    }\n\n    int mid = root-&gt;start + ((root-&gt;end - root-&gt;start) &gt;&gt; 1);\n    if (mid &gt;= end)\n    {\n        return query(root-&gt;left, start, end);\n    }\n    if (mid &lt; start)\n    {\n        return query(root-&gt;right, start, end);\n    }\n\n    int leftRes = query(root-&gt;left, start, mid);\n    int rightRes = query(root-&gt;right, mid + 1, end);\n\n    return leftRes + rightRes;\n}\n\nvector&lt;int&gt; countOfSmallerNumberII(vector&lt;int&gt; &amp;A) {\n    // write your code here\n    int len = A.size();\n    Node *root = build(0, 2*len);\n    int maxV = INT32_MIN;\n    for (int j = 0; j &lt; len; ++j) {\n        maxV = max(maxV,A[j]);\n    }\n    vector&lt;int&gt; res;\n\n    for (int i = 0; i &lt; A.size(); i++)\n    {\n        int cnt = query(root,A[i] + 1, maxV);\n        res.push_back(cnt);\n        modify(root, A[i]);\n    }\n\n    return res;\n}\n\nint main(){\n    vector&lt;int&gt; v = {1,2,7,8,5};\n    auto re = countOfSmallerNumberII(v);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_8","title":"\u7edf\u8ba1\u524d\u9762\u6bd4\u81ea\u5df1\u5c0f\u7684\u6570\u5b57\u6709\u591a\u5c11\u4e2a","text":"<pre><code>class Node\n{\npublic:\n    Node(int _start, int _end) :\n            start(_start), end(_end), left(nullptr), right(nullptr),\n            cnt(0) {}\n\n    int start, end;\n    Node *left, *right;\n    int cnt;\n};\n\n\nclass Solution {\npublic:\n    /**\n      * @param A: An integer array\n      * @return: Count the number of element before this element 'ai' is\n      *          smaller than it and return count number array\n      */\n    vector&lt;int&gt; countOfSmallerNumberII(vector&lt;int&gt; &amp;A) {\n        // write your code here\n        Node *root = build(0, 20000);\n        vector&lt;int&gt; res;\n\n        for (int i = 0; i &lt; A.size(); i++)\n        {\n            int cnt = query(root, 0, A[i] - 1);\n            res.push_back(cnt);\n            modify(root, A[i]);\n        }\n\n        return res;\n    }\nprivate:\n    Node *build(int start, int end)\n    {\n        if (start &gt; end)\n        {\n            return NULL;\n        }\n        if (start == end)\n        {\n            return new Node(start, end);\n        }\n\n        int mid = start + ((end - start) &gt;&gt; 1);\n\n        Node *root = new Node(start, end);\n        root-&gt;left = build(start, mid);\n        root-&gt;right = build(mid + 1, end);\n\n        return root;\n    }\n\n    void modify(Node *root, int idx){\n        if (root == NULL)\n        {\n            return;\n        }\n\n        if (root-&gt;start == root-&gt;end &amp;&amp; root-&gt;start == idx)\n        {\n            ++(root-&gt;cnt);\n            return;\n        }\n\n        int mid = root-&gt;start + ((root-&gt;end - root-&gt;start) &gt;&gt; 1);\n        if (mid &gt;= idx)\n        {\n            modify(root-&gt;left, idx);\n        }\n        else\n        {\n            modify(root-&gt;right, idx);\n        }\n\n        root-&gt;cnt = root-&gt;left-&gt;cnt + (root-&gt;right ? root-&gt;right-&gt;cnt : 0);\n    }\n\n    int query(Node *root, int start, int end)\n    {\n        if (root-&gt;end &lt; start || root-&gt;start &gt; end)\n        {\n            return 0;\n        }\n        if (root-&gt;start &gt;= start &amp;&amp; root-&gt;end &lt;= end)\n        {\n            return root-&gt;cnt;\n        }\n\n        int mid = root-&gt;start + ((root-&gt;end - root-&gt;start) &gt;&gt; 1);\n        if (mid &gt;= end)\n        {\n            return query(root-&gt;left, start, end);\n        }\n        if (mid &lt; start)\n        {\n            return query(root-&gt;right, start, end);\n        }\n\n        int leftRes = query(root-&gt;left, start, mid);\n        int rightRes = query(root-&gt;right, mid + 1, end);\n\n        return leftRes + rightRes;\n    }\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_9","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 307. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539 \u4e2d\u7b49 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u56f0\u96be 1157. \u5b50\u6570\u7ec4\u4e2d\u5360\u7edd\u5927\u591a\u6570\u7684\u5143\u7d20 \u56f0\u96be"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":"<p>\u94fe\u8868\u662f\u4e00\u79cd\u7528\u6307\u9488\u4e32\u8054\u8d77\u6765\u7684\u987a\u5e8f\u7ed3\u6784\uff0c\u4e3b\u8981\u4f18\u70b9\u662f\u589e\u5220\u5feb\uff0c\u4e3b\u8981\u7f3a\u70b9\u662f\u65e0\u6cd5\u5411\u6570\u7ec4\u90a3\u6837\u5feb\u901f\u53d6\u51fa\u67d0\u4e2a\u5143\u7d20\u3002 \u94fe\u8868\u662f\u4e00\u79cd\u6bd4\u8f83\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u8981\u7c7b\u578b\u6709\u5355\u94fe\u8868\uff0c\u53cc\u94fe\u8868\uff0c\u5faa\u73af\u94fe\u8868\u7b49\u3002 \u94fe\u8868\u7684\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\uff1b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u548c\u6307\u9488\u5b9e\u73b0\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_2","title":"\u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c","text":"<p>C++11\u7684\u6807\u51c6\u4e2d\uff0c\u7ed3\u6784\u4f53\u548c\u7c7b\u5e76\u6ca1\u6709\u672c\u8d28\u7684\u4e0d\u540c\u3002\u6240\u6709\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u548c\u7c7b\u6765\u5b9a\u4e49\u8282\u70b9\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5355\u94fe\u8868\u901a\u5e38\u5305\u542b\u4e00\u4e2a<code>val</code>\u548c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488<code>*next</code>,\u53cc\u5411\u94fe\u8868\u901a\u5e38\u5305\u542b\u4e00\u4e2a<code>val</code>\u548c\u4e24\u4e2a\u6307\u9488<code>*pre</code>,<code>*next</code>,\u5206\u522b\u6307\u5411\u524d\u9762\u7684\u8282\u70b9\u548c\u540e\u9762\u7684\u8282\u70b9\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_3","title":"\u94fe\u8868\u8282\u70b9\u7ed3\u6784\u7684\u5b9a\u4e49","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_4","title":"\u5355\u94fe\u8868","text":"<pre><code>//\u5355\u94fe\u8868\u8282\u70b9\u7684\u5b9a\u4e49-\u4f7f\u7528\u7ed3\u6784\u4f53\nstruct Node{\n    int value;\n    Node *next;\n    Node() : value(0),next(nullptr){}\n    Node(int v) : value(v),next(nullptr){}\n};\n</code></pre> <pre><code>//\u4f7f\u7528\u7c7b\nclass ListNode {\npublic:\n     int val;\n     ListNode *next;\n     ListNode(int val) {\n         this-&gt;val = val;\n         this-&gt;next = NULL;\n     }\n }\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_5","title":"\u53cc\u5411\u94fe\u8868","text":"<pre><code>//\u53cc\u5411\u94fe\u8868\nstruct BiNode{\n    int value;\n    BiNode *pre;\n    BiNode *next;\n    BiNode() : value(0),pre(nullptr),next(nullptr){}\n    BiNode(int v) : value(v),pre(nullptr),next(nullptr){}\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_6","title":"\u94fe\u8868\u7684\u521b\u5efa","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_7","title":"\u5355\u94fe\u8868","text":"<p>\u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\uff0c\u8fd4\u56de\u7a7a\u94fe\u8868 \u5982\u679c\u4e0d\u662f\u7a7a\uff0c\u521b\u5efa\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8282\u70b9\uff0c\u5e76\u7528\u5934\u6307\u9488\u6307\u5411\u5b83\uff0c\u65e5\u540e\u8fd4\u56de\u8fd9\u4e2a\u5934\u6307\u9488\uff1b \u7136\u540e\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u521b\u5efa\u65b0\u7684\u8282\u70b9\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u8d4b\u503c\u4e2a\u524d\u4e00\u4e2a\u8282\u70b9\u7684next\u6307\u9488\uff0c\u7136\u540e\u66f4\u65b0tmp\u6307\u5411\u5f53\u524d\u65b0\u521b\u5efa\u7684\u8282\u70b9\u3002 \u6838\u5fc3\u7684\u8bed\u53e5\uff1a <pre><code>Node *node = new Node(v[i]);\ntmp-&gt;next = node;\ntmp = tmp-&gt;next;\n</code></pre></p> <pre><code>Node* createLinks(vector&lt;int&gt; v){\n    if(v.empty()) return nullptr;\n    Node *head = new Node(v[0]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765\n    Node *tmp = head;\n    for(int i=1;i&lt;v.size();++i){\n        Node *node = new Node(v[i]);\n        tmp-&gt;next = node;\n        tmp = tmp-&gt;next;\n    }\n    return head;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_8","title":"\u53cc\u94fe\u8868","text":"<p>\u53cc\u5411\u94fe\u8868\u7684\u521b\u5efa\u9700\u8981\u8fd4\u56de\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5934\u90e8\uff0c\u4fbf\u4e8e\u6b63\u5411\u904d\u5386\u94fe\u8868\uff1b\u53e6\u5916\u4e00\u4e2a\u6307\u5411\u5c3e\u90e8\uff0c\u4fbf\u4e8e\u9006\u5411\u904d\u5386\u94fe\u8868 \u9996\u5148\u5224\u65ad\u662f\u4e0d\u662f\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\uff0c\u8fd4\u56de\u7a7a\u94fe\u8868 \u7528\u7b2c\u4e00\u4e2a\u5143\u7d20\u521b\u5efa\u8282\u70b9\uff0c\u5e76\u7528\u5934\u8282\u70b9\u6307\u5411\u5b83 \u521b\u5efa\u4e34\u65f6\u53d8\u91cf\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u6b64\u4e34\u65f6\u53d8\u91cf\u4e00\u76f4\u6307\u5411\u5f53\u524d\u521b\u5efa\u7684\u8282\u70b9 \u4ece\u6570\u7ec4\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u521b\u5efa\u65b0\u7684\u8282\u70b9\uff0c\u521b\u5efa\u7684\u8282\u70b9\u7684pre\u8bbe\u7f6e\u4e3atmp, \u7136\u540e\u628atmp\u7684next\u8d4b\u503c\u6210node,\u5373\u8ba9tmp\u6240\u6307\u5411\u7684\u8282\u70b9\u8fde\u63a5\u5230\u5f53\u524d\u521b\u5efa\u7684\u8282\u70b9\u4e0a \u66f4\u65b0tmp\u4f7f\u5b83\u6307\u5411\u5f53\u524d\u65b0\u521b\u5efa\u7684\u8282\u70b9\u3002 \u5faa\u73af\u4f53\u7ed3\u675f\u540e\uff0ctmp\u6b63\u597d\u6307\u5411\u6700\u4f1a\u4e00\u4e2a\u521b\u5efa\u7684\u8282\u70b9\uff0c\u6240\u4ee5\u628atmp\u8d4b\u503c\u7ed9tail \u8fd4\u56dehead\u548ctail; \u5173\u952e\u8bed\u53e5\uff1a <pre><code>BiNode *node = new BiNode(v[i]);\nnode-&gt;pre = tmp;\ntmp-&gt;next = node;\ntmp = tmp-&gt;next;\n</code></pre></p> <pre><code>pair&lt;BiNode*,BiNode*&gt; createBiNode(vector&lt;int&gt; v){\n    if(v.empty()) return {nullptr,nullptr};\n    BiNode *head = new BiNode(v[0]);\n    BiNode *tmp = head;\n    for(int i=1;i&lt;v.size();i++){\n        BiNode *node = new BiNode(v[i]);\n         node-&gt;pre = tmp;\n         tmp-&gt;next = node;\n         tmp = tmp-&gt;next;\n    }\n    BiNode *tail = tmp;\n    return {head,tail};\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_9","title":"\u5faa\u73af\u94fe\u8868","text":"<p>\u5faa\u73af\u94fe\u8868\u5c31\u662f\u7ed3\u5c3e\u7684\u5143\u7d20\u53c8\u6307\u5411\u4e86\u5f00\u5934\u7684\u5143\u7d20\u3002\u6240\u4ee5\u521b\u5efa\u8fc7\u7a0b\u57fa\u672c\u4e0a\u662f\u4e00\u6837\u7684\uff0c\u6307\u793a\u5728\u7ed3\u5c3e\u7684\u5904\u7406\u7a0d\u6709\u4e0d\u540c\u3002 \u5faa\u73af\u5355\u94fe\u8868\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u6dfb\u52a0<code>tmp-&gt;next = head;</code> \u5faa\u73af\u53cc\u5411\u94fe\u8868\u53ea\u9700\u8981\u5728\u7ed3\u5c3e\u6dfb\u52a0<code>tail-&gt;next = head;  // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20  head-&gt;pre = tail;  // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20</code> .</p> <pre><code>//\u521b\u5efa\u5faa\u73af\u5355\u94fe\u8868\nNode* createLinksCycle(vector&lt;int&gt; v){\n    if(v.empty()) return nullptr;\n    Node *head = new Node(v[0]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765\n    Node *tmp = head;\n    for(int i=1;i&lt;v.size();++i){\n        Node *node = new Node(v[i]);\n        tmp-&gt;next = node;\n        tmp = tmp-&gt;next;\n    }\n    tmp-&gt;next = head; // \u8ba9\u7ed3\u5c3e\u6307\u5411\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    return head;\n}\n</code></pre> <pre><code>//\u521b\u5efa\u5faa\u73af\u53cc\u94fe\u8868\npair&lt;BiNode*,BiNode*&gt; createBiNodeCycle(vector&lt;int&gt; v){\n    if(v.empty()) return {nullptr,nullptr};\n    BiNode *head = new BiNode(v[0]);\n    BiNode *tmp = head;\n    for(int i=1;i&lt;v.size();i++){\n        BiNode *node = new BiNode(v[i]);\n        tmp-&gt;next = node;\n        node-&gt;pre = tmp;\n        tmp = tmp-&gt;next;\n    }\n    BiNode *tail = tmp;\n    tail-&gt;next = head;  // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20\n    head-&gt;pre = tail;  // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20\n    return {head,tail};\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_10","title":"\u94fe\u8868\u7684\u63d2\u5165","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_11","title":"\u5355\u94fe\u8868","text":"<p>\u8981\u5728\u5355\u94fe\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5047\u8bbec\u6307\u5411\u4e86\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0cn\u662f\u65b0\u521b\u5efa\u7684\u8282\u70b9 \u90a3\u4e48\u63d2\u5165\u7684\u65b9\u6cd5\u662f\uff1a</p> <pre><code>n-&gt;next = c-&gt;next ; //\u65b0\u8282\u70b9n\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u6210c\u7684\u540e\u4e00\u4e2a\u8282\u70b9\nc-&gt;next = n; //c\u8282\u70b9\u6307\u5411\u65b0\u63d2\u5165\u7684\u8282\u70b9\n</code></pre> <p>\u6ce8\u610f\u5982\u679c\u63d2\u5165\u7684\u4f4d\u7f6e\u662f\u94fe\u8868\u7684\u5934\u90e8\uff0c\u9700\u8981\u5355\u72ec\u5904\u7406\u3002</p> <pre><code>n-&gt;next = head; //\u65b0\u63d2\u5165\u7684\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8fde\u63a5\u5230\u5934\u8282\u70b9\nhead = n; //\u5934\u7ed3\u70b9\u7f16\u7a0b\u65b0\u63d2\u5165\u7684\u8282\u70b9\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_12","title":"\u53cc\u94fe\u8868","text":"<p>\u53cc\u94fe\u8868\u65e2\u53ef\u4ee5\u5411\u524d\u8bbf\u95ee\uff0c\u4e5f\u53ef\u4ee5\u5411\u540e\u8bbf\u95ee\u3002\u6240\u4ee5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u6216\u8005\u8981\u63d2\u5165\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 \u5047\u8bbec\u4ee3\u8868\u8981\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff1bn\u4ee3\u8868\u65b0\u63d2\u5165\u7684\u8282\u70b9\uff0cb\u4ee3\u8868\u63d2\u5165\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u3002 \u5229\u7528c\u7684\u63d2\u5165\u65b9\u6cd5\u662f\uff1a <pre><code>n-&gt;next = c-&gt;next;\nc-&gt;next-&gt;pre = n; // \u8fd9\u4e24\u53e5\u5c06\u65b0\u7684\u8282\u70b9\u548c\u540e\u9762\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765\nn-&gt;pre = c;\nc-&gt;next = n; //\u8fd9\u4e24\u53e5\u5c06c\u548cn\u8fde\u63a5\u8d77\u6765\n</code></pre> \u5982\u679c\u8981\u5728\u5934\u8282\u70b9\u4e4b\u524d\u63d2\u5165\uff0c\u4f1a\u53d1\u73b0\u5934\u7ed3\u70b9\u4e4b\u524d\u6ca1\u6709\u8282\u70b9\u4e86\uff0c\u6240\u4ee5\u4e0d\u80fd\u4f7f\u7528\u4e0a\u9762\u7684\u8bed\u53e5\uff0c\u9700\u8981\u53e6\u5916\u5904\u7406\uff1a <pre><code>n-&gt;next = head;\nhead-&gt;pre = n;\nhead = n;\n</code></pre> \u5229\u7528b\u7684\u63d2\u5165\u65b9\u6cd5\u662f\uff1a <pre><code>n-&gt;pre = b-&gt;pre;\nb-&gt;pre-&gt;next = n; // \u628a\u65b0\u7684\u8282\u70b9\u548cb\u524d\u9762\u7684\u8282\u70b9\u8fde\u63a5\u8d77\u6765\nn-&gt;next = b;\nb-&gt;pre = n;  // \u628a\u65b0\u7684\u8282\u70b9\u548cb\u8fde\u63a5\u8d77\u6765\n</code></pre> \u5982\u679c\u5728\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u540e\u9762\u63d2\u5165\u8282\u70b9\uff0c\u4f1a\u53d1\u73b0\u6ca1\u6709b,\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u53e6\u5916\u5904\u7406\uff1a <pre><code>n-&gt;pre = tail;\ntail-&gt;next = n;\ntail = n;\n</code></pre></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_13","title":"\u5faa\u73af\u94fe\u8868","text":"<p>\u5faa\u73af\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u6ca1\u6709\u4e86\u50cf\u4e0a\u9762\u4e0d\u5faa\u73af\u7684\u94fe\u8868\u90a3\u6837\u9700\u8981\u53e6\u5916\u5904\u7406\u5934\u90e8\u548c\u5c3e\u90e8\u7684\u60c5\u51b5\u3002\u6240\u4ee5\u63d2\u5165\u64cd\u4f5c\u66f4\u52a0\u7b80\u5355\u3002 \u5982\u679c\u63d2\u5165\u7684\u662f\u5934\u8282\u70b9\u7684\u8bdd\uff0c\u6ce8\u610fhead\u7684\u66f4\u65b0\u60c5\u51b5\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_14","title":"\u94fe\u8868\u7684\u5220\u9664","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_15","title":"\u5355\u94fe\u8868","text":"<p>\u5220\u9664\u5355\u94fe\u8868\u7684\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u53ea\u9700\u8981\u77e5\u9053\u8be5\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u3002\u5047\u8bbe\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u662fc. \u5220\u9664\u64cd\u4f5c\uff1a<code>c-&gt;next = c-&gt;next-&gt;next;</code> \u5982\u679c\u5220\u9664\u7684\u662f\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u76f4\u63a5<code>head = head-&gt;next;</code> \u5982\u679c\u5220\u9664\u7684\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5219\u76f4\u63a5<code>c-&gt;next=nullptr</code>.</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_16","title":"\u53cc\u94fe\u8868","text":"<p>\u540c\u63d2\u5165\u7c7b\u4f3c\uff0c\u53cc\u94fe\u8868\u7684\u5220\u9664\u53ea\u9700\u8981\u77e5\u9053\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u6216\u8005\u540e\u4e00\u4e2a\u8282\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002\u5047\u8bbec\u662f\u524d\u4e00\u4e2a\u8282\u70b9\uff0cb\u662f\u540e\u4e00\u4e2a\u8282\u70b9\u3002 \u5220\u9664\u64cd\u4f5c1\uff1a <pre><code>c-&gt;next = c-&gt;next-&gt;next;\nc-&gt;next-&gt;next-&gt;pre = c;\n</code></pre></p> <p>\u5220\u9664\u64cd\u4f5c2\uff1a <pre><code>b-&gt;pre = b-&gt;pre-&gt;pre;\nb-&gt;pre-&gt;pre-&gt;next = b;\n</code></pre></p> <p>\u5220\u9664\u9996\u8282\u70b9\u548c\u5c3e\u8282\u70b9\u540c\u6837\u9700\u8981\u7279\u6b8a\u8003\u8651\uff1b \u5220\u9664\u9996\u8282\u70b9\uff1a<code>b-&gt;pre = nullptr;head = b</code>; \u5220\u9664\u5c3e\u8282\u70b9\uff1a<code>c-&gt;next=nullptr;tail=c;</code> \u9700\u8981\u7684\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u505a\u53ea\u662f\u4ecehead\u548ctail\u5f00\u59cb\u8bbf\u95ee\u7684\u8bdd\uff0c\u518d\u4e5f\u8bbf\u95ee\u4e0d\u5230\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u4ece\u5220\u9664\u7684\u8282\u70b9\u8fd8\u6709\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u94fe\u8868\u7684\u67d0\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u60f3\u8981\u5220\u9664\u5e72\u51c0\uff0c\u5c31\u662f\u5f7b\u5e95\u65ad\u5f00\u8fde\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u53e5\uff1a \u5220\u9664\u9996\u8282\u70b9\uff1a<code>b-&gt;pre-&gt;next=nullptr; b-&gt;pre=nullptr;head=b;</code> \u5220\u9664\u5c3e\u8282\u70b9\uff1a<code>c-&gt;next-&gt;pre=nullptr;c-&gt;next=nullptr;tail=c;</code></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_17","title":"\u5faa\u73af\u94fe\u8868","text":"<p>\u5faa\u73af\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u540c\u6837\u4e0d\u9700\u8981\u8003\u8651\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5982\u679c\u63d2\u5165\u7684\u662f\u5934\u8282\u70b9\u7684\u8bdd\uff0c\u6ce8\u610fhead\u7684\u66f4\u65b0\u60c5\u51b5\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_18","title":"\u94fe\u8868\u7684\u66ff\u6362","text":"<p>\u60f3\u8981\u66f4\u65b0\u94fe\u8868\u4e2d\u7684\u67d0\u4e2a\u503c\uff0c\u53ea\u9700\u8981\u67e5\u627e\u5230\u8be5\u8282\u70b9c\uff0c\u7136\u540e\u6267\u884c<code>c-&gt;val = new_value;</code>\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_19","title":"\u94fe\u8868\u7684\u53cd\u5411","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_20","title":"\u5355\u94fe\u8868","text":"<p>\u57fa\u672c\u601d\u8def\u662f\u8bbe\u7f6e\u4e09\u4e2a\u6307\u9488pre,current,next;\u5206\u522b\u4ee3\u8868\u76f8\u90bb\u7684\u4e09\u4e2a\u8282\u70b9\u3002 \u6bcf\u6b21\u5faa\u73af\u6267\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a <pre><code>next = current-&gt;next; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\ncurrent-&gt;next = pre; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9\npre = current; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\ncurrent = next; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n</code></pre></p> <pre><code>Node* notLinks(Node* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    Node *current = head;\n    Node *pre=nullptr;\n    Node *next= nullptr;\n    while(current){\n        next = current-&gt;next; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        current-&gt;next = pre; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9\n        pre = current; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n        current = next; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n    }\n    return pre; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_21","title":"\u53cc\u94fe\u8868","text":"<p>\u53cc\u5411\u94fe\u8868\u7684\u53cd\u8f6c\u4e0e\u5355\u5411\u94fe\u8868\u7684\u601d\u8def\u4e00\u81f4\uff0c\u8bbe\u7f6e\u4e09\u4e2a\u6307\u9488pre,current,next\u5206\u522b\u6307\u5411\u76f8\u90bb\u7684\u4e09\u4e2a\u8282\u70b9\uff1b \u6bcf\u6b21\u5faa\u73af\u8fd9\u6837\u64cd\u4f5c\uff1a <pre><code>next = current-&gt;next; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\ncurrent-&gt;next = pre; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9\ncurrent-&gt;pre = next;\npre = current; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\ncurrent = next; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n</code></pre></p> <p><pre><code>BiNode* notBiLinks(BiNode* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    BiNode *current = head;\n    BiNode *pre=nullptr;\n    BiNode *next= nullptr;\n    while(current){\n        next = current-&gt;next; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        current-&gt;next = pre; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9\n        current-&gt;pre = next;\n        pre = current; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n        current = next; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n    }\n    return pre; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n}\n</code></pre> \u5f53\u7136\uff0c\u5728\u903b\u8f91\u4e0a\u53cc\u5411\u94fe\u8868\u662f\u6ca1\u6709\u6b63\u53cd\u7684\uff0c\u4ee5\u4e0a\u6240\u8bf4\u7684\u53cd\u5411\u662f\u5728\u76f8\u540c\u7684\u8f93\u51fa\u51fd\u6570\u4e0b\uff0c\u8f93\u51fa\u7684\u987a\u5e8f\u6b63\u597d\u76f8\u53cd\u3002 \u4e5f\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u53cd\u8f6c\u53cc\u5411\u94fe\u8868\uff0c\u53ea\u9700\u8981\u628a\u94fe\u8868\u8282\u70b9\u7684\u6307\u9488pre,next\u4ea4\u6362\u4e00\u4e0b\u5373\u53ef\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>BiNode *tmp = current-&gt;pre;\ncurrent-&gt;pre = current-&gt;next;\ncurrent-&gt;next = tmp;  // \u4ee5\u4e0a\u4e09\u884c\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\nnewHead = current;   //\u5b58\u50a8\u4e0b\u6765\u5f53\u524d\u8282\u70b9\uff0c\u65e5\u540e\u8fd4\u56de\u8be5\u8282\u70b9\ncurrent = current-&gt;pre; //\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n</code></pre></p> <pre><code>BiNode* notBiLinks2(BiNode* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    BiNode *current = head;\n    BiNode *newHead;\n    while(current){\n        BiNode *tmp = current-&gt;pre;\n        current-&gt;pre = current-&gt;next;\n        current-&gt;next = tmp;\n        newHead = current;\n        current = current-&gt;pre;\n    }\n    return newHead; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_22","title":"\u5faa\u73af\u94fe\u8868","text":"<p>\u5faa\u73af\u94fe\u8868\u7684\u53cd\u8f6c\u6ca1\u6709\u4ec0\u4e48\u5b9e\u9645\u7684\u610f\u4e49\uff0c\u53ea\u662f\u7528\u6765\u7ec3\u4e60\u94fe\u8868\u7684\u5904\u7406\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u548c\u4e0a\u9762\u7684\u57fa\u672c\u76f8\u540c\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_23","title":"\u94fe\u8868\u7684\u53ef\u89c6\u5316","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_24","title":"\u6253\u5370\u5355\u94fe\u8868","text":"<p><pre><code>void printLinks(Node *head) {\n    if (head == nullptr) {\n        cout &lt;&lt; \"empty\" &lt;&lt; endl;\n        return;\n    }\n    Node *tmp = head;\n    while (tmp-&gt;next != nullptr) {\n        cout &lt;&lt; tmp-&gt;value &lt;&lt; \"-&gt;\";\n        tmp = tmp-&gt;next;\n    }\n    cout &lt;&lt; tmp-&gt;value &lt;&lt; endl;\n}\n</code></pre> \u6253\u5370\u51fa\u6765\u7684\u6837\u5f0f</p> <p>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_25","title":"\u6253\u5370\u53cc\u5411\u94fe\u8868","text":"<pre><code>void printBiLinks(BiNode *head){\n    if(head == nullptr){cout&lt;&lt;\"empty\"&lt;&lt;endl;return;}\n    BiNode *tmp = head;\n    while(tmp-&gt;next != nullptr){\n        cout&lt;&lt;\"[\"&lt;&lt;tmp-&gt;value&lt;&lt;\"]\"&lt;&lt;\"&lt;-&gt;\";\n        tmp = tmp-&gt;next;\n    }\n    cout&lt;&lt;\"[\"&lt;&lt;tmp-&gt;value&lt;&lt;\"]\"&lt;&lt;endl;\n    cout&lt;&lt;endl;\n}\n</code></pre> <p>\u6253\u5370\u51fa\u6765\u7684\u6837\u5f0f</p> <pre><code>&gt; [1]&lt;-&gt;[2]&lt;-&gt;[3]&lt;-&gt;[4]&lt;-&gt;[5]&lt;-&gt;[6]\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_26","title":"\u5355\u94fe\u8868\u7c7b\u7684\u5b9a\u4e49","text":"<pre><code>class Links{\npublic:\n    Node *head; // \u5934\u8282\u70b9\n    Links() : head(nullptr){}\n    //\u521b\u5efa\u94fe\u8868\n    Links(vector&lt;int&gt; v) {\n        if(v.empty()){\n            head = nullptr;\n        }else {\n            Node *first = new Node(v[0]);\n            head = first;\n            Node *tmp = first;\n            for (int i = 1; i &lt; v.size(); ++i) {\n                Node *node = new Node(v[i]);\n                tmp-&gt;next = node;\n                tmp = node;\n            }\n        }\n    }\n    //\u6253\u5370\u94fe\u8868\n    void printLinks() {\n        if (head == nullptr) {\n            cout &lt;&lt; \"empty\" &lt;&lt; endl;\n            return;\n        }\n        Node *tmp = head;\n        while (tmp-&gt;next != nullptr) {\n            cout &lt;&lt; tmp-&gt;value &lt;&lt; \"-&gt;\";\n            tmp = tmp-&gt;next;\n        }\n        cout &lt;&lt; tmp-&gt;value &lt;&lt; endl;\n    }\n    //\u53cd\u8f6c\u8fd9\u4e2a\u94fe\u8868\n    void inverseLinks(){\n        Node *pre = nullptr;\n        Node *next = nullptr;\n        while(head!= nullptr){\n            next = head-&gt;next;\n            head-&gt;next = pre;\n            pre = head;\n            head = next;\n        }\n        head = pre;\n    }\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_27","title":"\u53cc\u5411\u94fe\u8868\u7c7b\u7684\u5b9a\u4e49","text":"<pre><code>//\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0\nclass BiLinks{\npublic:\n    BiNode *head;\n    BiNode *tail;\n    BiLinks() : head(nullptr),tail(nullptr){}\n    BiLinks(vector&lt;int&gt; v){\n        BiNode *first = new BiNode(v[0]);\n        head = first;\n        BiNode *tmp = head;\n        for(int i=1;i&lt;v.size();i++){\n            BiNode *node = new BiNode(v[i]);\n            tmp-&gt;next = node;\n            node-&gt;pre = tmp;\n            tmp = tmp-&gt;next;\n        }\n        tail = tmp;\n    }\n    void printBiLinks(){\n        if(head == nullptr || tail == nullptr){cout&lt;&lt;\"empty!\"&lt;&lt;endl;return;}\n        BiNode *tmp = head;\n        while(tmp-&gt;next != nullptr){\n            cout&lt;&lt;\"[\"&lt;&lt;tmp-&gt;value&lt;&lt;\"]\"&lt;&lt;\"-&gt;\";\n            tmp = tmp-&gt;next;\n        }\n        cout&lt;&lt;\"[\"&lt;&lt;tmp-&gt;value&lt;&lt;\"]\"&lt;&lt;endl;\n        tmp = tail;\n        while(tmp-&gt;pre!= nullptr){\n            tmp = tmp-&gt;pre;\n        }\n        while(tmp-&gt;next!= nullptr){\n            cout&lt;&lt;tmp-&gt;value&lt;&lt;\"&lt;-&gt;\";\n            tmp = tmp-&gt;next;\n        }\n        cout&lt;&lt; tmp-&gt;value &lt;&lt;endl;\n        cout&lt;&lt;endl;\n    }\n    void inverseBiLinks(){\n        BiNode *pre = nullptr;\n        BiNode *next = nullptr;\n        while(head!= nullptr){\n            next = head-&gt;next;\n            head-&gt;next= pre;\n            head-&gt;pre = next;\n            pre = head;\n            head = next;\n        }\n        head = pre;\n    }\n};\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_28","title":"\u94fe\u8868\u64cd\u4f5c\u7684\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node *next;\n    Node() : value(0),next(nullptr){}\n    Node(int v) : value(v),next(nullptr){}\n};\n//\u53cc\u5411\u94fe\u8868\nstruct BiNode{\n    int value;\n    BiNode *pre;\n    BiNode *next;\n    BiNode() : value(0),pre(nullptr),next(nullptr){}\n    BiNode(int v) : value(v),pre(nullptr),next(nullptr){}\n};\nNode* createLinks(vector&lt;int&gt; v){\n    if(v.empty()) return nullptr;\n    Node *head = new Node(v[0]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765\n    Node *tmp = head;\n    for(int i=1;i&lt;v.size();++i){\n        Node *node = new Node(v[i]);\n        tmp-&gt;next = node;\n        tmp = tmp-&gt;next;\n    }\n    return head;\n}\n//\u521b\u5efa\u5faa\u73af\u5355\u94fe\u8868\nNode* createLinksCycle(vector&lt;int&gt; v){\n    if(v.empty()) return nullptr;\n    Node *head = new Node(v[0]); //\u5934\u8282\u70b9\uff0c\u6700\u540e\u9700\u8981\u8fd4\u56de\u521b\u5efa\u7684\u94fe\u8868\u7684\u5934\u7ed3\u70b9\uff0c\u6240\u4ee5\u5934\u7ed3\u70b9\u9700\u8981\u4fdd\u5b58\u4e0b\u6765\n    Node *tmp = head;\n    for(int i=1;i&lt;v.size();++i){\n        Node *node = new Node(v[i]);\n        tmp-&gt;next = node;\n        tmp = tmp-&gt;next;\n    }\n    tmp-&gt;next = head; // \u8ba9\u7ed3\u5c3e\u6307\u5411\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    return head;\n}\npair&lt;BiNode*,BiNode*&gt; createBiNode(vector&lt;int&gt; v){\n    if(v.empty()) return {nullptr,nullptr};\n    BiNode *head = new BiNode(v[0]);\n    BiNode *tmp = head;\n    for(int i=1;i&lt;v.size();i++){\n        BiNode *node = new BiNode(v[i]);\n        tmp-&gt;next = node;\n        node-&gt;pre = tmp;\n        tmp = tmp-&gt;next;\n    }\n    BiNode *tail = tmp;\n    return {head,tail};\n}\n//\u521b\u5efa\u5faa\u73af\u53cc\u94fe\u8868\npair&lt;BiNode*,BiNode*&gt; createBiNodeCycle(vector&lt;int&gt; v){\n    if(v.empty()) return {nullptr,nullptr};\n    BiNode *head = new BiNode(v[0]);\n    BiNode *tmp = head;\n    for(int i=1;i&lt;v.size();i++){\n        BiNode *node = new BiNode(v[i]);\n        tmp-&gt;next = node;\n        node-&gt;pre = tmp;\n        tmp = tmp-&gt;next;\n    }\n    BiNode *tail = tmp;\n    tail-&gt;next = head;  // \u5c3e\u5143\u7d20\u7684\u540e\u9762\u662f\u5934\u5143\u7d20\n    head-&gt;pre = tail;  // \u5934\u5143\u7d20\u7684\u524d\u9762\u662f\u5c3e\u5143\u7d20\n    return {head,tail};\n}\n//\u53cd\u8f6c\u5355\u5411\u94fe\u8868\nNode* notLinks(Node* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    Node *current = head;\n    Node *pre=nullptr;\n    Node *next= nullptr;\n    while(current){\n        next = current-&gt;next; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        current-&gt;next = pre; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9\n        pre = current; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n        current = next; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n    }\n    return pre; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n}\nBiNode* notBiLinks(BiNode* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    BiNode *current = head;\n    BiNode *pre=nullptr;\n    BiNode *next= nullptr;\n    while(current){\n        next = current-&gt;next; // \u9996\u5148\u8bb0\u5f55current\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        current-&gt;next = pre; // curent\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u8bbe\u7f6e\u4e3a\u524d\u4e00\u4e2a\u8282\u70b9\n        current-&gt;pre = next;\n        pre = current; // pre\u5411\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n        current = next; //current\u50cf\u524d\u63a8\u8fdb\u4e00\u4e2a\u5143\u7d20\n    }\n    return pre; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n}\nBiNode* notBiLinks2(BiNode* head){\n    if(head == nullptr || head-&gt;next == nullptr) return head;\n    BiNode *current = head;\n    BiNode *newHead;\n    while(current){\n        BiNode *tmp = current-&gt;pre;\n        current-&gt;pre = current-&gt;next;\n        current-&gt;next = tmp;\n        newHead = current;\n        current = current-&gt;pre;\n    }\n    return newHead; //\u8fd4\u56de\u6307\u5411\u65b0\u94fe\u8868\u7684\u5934\u8282\u70b9\n}\nvoid printLinks(Node *head) {\n    if (head == nullptr) {\n        cout &lt;&lt; \"empty\" &lt;&lt; endl;\n        return;\n    }\n    Node *tmp = head;\n    while (tmp-&gt;next != nullptr) {\n        cout &lt;&lt; tmp-&gt;value &lt;&lt; \"-&gt;\";\n        tmp = tmp-&gt;next;\n    }\n    cout &lt;&lt; tmp-&gt;value &lt;&lt; endl;\n}\nvoid printBiLinks(BiNode *head){\n    if(head == nullptr){cout&lt;&lt;\"empty\"&lt;&lt;endl;return;}\n    BiNode *tmp = head;\n    while(tmp-&gt;next != nullptr){\n        cout&lt;&lt;\"[\"&lt;&lt;tmp-&gt;value&lt;&lt;\"]\"&lt;&lt;\"&lt;-&gt;\";\n        tmp = tmp-&gt;next;\n    }\n    cout&lt;&lt;\"[\"&lt;&lt;tmp-&gt;value&lt;&lt;\"]\"&lt;&lt;endl;\n    cout&lt;&lt;endl;\n}\nclass Links{\npublic:\n    Node *head; // \u5934\u8282\u70b9\n    Links() : head(nullptr){}\n    //\u521b\u5efa\u94fe\u8868\n    Links(vector&lt;int&gt; v) {\n        if(v.empty()){\n            head = nullptr;\n        }else {\n            Node *first = new Node(v[0]);\n            head = first;\n            Node *tmp = first;\n            for (int i = 1; i &lt; v.size(); ++i) {\n                Node *node = new Node(v[i]);\n                tmp-&gt;next = node;\n                tmp = node;\n            }\n        }\n    }\n    //\u6253\u5370\u94fe\u8868\n    void printLinks() {\n        if (head == nullptr) {\n            cout &lt;&lt; \"empty\" &lt;&lt; endl;\n            return;\n        }\n        Node *tmp = head;\n        while (tmp-&gt;next != nullptr) {\n            cout &lt;&lt; tmp-&gt;value &lt;&lt; \"-&gt;\";\n            tmp = tmp-&gt;next;\n        }\n        cout &lt;&lt; tmp-&gt;value &lt;&lt; endl;\n    }\n    //\u53cd\u8f6c\u8fd9\u4e2a\u94fe\u8868\n    void inverseLinks(){\n        Node *pre = nullptr;\n        Node *next = nullptr;\n        while(head!= nullptr){\n            next = head-&gt;next;\n            head-&gt;next = pre;\n            pre = head;\n            head = next;\n        }\n        head = pre;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; v={1,2,3,4,5,6};\n    Node *head = createLinks(v);\n//    Node *CHead = createLinksCycle(v);\n//    Node *IHead = notLinks(head);\n    auto Binode = createBiNode(v);\n//    auto *IBiHead = notBiLinks2(Binode.first);\n//    auto BinodeC = createBiNodeCycle(v);\n    printLinks(head);\n    printBiLinks(Binode.first);\n    return 0;\n}\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_29","title":"\u94fe\u8868\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u4e2d\u7b49 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u4e2d\u7b49 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u56f0\u96be 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u4e2d\u7b49 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u7b80\u5355 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u4e2d\u7b49 LintCode\u9898\u76ee \u96be\u5ea6 \u94fe\u8868 \u9898\u76ee\u5408\u96c6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/","title":"\u961f\u5217","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_2","title":"\u961f\u5217\u8868\u793a","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_3","title":"\u961f\u5217\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 621. \u4efb\u52a1\u8c03\u5ea6\u5668 \u4e2d\u7b49 767. \u91cd\u6784\u5b57\u7b26\u4e32 \u4e2d\u7b49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/","title":"\u56fe(\u57fa\u7840\u77e5\u8bc6)","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_2","title":"\u56fe\u7684\u8868\u793a\u65b9\u6cd5","text":""},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_3","title":"\u90bb\u63a5\u77e9\u9635","text":"<p>\u8bbe\u6709 N \u4e2a\u9876\u70b9\uff0cM \u6761\u8fb9\u3002 \u90bb\u63a5\u77e9\u9635\u5c31\u662f\u4e00\u4e2a N*N \u7684\u77e9\u9635\uff0cg[i][j] \u8868\u793a\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 j \u662f\u5426\u6709\u7ebf\u8fde\u63a5\u3002 \u90bb\u63a5\u77e9\u9635\u53ef\u4ee5\u8868\u793a\u6709\u5411\u56fe\uff0c\u65e0\u5411\u56fe\uff0c\u65e0\u5411\u56fe\u6709\u4e00\u534a\u662f\u91cd\u590d\u5143\u7d20\u3002 \u90bb\u63a5\u77e9\u9635\u7684\u7f3a\u70b9\u662f\uff1a \u5f53\u8fb9\u7684\u6570\u91cf\u8fdc\u8fdc\u5c11\u4e8e\u9876\u70b9\u7684\u65f6\u5019\uff0c\u7a7a\u95f4\u6d6a\u8d39\u5927\u3002 \u90bb\u63a5\u77e9\u9635\u7684\u4f18\u70b9\u662f\uff1a \u53ef\u4ee5\u5feb\u901f\u5224\u65ad\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u662f\u5426\u76f4\u63a5\u76f8\u8fde</p> <p></p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_4","title":"\u90bb\u63a5\u8868","text":"<p>\u90bb\u63a5\u8868\u662f\u4e00\u4e2a N \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u5b58\u50a8\u4e0e\u8be5\u9876\u70b9\u76f4\u63a5\u8fde\u63a5\u7684\u9876\u70b9\u3002 \u90bb\u63a5\u8868\u7684\u4f18\u70b9\u662f\uff1a \u5f53 N \u8fdc\u5927\u4e8e M \u7684\u65f6\u5019\uff0c\u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u90bb\u63a5\u8868\u7684\u7f3a\u70b9\u662f\uff1a \u65e0\u6cd5\u76f4\u63a5\u5224\u65ad\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u76f4\u63a5\u76f8\u8fde\uff0c\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\u624d\u53ef\u4ee5\u5224\u65ad\u3002</p> <p> </p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_5","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","text":"<pre><code># G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a\n# color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\n# V \u4e2a\u70b9\uff0c E \u6761\u8fb9\noutlist = []\n\ncolor[:] = 0\ndeque = []\ns = 0 # \u5f00\u59cb\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u70b9\ndeque.append(s)\nwhile len(s) &gt; 0:   \n    current = deque.pop(0)\n    color[current] = 1\n    outlist.append(current)\n    for point, value in enumerate(G[current]):\n        if value != 0 and color[point] == 0:\n            deque.append(point)\n    color[current] = 2\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_6","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","text":"<pre><code># G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a\n# color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\n# V \u4e2a\u70b9\uff0c E \u6761\u8fb9\n\noutlist = []\n\ncolor[:] = 0\nfor i in range(V):\n    if color[i] == 0:\n        DFS(G, i)\n\ndef DFS(G, i):\n    color[i] = 1\n    outlist.append(i)\n    for point, value in enumerate(G[i]):\n        if value != 0 and color[point] == 0:\n            DFS(G, point)\n    color[i] = 2\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_7","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u65f6\u8bbf\u95ee\u5b8c\u6bcf\u4e2a\u8282\u70b9\u7684\u987a\u5e8f\uff0c\u9006\u5e8f\u8f93\u51fa\u5373\u53ef</p> <pre><code># G[][] \u56fe\u7684\u90bb\u63a5\u77e9\u9635\u8868\u793a\n# color[] \u6807\u8bb0\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\n# V \u4e2a\u70b9\uff0c E \u6761\u8fb9\n\ndef Topology(G, i, color):\n    color[i] = 1\n    #outlist.append(i)\n    for point, value in enumerate(G[i]):\n        if value != 0 and color[point] == 0:\n            Topology(G, point, color)\n    color[i] = 2\n    outlist.insert(0, i) # \u8bbf\u95ee\u5b8c\u4e4b\u540e\u9006\u5e8f\u8f93\u51fa\noutlist = []\ncolor = [0 for _ in range(len(G))]\nfor i in range(len(G)):\n    if color[i] == 0:\n        Topology(G, i, color)\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE%28%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%29/#_8","title":"\u5224\u65ad\u56fe\u662f\u5426\u6709\u73af\u8def","text":"<pre><code>def dfs(G, i, color):\n    \"\"\"\n    G : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c 0 \u8868\u793a\u65e0\u8fb9\n    \"\"\"\n    color[i] = 1\n    for j in range(len(G)):\n        if i != j and G[i][j] != 0:\n            if color[j] == 1:\n                return True\n            if color[j] == 0:\n                ans = dfs(G, j, color)\n                if ans == True:\n                    return True\n    color[i] = 2\n    return False\n\ndef isCycle(G):\n    \"\"\"\n    \u5224\u65ad\u662f\u5426\u6709\u73af\n    \"\"\"\n    color = [0] * len(G)\n    for i in range(len(G)):\n        if color[i] == 0:\n            ans = dfs(G, i, color)\n            if ans == True:\n                return True\n    return False\n</code></pre> LeetCode\u9898\u76ee \u96be\u5ea6 \u7b97\u6cd5 207. \u8bfe\u7a0b\u8868 \u4e2d\u7b49 \u68c0\u6d4b\u73af\u8def 210. \u8bfe\u7a0b\u8868 II \u4e2d\u7b49 \u62d3\u6251\u6392\u5e8f 1203. \u9879\u76ee\u7ba1\u7406 \u56f0\u96be \u62d3\u6251\u6392\u5e8f 854. \u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32 \u56f0\u96be \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","title":"\u6700\u5c0f\u751f\u6210\u6811","text":"<p>\u751f\u6210\u6811\uff0c\u662f\u6307\u56fe\u7684\u4e00\u4e2a\u6700\u5c0f\u8fde\u901a\u7684\u5b50\u56fe\uff0c\u8be5\u5b50\u56fe\u5c11\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u4e0d\u8fde\u901a\uff0c\u591a\u4e00\u6761\u8fb9\uff0c\u5c31\u4f1a\u6709\u73af\u3002</p> <p>\u6700\u5c0f\u751f\u6210\u6811\uff0c\u662f\u6307\u8fb9\u6709\u6743\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u627e\u5230\u6743\u503c\u7684\u603b\u548c\u6700\u5c0f\u7684\u90a3\u4e2a\u8fde\u901a\u5b50\u56fe\u3002</p> <p> \u5982\u56fe\uff0c\u8fb9\u4e0a\u7684\u6570\u503c\u5982\u679c\u4ee3\u8868\u8ddd\u79bb\u7684\u8bdd\uff0c\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u6c42\u4e00\u4e2a\u7528\u6700\u77ed\u7684\u8ddd\u79bb\u628a\u6240\u6709\u70b9\u8fde\u63a5\u8d77\u6765\u7684\u65b9\u6848\u3002 \u6211\u4eec\u901a\u8fc7\u4ed4\u7ec6\u89c2\u5bdf\u5b9e\u9a8c\u53ef\u4ee5\u5f97\u51fa\uff0c\u6700\u5c0f\u7684\u751f\u6210\u6811\u662f\u8fd9\u6837\u7684\u3002 </p> <p>\u4e0a\u9762\u662f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b9e\u4f8b\uff0c\u90a3\u4e48\u6211\u4eec\u4f9d\u7167\u600e\u6837\u7684\u89c4\u5219\u5f97\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u5462\uff0c\u603b\u4e0d\u80fd\u9760\u770b\u5427\uff1f</p> <p>\u5176\u5b9e\uff0c\u8fd9\u4e2a\u95ee\u9898\u7528\u8d2a\u5fc3\u6cd5\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#kruskal","title":"Kruskal\u7b97\u6cd5","text":"<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u65e0\u5411\u6709\u6743\u56fe\\(G=(V,E)\\)\uff0cKruskal\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <ol> <li>\u6784\u9020\u7a7a\u96c6\u5408A\uff0c\u5e76\u5c06\u56feG\u4e2d\u6240\u6709\u70b9\u52a0\u5165\u96c6\u5408A\uff0c\u6b64\u65f6A\u4e3a\u6709|V|\u68f5\u6811\u7684\u68ee\u6797\u3002</li> <li>\u5c06\u56fe\\(G\\)\u4e2d\u6240\u6709\u8fb9\u6309\u7167\u6743\u91cd\u8fdb\u884c\u6392\u5e8f\uff0c\u5f62\u6210\u6709\u5e8f\u96c6\u5408\\(B\\)\u3002</li> <li>\u5bf9\u4e8e\u6b65\u9aa42\u4e2d\u6392\u5e8f\u540e\u96c6\u5408B\u4e2d\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff08u\uff0cv\uff09\uff0c\u5c1d\u8bd5\u5c06\uff08u\uff0cv\uff09\u4ee5\u53ca\u70b9u\u3001v\u52a0\u5165\u5230\u96c6\u5408A\u4e2d\u3002</li> <li>\u5982\u679c\u6b65\u9aa43\u4e2d\u5c1d\u8bd5\u52a0\u5165\u7684\u70b9\u548c\u8fb9\uff0c\u5bf9\u4e8e\u56feA\u800c\u8a00\uff0c\u4e0d\u5f62\u6210\u56de\u8def\uff0c\u5219\u6dfb\u52a0\u70b9u\u3001v\u53ca\u8fb9\uff08u\uff0cv\uff09\uff0c\u5426\u5219\u4e0d\u6dfb\u52a0\u3002</li> <li>\u5c06\u6b65\u9aa43\u5904\u7406\u7684\u8fb9\uff08u\uff0cv\uff09\u4ece\u96c6\u5408B\u4e2d\u5220\u9664\u3002</li> <li>\u5224\u65ad\u6b64\u65f6\u4f5c\u4e3a\u56fe\u7684\u96c6\u5408A\uff0c\u662f\u5426\u6ee1\u8db3\u8fb9\u7684\u6570\u91cf\u7b49\u4e8e|V|-1\uff08\u4e5f\u5373\u6ee1\u8db3\u6700\u5c0f\u751f\u6210\u6811\u7684\u8981\u6c42\uff09\uff0c\u5982\u679c\u662f\uff0c\u5219\u627e\u5230\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8f6c\u81f3\u6b65\u9aa43\u3002</li> </ol> <p>\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6309\u7167Kruskal\u7b97\u6cd5\uff0c\u8fc7\u7a0b\u662f\u4e0b\u9762\u8fd9\u4e2a\u6837\u5b50\u7684\u3002 \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0cA\u96c6\u5408\u5305\u542b\u6240\u6709\u7684\u9876\u70b9\uff0cB\u96c6\u5408\u5305\u542b\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u8fbe\u6392\u5e8f\u597d\u7684\u8fb9\u3002  \u7b2c\u4e00\u6b21\uff0c\u6dfb\u52a01--&gt;2, \u5f97\u5230  \u7b2c\u4e8c\u6b21\uff0c\u6dfb\u52a01--&gt;3,\u5f97\u5230  \u7b2c\u4e09\u6b21\uff0c\u6dfb\u52a04--&gt;6\uff0c\u5f97\u5230  \u7b2c\u56db\u6b21\uff0c\u6dfb\u52a05--&gt;6,\u5f97\u5230  \u7b2c\u4e94\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a02--&gt;3,\u4f46\u662f\u5982\u679c\u6dfb\u52a0\u4e862--&gt;3\u5c31\u5f62\u6210\u7684\u56de\u8def\uff0c\u6240\u4ee5\u8be5\u6b21\u4e0d\u6dfb\u52a0\uff0c\u4ece\u96c6\u5408B\u4e2d\u5220\u96642--&gt;3,\u7ee7\u7eed\u770b\u4e0b\u4e00\u4e2a\u3002  \u7b2c\u516d\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a04--&gt;5,\u4f46\u662f\u5982\u679c\u6dfb\u52a0\u4e86\uff0c\u5c31\u5f62\u6210\u4e86\u56de\u8def\uff0c\u6240\u4ee5\u4e5f\u5e94\u8be5\u8df3\u8fc7\u3002  \u7b2c\u4e03\u6b21\uff0c\u5e94\u8be5\u6dfb\u52a03--&gt;4,\u5f97\u5230  \u6b64\u65f6\uff0c\u6240\u6709\u7684\u70b9\u90fd\u5df2\u7ecf\u8fde\u901a\uff0c\u6240\u4ee5\u7b97\u6cd5\u7ed3\u675f\u3002\u6700\u5c0f\u751f\u6210\u6811\u627e\u51fa\u6765\u4e86\u3002</p> <p>\u5206\u6790\u6574\u4e2a\u8fc7\u7a0b\uff0c\u5224\u65ad\u8fde\u901a\u4e0e\u5426 \u548c \u5224\u65ad\u7b97\u6cd5\u662f\u5426\u7ed3\u675f \u662f\u6bcf\u4e00\u6b65\u64cd\u4f5c\u90fd\u8981\u68c0\u67e5\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u5224\u65ad\u7b97\u6cd5\u662f\u5426\u7ed3\u675f\u53ef\u4ee5\u7528A\u7684\u8fb9\u7684\u6570\u76ee\u662f\u5426\u8fbe\u5230\u4e86\u9876\u70b9\u7684\u6570\u76ee-1\uff0c \u5224\u65ad\u8054\u901a\u6027\u5c31\u8981\u7528\u5230\u5e76\u67e5\u96c6\u4e86\u3002\u5e76\u67e5\u96c6\u662f\u4e00\u79cd\u591a\u4e2a\u6811\u7ec4\u6210\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u67e5\u51fa\u540c\u7ec4\u4e0d\u540c\u7ec4\u7684\u95ee\u9898\u3002</p> <p>\u4f7f\u7528\u5e76\u67e5\u96c6\u5b9e\u73b0\u7684Kruskal\u7b97\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li>\u628a\u8fb9\u6309\u7167\u4ece\u5c0f\u5230\u5927\u6392\u5e8f</li> <li>\u6bcf\u6b21\u9009\u62e9\u6700\u5c0f\u7684\u8fb9\uff0c\u5982\u679c\u6dfb\u52a0\u8be5\u8fb9\u4e0d\u4f1a\u5f62\u6210\u56de\u8def\uff0c\u5219\u6dfb\u52a0</li> <li>\u5224\u65ad\u8fb9\u7684\u6570\u91cf\u662f\u5426\u5230\u8fbe\u9876\u70b9\u7684\u6570\u91cf-1\uff0c\u5982\u679c\u6ca1\u6709\u8f6c\u52302</li> </ol> <pre><code># vector3[] \u8868\u793avector3[0] -&gt; vector3[1] \u6709\u4e00\u6761\u6743\u91cd\u4e3a vector3[2] \u7684\u8fb9\n# color[] \u70b9\u7684\u8bbf\u95ee\u72b6\u6001\n# paraSet[] \u5e76\u67e5\u96c6\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u4f1a\u5f62\u6210\u73af\n\nansList = []\npoints = []\n\nparaSet = [i for i in range(V)]\nvector3.sort(lambda x:x[2])\n\ndef parent(paraSet, member):\n    if paraSet[member] = member:\n        return member\n    paraSet[member] = parent(paraSet[member])\n    return paraSet[member]\n\ndef merge(paraSet, u, v):\n    uParent = parent(paraSet, u)\n    vParent = parent(paraSet, v)\n    if uParent != vParent:\n        paraSet[vParent] = uParent\n\nfor u, v, w in vector3:\n    if parent(paraSet, u) != parent(paraSet, v):\n        ansList.append([u, v, w])\n        merge(paraSet, u, v)\n    if len(ansList) == V - 1:\n        break  # \u8fb9\u6570\u7b49\u4e8e\u9876\u70b9\u6570-1\uff0c\u5f97\u5230\u7ed3\u679c\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#prime","title":"prime\u7b97\u6cd5","text":"<p>\u5bf9\u4e8e\u56feG=\uff08V\uff0cE\uff09\uff0cPrim\u7b97\u6cd5\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <ol> <li>\u7ed9\u5b9a\u7a7a\u96c6\u5408A\uff0c\u4ee5\u53ca\u4efb\u4f55\u4e00\u70b9v0\u5c5e\u4e8e{V}\uff0c\u5c06v0\u52a0\u5165\u96c6\u5408A\u4e2d\uff0c\u6b64\u65f6A={v0}\u3002</li> <li>\u5bf9\u4e8e\u96c6\u5408A\u4e2d\u7684\u4efb\u610f\u4e00\u70b9u\uff0c\u4ee5\u53caV-A\u4e2d\u4efb\u610f\u4e00\u70b9w\uff0c\u627e\u5230\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff08u\uff0cw\uff09\uff0c\u5e38\u8bc6\u5c06\uff08u\uff0cw\uff09\u52a0\u5165\u96c6\u5408A\u3002</li> <li>\u5224\u65ad\u6b65\u9aa42\u4e2d\u7684\u8fb9\uff08u\uff0cw\uff09\u662f\u5426\u4f7f\u56feA\u5f62\u6210\u56de\u8def\uff0c\u5982\u679c\u5f62\u6210\u56de\u8def\uff0c\u5219\u4e0d\u52a0\u5165A\uff0c\u5426\u5219\u5c06\u70b9w\u548c\u8fb9\uff08u\uff0cw\uff09\u52a0\u5165A\u3002</li> <li>\u5224\u65ad\u6b64\u65f6\u56feG\u4e2d\u6240\u6709\u70b9{V}\u662f\u5426\u5df2\u7ecf\u5168\u90e8\u52a0\u5165\u5230\u96c6\u5408A\u4e2d\uff0c\u5982\u679c\u662f\uff0c\u5219\u6700\u5c0f\u751f\u6210\u6811\u5df2\u7ecf\u627e\u5230\uff0c\u9000\u51fa\uff1b\u5426\u5219\uff0c\u8f6c\u6b65\u9aa42\u3002</li> </ol> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u7528prime\u7b97\u6cd5\u6765\u505a\u7684\u8fc7\u7a0b\u662f\uff1a \u521d\u59cb\u5316\u7684\u65f6\u5019\uff0cA\u662f\u7a7a\u7684\uff0cV\u5305\u542b\u4e86\u6240\u6709\u7684\u70b9\u3002  \u7b2c\u4e00\u6b65\uff0c\u4eceV\u4e2d\u4efb\u610f\u627e\u4e00\u4e2a\u70b9\u52a0\u5165\u96c6\u5408A\u4e2d\uff1b  \u7b2c\u4e8c\u6b65\uff0c\u627e\u52304\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u662f4--6,  \u7b2c\u4e09\u6b65\uff0c\u627e\u52304\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c5--6\uff0c  \u7b2c\u56db\u6b65\uff0c\u627e\u52304\uff0c5\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c4--3  \u7b2c\u4e94\u6b65\uff0c\u627e\u52303\uff0c4\uff0c5\uff0c6\u548c\u5176\u4f59\u7684\u9876\u70b9\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c1--3  \u7b2c\u516d\u6b65\uff0c\u627e\u52301\uff0c3\uff0c4\uff0c5\uff0c6\u548c2\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c1--2\uff0c  \u6b64\u65f6\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u52a0\u5165\u4e86\u96c6\u5408A\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u7ed3\u679c\u548c\u4e0a\u9762\u7684Kruskal\u7b97\u6cd5\u7b97\u6cd5\u662f\u4e00\u81f4\u7684\u3002\u4e00\u4e2a\u662f\u4ece\u8fb9\u6765\u8003\u8651\uff0c\u4e00\u4e2a\u662f\u4ece\u9876\u70b9\u6765\u8003\u8651\uff0c\u4e8c\u8005\u5b9e\u9645\u4e0a\u90fd\u662f\u8d2a\u5fc3\u6cd5\u7684\u601d\u8def\u3002</p> <p>prime\u7b97\u6cd5\u7684\u6838\u5fc3\u662f\u627e\u5230\u4e24\u4e2a\u96c6\u5408\u4e4b\u95f4\u6743\u91cd\u6700\u5c0f\u7684\u8fb9\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u5806\u5b9e\u73b0\u3002 prime\u7b97\u6cd5\u7684\u4e00\u79cd\u5b9e\u73b0\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u7a7a\u96c6\u5408 A\uff0cB \u96c6\u5408\u5305\u542b\u6240\u6709\u7684\u70b9</li> <li>\u4ece B \u4e2d\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u70b9\u79fb\u52a8\u5230 A \u4e2d</li> <li>\u9009\u62e9\u96c6\u5408A\u548c\u96c6\u5408B\u4e2d\u6240\u6709\u70b9\u4e4b\u95f4\u7684\u6743\u91cd\u6700\u5c0f\u7684\u90a3\u6761\u8fb9\uff0c\u5982\u679c\u4e0d\u6784\u6210\u56de\u8def\uff0c\u6dfb\u52a0\u8be5\u8fb9</li> <li>\u91cd\u590d3\u76f4\u5230\u96c6\u5408B\u4e3a\u7a7a</li> </ol> <pre><code>import heapq\n\n# \u4efb\u610f\u9009\u62e9\u4e00\u70b9 start\n# vector3[] \u8868\u793avector3[0] -&gt; vector3[1] \u6709\u4e00\u6761\u6743\u91cd\u4e3a vector3[2] \u7684\u8fb9\n# color[] \u70b9\u7684\u8bbf\u95ee\u72b6\u6001\ndef prime(vector3, start):\n    ansList = []\n    color = [0] * V\n    B = heapq.heapify()\n    heapq.push((0, start, start)) # start \u5230 start \u8ddd\u79bb\u662f 0\n    while len(B) &gt; 0:\n        w, u, v = heapq.pop()\n        if u != v:\n            ansList.append((u,v,w))\n        color[u] = 1\n        for u, v, w in vector3[u]:\n            if color[v] == 0:\n                heapq.push((w, u, v))\n    return ansList\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/","title":"\u6700\u77ed\u8def\u5f84\u95ee\u9898","text":"<p>\u6700\u77ed\u8def\u5f84\u95ee\u9898\u662f\u56fe\u8bba\u4e2d\u7684\u4e00\u79cd\u91cd\u8981\u7684\u95ee\u9898\u3002\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u8be6\u7ec6\u63cf\u8ff0\uff0c\u53ef\u4ee5\u53c2\u8003\u4e00\u672c\u4e66\u300a\u8ff7\u832b\u7684\u65c5\u884c\u5546\u300b\uff0c\u4e66\u4e2d\u4ecb\u7ecd\u4e86\u5404\u5f0f\u5404\u6837\u7684\u8def\u5f84\u89c4\u5212\u95ee\u9898\uff0c\u8fd8\u6709\u5404\u79cd\u53ef\u80fd\u7684\u89e3\u6cd5\uff0c\u548c\u6574\u4e2a\u95ee\u9898\u7684\u53d1\u5c55\u5386\u53f2\u3002\u770b\u5b8c\u80fd\u5bf9\u8be5\u95ee\u9898\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u7406\u89e3\uff0c\u4e5f\u80fd\u591f\u660e\u767d\uff0c\u8ba1\u7b97\u673a\u7b97\u6cd5\u662f\u5982\u4f55\u5728\u5c1a\u4e0d\u76f4\u5230\u8be5\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4e00\u6b65\u4e00\u6b65\u6269\u5c55\u89e3\u9898\u7684\u89c4\u6a21\uff0c\u4ece\u800c\u4f7f\u5f97\u73b0\u5728\u5927\u90e8\u5206\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u5728\u80fd\u591f\u63a5\u53d7\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u4ecb\u7ecd\u51e0\u4e2a\u7b80\u5355\u7684\u6c42\u6700\u77ed\u8def\u5f84\u7684\u7b97\u6cd5\uff0c\u662f\u5728\u7b97\u6cd5\u9898\u76ee\u4e2d\u7ecf\u5e38\u51fa\u73b0\u7684\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#_2","title":"\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84","text":"<pre><code># G \u662f\u7528\u4e34\u9636\u8868\u8868\u793a\u7684\u56fe\n# N \u662f\u9876\u70b9\u7684\u4e2a\u6570\n# road \u8bb0\u5f55\u4e00\u6761\u8def\u5f84\n# roads \u8bb0\u5f55\u6700\u540e\u7684\u7ed3\u679c\n# color \u8bb0\u5f55\u8282\u70b9\u7684\u8bbf\u95ee\u72b6\u6001\ndef dfs(G, src, dst, color, road, roads):\n    color[src] = 1\n    road.append(src)\n    if src == dst:\n        roads.append( road.copy() )\n    else:\n        for u in G[src]:\n            if color[u] == 0:\n                dfs(G, u, dst, color, road, roads)\n    color[src] = 0\n    road.pop()\n    return roads\n\n# \u627e\u51fa\u4e24\u70b9\u4e4b\u95f4\u7684\u6240\u6709\u8def\u5f84\uff0c\u8f93\u51fa\u4e00\u4e2a\u6700\u77ed\u7684\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#_3","title":"\u5355\u6e90\u6700\u77ed\u8def\u5f84","text":"<p>\u4e0a\u9762\u6c42\u7684\u662f\u4efb\u610f\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5982\u679c\u6c42\u67d0\u4e00\u4e2a\u70b9\u5230\u5176\u4f59\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u8fd8\u6709\u6548\u7387\u66f4\u9ad8\u7684\u65b9\u6cd5\u3002 \u6c42\u4e00\u4e2a\u7279\u5b9a\u7684\u70b9\u5230\u5176\u4ed6\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5c31\u662f\u5355\u6e90\u6700\u77ed\u8def\u95ee\u9898\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#dijkstra","title":"dijkstra \u7b97\u6cd5","text":"<p>\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\uff1a \u6bcf\u6b21\u627e\u5230\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9\uff0c\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u9876\u70b9\u8fdb\u884c\u6269\u5c55\uff0c\u6700\u7ec8\u5f97\u5230\u6e90\u70b9\u5230\u5176\u4f59\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u662f\uff1a 1. \u521d\u59cb\u5316\uff1a\u5c06\u6240\u6709\u7684\u9876\u70b9\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u5df2\u77e5\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u96c6\u5408P\u548c\u672a\u77e5\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u96c6\u5408Q\u3002\u5f00\u59cb\u7684\u65f6\u5019\uff0cP\u4e2d\u53ea\u6709\u6e90\u70b9\uff0c\u56e0\u4e3a\u5f00\u59cb\u7684\u65f6\u5019\u53ea\u80fd\u76f4\u5230\u6e90\u70b9\u5230\u6e90\u70b9\u7684\u8ddd\u79bb\u6700\u8fd1\uff0c\u662f0. \u5176\u4f59\u6240\u6709\u7684\u70b9\u5c5e\u4e8e\u96c6\u5408Q\u3002</p> <ol> <li> <p>\u8bbe\u7f6e\u6e90\u70b9\u5230\u81ea\u5df1\u7684\u8ddd\u79bb\u4e3a0.\u8bbe\u7f6e\u6e90\u70b9\u80fd\u591f\u76f4\u63a5\u5230\u8fbe\uff08\u4e0d\u7ecf\u8fc7\u522b\u7684\u8282\u70b9\uff09\u7684\u9876\u70b9\u7684\u8ddd\u79bb\u4e3ae\u6e90\u70b9\u5230\u8be5\u70b9\u7684\u8ddd\u79bb\u3002\u628a\u6240\u6709\u6e90\u70b9\u4e0d\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u8282\u70b9\u7684\u503c\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\u3002</p> </li> <li> <p>\u5728\u96c6\u5408Q\u4e2d\u9009\u62e9\u4e00\u4e2a\u79bb\u6e90\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u52a0\u5165\u5230P\uff0c\u540c\u65f6\u4eceQ\u4e2d\u5220\u9664\u8be5\u8282\u70b9\uff0c\u5047\u8bbe\u8fd9\u4e2a\u8282\u70b9\u662fu,\u8003\u5bdfu\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\uff0c\u770b\u662f\u5426\u4ece\u6e90\u70b9\u901a\u8fc7u\u5230\u8fbe\u8fd9\u4e9b\u8282\u70b9\u6bd4\u539f\u6765\u7684\u8ddd\u79bb\u8fd1\uff0c\u5982\u679c\u8fd1\uff0c\u5c31\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002</p> </li> <li> <p>\u91cd\u590d\u7b2c\u4e09\u6b65\u76f4\u5230Q\u4e3a\u7a7a\u3002</p> </li> </ol> <p>\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u8be5\u7b97\u6cd5\u7684\u5177\u4f53\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u521d\u59cb\u5316\uff0cP\u96c6\u5408\u4e2d\u53ea\u6709\u6e90\u70b91\uff0cQ\u96c6\u5408\u4e2d\u662f\u5269\u4e0b\u7684\u6240\u6709\u8282\u70b9\u3002distance\u6570\u636e\u521d\u59cb\u5316\u6210\u56fe\u4e2d\u7684\u6837\u5b50\u3002 </p> <p>\u627e\u5230\u7ed3\u5408Q\u4e2d\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f2\uff0c\u52a0\u5165\u5230P\u4e2d\uff0c2\u53ef\u4ee5\u5230\u8fbe3\u548c4.\u6b64\u65f6\u52303\u7684\u8ddd\u79bbdistance\u4e2d\u662f12\uff0c\u52304\u7684\u8ddd\u79bbdistance\u4e2d\u662f\u65e0\u7a77\u5927\uff0c\u5982\u679c\u901a\u8fc7\u8282\u70b92\u4e2d\u8f6c\uff0c\u53ef\u4ee5\u5f97\u5230\u52303\u7684\u8ddd\u79bb\u7b49\u4e8e10\uff0c\u5c0f\u4e8e\u539f\u6765\u768412\uff0c\u52304\u7684\u8ddd\u79bb\u662f4\uff0c\u5c0f\u4e8e\u539f\u6765\u7684\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u8ddd\u79bb\u3002 </p> <p>\u4ece\u96c6\u5408Q\u4e2d\u627e\u4e00\u4e2a\u5230\u96c6\u5408P\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f4\uff0c\u628a4\u52a0\u5165P\uff0c\u540c\u65f6\u4eceQ\u4e2d\u5220\u96644\uff0c4\u80fd\u591f\u5230\u8fbe\u7684\u8282\u70b9\u662f3\uff0c5\uff0c6\uff0c\u8003\u5bdf\u901a\u8fc74\u80fd\u591f\u51cf\u5c11\u539f\u6765distance\u4e2d\u7684\u8ddd\u79bb\u3002\u4ece\u6e90\u70b9\u901a\u8fc74\u8fbe\u52303\u8ddd\u79bb\u662f8\uff0c\u6bd4\u539f\u6765\u768410\u5c0f\uff0c\u66f4\u65b0\uff1b\u4ece\u6e90\u70b9\u901a\u8fc74\u5230\u8fbe5\uff0c\u8ddd\u79bb\u662f17\uff0c\u6bd4\u539f\u6765\u7684\u65e0\u7a77\u5927\u5c0f\uff0c\u66f4\u65b0\uff1b\u4ece\u6e90\u70b9\u901a\u8fc74\u5230\u8fbe6\uff0c\u8ddd\u79bb\u662f19\uff0c\u6bd4\u539f\u6765\u7684\u65e0\u7a77\u5927\u5c0f\uff0c\u66f4\u65b0\uff1b </p> <p>\u4ece\u96c6\u5408Q\u4e2d\u9009\u51fa\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u8282\u70b9\uff0c\u662f3\uff0c\u628a3\u52a0\u5165\u7ed3\u5408P\uff0c\u540c\u65f6\u4ece\u96c6\u5408Q\u4e2d\u5220\u96643.\u770b\u901a\u8fc73\u80fd\u591f\u4f7f\u5f97distance\u4e2d\u7684\u5404\u4e2a\u8ddd\u79bb\u7f29\u5c0f\u30023\u53ea\u80fd\u5230\u8fbe5\uff0c\u4ece\u6e90\u70b9\u901a\u8fc73\u5230\u8fbe5\u7684\u8ddd\u79bb\u662f13\uff0c\u5c0f\u4e8e\u539f\u6765\u768417\uff0c\u66f4\u65b0\uff1b </p> <p>\u4ece\u96c6\u5408Q\u4e2d\u7ee7\u7eed\u9009\u62e9\u8ddd\u79bb\u6e90\u70b9\u6700\u8fd1\u7684\u70b9\uff0c\u662f5\uff0c\u52a0\u5165P\uff0c\u4eceQ\u4e2d\u5220\u9664\uff1b5\u53ea\u80fd\u5230\u8fbe6\uff0c\u901a\u8fc75\u5230\u8fbe6\u8ddd\u79bb\u53d8\u6210\u4e8617\uff0c\u5c0f\u4e8e\u539f\u6765\u768419\uff0c\u66f4\u65b0\uff1b </p> <p>\u96c6\u5408Q\u4e2d\u53ea\u5269\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u52a0\u5165P\u96c6\u5408\uff0c\u901a\u8fc7\u5b83\u4e0d\u80fd\u8fbe\u5230\u4efb\u4f55\u8282\u70b9\uff0c\u6240\u4ee5\u7b97\u6cd5\u7ed3\u675f\u3002 \u6b64\u65f6\u7684distance\u5b58\u50a8\u7684\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c\u3002 </p> <p>\u6ce8\u610f\uff0c\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N^2)\uff0c\u5982\u679c\u4f7f\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u56fe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u662fO(M),M\u662f\u8fb9\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u7b97\u6cd5\u975e\u5e38\u9ad8\u6548\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u51b3\u5e26\u8d1f\u6743\u8fb9\u7684\u95ee\u9898\uff0c\u5982\u679c\u8981\u89e3\u7684\u95ee\u9898\u6743\u91cd\u6709\u8d1f\u503c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e0b\u9762\u63d0\u5230\u7684\u65b9\u6cd5\u3002</p> <ol> <li>\u4f7f\u7528\u4e00\u4e2adistance\u6570\u7ec4\u8868\u793a\u70b9s\u5230\u5176\u4ed6\u4e2a\u70b9\u7684\u8ddd\u79bb</li> <li>\u5f00\u59cb\u7684\u65f6\u5019\u521d\u59cb\u5316distance\u4e3aINF\uff0c\u7136\u540e\u628as\u76f4\u63a5\u8fde\u63a5\u7684\u70b9\u8bbe\u7f6e\u4e3a\u5176\u8fb9\u7684\u6743\u91cd</li> <li>\u6bcf\u6b21\u627e\u5230\u8ddd\u79bbs\u6700\u8fd1\u7684\u70b9\uff0c\u7136\u540e\u904d\u5386\u5176\u4ed6\u7684\u70b9\uff0c\u5982\u679c\u53d1\u73b0\u7ecf\u8fc7\u5176\u4ed6\u70b9\u4e2d\u8f6c\u4e4b\u540e\u8ddd\u79bb\u53ef\u4ee5\u53d8\u77ed\uff0c\u66f4\u65b0distance</li> <li>\u6b65\u9aa43\u6267\u884cV\u6b21</li> </ol> <pre><code>def dijkstra(self, g, s):\n    \"\"\"\n    dijkstra \u7b97\u6cd5\u5b9e\u73b0\n    g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9\n    s : \u6e90\u70b9\n    \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    \"\"\"\n    n = len(g) # \u70b9\u4e2a\u6570\n\n    # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806\n    q = []\n    for point in range(n):\n        if (g[s][point] != INF):\n            heapq.heappush(q, [g[s][point], point])\n        else:\n            heapq.heappush(q, [INF, point]) # [dis, point] \u8868\u793a s-&gt;point \u6700\u77ed\u8ddd\u79bb\u662f dis\n\n    distance = [INF for _ in range(n)]\n    distance[s] = 0\n    while len(q) &gt; 0:\n        dis, u = heapq.heappop(q)\n        distance[u] = dis\n        for i in range(len(q)):\n            if q[i][0] &gt; dis + g[u][ q[i][1] ]:\n                q[i][0] = dis + g[u][ q[i][1] ]\n        heapq.heapify(q) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806\n    return distance\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#bellman-ford","title":"Bellman-Ford \u7b97\u6cd5","text":"<p>\u8be5\u7b97\u6cd5\u6838\u5fc3\u4ee3\u7801\uff1a <pre><code>for(int k=1;k&lt;=n-1;k++){\n  for(i=1;i&lt;=m;i++){\n    if( distance[[v[i]]] &gt; distance[u[i]] + w[i] ){\n        distance[[v[i]]] = distance[u[i]] + w[i]\n    }\n  }\n}\n</code></pre> \u4ee3\u7801\u5f53\u4e2d\uff0cn\u662f\u8282\u70b9\u7684\u4e2a\u6570\uff0cm\u662f\u8fb9\u7684\u4e2a\u6570\uff0cdistance\u662f\u8bb0\u5f55\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\uff0cu,v,w\u662f\u4e09\u4e2a\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8\u8fb9\u7684\u4fe1\u606f\uff0c\u5bf9\u4e8e\u8fb9i\u6765\u8bf4\uff0cu[i]\u662f\u8fd9\u53d8\u7684\u8d77\u70b9\uff0cv[i]\u662f\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\uff0cw[i]\u662f\u8fd9\u6761\u8fb9\u7684\u6743\u91cd\u3002\u6240\u4ee5\uff0c <pre><code>if( distance[[v[i]]] &gt; distance[u[i]] + w[i] ){\n    distance[[v[i]]] = distance[u[i]] + w[i]\n}\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5982\u679c\u4ece\u6e90\u70b9\u5230\u8282\u70b9v[i]\u7684\u8ddd\u79bb \u5927\u4e8e \u7ecf\u8fc7\u8282\u70b9u[i]\u518d\u5230v[i]\u7684\u8ddd\u79bb\uff0c\u5c31\u66f4\u65b0\u6e90\u70b9\u5230\u8282\u70b9v[i]\u7684\u8ddd\u79bb\u4e3a distance[u[i]] + w[i]. \u8fd9\u91cc\u7684\u64cd\u4f5c\u548cdijstra\u7b97\u6cd5\u662f\u4e00\u6837\u7684\u542b\u4e49\u3002\u901a\u4fd7\u7684\u7406\u89e3\u5c31\u662f\uff0c\u5982\u679c\u901a\u8fc7\u7b2ci\u6761\u8fb9\u80fd\u4f7f\u8ddd\u79bb\u53d8\u77ed\uff0c\u5c31\u66f4\u65b0\u3002</p> <p>\u90a3\u4e48\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u677e\u5f1b\u4e00\u8fb9\u4e4b\u540e\u4f1a\u662f\u4ec0\u4e48\u6837\u5b50\u5462\u3002\u4e3a\u4ec0\u4e48\u6700\u5916\u5c42\u8fd8\u6709\u4e00\u4e2an-1\u6b21\u7684\u5faa\u73af\u5462\uff1f \u8ba9\u6211\u4eec\u901a\u8fc7\u5177\u4f53\u7684\u5b9e\u4f8b\u770b\u4e00\u4e0b\u5177\u4f53\u60c5\u51b5\u3002  \u7a7a\u5fc3\u5c0f\u5706\u5708\u4e0a\u7684\u6570\u5b57\u662f\u8fb9\u7684\u7f16\u53f7\uff0cdistance\u6570\u7ec4\u88ab\u521d\u59cb\u5316\u4e86\u3002\u6211\u4eec\u7528\u4e0a\u9762\u7684\u4ee3\u7801\u8fdb\u884c\u4e00\u8f6e\u8fd0\u7b97\uff1aK=1\uff0c i= 1...m \u8fd9\u91ccm\u7b49\u4e8e5\uff0c\u56e0\u4e3a\u53ea\u67095\u6761\u8fb9\u3002 i = 1, u[1]=2, v[1]=3, distance[v[1]]\u65e0\u7a77\u5927\uff0cdistance[u[1]]+w[1]\u8fd8\u662f\u65e0\u7a77\u5927\uff0c\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0distance\u6570\u7ec4\u3002 i = 2, distance[v[2]]=\u65e0\u7a77\uff0c\u800cdistance[u[2]]+w[2]=-3,\u6240\u4ee5distance[v[2]]=-3  i = 3, distance[v[3]]=\u65e0\u7a77\uff0c\u800cdistance[u[3]]+w[3]=5,\u6240\u4ee5distance[3]=5,  i = 4, distance[v[4]]=5\uff0c\u800cdistance[u[4]]+w[4]=\u65e0\u7a77,\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0\u3002  i = 5, distance[v[5]]=\u65e0\u7a77\uff0c\u800cdistance[u[5]]+w[5]=\u65e0\u7a77\uff0c\u6240\u4ee5\u672c\u6b21\u4e0d\u66f4\u65b0\u3002 </p> <p>\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u677e\u5f1b\u4e86\u4e00\u8fb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5f97\u5230\u7b54\u6848\uff0c\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5f97\u5230\u4e86\u6e90\u70b9\u52302\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6e90\u70b9\u52303\u76ee\u524d\u8fd8\u4e0d\u662f\u6700\u77ed\u8ddd\u79bb\u3002\u6240\u4ee5\u53ef\u4ee5\u5047\u5b9a\uff0c\u6bcf\u6b21\u904d\u5386\u4e00\u8fb9\u6240\u6709\u7684\u8fb9\uff0c\u81f3\u5c11\u80fd\u591f\u786e\u5b9a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5\u6700\u591a\u5faa\u73af\u9876\u70b9\u7684\u4e2a\u6570\u51cf1\u6b21\u5c31\u53ef\u4ee5\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u6bcf\u6b21\u904d\u5386\u4e00\u904d\u8fb9\u53ea\u80fd\u786e\u5b9a\u4e00\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u6240\u4ee5n-1\u6b21\u53ea\u662f\u4e0a\u9650\uff0c\u5982\u679c\u8d85\u8fc7\u4e86n-1\u6b21\uff0cdistance\u6570\u7ec4\u8fd8\u5728\u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u8d1f\u6743\u56de\u8def\uff0c\u5b58\u5728\u8d1f\u6743\u56de\u8def\u7684\u56fe\u662f\u6ca1\u6709\u6700\u77ed\u8def\u5f84\u7684\uff0c\u56e0\u4e3a\u6bcf\u7ed5\u4e00\u5708\u8def\u5f84\u90fd\u4f1a\u7f29\u77ed\u3002</p> <p>K=2 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a </p> <p>k=3 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a </p> <p>k=4 \u5b8c\u6210\u4e4b\u540e\u7684\u60c5\u51b5\uff1a </p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u65f6\u5df2\u7ecf\u6ca1\u6709\u53d8\u5316\u4e86\uff0c\u7b97\u6cd5\u5728\u4e0e\u4e0a\u4e00\u6b21\u76f8\u6bd4\uff0cdistance\u6ca1\u6709\u53d8\u5316\u4e4b\u540e\u5176\u5b9e\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u4e86\u3002</p> <pre><code>import numpy as np\ndef BellmanFord(self, edges, s, N):\n    \"\"\"\n    BellmanFord \u7b97\u6cd5\u5b9e\u73b0\n    edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u--&gt;v \u7684\u6743\u91cd\u4e3a w\n    s : \u6e90\u70b9\n    \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570\n    \"\"\"\n    distance = np.zeros(N)\n    distance.fill(INF)\n    distance[s] = 0\n    for _ in range(N):\n        distance_tmp = np.copy(distance)\n        for u, v, w in edges:\n            if distance[v] &gt; distance[u] + w:\n                distance[v] = distance[u] + w\n        if np.array_equal(distance, distance_tmp):\n            break\n    for u, v, w in edges:\n        if distance[v] &gt; distance[u] + w:\n            print(\"\u5b58\u5728\u8d1f\u6743\u56de\u8def\")\n    return distance\n</code></pre> <p>\u53c2\u8003\u6587\u732e\uff1a</p> <ol> <li>\u5e26\u6743\u6700\u77ed\u8def\uff1ahttp://www.renfei.org/blog/weighted-shortest-path.html</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#_4","title":"\u591a\u6e90\u6700\u77ed\u8def\u5f84","text":"<p>\u5728\u4e00\u4e2a\u56fe\u4e2d\uff0c\u627e\u5230\u4efb\u610f\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\uff0c\u53eb\u505a\u591a\u6e90\u6700\u77ed\u8def\u5f84\u3002 \u5982\u4e0b\u56fe\uff0c1\uff0c2\uff0c3\uff0c4\u8868\u793a4\u4e2a\u57ce\u5e02\uff0c\u7ebf\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8be5\u8def\u7a0b\u7684\u8ddd\u79bb\uff0c\u6c42\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u7684\u6700\u77ed\u8def\u5f84\u662f\u591a\u5c11\u3002 </p> <p>\u5148\u6765\u8003\u8651\u5982\u4f55\u624d\u80fd\u786e\u5b9a\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u6bd4\u5982\u6c42\u4ece\u57ce\u5e021\u5230\u57ce\u5e023\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u6216\u8005\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u65b9\u5f0f\uff0c\u4ece\u8282\u70b91\u51fa\u53d1\uff0c\u641c\u7d22\u5230\u8282\u70b93\u672a\u77e5\uff0c\u7136\u540e\u8bb0\u5f55\u6240\u6709\u8def\u5f84\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5c31\u662f1\u52303\u7684\u6700\u77ed\u8def\u5f84\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#_5","title":"\u91cd\u590d\u5e73\u65b9\u6cd5\uff1a","text":"<p>\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u77e9\u9635\u7684\u5e42\u7684\u6280\u672f\u6c42\u89e3\u6700\u77ed\u8def\u5f84\u3002</p> <pre><code># G[][] \u662f\u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\n# G[i][j] \u4e0d\u8fde\u901a\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\n# G[i][i] \u8bbe\u7f6e\u62100\n\ndef extendPath(A, B):\n    C = deepcopy(A)\n    for i in range(N):\n        for j in range(N):\n            C[i][j] = 9999999\n            for k in range(N):\n                C[i][j] = min(C[i][j], A[i][k] + B[k][j])\n    return C\n\nm = 1\nwhile m &lt; N - 1:\n    G = extendPath(G, G)\n    m = m * 2\n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#floyd-warshall-on3","title":"Floyd-Warshall \u7b97\u6cd5\uff1a(O(N^3))","text":"<p>\u4f7f\u7528\u5bbd\u5ea6\u4f18\u5148\u6216\u8005\u6df1\u5ea6\u4f18\u5148\u7684\u65b9\u5f0f\u6c42\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8fd8\u53ef\u4ee5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u6c42\u591a\u6e90\u6700\u77ed\u8def\u95ee\u9898\u5c31\u663e\u5f97\u592a\u590d\u6742\u4e86\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f \u8bbe\u60f3\u4e00\u4e0b\uff0c\u4ecea\u5230b\u7684\u8def\u7a0b\u662fl,\u5982\u4f55\u7f29\u77ed\u8fd9\u4e2a\u8def\u7a0b\u5462\uff1f\u53ea\u80fd\u8bd5\u8bd5\u80fd\u4e0d\u80fd\u627e\u5230\u5176\u4ed6\u7684\u8def\u4ecea\u5230b\uff0c\u770b\u5176\u4ed6\u7684\u6240\u6709\u8def\u7a0b\u4e2d\u6709\u6ca1\u6709\u6bd4\u5f53\u524d\u8fd9\u6761\u8def\u77ed\u7684\u3002 \u8fd9\u5c31\u662ffloyd-Warshall\u7b97\u6cd5\u7684\u601d\u60f3\u3002</p> <p>\u6211\u4eec\u628a\u4e0a\u9762\u7684\u56fe\u5b58\u50a8\u6210\u4e0b\u9762\u8fd9\u79cd\u5f62\u5f0f\uff1a\u79f0\u4e3ae.  floyd-Warshall \u7b97\u6cd5\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a <pre><code>for(int k=1;k&lt;=n;k++){\n  for(int i=1;i&lt;=n;i++){\n    for(int j=1;j&lt;=n;j++){\n      if(e[i][j]&gt;e[i][k]+e[k][j]){\n         e[i][j] = e[i][k]+e[k][j];\n      }\n    }\n  }\n}\n</code></pre> \u5177\u4f53\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5f00\u59cb\u7684\u65f6\u5019\uff0ck=1,i=1,j=1,2,3,4; \u5faa\u73af\u91cc\u9762\u6bd4\u8f83\u7684\u662f\uff1a e[1][1] &gt; e[1][1] + e[1][1] e[1][2] &gt; e[1][1] + e[1][2] e[1][3] &gt; e[1][1] + e[1][3] e[1][4] &gt; e[1][1] + e[1][4] \u7136\u540e\uff0ck=1,i=2,j=1,2,3,4; \u5faa\u73af\u91cc\u9762\u6bd4\u8f83\u7684\u662f\uff1a e[2][1] &gt; e[2][1] + e[1][1] e[2][2] &gt; e[2][1] + e[1][2] e[2][3] &gt; e[2][1] + e[1][3] e[2][4] &gt; e[2][1] + e[1][4] \u7136\u540e\uff0ck=1,i=3,j=1,2,3,4;\u5faa\u73af\u91cc\u9762\u7684\u6bd4\u8f83\u662f\uff1a e[3][1] &gt; e[3][1] + e[1][1] e[3][2] &gt; e[3][1] + e[1][2] e[3][3] &gt; e[3][1] + e[1][3] e[3][4] &gt; e[3][1] + e[1][4] \u7136\u540e\uff0ck=1,i=4,j=1,2,3,4;\u5faa\u73af\u91cc\u9762\u7684\u6bd4\u8f83\u662f\uff1a e[4][1] &gt; e[4][1] + e[1][1] e[4][2] &gt; e[4][1] + e[1][2] e[4][3] &gt; e[4][1] + e[1][3] e[4][4] &gt; e[4][1] + e[1][4]</p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5f53k=1\u7684\u65f6\u5019\uff0c\u904d\u5386\u4e86\u6bcf\u4e2a\u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u8fde\u63a5\uff0c\u628a\u901a\u8fc7\u8282\u70b91\u4e2d\u8f6c\u7684\u60c5\u51b5\u5168\u90e8\u5c1d\u8bd5\u4e86\u4e00\u904d\uff0c\u770b\u6709\u6ca1\u6709\u4efb\u4f55\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u901a\u8fc7\u8282\u70b91\u4e2d\u8f6c\u4e4b\u540e\u8def\u7a0b\u4f1a\u53d8\u77ed\u3002\u5982\u679c\u4f1a\uff0c\u5c31\u628a\u8def\u7a0b\u66f4\u65b0\u6210\u8fd9\u4e2a\u66f4\u77ed\u7684\u8def\u7a0b\u3002 K=1\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a  K=2\u7684\u65f6\u5019\u5c31\u597d\u7406\u89e3\u4e86\u3002\u5c31\u662f\u5c1d\u8bd5\u7ecf\u8fc7\u8282\u70b92\u8fdb\u884c\u4e2d\u8f6c\u3002 \u56e0\u4e3a\u5df2\u7ecf\u662f\u7ecf\u8fc7\u8282\u70b91\u4e2d\u8f6c\u8fc7\u540e\u7684\u6570\u636e\u4e86\u3002\u6240\u4ee5\u76f8\u5f53\u4e8e\u539f\u59cb\u6570\u636e\u7ecf\u8fc7\u8282\u70b91\u548c\u8282\u70b92\u4e2d\u8f6c\u4e4b\u540e\u83b7\u5f97\u7684\u6700\u77ed\u7684\u8ddd\u79bb\u3002 K=2\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a  k=3\u7684\u65f6\u5019\u540c\u6837\u7684\u9053\u7406\uff0c\u7ecf\u8fc7\u8282\u70b93\u4e2d\u8f6c\uff0ck=4\u7684\u65f6\u5019\u7ecf\u8fc7\u8282\u70b94\u4e2d\u8f6c\u3002\u8fd9\u6837\u6700\u540e\u83b7\u5f97\u7684\u66f4\u65b0\u4e4b\u540e\u7684\u77e9\u9635e\u5c31\u5b58\u50a8\u4e86\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002 K=3\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a  K=4\u6267\u884c\u5b8c\u4e4b\u540e\u77e9\u9635\u7684\u66f4\u65b0\u60c5\u51b5\uff1a </p> <p>\u8fd9\u5c31\u662ffloyd-Warshall \u7b97\u6cd5\uff0c\u5176\u5b9e\u975e\u5e38\u7b80\u5355\uff0c\u5c31\u662f\u9010\u4e2a\u5c1d\u8bd5\u4f7f\u7528\u8282\u70b9\u4e2d\u8f6c\u662f\u5426\u53ef\u4ee5\u8f83\u5c11\u8ddd\u79bb\uff0c\u7136\u540e\u66f4\u65b0\u8ddd\u79bb\u3002</p> <p>python \u5b9e\u73b0\uff1a</p> <pre><code># G[][] \u662f\u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\n# G[i][j] \u4e0d\u8fde\u901a\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5927\n# G[i][i] \u8bbe\u7f6e\u62100\ndef FloydWarshall(self, g):\n    \"\"\"\n    g : \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\u8868\u793a\uff0c\u81ea\u8eab\u8fde\u63a5\u75280\u8868\u793a\n    \u8fd4\u56de\u4e00\u4e2a\u77e9\u9635\uff0c\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    \"\"\"\n    n = len(g)\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if g[i][j] &gt; g[i][k] + g[k][j]:\n                    g[i][j] = g[i][k] + g[k][j]\n    return g        \n</code></pre>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/#johnson","title":"Johnson \u7b97\u6cd5\uff1a","text":"<p>Johnson\u7b97\u6cd5\u7684\u601d\u60f3\u662f\u5bf9\u6bcf\u4e2a\u70b9\uff0c \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u5355\u6e90\u6700\u77ed\u8def\u5f84\uff0c \u7136\u540e\u6c47\u603b\u7ed3\u679c\u3002 \u4f46\u662fdijkstra\u7b97\u6cd5\u4e0d\u80fd\u9002\u7528\u4e0e\u6709\u8d1f\u6743\u8fb9\u7684\u60c5\u51b5\uff0c \u6240\u4ee5\u7b2c\u4e00\u6b65\u4fbf\u662f\u901a\u8fc7\u7b49\u4ef7\u53d8\u5316\uff0c\u6d88\u706d\u8d1f\u6743\u8fb9\u3002 \u800c\u8fd9\u79cd\u7b49\u4ef7\u53d8\u5316\u7684\u65b9\u5f0f\u662f\u901a\u8fc7 bellman-ford\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002</p> <p>\u6240\u4ee5 Johnson \u7b97\u6cd5\u662f dijkstra \u7b97\u6cd5\u548c bellman-ford\u7b97\u6cd5\u7684\u7ed3\u5408\uff1a</p> <ol> <li>\u5bf9\u4e8e\u56fe G=(V,E), \u65b0\u589e\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9s, s\u8fde\u63a5\u56fe\u4e2d\u6bcf\u4e2a\u70b9\uff0c\u65b0\u56fe\u8bb0\u4e3a G2</li> <li>\u4f7f\u7528bellman-ford\u7b97\u6cd5\u8ba1\u7b97\u70b9s\u5230\u5176\u4ed6\u5404\u4e2a\u70b9\u7684\u5355\u5143\u6700\u77ed\u8def\u5f84\uff0c \u8bb0\u4e3a distanceS</li> <li>\u66f4\u65b0\u539f\u56fe G \u4e2d\u8fb9\u7684\u6743\u91cd\uff1aw(u,v) = (u,v) + distanceS[u] - distance[v], \u66f4\u65b0\u4e4b\u540e\u56fe\u4e2d\u6ca1\u6709\u4e86\u8d1f\u6743\u8fb9</li> <li>\u5bf9\u56fe G \u4e2d\u6bcf\u4e00\u70b9\u8fd0\u884c dijkstra \u7b97\u6cd5\uff0c \u5f97\u5230\u7ed3\u679c</li> </ol> <pre><code>def dijkstra(self, g, s):\n    \"\"\"\n    dijkstra \u7b97\u6cd5\u5b9e\u73b0\n    g : \u4e34\u754c\u77e9\u9635\u8868\u793a\u7684\u56fe, g[i][i] = 0, g[i][j] = INF if i\u4e0ej\u4e4b\u95f4\u6ca1\u6709\u8fb9\n    s : \u6e90\u70b9\n    \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    \"\"\"\n    n = len(g) # \u70b9\u4e2a\u6570\n\n    # \u6240\u6709\u8282\u70b9\u52a0\u5165\u96c6\u5408q, \u7528\u4e0e\u6e90\u70b9s\u7684\u8ddd\u79bb\u4f5c\u4e3akey\u5efa\u7acb\u5c0f\u9876\u5806\n    q = []\n    for point in range(n):\n        if (g[s][point] != INF):\n            heapq.heappush(q, [g[s][point], point])\n        else:\n            heapq.heappush(q, [INF, point]) # [dis, point] \u8868\u793a s-&gt;point \u6700\u77ed\u8ddd\u79bb\u662f dis\n\n    distance = [INF for _ in range(n)]\n    distance[s] = 0\n    while len(q) &gt; 0:\n        dis, u = heapq.heappop(q)\n        distance[u] = dis\n        for i in range(len(q)):\n            if q[i][0] &gt; dis + g[u][ q[i][1] ]:\n                q[i][0] = dis + g[u][ q[i][1] ]\n        heapq.heapify(q) # \u8c03\u6574\u4e4b\u540e\u91cd\u65b0\u5efa\u7acb\u5806\n    return distance\ndef BellmanFord(self, edges, s, N):\n    \"\"\"\n    BellmanFord \u7b97\u6cd5\u5b9e\u73b0\n    edges: (u, v, w) \u7684\u96c6\u5408\uff0c\u8868\u793a\u8fb9 u--&gt;v \u7684\u6743\u91cd\u4e3a w\n    s : \u6e90\u70b9\n    \u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6e90\u70b9\u5230\u5404\u4e2a\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\n    N: \u56fe\u4e2d\u70b9\u7684\u4e2a\u6570\n    \"\"\"\n    distance = np.zeros(N)\n    distance.fill(INF)\n    distance[s] = 0\n    for _ in range(N):\n        distance_tmp = np.copy(distance)\n        for u, v, w in edges:\n            if distance[v] &gt; distance[u] + w:\n                distance[v] = distance[u] + w\n        if np.array_equal(distance, distance_tmp):\n            break\n    for u, v, w in edges:\n        if distance[v] &gt; distance[u] + w:\n            print(\"\u5b58\u5728\u8d1f\u6743\u56de\u8def\")\n    return distance\ndef Johnson(self, g):\n    \"\"\"\n    g: \u90bb\u63a5\u77e9\u9635\u8868\u793a\u7684\u56fe\uff0c\u56fe\u4e2d\u503c\u8868\u793a\u6743\u91cd\uff0c\u65e0\u8fb9\u8fde\u63a5\u7528INF\uff0c\u81ea\u8eab\u75280\n    \u8fd4\u56de\u77e9\u9635\u8868\u793a\u6bcf\u4e2a\u70b9\u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\n    \"\"\"\n    n = len(g)\n    edges = []\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] != 0 and g[i][j] != INF:\n                edges.append( [i, j, g[i][j]] )\n    for i in range(n):\n        edges.append([n, i, 0]) # \u8d85\u7ea7\u6e90\u70b9\u5230\u4efb\u610f\u5176\u4ed6\u70b9\u7684\u8ddd\u79bb\u90fd\u8bbe\u7f6e\u4e3a0\n\n    # \u6c42\u8d85\u7ea7\u6e90\u70b9\u5230\u5176\u4ed6\u5404\u70b9\u7684\u6700\u77ed\u8def\u5f84\n    distance = self.BellmanFord(edges, n, n + 1)\n\n    # \u7528\u6c42\u5f97\u7684\u6700\u77ed\u8def\u5f84\u66f4\u65b0\u8fb9\u7684\u6743\u503c\n    for i in range(n):\n        for j in range(n):\n            if g[i][j] != 0 and g[i][j] != INF:\n                g[i][j] = g[i][j] + distance[i] - distance[j]\n\n    # \u4f7f\u7528dijkstra\u7b97\u6cd5\u6c42\u89e3\n    matrix = []\n    for i in range(n):\n        distance = self.dijkstra(g, i)\n        matrix.append(distance)\n\n    return matrix\n</code></pre> LeetCode\u9898\u76ee \u96be\u5ea6 \u7b97\u6cd5 797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 \u4e2d\u7b49 \u4e24\u70b9\u95f4\u6240\u6709\u8def\u5f84 127. \u5355\u8bcd\u63a5\u9f99 \u4e2d\u7b49 \u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84 743. \u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4 \u4e2d\u7b49 \u5355\u6e90\u6700\u77ed\u8def\u5f84 1334. \u9608\u503c\u8ddd\u79bb\u5185\u90bb\u5c45\u6700\u5c11\u7684\u57ce\u5e02 \u4e2d\u7b49 \u591a\u6e90\u6700\u77ed\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/","title":"\u7f51\u7edc\u6d41","text":"<p>\u6709\u4e00\u4e2a\u81ea\u6765\u6c34\u7ba1\u9053\u8fd0\u8f93\u7cfb\u7edf\uff0c\u8d77\u70b9\u662fs\uff0c\u7ec8\u70b9\u662ft\uff0c\u9014\u4e2d\u7ecf\u8fc7\u7684\u7ba1\u9053\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u7684\u5bb9\u91cf\u3002\u6c42\u4eces\u5230t\u7684\u6700\u5927\u6c34\u6d41\u91cf\u662f\u591a\u5c11\uff1f</p> <p>\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u662f\u7f51\u7edc\u7684\u53e6\u4e00\u4e2a\u57fa\u672c\u95ee\u9898\u3002\u8bb8\u591a\u7cfb\u7edf\u5305\u542b\u4e86\u6d41\u91cf\u95ee\u9898\u3002\u4f8b\u5982\u4ea4\u901a\u7cfb\u7edf\u6709\u8f66\u6d41\u91cf\uff0c\u91d1\u878d\u7cfb\u7edf\u6709\u73b0\u91d1\u6d41\uff0c\u63a7\u5236\u7cfb\u7edf\u6709\u4fe1\u606f\u6d41\u7b49\u3002\u8bb8\u591a\u6d41\u95ee\u9898\u4e3b\u8981\u662f\u786e\u5b9a\u8fd9\u7c7b\u7cfb\u7edf\u7f51\u7edc\u6240\u80fd\u627f\u53d7\u7684\u6700\u5927\u6d41\u91cf\u4ee5\u53ca\u5982\u4f55\u8fbe\u5230\u8fd9\u4e2a\u6700\u5927\u6d41\u91cf\u3002</p> <p>\u5148\u4ecb\u7ecd\u6700\u5927\u6d41\u95ee\u9898\u989d\u4e00\u822c\u6a21\u578b\u3002  \u5982\u56fe\uff0c\u8981\u6c42\u4eces\u5230t\u7684\u6700\u5927\u6d41\u662f\u591a\u5c11\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u770b\u51fa\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\u662f4\uff0cs--&gt;1 == 2 \u5e76\u4e14 s--&gt;2 = 2. \u7ebf\u6bb5\u4e0a\u7684\u6570\u636e\u8868\u793a\u7ebf\u6bb5\u4e0a\u7684\u6700\u5927\u5bb9\u91cf\uff0cs\u8868\u793a\u8d77\u70b9\uff0c\u672f\u8bed\u53eb\u505a\u6e90\u70b9(source),t\u662f\u7ec8\u70b9\uff0c\u672f\u8bed\u53eb\u505a\u6c47\u70b9(sink),\u8fb9\u7684\u5bb9\u91cf\u8bb0\u4f5c\\(c\\),\u5b9e\u9645\u8fb9\u4e0a\u6d41\u8fc7\u7684\u5177\u4f53\u7684\u503c\u8bb0\u4f5c\\(f\\). \u6700\u5927\u6d41\u95ee\u9898\u5c31\u662f\u6700\u5927\u5316\u4eces\u51fa\u53d1\u7684\u6d41\u91cf\u3002</p> <p>\u6d41\u7f51\u7edc\u7684\u503c</p> <p>\u6709\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u63d0\u5230\u6d41\u7f51\u7edc\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u65f6\u5019\u662f\u6307\u6240\u6709\u4ece\u6e90\u70b9\u51fa\u53d1\u7684\u6d41\u4e4b\u548c\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#ford-fulkerson","title":"Ford-Fulkerson","text":"<p>\u7f51\u7edc\u6700\u5927\u6d41\u95ee\u9898\u6bd4\u8f83\u5e38\u89c1\u7684\u662fFord-Fulkerson\u89e3\u6cd5\u3002\u8be5\u65b9\u6cd5\u4f9d\u8d56\u4e8e\u4e09\u79cd\u91cd\u8981\u601d\u60f3\uff1a\u6b8b\u7559\u7f51\u7edc\uff0c\u589e\u5e7f\u8def\u5f84\u548c\u5272\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#_2","title":"\u589e\u5e7f\u8def\u5f84","text":"<p>\u589e\u5e7f\u8def\u5f84\u53ef\u4ee5\u770b\u505a\u662f\u4ece\u6e90\u70b9s\u5230\u6c47\u70b9t\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6cbf\u8be5\u8def\u5f84\u53ef\u4ee5\u538b\u5165\u66f4\u591a\u7684\u6d41\uff0c\u4ece\u800c\u589e\u52a0\u6d41\u7684\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u4e0b\uff0c\u5982\u56fe\u6240\u793a\uff0c\u6bcf\u6761\u7ea2\u7ebf\u5c31\u4ee3\u8868\u4e86\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u5f53\u524ds\u5230t\u7684\u6d41\u91cf\u4e3a3\u3002  \u5f53\u7136\u8fd9\u5e76\u4e0d\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u6839\u636e\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u7684\u7b97\u6cd5\u6211\u4eec\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u6700\u7ec8\u7684\u6700\u5927\u6d41\u7f51\u7edc\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6700\u5927\u6d41\u4e3a4\u3002 </p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#residual-graph","title":"\u6b8b\u7559\u7f51\u7edc(Residual Graph)","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u6d41\uff0c\u9664\u4e86\u8fd9\u4e2a\u6d41\u4e4b\u5916\uff0c\u7f51\u7edc\u4e0a\u8fd8\u80fd\u5bb9\u7eb3\u7684\u6d41\u53eb\u505a\u8fd9\u4e2a\u6d41\u5bf9\u5e94\u7684\u6b8b\u7559\u7f51\u7edc\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u6b8b\u7559\u7f51\u7edc\u7406\u89e3\u4e3a\u6574\u4e2a\u7f51\u7edc\u51cf\u53bb\u5f53\u524d\u7684\u6d41\u7f51\u7edc\u3002</p> <p>\u6b8b\u7559\u7f51\u7edc\u7684\u5177\u4f53\u8ba1\u7b97\u65b9\u6cd5\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u6d41\u7f51\u7edcG\u548c\u4e00\u4e2a\u6d41\uff0c\u6d41\u7684\u6b8b\u7559\u7f51\\(G_f\\)\u62e5\u6709\u4e0e\u539f\u7f51\u76f8\u540c\u7684\u9876\u70b9\u3002\u539f\u6d41\u7f51\u7edc\u4e2d\u6bcf\u6761\u8fb9\u5c06\u5bf9\u5e94\u6b8b\u7559\u7f51\u4e2d\u4e00\u6761\u6216\u8005\u4e24\u6761\u8fb9\uff0c\u5bf9\u4e8e\u539f\u6d41\u7f51\u7edc\u4e2d\u7684\u4efb\u610f\u8fb9(u, v)\uff0c\u6d41\u91cf\u4e3af(u, v)\uff0c\u5bb9\u91cf\u4e3ac(u, v)\uff1a - \u5982\u679cf(u, v) &gt; 0\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3af(u, v)\u7684\u8fb9(v, u); - \u5982\u679cf(u, v) &lt; c(u, v)\uff0c\u5219\u5728\u6b8b\u7559\u7f51\u4e2d\u5305\u542b\u4e00\u6761\u5bb9\u91cf\u4e3ac(u, v) - f(u, v)\u7684\u8fb9(u, v)\u3002  \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6d41\u90fd\u4e3a0\uff0c\u6b64\u65f6\u6ee1\u8db3\u7b2c\u4e8c\u6761\uff0cf(u,v) = 0 &lt; c(u,v).\u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e0e\u539f\u6765\u7684\u7f51\u7edc\u76f8\u540c\u3002  \u5728\u5f53\u524d\u7684\u6b8b\u7559\u7f51\u7edc\uff08\u4e0e\u539f\u7f51\u7edc\u76f8\u540c\uff09\u968f\u610f\u786e\u5b9a\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u5047\u8bbe\u662f<code>0--&gt;1--&gt;3--&gt;5</code>\uff0c\u8be5\u8def\u5f84\u7684\u6700\u5927\u6d41\u91cf\u662f2. f(0,1)&gt;0, \u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e00\u6761\u8fb9(1,0) = 2, f(0,1) = c(0,1), \u6240\u4ee5\u6ca1\u6709\u4ece0\u52301\u7684\u8fb9\u3002 c(1,3)&gt;f(1,3)&gt;0, \u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e24\u6761\u8fb9,(1,3)=3-2=1, (3,1)=f(1,3)=2. c(3,5) = f(3,5)&gt;0, \u6240\u4ee5\u6b8b\u7559\u7f51\u7edc\u4e2d\u6709\u4e00\u6761\u8fb9\uff0c(5,2) = 2. \u6574\u4e2a\u6b8b\u7559\u7f51\u7edc\u7684\u53d8\u5316\u5982\u6709\u56fe\u6240\u793a\u3002  \u518d\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u4e00\u6761\u589e\u5e7f\u8def\u5f84\uff0c\u8fd9\u6b21\u6211\u4eec\u627e<code>0--&gt;2--&gt;4--&gt;5</code>,\u6700\u5927\u6d41\u91cf\u662f1. \u6309\u7167\u6b8b\u7559\u7f51\u7edc\u7684\u89c4\u5219\uff0c\u8ba1\u7b97\u4e4b\u540e\u7684\u6b8b\u7559\u7f51\u7edc\u5982\u53f3\u56fe\u6240\u793a\u3002  \u7ee7\u7eed\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u589e\u5e7f\u8def\u5f84\uff0c\u53ef\u4ee5\u5bfb\u627e\u5230\u4e00\u6761<code>0--&gt;2--&gt;3--&gt;1--&gt;4--&gt;5</code>\u7684\u8def\u5f84\uff0c\u6ce8\u610f<code>3--&gt;1</code>\u5c31\u662f\u539f\u6765\u7684<code>1--&gt;3</code>\u51cf\u53bb1\uff0c\u6700\u5927\u7684\u6d41\u91cf\u662f1. \u6839\u636e\u4e0a\u9762\u7684\u89c4\u5219\u8c03\u6574\u6b8b\u7559\u7f51\u7edc\uff0c\u5982\u53f3\u56fe\u6240\u793a\u3002 \u6b64\u65f6\uff0c\u6b8b\u7559\u7f51\u7edc\u4e2d\u518d\u4e5f\u627e\u4e0d\u5230\u4efb\u4f55\u4e00\u6761\u4ece0\u52305\u7684\u589e\u5e7f\u8def\u5f84\uff0c\u6240\u4ee5\u8fc7\u7a0b\u7ed3\u675f\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u5927\u6d41\u3002\u4e0a\u56fe\u5de6\u8fb9\u6240\u793a\u7684\u5c31\u662f\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u548c\u6211\u4eec\u6700\u521d\u7684\u76f4\u89c2\u5370\u8c61\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#_3","title":"\u5272","text":"<p>\u8bbe\u6574\u4e2a\u56fe\u7684\u9876\u70b9\u96c6\u5408\u662fV\u3002\u6240\u8c13\u56fe\u7684\u5272\uff0c\u6307\u7684\u662f\u8fb9\u7684\u96c6\u5408\uff0c\u6307\u7684\u662f\u5bf9\u4e8e\u67d0\u4e2a\u9876\u70b9\u96c6\u5408\\(S \\subseteq V\\),\u4eceS\u51fa\u53d1\u6307\u5411S\u5916\u90e8\u7684\u90a3\u4e9b\u8fb9\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a\u5272(S,V\\S). \u6240\u4ee5\u5272\u662f\u6307\u4e00\u4e9b\u8fb9\u7684\u96c6\u5408\u3002 \u8fd9\u4e9b\u8fb9\u4e0a\u7684\u5bb9\u91cf\u4e4b\u548c\u88ab\u79f0\u4e3a\u5272\u7684\u5bb9\u91cf\u3002</p> <p>\u6700\u5c0f\u5272\u95ee\u9898</p> <p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f51\u7edc\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u4eces\u5230t\u7684\u8def\u5f84\uff0c\u9700\u8981\u5220\u53bb\u7684\u8fb9\u7684\u603b\u5bb9\u91cf\u6700\u5c0f\u662f\u591a\u5c11\u3002\u5176\u4e2d\\(s \\in S\\)\u4e14\\(t \\in {V/S}\\).</p> <p>\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406</p> <p>\u4e00\u4e2a\u7f51\u4e2d\u6240\u6709\u6d41\u4e2d\u7684\u6700\u5927\u503c\u7b49\u4e8e\u6240\u6709\u5272\u4e2d\u7684\u6700\u5c0f\u5bb9\u91cf\u3002 \u5176\u5b9e\u8fd9\u4e2a\u5b9a\u7406\u5f88\u5bb9\u6613\u4ece\u9053\u7406\u4e0a\u60f3\u660e\u767d\uff0c\u4e00\u65e6\u8d85\u51fa\u6700\u5c0f\u5272\uff0c\u4fbf\u603b\u6709\u8fb9\u8d85\u51fa\u4e86\u8fb9\u7684\u5bb9\u91cf\uff0c\u4e5f\u5c31\u4e0d\u5b58\u5728\u53ef\u884c\u7684\u6d41\u4e86\u3002</p> <p>\u7528\u4e0a\u9762\u7528\u8fc7\u7684\u56fe\u6765\u8bf4\u660e\u4e00\u4e0b\u5272\u7684\u76f8\u5173\u6982\u5ff5\uff1a  \u5982\u56fe\uff0c\u6d41\u7f51\u7edc\u7684\u4e00\u4e2a\u5272\u4e3as:{0,1,2},t:{3,4,5}, \u901a\u8fc7\u5272\u7684\u6d41\u91cf\u5b9a\u4e49\u4e3a\u4eces\u5230t\u7684\u6240\u6709\u6d41\u91cf\u4e4b\u548c(\u4ecet\u5230s\u7684\u6d41\u91cf\u8bb0\u4f5c\u8d1f\u503c)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5272\u7684\u6d41\u91cf\u662f\uff1a2+1=3 \u5272\u7684\u5bb9\u91cf\u8bb0\u4f5c\u6240\u6709\u4eces\u5230t\u7684\u8fb9\u7684\u5bb9\u91cf\u4e4b\u548c\uff0c\u6240\u4ee5\u662f3+1+1+1 = 6.</p> <p>\u4ece\u4e0a\u9762\u7684\u5b9a\u4e49\u53ef\u4ee5\u7b80\u5355\u7684\u5f97\u5230\u4e00\u70b9\uff0c\u4efb\u4f55\u4e00\u4e2a\u5272\u7684\u6d41\u91cf\u90fd\u5c0f\u4e8e\u7b49\u4e8e\u5272\u7684\u5bb9\u91cf\u3002 \u5c06\u4e0a\u9762\u7684\u5272\u7684\u56fe\u5f62\u589e\u52a0\u4e00\u4e2a\u865a\u62df\u7684\u8282\u70b9s'\uff0c\u7ed8\u5236\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1af1\u662f\u6d41\u5165S\u7684\u6d41\u91cf\uff0cf2\u662f\u4eceS\u5230T\u7684\u6d41\u91cf\uff0cf3\u662f\u4eceT\u5230S\u7684\u6d41\u91cf\u3002\u4e00\u4e2a\u8282\u70b9\u7684\u6d41\u5165\u6d41\u91cf\u7b49\u4e8e\u6d41\u51fa\u7684\u6d41\u91cf\uff0c\u6240\u4ee5\u6709f2 = f1 + f3.</p> <p> \u4ece\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u6e05\u6670\u7684\u770b\u51fa\uff0c\u6d41\u7f51\u7edc\u7684\u503c\u7b49\u4e8ef1, \u800c\u5272\u7684\u6d41\u91cf\u7b49\u4e8ef2-f3. \u6240\u4ee5\u6709\u6d41\u7f51\u7edc\u7684\u503c\u7b49\u4e8e\u5272\u7684\u6d41\u91cf\u503c\u3002 \u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u5b9a\u7406\u7684\u8bc1\u660e\uff1ahttp://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html </p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#ford-fulkerson_1","title":"Ford-Fulkerson\u7b97\u6cd5\u7684\u5b9e\u73b0","text":"<p>\u4e0a\u9762\u4ecb\u7ecd\u6b8b\u7559\u7f51\u7edc\u7684\u65f6\u5019\u5df2\u7ecf\u5c06\u7684\u5f88\u6e05\u695a\u4e86\uff0cFord-Fulkerson\u7b97\u6cd5\u5c31\u662f\u4e0d\u65ad\u66f4\u65b0\u6b8b\u7559\u7f51\u7edc\uff0c\u4ece\u4e2d\u627e\u51fa\u53ef\u884c\u7684\u6d41\uff0c\u76f4\u5230\u65e0\u6cd5\u4ece\u6b8b\u7559\u7f51\u7edc\u4e2d\u627e\u51fa\u53ef\u884c\u7684\u6d41\u4e3a\u6b62\u3002 \u6240\u4ee5\uff0c\u7b80\u5355\u7684\u7b97\u6cd5\u6b65\u9aa4\u53ef\u4ee5\u8868\u8ff0\u4e3a\uff1a</p> <ol> <li>\u521d\u59cb\u5316\u6d41flow = 0;</li> <li>while(condition){   flow += path-flow } \u6b64\u5904\u7684condition\u4e3a \u5b58\u5728\u4eces\u5230t\u7684\u589e\u5e7f\u8def\u5f84\uff0cpath-flow\u4e3a\u8be5\u589e\u5e7f\u8def\u5f84\u7684\u503c\u3002</li> <li>\u8f93\u51faflow.</li> </ol> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u7b97\u6cd5\u7684\u4e3b\u8981\u90e8\u5206\u5728\u5bfb\u627e\u589e\u5e7f\u8def\u5f84\u4e0a\u9762\u3002 \u53c2\u8003\u6587\u7ae0\uff1ahttp://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/</p> <p>\u7a0b\u5e8f\u4ee5\u8fd9\u4e2a\u5b9e\u4f8b\u4f5c\u4e3a\u8f93\u5165\uff1a </p> <pre><code>// C++ program for implementation of Ford Fulkerson algorithm\n#include &lt;iostream&gt;\n#include &lt;limits.h&gt;\n#include &lt;string.h&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\n// Number of vertices in given graph\n#define V 6\n\n/* Returns true if there is a path from source 's' to sink 't' in\n  residual graph. Also fills parent[] to store the path */\n\n//  \u4f7f\u7528\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u641c\u7d22\u6b8b\u7559\u7f51\u7edc\u4e4b\u4e2d\u662f\u5426\u6709\u589e\u5e7f\u8def\u5f84\nbool bfs(int rGraph[V][V], int s, int t, int parent[])\n{\n    // Create a visited array and mark all vertices as not visited\n    bool visited[V];\n    memset(visited, 0, sizeof(visited));\n\n    // Create a queue, enqueue source vertex and mark source vertex\n    // as visited\n    queue &lt;int&gt; q;\n    q.push(s);\n    visited[s] = true;\n    parent[s] = -1;\n\n    // Standard BFS Loop   \u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n\n        for (int v=0; v&lt;V; v++)\n        {\n            if (visited[v]==false &amp;&amp; rGraph[u][v] &gt; 0)\n            {\n                q.push(v);\n                parent[v] = u;\n                visited[v] = true;\n            }\n        }\n    }\n\n    // If we reached sink in BFS starting from source, then return\n    // true, else false\n    return (visited[t] == true);\n}\n\n// Returns the maximum flow from s to t in the given graph\nint fordFulkerson(int graph[V][V], int s, int t)\n{\n    int u, v;\n\n    // Create a residual graph and fill the residual graph with\n    // given capacities in the original graph as residual capacities\n    // in residual graph\n    int rGraph[V][V]; // Residual graph where rGraph[i][j] indicates\n    // residual capacity of edge from i to j (if there\n    // is an edge. If rGraph[i][j] is 0, then there is not)\n    // \u521d\u59cb\u5316\u6b8b\u7559\u7f51\u7edc\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6b8b\u7559\u7f51\u7edc\u548c\u521d\u59cb\u7f51\u7edc\u4e00\u81f4\uff0c\u89c1\u4e0a\u9762\u7684\u8bb2\u89e3\n    for (u = 0; u &lt; V; u++)\n        for (v = 0; v &lt; V; v++)\n            rGraph[u][v] = graph[u][v];\n\n    int parent[V];  // This array is filled by BFS and to store path\n\n    int max_flow = 0;  // There is no flow initially\n\n    // Augment the flow while tere is path from source to sink\n    //bfs(rGraph, s, t, parent) \u5b9e\u73b0\u4e86\u5224\u65ad\u6b8b\u7559\u7f51\u7edc\u4e2d\u662f\u5426\u5b58\u5728\u589e\u5e7f\u8def\u5f84\n    while (bfs(rGraph, s, t, parent))\n    {\n        // Find minimum residual capacity of the edges along the\n        // path filled by BFS. Or we can say find the maximum flow\n        // through the path found.\n        int path_flow = INT_MAX;\n        //\u627e\u5230path_flow\u7684\u503c\uff0cpath_flow\u7684\u503c\u7b49\u4e8e\u589e\u5e7f\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u8fb9\u7684\u5bb9\u91cf\u3002\n        for (v=t; v!=s; v=parent[v])\n        {\n            u = parent[v];\n            path_flow = min(path_flow, rGraph[u][v]);\n        }\n\n        // update residual capacities of the edges and reverse edges\n        // along the path\n        //\u66f4\u65b0\u6b8b\u7559\u7f51\u7edc\n        for (v=t; v != s; v=parent[v])\n        {\n            u = parent[v];\n            rGraph[u][v] -= path_flow;\n            rGraph[v][u] += path_flow;\n        }\n\n        // Add path flow to overall flow\n        max_flow += path_flow;\n    }\n\n    // Return the overall flow\n    return max_flow;\n}\n\n// Driver program to test above functions\nint main()\n{\n    // Let us create a graph shown in the above example\n    int graph[V][V] = { {0, 16, 13, 0, 0, 0},\n                        {0, 0, 10, 12, 0, 0},\n                        {0, 4, 0, 0, 14, 0},\n                        {0, 0, 9, 0, 0, 20},\n                        {0, 0, 0, 7, 0, 4},\n                        {0, 0, 0, 0, 0, 0}\n    };\n\n    cout &lt;&lt; \"The maximum possible flow is \" &lt;&lt; fordFulkerson(graph, 0, 5);\n\n    return 0;\n}\n</code></pre> <p>\u4ee5\u4e0a\u4ee3\u7801\u641c\u7d22\u589e\u5e7f\u8def\u5f84\u4f7f\u7528\u7684BFS\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u4f7f\u7528DFS\uff0cPFS\u7b49\u65b9\u6cd5\uff0c\u53c2\u8003\u6587\u7ae0\uff1a http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html</p> <p>\u53c2\u8003\u6587\u732e</p> <ol> <li>http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591573.html</li> <li>http://www.acmerblog.com/ford-fulkerson-6135.html</li> <li>http://blog.csdn.net/smartxxyx/article/details/9293805</li> <li>http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#dinic","title":"Dinic\u7b97\u6cd5","text":"<p>Dinic\u662f\u4e00\u79cd\u6bd4Ford-Fulkerson\u6548\u7387\u66f4\u9ad8\u7684\u7b97\u6cd5\uff0c\u5f53\u6570\u636e\u8f83\u5927\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528Dinic\u7b97\u6cd5\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#_4","title":"\u9876\u70b9\u7684\u5c42\u6b21","text":"<p>\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\uff0c\u628a\u9876\u70b9\u8ddd\u79bb\u6e90\u70b9\u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u8282\u70b9\u7684\u5c42\u6b21\uff0c\u6e90\u70b9\u7684\u5c42\u6b21\u4e3a0\uff0c\u548c\u6e90\u70b9\u76f4\u63a5\u76f8\u8fde\u7684\u8282\u70b9\u7684\u5c42\u6b21\u662f1. \u5206\u5c42\uff1a \u5c06\u6b8b\u7559\u7f51\u7edc\u4e2d\u6240\u6709\u8282\u70b9\u7684\u5c42\u6b21\u6807\u8bb0\u51fa\u6765\u7684\u8fc7\u7a0b\u3002\uff08\u6ce8\u610f\u4e0d\u662f\u6240\u6709\u7684\u7f51\u7edc\u90fd\u53ef\u4ee5\u5206\u5c42\uff09 \u5c42\u6b21\u7f51\u7edc\uff1a\u5bf9\u6b8b\u7559\u7f51\u7edc\u8fdb\u884c\u5206\u5c42\u540e\uff0c\u5220\u53bb\u6bd4\u6c47\u70b9Vt\u5c42\u6b21\u66f4\u9ad8\u7684\u9876\u70b9\u548c\u4e0e\u6c47\u70b9Vt\u540c\u5c42\u7684\u9876\u70b9(\u4fdd\u7559Vt)\uff0c\u5e76\u5220\u53bb\u8fd9\u4e9b\u9876\u70b9\u76f8\u5173\u8054\u7684\u5f27\uff0c\u518d\u5220\u53bb\u4ece\u67d0\u5c42\u9876\u70b9\u6307\u5411\u540c\u5c42\u9876\u70b9\u548c\u4f4e\u5c42\u9876\u70b9\u7684\u5f27\uff0c\u6240\u5269\u4f59\u7684\u5404\u6761\u5f27\u7684\u5bb9\u91cf\u4e0e\u6b8b\u7559\u7f51\u7edc\u4e2d\u7684\u5bb9\u91cf\u76f8\u540c\uff0c\u8fd9\u6837\u5f97\u5230\u7684\u7f51\u7edc\u5c31\u662f\u6b8b\u7559\u7f51\u7edc\u7684\u5b50\u7f51\u7edc\uff0c\u79f0\u4e3a\u5c42\u6b21\u7f51\u7edc\uff0c\u8bb0\u4e3aG''(V'',E'')\u3002</p> <p>\u6839\u636e\u5c42\u6b21\u7f51\u7edc\u5b9a\u4e49\uff0c\u5c42\u6b21\u7f51\u7edc\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u5f27\uff0c\u6709\u6ee1\u8db3level(u)+1 == level(v)\uff0c\u8fd9\u6761\u5f27\u4e5f\u53eb\u5141\u8bb8\u5f27\u3002\u76f4\u89c2\u7684\u8bf4\uff0c\u5c42\u6b21\u7f51\u7edc\u662f\u5efa\u7acb\u5728\u6b8b\u7559\u7f51\u7edc\u57fa\u7840\u4e4b\u4e0a\u7684\u4e00\u5f20\u201c\u6700\u77ed\u8def\u5f84\u56fe\u201d\u3002\u4ece\u6e90\u70b9\u5f00\u59cb\uff0c\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u6cbf\u7740\u8fb9\u4e0d\u7ba1\u600e\u4e48\u8d70\uff0c\u5230\u8fbe\u4e00\u4e2a\u7ec8\u70b9\u4e4b\u540e\uff0c\u7ecf\u8fc7\u7684\u8def\u5f84\u4e00\u5b9a\u662f\u7ec8\u70b9\u5728\u6b8b\u7559\u7f51\u7edc\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u3002"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#dinic_1","title":"Dinic\u7b97\u6cd5\u7684\u601d\u60f3","text":"<p>Dinic\u7b97\u6cd5\u7684\u601d\u60f3\u4e5f\u662f\u5206\u9636\u6bb5\u5730\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u589e\u5e7f\u3002\u5b83\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u7b97\u6cd5\u4e0d\u540c\u4e4b\u5904\u662f\uff1a\u6700\u77ed\u589e\u5e7f\u8def\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u5b8c\u4e00\u6b21BFS\u589e\u5e7f\u540e\uff0c\u8981\u91cd\u65b0\u542f\u52a8BFS\u4ece\u6e90\u70b9Vs\u5f00\u59cb\u5bfb\u627e\u53e6\u4e00\u6761\u589e\u5e7f\u8def;\u800c\u5728Dinic\u7b97\u6cd5\u4e2d\uff0c\u53ea\u9700\u4e00\u6b21DFS\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u591a\u6b21\u589e\u5e7f\uff0c\u8fd9\u662fDinic\u7b97\u6cd5\u7684\u5de7\u5999\u4e4b\u5904\u3002Dinic\u7b97\u6cd5\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b:</p> <p>\uff081\uff09\u521d\u59cb\u5316\u5bb9\u91cf\u7f51\u7edc\u548c\u7f51\u7edc\u6d41\u3002</p> <p>\uff082\uff09\u6784\u9020\u6b8b\u7559\u7f51\u7edc\u548c\u5c42\u6b21\u7f51\u7edc\uff0c\u82e5\u6c47\u70b9\u4e0d\u518d\u5c42\u6b21\u7f51\u7edc\u4e2d\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\u3002</p> <p>\uff083\uff09\u5728\u5c42\u6b21\u7f51\u7edc\u4e2d\u7528\u4e00\u6b21DFS\u8fc7\u7a0b\u8fdb\u884c\u589e\u5e7f\uff0cDFS\u6267\u884c\u5b8c\u6bd5\uff0c\u8be5\u9636\u6bb5\u7684\u589e\u5e7f\u4e5f\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\uff084\uff09\u8f6c\u6b65\u9aa4\uff082\uff09\u3002</p> <p>\u5728Dinic\u7684\u7b97\u6cd5\u6b65\u9aa4\u4e2d\uff0c\u53ea\u6709\u7b2c\uff083\uff09\u6b65\u4e0e\u6700\u77ed\u589e\u5e7f\u8def\u76f8\u540c\u3002\u5728\u4e0b\u9762\u5b9e\u4f8b\u4e2d\uff0c\u5c06\u4f1a\u53d1\u73b0DFS\u8fc7\u7a0b\u5c06\u4f1a\u4f7f\u7b97\u6cd5\u7684\u6548\u7387\u6709\u975e\u5e38\u5927\u7684\u63d0\u9ad8\u3002 DFS\u589e\u5e7f\u8fc7\u7a0b\u793a\u610f\uff1a </p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#dinic_2","title":"Dinic\u7b97\u6cd5\u5b9e\u73b0","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\nconst int MAXN = 210;\nconst int MAXM = 210*210;\nconst int INF = 0x3f3f3f3f;\n\nstruct Edge\n{\n    int v, f;\n    int next;\n}edge[MAXM];\n\nint n, m;\nint cnt;\n\nint first[MAXN], level[MAXN];\nint q[MAXN];\n\nvoid init()\n{\n    cnt = 0;\n    memset(first, -1, sizeof(first));\n}\n\nvoid read_graph(int u, int v, int f)\n{\n    edge[cnt].v = v, edge[cnt].f = f;\n    edge[cnt].next = first[u], first[u] = cnt++;\n    edge[cnt].v = u, edge[cnt].f = 0;  //\u589e\u52a0\u4e00\u6761\u53cd\u5411\u5f27\uff0c\u5bb9\u91cf\u4e3a0\n    edge[cnt].next = first[v], first[v] = cnt++;\n}\n\nint bfs(int s, int t) //\u6784\u5efa\u5c42\u6b21\u7f51\u7edc\n{\n    memset(level, 0, sizeof(level));\n    level[s] = 1;\n    int front = 0, rear = 1;\n    q[front] = s;\n    while(front &lt; rear)\n    {\n        int x = q[front++];\n        if(x == t) return 1;\n        for(int e = first[x]; e != -1; e = edge[e].next)\n        {\n            int v = edge[e].v, f = edge[e].f;\n            if(!level[v] &amp;&amp; f)\n            {\n                level[v] = level[x] + 1;\n                q[rear++] = v;\n            }\n        }\n    }\n    return 0;\n}\n\nint dfs(int u, int maxf, int t)\n{\n    if(u == t) return maxf;\n    int ret = 0;\n    for(int e = first[u]; e != -1; e = edge[e].next)\n    {\n        int v = edge[e].v, f = edge[e].f;\n        if(level[u] + 1 == level[v] &amp;&amp; f)\n        {\n            int Min = min(maxf-ret, f);\n            f = dfs(v, Min, t);\n            edge[e].f -= f;\n            edge[e^1].f += f;\n            ret += f;\n            if(ret == maxf) return ret;\n        }\n    }\n    return ret;\n}\n\nint Dinic(int s, int t) //Dinic\n{\n    int ans = 0;\n    while(bfs(s, t)) ans += dfs(s, INF, t);\n    return ans;\n}\n</code></pre> <p>\u53c2\u8003\u6587\u732e</p> <ol> <li>https://comzyh.com/blog/archives/568/</li> <li>http://blog.csdn.net/wall_f/article/details/8207595</li> <li>http://www.cnblogs.com/y-clever/p/6308820.html</li> <li>http://blog.csdn.net/u012914220/article/details/23865829</li> <li>http://blog.csdn.net/pi9nc/article/details/23339111</li> <li>http://www.nocow.cn/index.php/Dinic#.E7.AE.97.E6.B3.95.E6.B5.81.E7.A8.8B</li> <li>2017ISAP \u7b97\u6cd5 \uff1ahttp://www.renfei.org/blog/isap.html</li> </ol>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#_5","title":"\u4e8c\u5206\u56fe","text":"<p>\u7ed9\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u7740\u8272\uff0c\u76f8\u90bb\u7684\u9876\u70b9\u7740\u4e0d\u540c\u989c\u8272\uff0c\u9700\u8981\u7684\u6700\u5c11\u7684\u989c\u8272\u6570\uff0c\u53eb\u505a\u6700\u5c0f\u7740\u8272\u6570\u3002 \u6700\u5c0f\u7740\u8272\u6570\u662f2\u7684\u56fe\u53eb\u505a\u4e8c\u5206\u56fe\u3002</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548cV \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002\u56fe 1 \u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u4e3a\u4e86\u6e05\u6670\uff0c\u6211\u4eec\u4ee5\u540e\u90fd\u628a\u5b83\u753b\u6210\u56fe 2 \u7684\u5f62\u5f0f\u3002</p> <p></p> <p>\u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u662f\u4e8c\u5206\u56fe\uff0c\u53ea\u9700\u8981\u4ece\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u904d\u5386\u8fd9\u4e2a\u56fe\uff0c\u7ed9\u5f53\u524d\u8282\u70b9\u548c\u76f8\u90bb\u8282\u70b9\u7136\u4e0d\u540c\u7684\u8272\uff0c\u7136\u540e\u5224\u65ad\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u8282\u70b9\u540c\u8272\u5373\u53ef\u3002</p>"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E7%BD%91%E7%BB%9C%E6%B5%81/#_6","title":"\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u548c\u5b8c\u7f8e\u5339\u914d","text":"<p>http://www.renfei.org/blog/bipartite-matching.html</p> <p>\u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002\u56fe 4 \u662f\u4e00\u4e2a\u6700\u5927\u5339\u914d\uff0c\u5b83\u5305\u542b 4 \u6761\u5339\u914d\u8fb9\u3002</p> <p>\u5b8c\u7f8e\u5339\u914d\uff1a\u5982\u679c\u4e00\u4e2a\u56fe\u7684\u67d0\u4e2a\u5339\u914d\u4e2d\uff0c\u6240\u6709\u7684\u9876\u70b9\u90fd\u662f\u5339\u914d\u70b9\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u56fe 4 \u662f\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\u3002\u663e\u7136\uff0c\u5b8c\u7f8e\u5339\u914d\u4e00\u5b9a\u662f\u6700\u5927\u5339\u914d\uff08\u5b8c\u7f8e\u5339\u914d\u7684\u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u5df2\u7ecf\u5339\u914d\uff0c\u6dfb\u52a0\u4e00\u6761\u65b0\u7684\u5339\u914d\u8fb9\u4e00\u5b9a\u4f1a\u4e0e\u5df2\u6709\u7684\u5339\u914d\u8fb9\u51b2\u7a81\uff09\u3002\u4f46\u5e76\u975e\u6bcf\u4e2a\u56fe\u90fd\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff1a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u5728\u67d0\u4e00\u5bf9\u7537\u5b69\u548c\u5973\u5b69\u4e4b\u95f4\u5b58\u5728\u76f8\u8fde\u7684\u8fb9\uff0c\u5c31\u610f\u5473\u7740\u4ed6\u4eec\u5f7c\u6b64\u559c\u6b22\u3002\u662f\u5426\u53ef\u80fd\u8ba9\u6240\u6709\u7537\u5b69\u548c\u5973\u5b69\u4e24\u4e24\u914d\u5bf9\uff0c\u4f7f\u5f97\u6bcf\u5bf9\u513f\u90fd\u4e92\u76f8\u559c\u6b22\u5462\uff1f\u56fe\u8bba\u4e2d\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u5339\u914d\u95ee\u9898\u3002\u5982\u679c\u6362\u4e00\u4e2a\u8bf4\u6cd5\uff1a\u6700\u591a\u6709\u591a\u5c11\u4e92\u76f8\u559c\u6b22\u7684\u7537\u5b69/\u5973\u5b69\u53ef\u4ee5\u914d\u5bf9\u513f\uff1f\u8fd9\u5c31\u662f\u6700\u5927\u5339\u914d\u95ee\u9898\u3002  \u57fa\u672c\u6982\u5ff5\u8bb2\u5b8c\u4e86\u3002\u6c42\u89e3\u6700\u5927\u5339\u914d\u95ee\u9898\u7684\u4e00\u4e2a\u7b97\u6cd5\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4e0b\u9762\u8bb2\u7684\u6982\u5ff5\u90fd\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u670d\u52a1\u3002  \u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002</p> <p>\u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002\u4f8b\u5982\uff0c\u56fe 5 \u4e2d\u7684\u4e00\u6761\u589e\u5e7f\u8def\u5982\u56fe 6 \u6240\u793a\uff08\u56fe\u4e2d\u7684\u5339\u914d\u70b9\u5747\u7528\u7ea2\u8272\u6807\u51fa\uff09\uff1a  \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0d\u505c\u5730\u627e\u589e\u5e7f\u8def\u6765\u589e\u52a0\u5339\u914d\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002\u627e\u4e0d\u5230\u589e\u5e7f\u8def\u65f6\uff0c\u8fbe\u5230\u6700\u5927\u5339\u914d\uff08\u8fd9\u662f\u589e\u5e7f\u8def\u5b9a\u7406\uff09\u3002\u5308\u7259\u5229\u7b97\u6cd5\u6b63\u662f\u8fd9\u4e48\u505a\u7684\u3002\u5728\u7ed9\u51fa\u5308\u7259\u5229\u7b97\u6cd5 DFS \u548c BFS \u7248\u672c\u7684\u4ee3\u7801\u4e4b\u524d\uff0c\u5148\u8bb2\u4e00\u4e0b\u5308\u7259\u5229\u6811\u3002</p> <p>\u5308\u7259\u5229\u6811\u4e00\u822c\u7531 BFS \u6784\u9020\uff08\u7c7b\u4f3c\u4e8e BFS \u6811\uff09\u3002\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\u8fd0\u884c BFS\uff08\u552f\u4e00\u7684\u9650\u5236\u662f\uff0c\u5fc5\u987b\u8d70\u4ea4\u66ff\u8def\uff09\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62\u3002\u4f8b\u5982\uff0c\u7531\u56fe 7\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u56fe 8 \u7684\u4e00\u68f5 BFS \u6811\uff1a </p>"},{"location":"%E7%AE%97%E6%B3%95/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/","title":"N\u7687\u540e\u95ee\u9898","text":"<p>\u5728\u4e00\u4e2aN*N\u7684\u68cb\u76d8\u4e0a\u653e\u7f6eN\u4e2a\u7687\u540e\uff0c\u8981\u6c42\u4efb\u610f\u4e24\u4e2a\u7687\u540e\u4e0d\u80fd\u5728\u540c\u4e00\u884c\u3001\u540c\u4e00\u5217\u548c\u540c\u4e00\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u653e\u7f6e\u7684\u65b9\u6cd5\u3002</p> <p>\u8be5\u95ee\u9898\u7684\u57fa\u672c\u601d\u8def\u662f\u641c\u7d22\u6240\u6709\u7684\u72b6\u6001\u3002\u5148\u5728\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u653e\u7f6e\u7687\u540e\uff0c\u7136\u540e\u5728\u7b2c\u4e8c\u884c\u627e\u4e00\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e\uff0c\u63a5\u7740\u5728\u7b2c\u4e09\u884c\u627e\u4e00\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e\uff0c\u4e00\u65e6\u8fbe\u5230\u6700\u540e\u4e00\u884c\uff0c\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u89e3\uff0c\u5982\u679c\u5230\u67d0\u4e00\u884c\u7684\u65f6\u5019\u6ca1\u6709\u89e3\u4e86\uff0c\u5c31\u56de\u6eaf\u5230\u4e0a\u4e00\u884c\uff0c\u79fb\u52a8\u521a\u624d\u653e\u7f6e\u7684\u7687\u540e\u5230\u4e0b\u4e00\u4e2a\u53ef\u884c\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u5411\u4e0b\u641c\u7d22\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;map&gt;\n#include &lt;set&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;deque&gt;\n#include &lt;stack&gt;\nusing namespace std;\n\n/**\n * \u5224\u65ad\u5728\u68cb\u76d8\u7684row,col\u4f4d\u7f6e\u662f\u5426\u53ef\u4ee5\u653e\u7f6e\u7687\u540e\n * @param C  c[i]=j \u8868\u793a\u7b2ci\u884c\u7b2cj\u5217\u6709\u7687\u540e\n * @param row\n * @param col\n * @return\n */\nbool isValid(const vector&lt;int&gt; &amp;C,int &amp;row,int &amp;col){\n    for (int i = 0; i &lt; row; ++i) {\n        // \u5728col\u5217\u5df2\u7ecf\u6709\u7687\u540e\n        if(C[i] == col) return false;\n        // \u5bf9\u89d2\u7ebf\u4e0a\u7684\u7687\u540e\u884c\u5750\u6807\u76f8\u51cf\u603b\u662f\u7b49\u4e8e\u5217\u5750\u6807\n        if(abs(i-row) == abs(C[i]-col)) return false;\n    }\n    return true;\n}\n\n/**\n *\n * @param C\n * @param row\n */\nvoid dfs(vector&lt;int&gt; &amp;C,int row,int &amp;sum){\n    const int N = C.size();\n    if(row == N){\n        sum++;\n        return;\n    }\n    //\u6d4b\u8bd5\u6bcf\u4e00\u5217\n    for (int j = 0; j &lt; N; ++j) {\n        if(isValid(C,row,j)){\n            C[row] = j; //(row,j) \u653e\u7f6e\u4e00\u4e2a\u7687\u540e\n            dfs(C,row+1,sum);\n        }else{\n            continue; // \u4e0d\u884c\u5c31\u5c1d\u8bd5\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\n        }\n    }\n}\n//N\u7687\u540e\u95ee\u9898\nint totalNQueens(int n) {\n    vector&lt;int&gt; C(n,-1);\n    int sum = 0;\n    dfs(C,0,sum);\n    return sum;\n}\n\n\nint main(){\n    cout&lt;&lt;totalNQueens(4)&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u7531\u4e8e\u653e\u7f6e\u548c\u4e0d\u653e\u7f6e\u7687\u540e\u53ea\u9700\u8981\u4e00\u4e2a\u6807\u8bc6\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4f4d\u6765\u6807\u8bb0\uff0c\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u8282\u7701\u7a7a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f4d\u8fd0\u7b97\u6765\u52a0\u901f\u7b97\u6cd5\u3002</p> <pre><code>\n</code></pre>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/c%2B%2B/","title":"C++ \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>\u8bb0\u5f55\u7528 C++ \u5237 leetcode \u5fc5\u987b\u4e86\u89e3\u7684\u4f7f\u7528\u6280\u5de7</p>"},{"location":"%E7%AE%97%E6%B3%95/c/","title":"C \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>\u8bb0\u5f55\u7528C\u8bed\u8a00\u5237 leetcode \u9898\u5fc5\u987b\u8981\u4e86\u89e3\u7684C\u8bed\u8a00\u76f8\u5173\u529f\u80fd</p>"},{"location":"%E7%AE%97%E6%B3%95/c/#include","title":"include","text":"<pre><code>// bool, true, false\n#include &lt;stdbool.h&gt;\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/python/","title":"Python \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>\u8bb0\u5f55\u7528 python \u5237 leetcode \u5fc5\u987b\u4e86\u89e3\u7684\u7279\u6027\uff0c\u4e3b\u8981\u662f\u6570\u636e\u7ed3\u6784\u7684\u8868\u793a\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/python/#import","title":"import","text":"<p>\u8bb0\u5f55\u5404\u79cd\u9700\u8981\u5305\u542b\u7684\u5e93</p> <pre><code># \u540e\u7f6e\u8fd4\u56de\u7c7b\u578b List\nfrom typing import List\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/python/#_1","title":"\u8fd0\u7b97","text":"<pre><code>c = int(a / b) # \u5b9e\u73b0\u4e0eC\u8bed\u8a00\u4e00\u81f4\u7684\u6574\u6570\u9664\u6cd5\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/","title":"\u5206\u6cbb\u6cd5","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95/#_2","title":"\u76f8\u5173\u9898\u76ee","text":"<p>33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 74. \u641c\u7d22\u4e8c\u4f4d\u77e9\u9635 1011. \u5728D\u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/","title":"\u52a8\u6001\u89c4\u5212","text":"<p>\u80fd\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7684\u95ee\u9898\u5e94\u8be5\u6ee1\u8db32\u4e2a\u6761\u4ef6\uff1a 1. \u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u6784\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3 2. \u53cd\u590d\u6c42\u89e3\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u751f\u6210\u5168\u65b0\u7684\u5b50\u95ee\u9898\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u91cd\u53e0\u7684\uff0c \u5206\u6cbb\u6cd5\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u5168\u65b0\u7684\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#_2","title":"\u6574\u6570\u5212\u5206\u95ee\u9898","text":"<p>\u4e00\u4e2a\u6574\u6570\u5212\u5206\u6210\u82e5\u5e72\u6574\u6570\u7684\u548c\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u5212\u5206\u65b9\u5f0f\u3002 \u4f8b\u59824 = 1 + 1 + 1 + 1 = 2 + 1 + 1 = 2 + 2 = 3 + 1 = 4</p> <p>dp[i][j] \u8868\u793a\u6574\u6570 i \u7684 j \u5212\u5206\u7684\u65b9\u6cd5\u6570\uff0c i \u7684 j\u5212\u5206\u7684\u542b\u4e49\u662f\u628a i \u5212\u5206\u6210\u6700\u5927\u4e0d\u8d85\u8fc7 j\u7684\u6574\u6570\u7684\u548c\u6709\u591a\u5c11\u79cd\u5212\u5206\u65b9\u6cd5\u3002</p> <p>\u5982\u679c j &gt;= i, dp[i][j] = dp[i][i], \u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u8d85\u8fc7\u672c\u8eab\u7684\u5212\u5206\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u5141\u8bb8\u6709\u8d1f\u6570\u3002</p> <p>\u5982\u679c j &lt; i, dp[i][j] = dp[i][j-1] + dp[i - j][j], i \u7684 j \u5212\u5206\u662f\u4e24\u79cd\u60c5\u51b5\u7684\u548c\uff1a\u4e0d\u4f7f\u7528j\u672c\u8eab(dp[i][j-1]) + \u4f7f\u7528\u4e00\u4e2aj(dp[i-j][j])</p> <pre><code>int division(int n) {\n    int **dp = create_matrix(n + 1, n + 1);\n    fill(dp, n + 1, n + 1, 1);\n    for (int i = 2; i &lt;= n; i++) {\n        for (int j = 2; j &lt;= n; j++) {\n            if (j &gt; i) {\n                dp[i][j] = dp[i][i];\n            } else {\n                dp[i][j] = dp[i][j-1] + dp[i-j][j]\n            }\n        }\n    }\n    int ans = dp[n][n];\n    free_matrix(dp);\n    return ans;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#_3","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u80cc\u5305\u95ee\u9898\u662f\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u6700\u4f18\u5316\u95ee\u9898\uff0c\u5373\u5728\u67d0\u4e2a\u6307\u6807\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u53e6\u5916\u4e00\u4e2a\u6307\u6807\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#0-1","title":"0 - 1 \u80cc\u5305","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#_4","title":"\u5b8c\u5168\u80cc\u5305","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#_5","title":"\u591a\u91cd\u80cc\u5305","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#_6","title":"\u4e8c\u7ef4\u80cc\u5305\u95ee\u9898","text":"<p>\u4e00\u822c\u7684\u80cc\u5305\u95ee\u9898\u53ea\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u4f7f\u7528\u4e8c\u7ef4\u8868\u683c\u53ef\u4ee5\u5b8c\u6210\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u5c31\u5fc5\u987b\u4f7f\u7528\u4e09\u7ef4\u7684\u8868\u683c\u624d\u80fd\u5b8c\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u6837\u7684\u95ee\u9898\u53eb\u505a\u4e8c\u7ef4\u80cc\u5305\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%282%29/#_7","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u52a8\u6001\u89c4\u5212","text":"<p>\u80fd\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u7684\u95ee\u9898\u5e94\u8be5\u6ee1\u8db32\u4e2a\u6761\u4ef6\uff1a 1. \u6700\u4f18\u5b50\u7ed3\u6784\uff0c\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u6784\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3 2. \u53cd\u590d\u6c42\u89e3\u76f8\u540c\u7684\u5b50\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u751f\u6210\u5168\u65b0\u7684\u5b50\u95ee\u9898\u3002</p> <p>\u52a8\u6001\u89c4\u5212\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u91cd\u53e0\u7684\uff0c \u5206\u6cbb\u6cd5\u89e3\u51b3\u7684\u5b50\u95ee\u9898\u4e00\u822c\u90fd\u662f\u5168\u65b0\u7684\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","title":"\u6574\u6570\u5212\u5206\u95ee\u9898","text":"<p>\u4e00\u4e2a\u6574\u6570\u5212\u5206\u6210\u82e5\u5e72\u6574\u6570\u7684\u548c\uff0c\u8ba1\u7b97\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u5212\u5206\u65b9\u5f0f\u3002 \u4f8b\u59824 = 1 + 1 + 1 + 1 = 2 + 1 + 1 = 2 + 2 = 3 + 1 = 4</p> <p>dp[i][j] \u8868\u793a\u6574\u6570 i \u7684 j \u5212\u5206\u7684\u65b9\u6cd5\u6570\uff0c i \u7684 j\u5212\u5206\u7684\u542b\u4e49\u662f\u628a i \u5212\u5206\u6210\u6700\u5927\u4e0d\u8d85\u8fc7 j\u7684\u6574\u6570\u7684\u548c\u6709\u591a\u5c11\u79cd\u5212\u5206\u65b9\u6cd5\u3002</p> <p>\u5982\u679c j &gt;= i, dp[i][j] = dp[i][i], \u56e0\u4e3a\u4e0d\u53ef\u80fd\u6709\u8d85\u8fc7\u672c\u8eab\u7684\u5212\u5206\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4e0d\u5141\u8bb8\u6709\u8d1f\u6570\u3002</p> <p>\u5982\u679c j &lt; i, dp[i][j] = dp[i][j-1] + dp[i - j][j], i \u7684 j \u5212\u5206\u662f\u4e24\u79cd\u60c5\u51b5\u7684\u548c\uff1a\u4e0d\u4f7f\u7528j\u672c\u8eab(dp[i][j-1]) + \u4f7f\u7528\u4e00\u4e2aj(dp[i-j][j])</p> <pre><code>int division(int n) {\n    int **dp = create_matrix(n + 1, n + 1);\n    fill(dp, n + 1, n + 1, 1);\n    for (int i = 2; i &lt;= n; i++) {\n        for (int j = 2; j &lt;= n; j++) {\n            if (j &gt; i) {\n                dp[i][j] = dp[i][i];\n            } else {\n                dp[i][j] = dp[i][j-1] + dp[i-j][j]\n            }\n        }\n    }\n    int ans = dp[n][n];\n    free_matrix(dp);\n    return ans;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_3","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u80cc\u5305\u95ee\u9898\u662f\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u6700\u4f18\u5316\u95ee\u9898\uff0c\u5373\u5728\u67d0\u4e2a\u6307\u6807\u4e0d\u8d85\u8fc7\u67d0\u4e2a\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u53e6\u5916\u4e00\u4e2a\u6307\u6807\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#0-1","title":"0 - 1 \u80cc\u5305","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_4","title":"\u4f7f\u7528\u7a77\u7aed\u641c\u7d22","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n/**\n * 0--1 \u80cc\u5305\u95ee\u9898\n * \u4ece\u7b2cstart\u4e2a\u7269\u4f53\u5f00\u59cb\uff0c\u603b\u91cd\u91cf\u4e3aweight\u7684\u80cc\u5305\uff0c\u8fd4\u56de\u6700\u5927\u7684\u4ef7\u503c\n * @return\n */\nint rec(int start,int weight,vector&lt;int&gt; w,vector&lt;int&gt; v,vector&lt;int&gt; &amp;ob){\n    cout&lt;&lt;\"rec(\"&lt;&lt;start&lt;&lt;\",\"&lt;&lt;weight&lt;&lt;\")\"&lt;&lt;endl;\n    int result = 0;\n    // \u7269\u4f53\u7684\u6700\u5927\u4e2a\u6570\u662fw.size()-1,\u5982\u679c\u8d85\u8fc7\u8fd9\u4e2a\uff0c\u8fd4\u56de0\uff0c\u542b\u4e49\u662f\u4ece\u7b2cn\u4e2a\n    //\u7269\u4f53\u5f00\u59cb\uff0c\u5f97\u5230\u7684\u4ef7\u503c\u662f0\uff0c\u56e0\u4e3a\u4e0d\u80fd\u653e\u5165\u8fdb\u53bb\n    if(start == w.size()) {return result;}\n    //\u5982\u679c\u5f53\u524d\u7269\u4f53\u7684\u91cd\u91cf\u5df2\u7ecf\u5927\u4e8e\u603b\u91cd\u91cf\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u80fd\u653e\u5165\u80cc\u5305\uff0c\n    //\u4e00\u65e6\u653e\u5165\u91cd\u91cf\u5c31\u8d85\u8fc7\u4e86\n    if(w[start] &gt; weight){\n        result = rec(start+1,weight,w,v,ob);\n    }\n    //\u5982\u679c\u5f53\u524d\u7269\u4f53\u7684\u91cd\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u7684\u91cd\u91cf\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\uff0c\n    //\u5c1d\u8bd5\u653e\u5165\u548c\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\uff0c\u9009\u62e9\u8f83\u5927\u7684\u90a3\u4e2a\uff1b\n//    if(w[start] &lt;= weight){\n//        result = max(rec(start+1,weight,w,v),rec(start+1,weight-w[start],w,v)+v[start]);\n//    }\n    // \u8bb0\u5f55\u7269\u54c1\u662f\u5426\u653e\u5165\u4e86\u80cc\u5305\n    if(w[start] &lt;= weight){\n        int noput = rec(start+1,weight,w,v,ob);\n        int putted = rec(start+1,weight-w[start],w,v,ob)+v[start];\n        if(putted &gt; noput){\n            result = putted;\n            cout&lt;&lt;\"===\"&lt;&lt;\"rec(\"&lt;&lt;start&lt;&lt;\",\"&lt;&lt;weight&lt;&lt;\")\"&lt;&lt;\"===\"&lt;&lt;endl;\n            ob.push_back(start);\n        }else{\n            result = noput;\n        }\n    }\n    return result;\n}\nvoid print(vector&lt;int&gt; v){\n    for(auto a : v){\n        cout&lt;&lt;a&lt;&lt;\" \";\n    }\n    cout&lt;&lt;endl;\n}\nint main() {\n    vector&lt;int&gt; w = {2,1,3,2};\n    vector&lt;int&gt; v = {3,2,4,2};\n    int weight = 5;\n    vector&lt;int&gt; ob;\n    cout&lt;&lt;rec(0,weight,w,v,ob)&lt;&lt;endl;\n    print(ob);\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_5","title":"\u4f7f\u7528\u52a8\u6001\u89c4\u5212","text":"<p>\u52a8\u6001\u89c4\u5212\u7684\u9012\u63a8\u516c\u5f0f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4ece\u4e0a\u9762\u7684\u7a77\u7aed\u641c\u7d22\u4e2d\u5f97\u5230\u3002 rec(i,j) \u8868\u793a\u4ece\u7b2ci\u4e2a\u7269\u4f53\u5f00\u59cb\uff0c\u5728\u4e0d\u8d85\u8fc7j\u7684\u91cd\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u7684\u4ef7\u503c\u662f\u591a\u5c11 \u8bbe\u7f6edp[i][j] = rec(i,j); \u5219\u53ef\u4ee5\u77e5\u9053dp[n][j] = 0; \u56e0\u4e3a\u6700\u591a\u53ea\u6709n-1\u4e2a\u7269\u4f53\uff1b <code>dp[i][j] = dp[i+1][j]</code>         \u5f53\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u5927\u4e8ej\u7684\u65f6\u5019\uff1b <code>dp[i][i] = max( dp[i+1][j] , dp[i+1][j-w[i]]+v[i] )</code>           \u5f53\u7b2ci\u4e2a\u7269\u4f53\u80fd\u591f\u88c5\u8fdb\u53bb\u7684\u65f6\u5019\uff0c\u5206\u522b\u5c1d\u8bd5\u88c5\u5165\u548c\u4e0d\u88c5\u5165\uff0c\u53d6\u6700\u5927\u503c\u3002 <pre><code>/**\n * \u80cc\u5305\u95ee\u9898\u7684\u52a8\u6001\u89c4\u5212\u89e3\u6cd5\n * @param w\n * @param v\n * @param weight\n * @return\n */\nint dp(vector&lt;int&gt; w,vector&lt;int&gt; v,int weight){\n    int n = w.size();\n    vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(weight+1));\n    for(int i=n;i&gt;=0;i--){\n        for(int j=0;j&lt;weight+1;j++){\n            if(w[i] &gt; j){\n                dp[i][j] = dp[i+1][j];\n            }else{\n                dp[i][j] = max(dp[i+1][j],dp[i+1][j-w[i]] + v[i]);\n            }\n        }\n    }\n    print2(dp);\n    return dp[0][weight];\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_6","title":"\u4f7f\u7528\u72b6\u6001\u8f6c\u79fb\u7684\u89c2\u70b9","text":"<pre><code>/**\n * \u4ece\u72b6\u6001\u8f6c\u79fb\u7684\u89c2\u70b9\u6765\u770b\n * dp[i][j] \u8868\u793a\u6311\u9009\u51fa\u4ece0\u5230i\u7269\u4f53\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u72b6\u6001\u3002dp[0][j]\u8868\u793a\u9009\u62e90\u4e2a\u7269\u54c1\u65f6\u7684\u91cd\u5927\u4ef7\u503c\n * dp[1][j] \u8868\u793a\u9009\u62e9\u7269\u4f531\u65f6\u5019\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u6700\u5927\u7684\u4ef7\u503c\n * \u6240\u4ee5\u6709dp[0][j] = 0;\n * dp[i][j] = dp[i-1][j] \u5f53i-1\u7269\u4f53\u4e0d\u80fd\u653e\u5165\u80cc\u5305\u65f6\n * dp[i][j] = dp[i-1][j-w[i]] + v[i] \u5f53i-1\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\u7684\u65f6\u5019\n * dp[0][j]\n * @param w\n * @param v\n * @param weight\n * @return\n */\nint dp2(vector&lt;int&gt; w,vector&lt;int&gt; v,int weight){\n    int n = w.size();\n    vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(weight+1));\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;weight+1;j++){\n            if(w[i] &gt; j){\n                dp[i+1][j] = dp[i][j];\n            }else{\n                dp[i+1][j] = max(dp[i][j],dp[i][j-w[i]] + v[i]);\n            }\n        }\n    }\n    print2(dp);\n    return dp[n][weight];\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_7","title":"\u5b8c\u5168\u80cc\u5305","text":"<p>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u53ef\u4ee5\u8fd9\u6837\u5efa\u7acb\u9012\u63a8\u5173\u7cfb\uff1b dp[i][j] \u8868\u793a\u524di-1\u4e2a\u7269\u4f53\u653e\u5165\u80cc\u5305\uff0c\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7j\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u4ef7\u503c\u3002i=0\u65f6\u8868\u793a\u6ca1\u6709\u7269\u4f53\u3002 w[i] \u548c v[i] \u8868\u793a\u7b2ci\u4e2a\u7269\u4f53\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u3002\u6ce8\u610f\u8fd9\u91ccdp\u4e2d\u7684i\u548cw,v\u4e2d\u7684i\u76f8\u5dee1.\u4e5f\u5c31\u662fdp[i+1]\u5bf9\u5e94\u7684\u7269\u4f53\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u662fw[i],v[i]; <pre><code>dp[i+1][j] := dp[i][j]  \u7b2ci\u4e2a\u7269\u4f53\u4e0d\u653e\u5165\u80cc\u5305\n           := dp[i][j-1*w[i]] + v[i] \u7b2ci\u4e2a\u7269\u4f53\u653e\u51651\u6b21\u7684\u65f6\u5019\n           := dp[i][j-2*w[i]] + 2*v[i] \u7b2ci\u4e2a\u7269\u4f53\u653e\u51652\u6b21\u7684\u65f6\u5019\n           ...\n</code></pre> \u4e0a\u9762\u7684\u9012\u63a8\u5173\u7cfb\u867d\u7136\u5bb9\u6613\u7406\u89e3\uff0c\u5374\u5b58\u5728\u8fd9\u5faa\u73af\uff0c\u6709\u91cd\u590d\u8ba1\u7b97\u7684\u5730\u65b9\u3002\u9012\u63a8\u5173\u7cfb\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>dp[i+1][j] = dp[i][j]   ; \u7b2ci\u4e2a\u7269\u4f53\u65e0\u6cd5\u653e\u5165\u80cc\u5305\u7684\u60c5\u51b5 dp[i+1][j] = d[i+1][j-w[i]]  + v[i]   ; \u5982\u679c\u7b2ci\u4e2a\u7269\u4f53\u53ef\u4ee5\u653e\u5165\u80cc\u5305\uff0c\u90a3\u4e48\u6700\u5927\u4ef7\u503c\u7b49\u4e8e \u5728dp[i+1][j-w[i]]\u7684\u57fa\u7840\u4e0a\u518d\u653e\u5165\u4e00\u4e2ai\u7269\u54c1\uff0c\u8fd9\u65f6\u7684\u4ef7\u503c\u662fdp[i+1][j-w[i]] + v[i]; \u6240\u4ee5\u6700\u540e\u7684\u9012\u63a8\u5173\u7cfb\u53ef\u4ee5\u5199\u6210\uff1a dp[0][j] = 0; dp[i+1][j] = max(dp[i][j],dp[i+1][j-w[i]] + v[i])</p> <pre><code>/**\n * \u5b8c\u5168\u80cc\u5305\u95ee\u9898\n * @param w\n * @param v\n * @param weight\n * @return\n */\nint dp3(vector&lt;int&gt; w,vector&lt;int&gt; v,int weight){\n    int n = w.size();\n    vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(weight+1));\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;=weight;j++){\n            if(j&lt;w[i]){\n                dp[i+1][j] = dp[i][j];\n            }else{\n                dp[i+1][j] = max(dp[i][j],dp[i+1][j-w[i]]+v[i]);\n            }\n\n        }\n    }\n    print2(dp);\n    return dp[n][weight];\n}\n</code></pre> <p>\u4ee5\u4e0a\u80cc\u5305\u7684\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u53ef\u4ee5\u4f18\u5316\u5230O\uff08nW\uff09\u4e5f\u5c31\u662f\u7269\u54c1\u6570\u91cf * \u80cc\u5305\u5bb9\u91cf\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u4f18\u5316\u5230O\uff08n\uff09. \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8db3\u591f\u4e86\u3002\u4f46\u662f\u9488\u5bf9\u4e0b\u9762\u8fd9\u9053\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e0d\u591f\u7528\u4e86\uff0c\u9700\u8981\u53e6\u5916\u5bfb\u627e\u89e3\u9898\u7684\u65b9\u6cd5\u3002</p> <p>\u6709n\u4e2a\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u4e3aw[i],v[i]\u7684\u7269\u54c1\uff0c\u88c5\u5165\u5bb9\u91cf\u4e3aW\u7684\u80cc\u5305\uff0c\u6c42\u6700\u5927\u4ef7\u503c\u3002 \u9650\u5236\u6761\u4ef6\uff1a n : 1--100 ; w[i] : 1--10000000 ; v[i] : 1--100;  W : 1--1000000000</p> <p>\u539f\u6765\u80cc\u5305\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(nW),\u4f46\u662f\u672c\u9898'\u6545\u610f'\u628aW\u8bbe\u7f6e\u7684\u5f88\u5927\uff0c\u4f7f\u5f97\u4e0d\u80fd\u4f7f\u7528\u539f\u6765\u7684\u65b9\u6cd5\u6c42\u89e3\u3002 \u4ed4\u7ec6\u5206\u6790\u6570\u636e\u7684\u53d6\u503c\u8303\u56f4\u53d1\u73b0\uff0cv[i]\u7684\u8303\u56f4\u6bd4\u8f83\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u6362\u601d\u8def\uff0c\u6c42\u89e3\u603b\u91cd\u91cf\u4e0d\u8d85\u8fc7W\u7684\u60c5\u51b5\u4e0b\u4ef7\u503c\u7684\u6700\u5927\u503c\uff0c \u5c31\u662f\u6c42\u89e3\u76f8\u540c\u4ef7\u503c\u4e0b\u7684\u603b\u91cd\u91cf\u7684\u6700\u5c0f\u503c\u3002 dp[i][j] \u8868\u793a\u524di-1\u4e2a\u7269\u4f53\u5728\u4ef7\u503c\u4e0d\u8d85\u8fc7j\u7684\u65f6\u5019\u7684\u603b\u91cd\u91cf\u7684\u6700\u5c0f\u503c\u3002 dp[0][j] = INF; \u628a\u4e0d\u5b58\u5728\u6700\u5c0f\u503c\u7684\u60c5\u51b5\u8bbe\u7f6e\u4e3a\u6700\u5927\u503c\uff0c\u8fd9\u6837\u662f\u65b9\u4fbf\u7528min(); dp[0][0] = 0 ; dp[i+1][j] = min(dp[i][j],dp[i][j-v[i]]+w[i])</p> <pre><code>/**\n * 0-1\u80cc\u5305\u7684\u53d8\u79cd\n * @return\n */\nint dp4(vector&lt;int&gt; w,vector&lt;int&gt; v,int weight){\n    int n = w.size();\n    vector&lt;vector&lt;int&gt;&gt; dp(n+1,vector&lt;int&gt;(weight+1));\n    dp[0][0] = 0;\n    for(int i=0;i&lt;n;i++){\n        for(int j=0;j&lt;=weight;j++){\n            if(j&lt;v[i]){\n                dp[i+1][j] = dp[i][j];\n            }else{\n                dp[i+1][j] = min(dp[i][j],dp[i+1][j-v[i]]+w[i]);\n            }\n\n        }\n    }\n    print2(dp);\n    return dp[n][weight];\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_8","title":"\u591a\u91cd\u80cc\u5305","text":"<pre><code># \u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u4f7f\u7528ci\u6b21\ndef package_ci(n, c, w, v):\n    N = n + 1\n    C = c + 1\n    dp = [ [0]*N for i in range(C)]\n    for i in range(1, N):\n        for j in range(1, C):\n            if j &lt; w[i]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                for k in range(1, j/w[i]):\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-k*w[i] + k*v[i]])\n    return dp[n][n]\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_9","title":"\u4e8c\u7ef4\u80cc\u5305\u95ee\u9898","text":"<p>\u4e00\u822c\u7684\u80cc\u5305\u95ee\u9898\u53ea\u6709\u4e00\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u4f7f\u7528\u4e8c\u7ef4\u8868\u683c\u53ef\u4ee5\u5b8c\u6210\u3002 \u5982\u679c\u6709\u4e24\u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u5c31\u5fc5\u987b\u4f7f\u7528\u4e09\u7ef4\u7684\u8868\u683c\u624d\u80fd\u5b8c\u6210\u52a8\u6001\u89c4\u5212\uff0c\u8fd9\u6837\u7684\u95ee\u9898\u53eb\u505a\u4e8c\u7ef4\u80cc\u5305\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_10","title":"\u5355\u8bcd\u5207\u5206","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32s\u548c\u4e00\u4e2a\u8bcd\u5178\uff0c\u5224\u65ad\u5b57\u7b26\u4e32s\u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u5207\u5206\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u51fa\u73b0\u5728\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002 \u6837\u4f8b</p> <p>\u7ed9\u51fa</p> <p>s = \"lintcode\"</p> <p>dict = [\"lint\",\"code\"]</p> <p>\u8fd4\u56de true \u56e0\u4e3a\"lintcode\"\u53ef\u4ee5\u88ab\u7a7a\u683c\u5207\u5206\u6210\"lint code\"</p> <p>\u5355\u8bcd\u5207\u5206</p> <p>\u601d\u8def\u4e00\uff1a\u5f00\u4e00\u4e2a<code>dp[n+1]</code>\u8868\u793a\u524di\u4e2a\u5b57\u6bcd\u80fd\u5426\u7528\u7a7a\u683c\u5206\u5272\u5f00(\u6309\u7167\u5b57\u5178\u91cc\u9762\u7ed9\u51fa\u7684\u5355\u8bcd)\u3002<code>dp[0]=true</code>\u8868\u793a\u7a7a\u5b57\u7b26\u4e32\u80fd\u591f\u5206\u5272\u5f00\uff0c<code>dp[1]=true</code>\u5f53<code>s[0]</code>\u5728\u5b57\u5178\u4e2d\u5b58\u5728\u65f6\u3002\u5bf9\u4e8e<code>dp[j]</code>\u6765\u8bf4\uff0c\u9010\u4e2a\u5411\u524d\u641c\u7d22\uff0c\u770b\u662f\u5426\u6709<code>s[i,j]</code>\u5b58\u5728\u4e0edict\u4e2d\u7684\u540c\u65f6<code>dp[i-1]</code>\u4e3a\u771f\u3002\u5982\u679c\u6709\uff0c<code>dp[j]=true</code>,\u5982\u679c\u641c\u7d22\u5230\u5934\u8fd8\u6ca1\u6709\uff0c<code>dp[j]=false</code>.\u8fd9\u79cd\u65b9\u6cd5\u6700\u5bb9\u6613\u60f3\u5230\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\u3002(\u4e0d\u80fd\u901a\u8fc7<code>lintcode</code>\u7684\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b)</p> <pre><code>//[\u5355\u8bcd\u5207\u5206](http://lintcode.com/zh-cn/problem/word-break/)\nbool wordBreak(string s, unordered_set&lt;string&gt; &amp;dict) {\n    // write your code here\n    if(s.empty()) return false;\n    vector&lt;bool&gt; dp(s.size()+1,false);\n    dp[0] = true;\n    for (int i = 1; i &lt;= s.size(); ++i) {\n        if(dict.find(s.substr(i-1,1))!=dict.end() &amp;&amp; dp[i-1]){\n            dp[i] = true;\n        }\n        int clen = 2;\n        for (int j = i - 1; j &gt;= 1 ; --j) {\n            string ss = s.substr(j-1,clen);\n            if(dict.find(ss) != dict.end() &amp;&amp; dp[j-1]){\n                dp[i]  = true;\n                break;\n            }\n            clen ++;\n        }\n    }\n    return dp[s.size()];\n}\n</code></pre> <p>\u601d\u8def\u4e8c\uff1a\u4e0a\u9762\u7684\u7b97\u6cd5\u6bcf\u6b21\u90fd\u4f1a\u56de\u6eaf\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u5b57\u5178\u7684\u6700\u5927\u7684\u5b57\u7b26\u7684\u957f\u5ea6\u8fdc\u8fdc\u5c0f\u4e8e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6(\u5f88\u5e38\u89c1\u7684\u60c5\u51b5)\uff0c\u4f1a\u9020\u6210\u5927\u91cf\u7684\u6d6a\u8d39\uff0c\u6240\u4ee5\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff0c\u6bcf\u6b21\u53ea\u56de\u6eaf\u5230\u5b57\u5178\u4e2d\u6700\u5927\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5904\uff0c\u8fd9\u6837\u5c31\u80fd\u901a\u8fc7<code>lintcode</code>\u7684\u5927\u89c4\u6a21\u7684\u6570\u636e\u4e86\u3002<code>getMaxLen</code>\u7528\u6765\u83b7\u53d6\u5b57\u5178\u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u4f46\u662f\u8be5\u65b9\u6cd5\u5f53dict\u4e2d\u6700\u5927\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5f88\u957f\u65f6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u964d\u4f4e\u3002</p> <pre><code>int getMaxLen( unordered_set&lt;string&gt; &amp;dict){\n    int maxlen = 0;\n    for(auto a : dict){\n        maxlen = max(maxlen,(int)a.size());\n    }\n    return maxlen;\n}\n//[\u5355\u8bcd\u5207\u5206](http://lintcode.com/zh-cn/problem/word-break/)\nbool wordBreak(string s, unordered_set&lt;string&gt; &amp;dict) {\n    // write your code here\n    if(s.empty() &amp;&amp; dict.empty()) return true;\n    if(s.empty()) return false;\n    vector&lt;bool&gt; dp(s.size()+1,false);\n    int maxlen = getMaxLen(dict);\n    dp[0] = true;\n    for (int i = 1; i &lt;= s.size(); ++i) {\n        if(dict.find(s.substr(i-1,1))!=dict.end() &amp;&amp; dp[i-1]){\n            dp[i] = true;\n        }\n        int clen = 2;\n        int end = max(1,i-1-maxlen);\n        for (int j = i - 1; j &gt;= end ; --j) {\n            string ss = s.substr(j-1,clen);\n            if(dict.find(ss) != dict.end() &amp;&amp; dp[j-1]){\n                dp[i]  = true;\n                break;\n            }\n            clen ++;\n        }\n    }\n    return dp[s.size()];\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_11","title":"\u6362\u94b1\u7684\u65b9\u6cd5\u6570","text":"<p>\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\u3002<code>dp[i][j]</code>\u8868\u793a\u7528\u524d<code>i</code>\u79cd\u9762\u503c\u7684\u94b1\u7ec4\u6210<code>j</code>\u603b\u5171\u6709\u591a\u5c11\u4e2d\u65b9\u6848\u3002\u8bbe\u94b1\u5e01\u7684\u9762\u503c\u4e00\u5171\u6709N\u4e2d\uff0c\u7ec4\u6210\u7684\u9762\u503c\u4e3aM\uff0c\u5219\u9700\u8981<code>N*(M+1)</code>\u7684\u6570\u7ec4\u3002\u7b2c\u4e00\u884c\u8868\u793a\u4f7f\u7528\u7b2c\u4e00\u79cd\u9762\u503c\u7684\u8d27\u5e01\u7ec4\u6210\u76ee\u6807\u503c\u7684\u65b9\u6cd5\u6570\u91cf\uff0c\u5f53<code>j</code>\u80fd\u591f\u88ab\u6574\u9664\u65f6\uff0c\u65b9\u6cd5\u6570\u91cf\u4e3a1\uff0c\u5426\u5219\u4e3a0. \u7b2c\u4e00\u5217\u8868\u793a\u7ec4\u6210\u76ee\u6807\u503c<code>0</code>\u6709\u591a\u5c11\u79cd\u60c5\u51b5\uff0c\u65e0\u8bba\u6709\u51e0\u79cd\u9762\u503c\u7684\u8d27\u5e01\uff0c\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u4e00\u4e2a\u90fd\u4e0d\u7528\u3002</p> <p>\u9012\u63a8\u516c\u5f0f\uff1a </p> <ol> <li> <p><code>dp[i][j] = dp[i-1][j] if j &lt; v[i]</code>, (\u5f53\u9762\u503c\u4e3a<code>v[i]</code>\u7684\u8d27\u5e01\u6bd4\u76ee\u6807\u503c\u8fd8\u8981\u5927\u7684\u65f6\u5019\uff0c\u80af\u5b9a\u4e00\u5f20<code>v[i]</code>\u90fd\u4e0d\u80fd\u4f7f\u7528\uff0c\u8fd9\u4e2a\u65f6\u5019\u65b9\u6cd5\u6570\u91cf\u7b49\u4e8e<code>dp[-1][j]</code>).</p> </li> <li> <p><code>dp[i][j] = dp[i-1][j] + dp[i][j-v[i]] if j &gt;= v[i]</code>,   (\u5982\u679c\u76ee\u6807\u503c\u6bd4\u9762\u503c\u4e3a<code>v[i]</code>\u7684\u94b1\u5927\uff0c\u5219\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528<code>v[i]</code>\u82e5\u5e72\u6b21\uff0c\u4e00\u76f4\u5230\u8d85\u8fc7\u76ee\u6807\u503c\uff1b \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ec4\u6210\u76ee\u6807\u503c\u7684\u603b\u65b9\u6cd5\u6570\u91cf\u4e3a\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u7684\u548c\uff1a \u4e0d\u4f7f\u7528\u7b2ci\u4e2d\u8d27\u5e01\u7ec4\u6210j, \u65b9\u6cd5\u6570\u91cf\u662f<code>dp[i-1][j]</code>; \u4f7f\u7528\u7b2c<code>i</code>\u79cd\u8d27\u5e01\u7ec4\u6210j\u7684\u6570\u91cf\uff0c<code>dp[i][j-v[i]]</code>, \u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u9996\u5148\u4f7f\u7528\u4e00\u5f20<code>v[i]</code>,\u7136\u540e\u7528\u524d<code>i</code>\u4e2d\u8d27\u5e01\u7ec4\u6210\u5269\u4e0b\u7684<code>j-v[i]</code>\u76ee\u6807\u503c\uff0c\u8fd9\u4e2a\u503c\u4e4b\u524d\u8ba1\u7b97\u8fc7\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u6765\uff0c\u5c31\u662f<code>dp[i][j-v[i]]</code>;</p> </li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\nint getNum(vector&lt;int&gt; v,int aim){\n    vector&lt;vector&lt;int&gt; &gt; dp(v.size(),vector&lt;int&gt;(aim+1));\n    //\u521d\u59cb\u5316\u7b2c\u4e00\u5217\n    for(int i=0;i&lt;v.size();++i){\n        dp[i][0] = 1;\n    }\n    //\u521d\u59cb\u5316\u7b2c\u4e00\u884c\n    for(int j=1;j&lt;=aim;j++){\n        dp[0][j] = j%v[0]==0 ? 1 : 0;\n    }\n    for(int i=1;i&lt;v.size();++i){\n        for(int j=1;j&lt;=aim;++j){\n            dp[i][j] = j-v[i]&gt;=0 ? dp[i-1][j]+dp[i][j-v[i]] : dp[i-1][j];\n        }\n    }\n    //\u6253\u5370\u52a8\u6001\u89c4\u5212\u8868\u683c\n    for(int i=0;i&lt;dp.size();++i){\n        for(int j=0;j&lt;dp[0].size();++j){\n            cout&lt;&lt;dp[i][j]&lt;&lt;\"\\t\";\n        }\n        cout&lt;&lt;endl;\n    }\n    return dp[v.size()-1][aim];\n}\nint main() {\n    vector&lt;int&gt; v = {5,2,3,7};\n    int aim = 7;\n    std::cout &lt;&lt; getNum(v,aim) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_12","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u4e2d\u7b49 516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 \u4e2d\u7b49 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/","title":"\u54c8\u5e0c\u8868","text":"<p>\u54c8\u5e0c\u8868\u662f\u6570\u7ec4\u7684\u6269\u5c55\uff0c\u6570\u7ec4\u53ea\u80fd\u7528\u8fde\u7eed\u7684\u6574\u6570\u8868\u793a\u952e\uff1b\u54c8\u5e0c\u8868\u53ef\u4ee5\u7528\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","title":"\u54c8\u5e0c\u8868\u7684\u539f\u7406","text":"<p>\u7b80\u5355\u7684\u7406\u89e3\uff0c \u54c8\u5e0c\u8868\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u5c06\u952e\u8f6c\u6362\u4e3a\u5177\u4f53\u7684\u6570\u5b57\uff0c \u7528\u8be5\u6570\u5b57\u4f5c\u4e3a\u4e0b\u6807\u8fbe\u5230\u76f4\u63a5\u5bfb\u5740\u7684\u76ee\u7684\u3002</p> <p>\u4e0d\u540c\u7684\u952e\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u4e4b\u540e\u53ef\u80fd\u7ed3\u679c\u76f8\u540c\uff0c\u8fd9\u6837\u7ed3\u679c\u5c31\u4f1a\u51b2\u7a81\uff0c\u6240\u4ee5\u6bcf\u4e2a\u4e0b\u6807\u5b58\u50a8\u7684\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u8bb0\u5f55\u4e86\u7ecf\u8fc7\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u4e4b\u540e\u6709\u591a\u5c11\u4e2a\u952e\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002</p> <p>\u9009\u62e9\u597d\u7684\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u4f7f\u94fe\u8868\u7684\u957f\u5ea6\u5747\u5300\u5206\u5e03\uff0c\u8fd9\u6837\u67e5\u627e\u7684\u6548\u7387\u8fd1\u4f3cO(1).</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_3","title":"\u54c8\u5e0c\u8868\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u56f0\u96be 187. \u91cd\u590d\u7684DNA\u5e8f\u5217 \u4e2d\u7b49 609. \u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6 \u56f0\u96be 1311. \u83b7\u53d6\u4f60\u597d\u53cb\u5df2\u89c2\u770b\u7684\u89c6\u9891 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9B%E7%AD%89%E5%88%86%E6%95%B0%E7%BB%84/","title":"\u56db\u7b49\u5206\u6570\u7ec4","text":"<p>\u9898\u76ee</p> <pre><code>\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6574\u578b\u6570\u7ec4A\uff0c \u6570\u7ec4\u91cc\u6240\u6709\u7684\u6570\u90fd\u662f\u6b63\u6574\u6570\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u6ee1\u8db30&lt;=X &lt;= Y &lt;N\u7684\u6574\u6570\uff0c\nA[X], A[X+1] \u2026 A[Y]\u6784\u6210A\u7684\u4e00\u4e2a\u5207\u7247\uff0c\u8bb0\u4f5c(X, Y).\n\u7528\u4e09\u4e2a\u4e0b\u6807 m1, m2, m3\u4e0b\u6807\u6ee1\u8db3\u6761\u4ef60 &lt; m1, m1 + 1 &lt; m2, m2 +1 &lt; m3 &lt; N \u2013 1\u3002\n\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6574\u578b\u6570\u7ec4\u5206\u6210(0, m1-1), (m1+1, m2-1), (m2+1, m3-1), (m3+1, N-1) \u56db\u4e2a\u5207\u7247\u3002\n\u5982\u679c\u8fd9\u56db\u4e2a\u5207\u7247\u7684\u6574\u6570\u6c42\u548c\u76f8\u7b49\uff0c\u79f0\u4f5c\u201c\u56db\u7b49\u5206\u201d\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6574\u578b\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u56db\u7b49\u5206\n\u8981\u6c42\uff1a \u51fd\u6570\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e3aO(N)\uff0c\u4f7f\u7528\u7684\u989d\u5916\u5b58\u50a8\u7a7a\u95f4\uff08\u9664\u4e86\u8f93\u5165\u7684\u6570\u7ec4\u4e4b\u5916\uff09\u6700\u591a\u4e3aO(N)\u3002\n</code></pre> <p>\u601d\u8def\uff1a\u5982\u679c\u4e0d\u53bb\u6389\u4e2d\u95f4\u7684\u5143\u7d20\uff0c\u76f4\u63a5\u5224\u65ad\u4e00\u4e2a\u6570\u7ec4\u662f\u5426\u80fd\u591f\u56db\u7b49\u5206\uff0c\u53ea\u9700\u8981\u770b\u6570\u7ec4\u7684\u548c\u88ab4\u6574\u9664\u7684\u60c5\u51b5\u4e0b\u80fd\u5426\u4f9d\u6b21\u52a0\u548c\u6210sum/4\u5c31\u53ef\u4ee5\u4e86\uff0c\u4ee3\u7801\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>bool judge(vector&lt;int&gt; v){\n    int sum = 0;\n    for(auto vv:v){\n        sum += vv;\n    }\n    if(sum % 4 != 0){return false;}\n    int partSum = sum / 4;\n    sum = 0;\n    int count = 0;\n    for(int i=0;i&lt;v.size();i++){\n        sum += v[i];\n        if(sum == partSum){\n            count++;\n            sum = 0;\n        }\n        if(sum &gt; partSum){\n            return false;\n        }\n    }\n    if(count == 4){\n        return true;\n    }else{\n        return false;\n    }\n}\n</code></pre> <p>\u4f46\u662f\u672c\u9898\u8981\u590d\u6742\u7684\u591a\uff0c\u9700\u8981\u786e\u5b9a\u4e09\u4e2a\u5206\u5272\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u6570\u7ec4\u7684\u548c\u4e5f\u4e0d\u518d\u4e00\u5b9a\u662f4\u7684\u500d\u6570\u3002\u672c\u9898\u53ef\u4ee5\u4ece\u4e24\u8fb9\u5165\u624b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u53ef\u4ee5\u56db\u7b49\u5206\uff0c\u5219\u4e24\u8fb9\u4e00\u5b9a\u53ef\u4ee5\u6709\u8fde\u7eed\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u7684\u548c\u662f\u76f8\u7b49\u7684\uff0c\u5373a[0]+a[1]+...a[low] = a[N-1]+a[N-2]+a[high]. \u627e\u5230\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u5206\u5272\uff0c\u786e\u5b9alow,\u548chigh, \u7136\u540e\u5728low,high\u7684\u57fa\u7840\u4e0a\uff0c\u641c\u7d22\u662f\u5426\u6709\u4e00\u4e2a\u4ecb\u4e8elow\u548chigh\u4e2d\u95f4\u7684\u5143\u7d20m\u53ef\u4ee5\u88ab\u5269\u4e0b\u7684\u6570\u7ec4\u5206\u6210\u548c\u76f8\u7b49\u7684\u4e24\u90e8\u5206\uff0c\u5e76\u4e14\u548c==\u7b2c\u4e00\u90e8\u5206\u548c\u7b2c\u56db\u90e8\u5206\u3002\u5982\u679c\u5b58\u5728\uff0c\u5c31\u5b8c\u6210\u4e86\u6570\u7ec4\u7684\u56db\u7b49\u5206\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5c31\u9012\u589elow, \u627e\u5230\u7b2c\u4e8c\u4e2alow,high\u7684\u503c\uff0c\u7ee7\u7eed\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\u3002</p> <p>\u5728\u4e2d\u95f4\u9636\u6bb5\u67e5\u627e\u7684\u65f6\u5019\uff0cm\u7684\u4f4d\u7f6e\u53ef\u4ee5\u5b9a\u5728low,high\u7684\u4e2d\u95f4\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u5f0f\u5feb\u901f\u5b9a\u4f4d\u3002\u56e0\u4e3a\u5de6\u53f3\u548c\u76f8\u7b49\u7684\u60c5\u51b5\u4e0d\u4f1a\u7279\u522b\u591a\uff0c\u6240\u4ee5\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u80fd\u591f\u6ee1\u8db3\u8981\u6c42\u3002</p> <p>\u67e5\u627e\u4e00\u4e2a\u6570\u7ec4\u4e24\u7aef\u8fde\u7eed\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u6240\u6709\u60c5\u51b5\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>/*\n * \u627e\u5230\u6570\u7ec4\u4e24\u4fa7\u548c\u76f8\u7b49\u7684\u8fde\u7eed\u5e8f\u5217\n */\nvector&lt;int&gt; bothSidesSum(vector&lt;int&gt; v){\n    vector&lt;int&gt; re;\n    if(v.size()&lt;2) return re;\n    int left = 0;\n    int right = v.size()-1;\n    int leftSum = v[left++];\n    int rightSum = v[right--];\n    while(left&lt;=right){\n        if(leftSum &lt; rightSum){\n            leftSum += v[left++];\n        }else if(leftSum &gt; rightSum){\n            rightSum += v[right--];\n        }else{\n            re.push_back(leftSum);\n            leftSum += v[left++];\n        }\n    }\n    return re;\n}\n</code></pre> <p>\u73b0\u5728\u5047\u8bbe\u786e\u5b9a\u4e86\u67d0\u4e00\u6b21\u7684low,high\u7684\u503c\u3002\u5373\u4ece\u6700\u5de6\u4fa7\u5f00\u59cb\u5230low-1\u7684\u548c\u7b49\u4e8e\u4ece\u6700\u53f3\u4fa7\u5f00\u59cb\u5230high+1\u7684\u503c\u3002\u73b0\u5728\u770b\u5982\u4f55\u641c\u7d22m\u5e94\u8be5\u7684\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u4ee5m\u4e3a\u5206\u5272\u7684\u4e24\u6bb5\u548c\u662f\u76f8\u7b49\u7684\u3002</p> <pre><code>/**\n* \u627e\u5230\u548c\u76f8\u7b49\u7684\u5206\u754c\u70b9\uff0c\u6ca1\u6709\u8fd4\u56de0\uff0c\u6709\u7684\u8bdd\u8fd4\u56de\u548c\u7684\u503c\n*/\nint findMiddle(vector&lt;int&gt; sums,int low,int high){\n    int left = low + 1;\n    int right = high -1 ;\n    while(left &lt;= right){\n        int middle = (left + right) / 2;\n        int leftSum = sums[middle-1] - sums[low];\n        int rightSum = sums[high-1] - sums[middle];\n        if(leftSum &lt; rightSum){\n            left = middle + 1;\n        }else if(leftSum &gt; rightSum){\n            right = middle - 1;\n        }else{\n            return leftSum;\n        }\n    }\n    return 0;\n}\n</code></pre> <p>\u628a\u4e0a\u9762\u7684\u4e24\u4e2a\u64cd\u4f5c\u7ed3\u5408\u8d77\u6765\u641c\u7d22\uff0c\u5c31\u662f\u672c\u9898\u7684\u89e3\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u662f\u5916\u5c42\u9996\u5148\u641c\u7d22low,high,\u4e00\u65e6\u641c\u7d22\u5230low,high\uff0c\u5c31\u8c03\u7528findMiddle\u65b9\u6cd5\u770b\u662f\u5426\u80fd\u591f\u627e\u5230\u5206\u754c\u3002\u5982\u679c\u80fd\u591f\u627e\u5230\u5206\u754c\uff0c\u8fd8\u8981\u770b\u5176sum\u662f\u5426\u7b49\u4e8e\u7b2c\u4e00\u4e2asum\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u89e3\u5c31\u627e\u5230\u4e86\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u9012\u589elow,\u7ee7\u7eed\u4e0b\u4e00\u6b21\u641c\u7d22\u3002</p> <p>\u5b8c\u6574\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>bool solve(vector&lt;int&gt; v){\n    if(v.size() &lt; 7) return false;\n    auto sums = sumArray(v);\n\n    int left = 0;\n    int right = v.size()-1;\n    int leftSum = v[left++];\n    int rightSum = v[right--];\n    while(left&lt;=right){\n        if(leftSum &lt; rightSum){\n            leftSum += v[left++];\n        }else if(leftSum &gt; rightSum){\n            rightSum += v[right--];\n        }else{\n            auto secondSum = findMiddle(sums,left,right);\n            if(leftSum == secondSum){\n                return true;\n            }else{\n                leftSum += v[left++];\n            }\n\n        }\n    }\n    return false;\n}\n</code></pre>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/","title":"\u56de\u6587\u7b97\u6cd5\u548c\u9898\u76ee","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/#manacher","title":"Manacher\u7b97\u6cd5","text":"<p>Manacher \u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u627e\u5230\u6700\u957f\u56de\u6587\u4e32\u7684\u7b97\u6cd5\uff0c\u5b83\u5145\u5206\u5229\u7528\u4e86\u5df2\u7ecf\u627e\u5230\u7684\u56de\u6587\u7684\u5bf9\u79f0\u6027\uff0c\u5c3d\u91cf\u51cf\u5c11\u5b57\u7b26\u4e32\u6bd4\u8f83\u7684\u6b21\u6570\u3002</p> <p>\u8bbe <code>lps[i]</code> \u8868\u793a\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u4e32\u7684\u56de\u6587\u534a\u5f84\u3002\u4f8b\u5982\u5bf9\u4e8e <code>abcba</code>, lps[0] = 1, lps[1] = 1, lps[2] = 3.</p> <p>\u8bbe id \u8868\u793a\u4e00\u4e2a\u5df2\u7ecf\u53d1\u73b0\u7684\u56de\u6587\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff0c <code>lid</code>, <code>rid</code>\u5206\u522b\u662f\u5176\u5de6\u53f3\u8fb9\u754c\uff0c <code>lps[id] = rid - id + 1 = id - lid + 1</code>.</p> <p>i &gt; id, </p> <p></p> <p><code>i &gt; id</code>, lps[i] \u8868\u793a\u4ee5 i \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u534a\u5f84\uff0c\u8fd9\u4e2a\u534a\u5f84\u53ef\u4ee5\u6839\u636elps[id]\u5de6\u4fa7\u7684\u6570\u636e\u5f97\u5230\uff0c\u56e0\u4e3a\u5de6\u53f3\u4e24\u4fa7\u662f\u5bf9\u79f0\u7684\u3002</p> <p>\u5982\u679c i &lt; rid,  \u5982\u679clps[i'] &lt;= rid - i, \u5219 lps[i] = lps[i'], \u5982\u679clps[i'] &gt; rid - i, \u5219 lps[i] = rid - i.</p> <pre><code>def manacher(s, DEBUG=True, RETURNSTR=True):\n    \"\"\"\n    manacher \u7b97\u6cd5\u5b9e\u73b0\n    \"\"\"\n    # \u9884\u5904\u7406\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u63d2\u5165\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5b57\u7b26 '#'\n    s = '#' + \"\".join([c + '#' for c in s])\n    s = '^' + s + '$' # \u9996\u5c3e\u9644\u52a0\u4e0d\u540c\u5b57\u7b26\u907f\u514d\u8fb9\u754c\u5224\u65ad\n    n = len(s)\n    lps = [1] * n\n\n    lid, mid, rid = 0, 0, 0\n    i = 1 # s[0] \u662f '^'\u6ca1\u6709\u5fc5\u8981\u8ba1\u7b97\n    center = 0 # \u8bb0\u5f55\u6700\u957f\u56de\u6587\u4e2d\u5fc3\u4f4d\u7f6e\uff0c\u7528\u6765\u751f\u6210\u56de\u6587\n    ans = 0 # \u6700\u957f\u56de\u6587\u7684\u957f\u5ea6\n    while i &lt; n - 1:\n        if i &lt; rid:\n            # i' = 2 * mid - i \u662f i \u5173\u4e8e mid \u7684\u5bf9\u79f0\u70b9\n            lps[i] = min(lps[2 * mid - i], rid - i)\n\n        # lps[i] \u521d\u59cb\u5316\u4e3a1\uff0c\u56e0\u4e3a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u90fd\u662f\u534a\u5f84\u4e3a1\u7684\u56de\u6587\n        # \u4ee5 i \u4e3a\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u6269\u5c55\u4e3a\u6b62\n        # \u56e0\u4e3a\u9996\u5c3e\u65b0\u589e\u4e86\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u6240\u4ee5\u5230\u8fb9\u754c\u4e00\u5b9a\u4f1a\u505c\u6b62\n        while s[i - lps[i]] == s[i + lps[i]]:\n            lps[i] += 1\n\n        # \u901a\u8fc7\u4e0a\u9762\u7684\u5faa\u73af\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba1\u7b97\u51fa lps[i]\n        # \u5982\u679c i + lps[i] &gt; rid, \u8bf4\u660e\u7ecf\u8fc7\u6269\u5c55\u8fb9\u754c\u5df2\u7ecf\u8d85\u8fc7 rid\n        # \u66f4\u65b0 mid \u4e3a i, \u56e0\u4e3a lps[i] \u5df2\u7ecf\u8ba1\u7b97\u5f97\u5230\n        # \u66f4\u65b0 rid \u4e3a mid + lps[mid]\n        if rid &lt; i + lps[i]:\n            mid = i\n            rid = mid + lps[mid]\n\n        # \u6253\u5370\u51fa\u6bcf\u6b21\u5904\u7406\u5b8c\u6210\u7684\u72b6\u6001\n        if DEBUG:\n            print(\"=========i: {0}============\".format(i))\n            print(\"mid:{0}, lid: {1}, rid: {2}, i': {3}, i:{4}\".format(mid, lid, rid, 2*mid - i, i))\n            print(s)\n            label = [\" \"] * n\n            label[mid] = 'M'\n            label[lid] = 'L'\n            label[rid] = 'R'\n            label[2*mid - i] = 'j'\n            label[i] = 'i'\n            print(\"\".join(label))\n        if RETURNSTR:\n            if ans &lt; lps[i] - 1:\n                ans = lps[i] - 1\n                center = i\n        # \u5982\u679c i + lps[i] &lt; rid, \u8bf4\u660e i \u7684\u8fb9\u754c\u8fd8\u6ca1\u6709\u8d8a\u8fc7 mid \u7684\u8fb9\u754c\n        # \u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 i + 1, \u4f9d\u65e7\u5229\u7528 mid \u7684\u5806\u79f0\u4fe1\u606f\n        i += 1\n\n    if not RETURNSTR:\n        ans = max(lps) - 1\n        return ans\n\n    string = s[center-ans : center + ans]\n    string = string.replace(\"#\", \"\")\n    return string\n\ns = \"acabcbabc\"\nans = manacher(s)\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87/#_2","title":"\u56de\u6587\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e2d\u7b49 9. \u56de\u6587\u6570 \u7b80\u5355"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE/","title":"\u56fe","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE/#_2","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","text":"<p>797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE/#_3","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","text":"<p>127. \u5355\u8bcd\u63a5\u9f99</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE/#_4","title":"\u8def\u5f84\u95ee\u9898","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/","title":"\u7b97\u6cd5\u4e13\u9898_\u5927\u6570\u636e\u548c\u7a7a\u95f4\u9650\u5236","text":"<p>\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u6d89\u53ca\u5927\u91cf\u6570\u636e\u7684\u4e00\u4e9b\u7b97\u6cd5\u8bbe\u8ba1\u95ee\u9898\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#bloom-filter","title":"Bloom filter\uff08\u5e03\u9686\u8fc7\u6ee4\u5668\uff09","text":"<p>\u5b81\u53ef\u9519\u6740\u4e09\u5343\uff0c\u7edd\u4e0d\u653e\u8fc7\u4e00\u4e2a(\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u80af\u5b9a\u4e0d\u4f1a\u8bef\u5224\uff0c\u4f46\u662f\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u5374\u6709\u53ef\u80fd\u8bef\u4ee5\u4e3a\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408)</p> <p>\u5e03\u9686\u8fc7\u6ee4\u5668\u662f\u4e00\u79cd\u7528\u6765\u5904\u7406\u5927\u6570\u636e\u7684\u67e5\u8be2\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u8be5\u65b9\u6cd5\u5141\u8bb8\u7cbe\u786e\u7684\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u4e00\u4e2a\u96c6\u5408\u3002\u8fd9\u91cc\u7684\u7cbe\u786e\u662f\u53ea\u53ef\u4ee5\u5728\u4e00\u5b9a\u7684\u7cbe\u5ea6\u8303\u56f4\u5185\u3002\u4f8b\u5982\u53ef\u4ee5\u4ee5<code>99.99%</code>\u7684\u6982\u7387\u786e\u5b9a\u4e00\u4e2a\u5143\u7d20\u5c5e\u4e8e\u8fd8\u662f\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u3002</p> <p>\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u4f18\u52bf\uff1a - \u4f7f\u7528\u5f88\u5c11\u7684\u7a7a\u95f4\u5c31\u53ef\u4ee5\u628a\u7cbe\u786e\u5ea6\u505a\u7684\u5f88\u9ad8\u3002 - \u4e0d\u9700\u8981\u5b58\u50a8\u5143\u7d20\u672c\u8eab\uff0c\u5728\u67d0\u4e9b\u5bf9\u4fdd\u5bc6\u8981\u6c42\u975e\u5e38\u4e25\u683c\u7684\u573a\u5408\u6709\u4f18\u52bf - \u4e0d\u9700\u8981\u987e\u5fcc\u5355\u4e2a\u5143\u7d20\u53d6\u503c\u8303\u56f4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5b83\u4e0e\u6700\u7ec8\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u5927\u5c0f\u6ca1\u6709\u5173\u7cfb \uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5355\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u5fc5\u987b\u5728\u6563\u5217\u51fd\u6570\u53ef\u4ee5\u8868\u793a\u7684\u8303\u56f4\u5185\uff09</p> <p>\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u7f3a\u70b9\uff1a - \u7cbe\u786e\u5ea6\u6c38\u8fdc\u4e0d\u53ef\u80fd\u8fbe\u52301 - \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u67d0\u4e2a\u5143\u7d20\u975e\u5e38\u56f0\u96be</p> <p>\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u539f\u7406\u662f\uff0c\u5f53\u4e00\u4e2a\u5143\u7d20\u88ab\u52a0\u5165\u96c6\u5408\u65f6\uff0c\u901a\u8fc7K\u4e2a\u6563\u5217\u51fd\u6570\u5c06\u8fd9\u4e2a\u5143\u7d20\u6620\u5c04\u6210\u4e00\u4e2a\u4f4d\u6570\u7ec4\u4e2d\u7684K\u4e2a\u70b9\uff0c\u628a\u5b83\u4eec\u7f6e\u4e3a1\u3002\u68c0\u7d22\u65f6\uff0c\u6211\u4eec\u53ea\u8981\u770b\u770b\u8fd9\u4e9b\u70b9\u662f\u4e0d\u662f\u90fd\u662f1\u5c31\uff08\u5927\u7ea6\uff09\u77e5\u9053\u96c6\u5408\u4e2d\u6709\u6ca1\u6709\u5b83\u4e86\uff1a\u5982\u679c\u8fd9\u4e9b\u70b9\u6709\u4efb\u4f55\u4e00\u4e2a0\uff0c\u5219\u88ab\u68c0\u5143\u7d20\u4e00\u5b9a\u4e0d\u5728\uff1b\u5982\u679c\u90fd\u662f1\uff0c\u5219\u88ab\u68c0\u5143\u7d20\u5f88\u53ef\u80fd\u5728\u3002\u8fd9\u5c31\u662f\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u57fa\u672c\u601d\u60f3\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#_1","title":"\u6563\u5217\u51fd\u6570","text":"<p>\u5728\u751f\u6210\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\u9047\u5230\u7684\u5bf9\u8c61\uff0c\u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u8fd9\u4e2a\u96c6\u5408\u7684\u65f6\u5019\u662f\u4e00\u5b9a\u4e0d\u4f1a\u51fa\u9519\u7684\u3002\u53ea\u6709\u751f\u6210\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\u6ca1\u6709\u7528\u5230\u7684\u5143\u7d20\uff0c\u624d\u53ef\u80fd\u51fa\u9519\u3002</p> <p>\u5e03\u9686\u8fc7\u6ee4\u5668\u7684\u8bbe\u8ba1\u9700\u8981\u8003\u8651\u4e24\u4e2a\u56e0\u7d20\uff0c\u8981\u8868\u793a\u7684\u6570\u636e\u91cfn\u548c\u5141\u8bb8\u7684\u8bef\u5dee\u8303\u56f4p,\u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff1an=1000000000, p=0.01\u3002\u5df2\u77e5\u6570\u636e\u91cf\u548c\u8bef\u5dee\u8303\u56f4\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u516c\u5f0f\u6c42\u89e3\u9700\u8981\u5e03\u9686\u6570\u7ec4\u7684\u4f4d\u6570\u548c\u9700\u8981\u4f7f\u7528\u7684\u6563\u5217\u51fd\u6570\u7684\u4e2a\u6570\u3002</p> <ul> <li> <p>\u5e03\u9686\u6570\u7ec4\u7684\u4f4d\u6570m: m = -(n*lnp)/(ln2)^2</p> </li> <li> <p>\u6563\u5217\u51fd\u6570\u7684\u4e2a\u6570k: k = ln2 * (m/n) = 0.7 * m/n;</p> </li> </ul> <p>\u516c\u5f0f\u7684\u5177\u4f53\u63a8\u5bfc\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc</p> <p>\u53c2\u8003\u4f8b\u9898\uff1a</p> <p></p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#_2","title":"\u5927\u6587\u4ef6\u7684\u5904\u7406","text":"<p>\u628a\u4e00\u4e2a\u5927\u7684\u96c6\u5408\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5206\u914d\u5230\u591a\u53f0\u673a\u5668\u4e2d\uff0c\u6216\u8005\u5206\u914d\u5230\u591a\u4e2a\u6587\u4ef6\u91cc\uff0c\u8fd9\u79cd\u6280\u5de7\u662f\u5904\u7406\u9762\u8bd5\u9898\u4e2d\u6d89\u53ca\u5230\u5927\u6570\u636e\u7684\u65f6\u5019\u7684\u6700\u5e38\u7528\u7684\u6280\u5de7\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#2gb20","title":"\u53ea\u75282GB\u5185\u5b58\u572820\u4ebf\u4e2a\u6570\u4e2d\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6570\u5b57","text":"<p>\u7edf\u8ba1\u51fa\u73b0\u6b21\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c\u8868\uff0c\u672c\u9898\u7684\u96be\u70b9\u662f\u76f4\u63a5\u4f7f\u7528\u54c8\u5e0c\u8868\u7684\u8bdd\uff0c\u5185\u5b58\u662f\u653e\u4e0d\u4e0b\u7684\u3002</p> <p>\u5177\u4f53\u505a\u6cd5\u662f\uff1a</p> <ol> <li>\u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u5c06\u539f\u6765\u5305\u542b20\u4ebf\u4e2a\u6574\u6570\u7684\u6587\u4ef6\u5206\u5272\u621016\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4f7f\u5f97\u4e00\u6837\u7684\u6570\u5b57\u5728\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\uff0c\u6587\u4ef6\u5927\u5c0f\u5c3d\u53ef\u80fd\u5747\u5300\u3002</li> <li>\u5206\u522b\u7edf\u8ba116\u4e2a\u5c0f\u6587\u4ef6\u7684\u6574\u6570\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u5f97\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002</li> </ol> <p>\u8fd9\u5176\u5b9e\u5c31\u662f\u5206\u6cbb\u601d\u60f3\u7684\u5e94\u7528\u3002 \u5173\u952e\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u54c8\u5e0c\u51fd\u6570\u5206\u5272\u6587\u4ef6\uff0c\u600e\u6837\u7684\u5408\u5e76\u7ed3\u679c\u7b56\u7565\u53ef\u4ee5\u4fdd\u8bc1\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\u672c\u9898\u6700\u7b80\u5355\u7684\u54c8\u5e0c\u7b56\u7565\u53ef\u4ee5\u662f\u76f4\u63a5\u7528\u539f\u6765\u7684\u6574\u6570\u5f53\u4f5c\u54c8\u5e0c\u503c\uff0c\u5bf916\u53d6\u4f59\u3002\u4f59\u6570\u4e3a0\u7684\u8f93\u51fa\u5230\u7b2c\u4e00\u4e2a\u6587\u4ef6\uff0c\u4f59\u6570\u4e3a1\u7684\u8f93\u51fa\u5230\u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff0c\u8fd8\u8981\u6ce8\u610f\u7edf\u8ba1\u6587\u4ef6\u4e2d\u6574\u6570\u7684\u6570\u91cf\uff0c\u5f53\u8d85\u8fc71.25\u4ebf\u7684\u65f6\u5019\u5c31\u8f6c\u5411\u4e0b\u4e00\u4e2a\u6587\u4ef6\u4fdd\u5b58\u6570\u636e\uff0c\u4fdd\u8bc116\u4e2a\u6587\u4ef6\u5927\u5c0f\u7684\u5747\u8861\u3002\u5408\u5e76\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u7edf\u8ba1\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\uff0c\u7136\u540e\u5224\u65ad\u5176\u4ed6\u5c0f\u6587\u4ef6\u4e2d\u6709\u6ca1\u6709\u5305\u542b\u8fd9\u4e2a\u6570\u5b57\uff0c\u6709\u7684\u8bdd\uff0c\u52a0\u4e0a\uff0c\u8f93\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#40","title":"40\u4ebf\u4e2a\u975e\u8d1f\u6574\u6570\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57","text":"<p>32\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u53ef\u4ee5\u8868\u793a\u5927\u7ea642\u4ebf\u4e2a\u6570\u5b57\uff0c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b58\u50a8\u4e8640\u4ebf\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5373\u4f7f\u8fd940\u4ebf\u4e2a\u6570\u5b57\u90fd\u4e0d\u76f8\u540c\uff0c\u4e5f\u5b58\u5728\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\uff0c\u627e\u51fa\u8fd9\u4e9b\u6570\u5b57\u3002</p> <p>\u601d\u8def\uff1a\u627e\u51fa\u6ca1\u6709\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u5f97\u6709\u65b9\u6cd5\u8bb0\u5f55\u6240\u6709\u5df2\u7ecf\u51fa\u73b0\u7684\u6570\u5b57\uff0c\u53ea\u6709\u8bb0\u4f4f\u4e86\u54ea\u4e9b\u6570\u5b57\u51fa\u73b0\u8fc7\uff0c\u624d\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u6570\u5b57\u6ca1\u6709\u51fa\u73b0\u8fc7\u3002\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u662f\u975e\u5e38\u8d39\u5185\u5b58\u7684\u3002\u5982\u4f55\u8bb0\u5f5540\u4ebf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u5462\uff1f \u4f7f\u7528\u4e00\u4e2a40\u4ebf\u957f\u5ea6\u7684\u6570\u7ec4\u663e\u7136\u662f\u4e0d\u80fd\u6ee1\u8db3\u5185\u5b58\u8981\u6c42\u7684\u3002 \u73b0\u5728\u8003\u8651\u5982\u679c\u53ea\u7528\u4e00\u4e2a\u6bd4\u7279\u4f4d\u8868\u793a\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u7ecf\u8fc7\u8ba1\u7b97\uff0c\u53ea\u9700\u8981500M\u7684\u5185\u5b58\u57fa\u672c\u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\u65b9\u6cd5\u662f\uff1a\u5f00\u8f9f\u4e00\u4e2aINT32_MAX*2\u7684\u4f4d\u6570\u7ec4\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u60c5\u51b5\u3002\u904d\u5386\u5b8c\u4e00\u904d\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u7136\u540e\u518d\u904d\u5386\u4e00\u904d\uff0c\u9047\u52300\u5c31\u8f93\u51fa\u3002</p> <p>\u73b0\u5728\u8003\u8651\u5982\u4f55\u4f7f\u7528\u66f4\u5c0f\u7684\u5185\u5b58\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f8b\u598210M\u5185\u5b58\uff0c\u53ea\u627e\u51fa\u4e00\u4e2a\u672a\u51fa\u73b0\u7684\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u89e3\u51b3\u7684\u601d\u8def\u662f\u5206\u5272\u5904\u7406\uff0c\u4f8b\u5982\u5206\u5272\u621064\u4e2a\u5b50\u6bb5\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\uff0c\u7edf\u8ba1\u843d\u5728\u6bcf\u4e2a\u533a\u95f4\u7684\u4e0a\u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u5fc5\u5b9a\u6709\u4e00\u4e2a\u533a\u95f4\u662f\u4e0d\u6ee1\u7684\uff0c\u627e\u51fa\u8fd9\u4e2a\u533a\u95f4\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c\u53ea\u5904\u7406\u843d\u5728\u8fd9\u4e2a\u533a\u95f4\u4e0a\u7684\u6570\u5b57\uff0c\u5728\u5bf9\u5e94\u7684\u4f4d\u4e0a\u6807\u8bb01\u8868\u793a\u51fa\u73b0\u8fc7\u3002\u7b2c\u4e09\u6b21\u904d\u5386\uff0c\u9047\u5230\u662f0\u7684\u5c31\u8f93\u51fa\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#_3","title":"\u7b97\u6cd5\u4e13\u9898_\u5927\u6570\u636e\u548c\u7a7a\u95f4\u9650\u5236","text":"","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/#_4","title":"\u4e00\u81f4\u6027\u54c8\u5e0c\u7b97\u6cd5","text":"","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u5b57\u7b26\u4e32\u64cd\u4f5c","text":"<p>\u8bb0\u5f55\u4e00\u4e9b\u9700\u8981\u8003\u8651\u82e5\u5e72\u60c5\u51b5\uff0c\u9700\u8981\u8010\u5fc3\u7684\u9898\u76ee\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 468. \u9a8c\u8bc1IP\u5730\u5740 \u4e2d\u7b49 1410. HTML \u5b9e\u4f53\u89e3\u6790\u5668 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB/","title":"\u5faa\u73af\u53f3\u79fb","text":"<p>\u5982\u679c\u5b9e\u9645\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u79fb\u52a8\uff0c\u505a\u4e86\u592a\u591a\u65e0\u7528\u7684\u5de5\u4f5c\u3002</p> <pre><code>// \u6c42a, b\u7684\u6700\u5927\u516c\u7ea6\u6570\nint gcd(int a, int b){\n    if (a &lt; b) return gcd(b, a);\n    if (b == 0) return a;\n    while (b &gt; 0) {\n        int tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}\n\nvoid shitf(int *array, int n, int k)\n{\n    int i, j, curr, tmp;\n    int g = gcd(n, k);\n    k = k % n;\n    if (k == 0) return;\n\n    for (i = 0; i &lt; g; i++) {\n        j = i;\n        cur = array[j];\n        do {\n            tmp = array[ (j+k) % n];\n            array[(j+k) %n] = cur;\n            cur = tmp;\n            j = (j + k) % k;\n        } while (j != i);\n    }\n    return;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/","title":"\u6392\u5217\u7ec4\u5408","text":"<p>\u6392\u5217\u7ec4\u5408\u7684\u95ee\u9898\u4e5f\u662f\u5e38\u5e38\u51fa\u73b0\u5728\u7b97\u6cd5\u9898\u4e2d\u3002\u4e00\u79cd\u7c7b\u578b\u662f\u7eaf\u6570\u5b66\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528\u6392\u5217\u7ec4\u5408\u7684\u6570\u5b66\u77e5\u8bc6\u6c42\u89e3\u3002\u4e00\u79cd\u662f\u9700\u8981\u679a\u4e3e\u51fa\u6240\u6709\u7684\u72b6\u6001\uff0c\u7ecf\u8fc7\u9002\u5f53\u7684\u526a\u679d\u548c\u8fc7\u7a0b\u7684\u4f18\u5316\u624d\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002</p> <p>\u6392\u5217\u7ec4\u5408\u76f8\u5173\u7684\u8bd5\u9898\u4e2d\u5e38\u89c1\u7684\u64cd\u4f5c\u5c31\u662f\u679a\u4e3e\u5404\u79cd\u60c5\u51b5\u3002\u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u6309\u7167\u4e00\u5b9a\u7684\u987a\u5e8f\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u7684\u65b9\u6cd5\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#n","title":"\u751f\u6210n!\u79cd\u4e0d\u540c\u7684\u6392\u5217","text":"<p>n\u4e2a\u5143\u7d20\u7684\u5168\u6392\u5217\u4e00\u5171\u6709n!\u79cd\u3002\u5982\u4f55\u6309\u7167\u987a\u5e8f\u751f\u6210\u8fd9n!\u79cd\u6392\u5217\u5462\uff1fC++\u4e2d\u63d0\u4f9b\u4e86next_permutation\u8fd9\u4e00\u51fd\u6570\u3002 next_permutation\u80fd\u591f\u6309\u7167\u987a\u5e8f\u4ea7\u751f\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f8b\u5982<code>vector&lt;int&gt; v = {1,2,3}</code>, \u628av\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012,<code>next_permutation(v.begin(),v.end())</code>\u8fd4\u56de\u7684\u662ftrue, v\u53d8\u6210\u4e861,2,3\u7684\u4e0b\u4e00\u4e2a\u5e8f\u52171,3,2;\u5982\u679c\u5c063,2,1\u4f20\u5165\uff0c\u8fd4\u56de\u7684\u5c06\u662ffalse,\u56e0\u4e3a\u6ca1\u6709\u4e86\u4e0b\u4e00\u4e2a\u5e8f\u5217\u3002 \u4ea7\u751f\u5168\u6392\u5217\u7684\u65b9\u6cd5\uff1a</p> <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nvector&lt;vector&lt;int&gt;&gt; per(int n){\n    vector&lt;int&gt; v;\n    for(int i=0;i&lt;n;i++){\n        v.push_back(i+1);\n    }\n    vector&lt;vector&lt;int&gt;&gt; re;\n    re.push_back(v);\n    while(next_permutation(v.begin(),v.end())){\n        re.push_back(v);\n    }\n    return re;\n}\n</code></pre> <pre><code>def next_permutation(arr):\n    for i in reversed(range(1, len(arr))):\n        if arr[i] &gt; arr[i - 1]:\n            low = i - 1\n            break\n    else:\n        return None\n\n    for i in reversed(range(low+1, len(arr))):\n        if arr[i] &gt; arr[low]:\n            high = i\n            break\n    arr[low], arr[high] = arr[high], arr[low]\n    tmp = arr[low+1:]\n    tmp.reverse()\n    arr = arr[0 : low+1] + tmp\n    return arr\n\ndef permutation(arr):\n    print(arr)\n    arr = next_permutation(arr)\n    while arr:\n        print(arr)\n        arr = next_permutation(arr)\n    return arr\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#n-mn-m","title":"\u751f\u6210 n! / m!(n-m)!","text":"<pre><code>def next_combination(n):\n    x = n &amp; (-n)\n    t = x + n\n    ans = t | ((n^t)/x) &gt;&gt; 2\n    return ans\ndef convert(n, m):\n    ans = [False for _ in range(n)]\n    for i in reversed(range(n)):\n        if m&amp;1:\n            ans[i] = True\n        m = m &gt;&gt; 1\n    return ans\ndef combination(arr, m):\n    start = 2 ** m - 1\n    n = len(arr)\n    indices = convert(n, start)\n    arr = np.array(arr)\n    print(arr[indices])\n    while True:\n        start = next_combination(start)\n        if start &gt; 2 ** n - 1:\n            break\n        indices = convert(n, start)\n        print(arr[indices])\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#_2","title":"\u96c6\u5408\u7684\u6574\u6570\u8868\u793a","text":"<p>\u5982\u679c\u4e00\u4e2a\u96c6\u5408\u6709n\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5b50\u96c6\u67092^n\u4e2a\uff08\u5305\u62ec\u7a7a\u96c6\u548c\u81ea\u8eab\uff09\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u5bf9\u6240\u6709\u7684\u81ea\u5df1\u5bf9\u5e94\u4e00\u4e2a\u6574\u6570\uff0c\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u6309\u7167\u987a\u5e8f\u4ece1\u52302^n\u8868\u793a\u5b83\u3002</p> <p>\u4f8b\u5982\uff1aa = {1,2,3} a\u7684\u6240\u6709\u7684\u5b50\u96c6\u6709\uff1a {};{1},{2},{3};{1,2},{1,3},{2,3};{1,2,3}; 0   1   2   3    4     5     6      7</p> <p>\u5982\u679c\u50cf\u4e0a\u9762\u90a3\u6837\u7f16\u7801\uff0c\u96c6\u5408\u95f4\u7684\u64cd\u4f5c\u89c4\u5f8b\u4e0d\u597d\u627e\u3002\u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u7f16\u7801\u6bcf\u4e2a\u5b50\u96c6\uff0c\u76ee\u7684\u662f\u4f7f\u5f97\u96c6\u5408\u95f4\u7684\u64cd\u4f5c\u6709\u89c4\u5f8b\u800c\u5bb9\u6613\u5b9e\u73b0\u3002 \u6211\u4eec\u628a\u6240\u6709\u5b50\u96c6\u90fd\u7528B\u586b\u5145\u6210\u548c\u539f\u6765\u7684\u96c6\u5408\u4e00\u6837\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4fdd\u6301\u539f\u6765\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u7136\u540e\u7528\u4e8c\u8fdb\u5236\u4f4d1\u8868\u793a\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u75280\u8868\u793aB\uff0c\u5982\u4e0b\u6807\u6240\u793a\uff1a</p> {B,B,B} {B,B,1} {B,2,B} {B,2,1} {3,B,B} {3,B,1} {3,2,B} {3,2,1} 000 001 010 011 100 101 110 111 0 1 2 3 4 5 6 7 <p>\u96c6\u5408<code>{0,1,...,n-1}</code>\u7684\u5b50\u96c6\u4e3aS\uff0cS\u7684\u6574\u6570\u7f16\u7801\u5b9a\u4e49\u4e3a\uff1a <code>f(S) = 2^i</code> (i\u5c5e\u4e8e\u5b50\u96c6S) \u7279\u522b\u5b9a\u4e49\uff1a\u7a7a\u96c6\u75280\u8868\u793a\u3002 \u6240\u4ee5\u6709\u5982\u4e0b\u7684\u5bf9\u5e94\uff1a</p> <p>{}    :  0 {1}   : 2^(1-1) = 1 {2}   : 2^(2-1) = 2 {3}   : 2^(3-1) = 4 {1,2} :2^(1-1)+2^(2-1) = 3 {1,3} :2^(1-1)+2^(3-1) = 5 {2,3} :2^(2-1)+2^(3-1) = 6 {1,2,3}:2^(1-1)+2^(2-1)+2^(3-1)=2^3-1=7</p> <p>\u50cf\u8fd9\u6837\u8868\u793a\u540e\uff0c\u4e00\u4e9b\u96c6\u5408\u7684\u8fd0\u7b97\u53ef\u4ee5\u8868\u793a\u6210:</p> <p>\u7a7a\u96c6\uff1a  0 \u81ea\u8eab\uff1a <code>2^n-1</code> <code>(1&lt;&lt;n)-1</code> \u53ea\u542b\u6709\u7b2ci\u4e2a\u5143\u7d20\u7684\u96c6\u5408\uff1a<code>2^i (1&lt;&lt;i)</code> \u5224\u65ad\u7b2ci\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u96c6\u5408S\uff1a <code>if(S&gt;&gt;i&amp;1)</code>  \u5982\u679c\u7b2ci\u4e2a\u5143\u7d20\u5c5e\u4e8e\u96c6\u5408S,\u6839\u636e\u4e0a\u9762\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u8be5\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u7b2ci\u4e3a\u5fc5\u5b9a\u662f1\uff0c\u6240\u4ee5\u53f3\u79fbi\u4f4d\u4e4b\u540e\u672b\u5c3e\u5fc5\u5b9a\u4e3a1. \u5411\u96c6\u5408\u4e2d\u52a0\u5165\u7b2ci\u4e2a\u5143\u7d20: <code>S|(1&lt;&lt;i)</code>  \u5c31\u662f\u628a\u7b2ci\u4f4d\u7f6e1 \u4ece\u96c6\u5408\u4e2d\u53bb\u9664\u7b2ci\u4e2a\u5143\u7d20: <code>S&amp;~(1&lt;&lt;i)</code> \u5c31\u662f\u628a\u7b2ci\u4f4d\u7f6e0 \u96c6\u5408S\u548cT\u7684\u5e76\u96c6\uff1a<code>S|T</code> \u96c6\u5408S\u548cT\u7684\u4ea4\u96c6\uff1a<code>S&amp;T</code></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#_3","title":"\u679a\u4e3e\u6240\u6709\u7684\u5b50\u96c6\u7684\u65b9\u6cd5","text":"<pre><code>for(int i=0;i&lt;2^n;i++){\n  cout&lt;&lt;i&lt;&lt;endl;\n  //\u5bf9\u5b50\u96c6\u7684\u5904\u7406\n}\n</code></pre> <pre><code>def subset(arr):\n    arr = np.array(arr)\n    n = len(arr)\n    for i in range(2**n):\n        indices = convert(n, i)\n        print(arr[indices])\n\n# \u751f\u6210\u5927\u5c0f\u4e3a m \u7684\u5b50\u96c6\ndef subsetm(arr, m):\n    combination(arr, m)\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#_4","title":"\u7ed9\u51fa\u4e00\u4e2a\u5b50\u96c6\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u7684\u65b9\u6cd5","text":"<p>\u5047\u8bbe\u7ed9\u51fa\u7684\u5b50\u96c6\u7684\u4e8c\u8fdb\u5236\u7801\u662f\uff1a 00101100 \uff08\u539f\u6765\u96c6\u5408\u5171\u516b\u4e2a\u5143\u7d20\uff09\uff0c\u8981\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\uff0c\u4f9d\u7136\u7528\u516b\u4f4d\u4e8c\u8fdb\u5236\u7801\u8868\u793a\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6bcf\u6b21\u4ece\u8be5\u6570\u5b57\u4e2d\u53bb\u6389\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d1\uff0c\u800c\u5ffd\u7565\u6389\u4e8c\u8fdb\u5236\u4f4d0.\u6070\u5de7\uff0c\u4ee5\u524d\u8bb2\u4f4d\u8fd0\u7b97\u7684\u65f6\u5019\u8bb2\u8fc7\uff0c<code>n&amp;(n-1)</code>\u7684\u6548\u679c\u5c31\u662f\u53bb\u9664n\u7684\u6700\u672b\u4f4d\u76841. <pre><code>int sub = sup;\ndo{\n  cout&lt;&lt;sub&lt;&lt;endl; //sub\u5c31\u662f\u6240\u6709\u7684\u5b50\u96c6\n  sub = (sub-1)&amp;sub;\n}while(sub!=sup)  // -1&amp;sup = sup\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#k","title":"\u679a\u4e3e\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\u7684\u529e\u6cd5","text":"<p>\u6240\u6709\u5927\u5c0f\u4e3ak\u7684\u5b50\u96c6\uff0c\u5c31\u662f\u4e8c\u8fdb\u5236\u4f4d\u4e2d\u6240\u67091\u7684\u4f4d\u6570\u52a0\u8d77\u6765\u7684\u548c\u4e3ak\u7684\u6570\u5b57\u3002\u679a\u4e3e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7801\u4e4b\u540e\u76841\u7684\u4e2a\u6570\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u7801\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u4e2d\uff0c\u4e0b\u9762\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u5b9e\u73b0\u3002 <pre><code>int comb = (1&lt;&lt;k)-1;\nwhile(comb &lt; (1&lt;&lt;k)){\n  cout&lt;&lt;comb; // \u5bf9\u96c6\u5408\u7684\u5904\u7406\n  int x = comb &amp; -comb ;\n  int y = comb + x;\n  comb = ((comb&amp;~y)/(x&gt;&gt;1)) | y;\n}\n</code></pre></p> <p>\u53e6\u5916\u4e00\u79cd\u5b9e\u73b0\uff1a</p> <p>\u5148\u6765\u5206\u6790\u5982\u4f55\u4ece\u5f97\u5230\u4e00\u4e2a\u6570\u5b57n\u7684\u4e0b\u4e00\u4e2a\u4e0en\u4e8c\u8fdb\u52361\u4e2a\u6570\u76f8\u540c\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0cn=001001110; \u5219\u4e0b\u4e00\u4e2a\u6570\u5b57\u4e3an2=00101011; \u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u5b57\u7684\u64cd\u4f5c\u89c4\u5219\u5e94\u8be5\u662f\uff1a\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a1\u7684\u4f4d\u7f6e\u3002\u628a\u4e0e\u8fd9\u4e2a1\u76f8\u90bb\u7684\u6240\u67091\u4f5c\u4e3a\u4e00\u7ec4\uff0c\u8fd9\u7ec4\u7684\u6700\u9ad8\u4f4d1\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\uff0c\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a\u88650\uff0c\u5269\u4e0b\u76841\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002</p> <p>\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b8c\u6210\u4e0a\u8ff0\u7684\u6b65\u9aa4\u9700\u8981\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4f4d\u64cd\u4f5c\u5b8c\u6210\u4ee5\u4e0b\u7684\u529f\u80fd\uff1a</p> <ol> <li>\u627e\u5230\u6700\u4f4e\u4f4d\u76841\u7684\u4f4d\u7f6e\uff1a <code>x = n&amp;(-n)</code></li> <li>\u4e0e\u6700\u4f4e\u4f4d1\u76f8\u90bb\u7684\u4e00\u7ec41\u4e2d\u6700\u9ad8\u4f4d\u76841\u5de6\u79fb\u4e00\u4f4d\uff0c\u5176\u4f59\u7684\u4f4d\u7f6e\u7f6e0\uff1a<code>t = x+n</code>,</li> <li>\u5c06\u6700\u4f4e\u7684\u4e00\u7ec41\u53f3\u79fb\u5230\u6700\u53f3\u8fb9\uff1a<code>(n^t)/(n&amp;(-n)))</code>.</li> </ol> <p>\u5177\u4f53\u7684\u8fc7\u7a0b\u63cf\u8ff0\u5982\u4e0b\uff1a</p> <ol> <li><code>x = n&amp;(-n)</code>,\u83b7\u5f97n\u7684\u6700\u540e\u4e00\u4e2a1.</li> <li><code>t = x + n</code>, n\u4e2d\u8fde\u7eed1\u7684\u6700\u5de6\u8fb9\u76841\u5de6\u79fb\u4e00\u4f4d\uff0c\u5176\u4f59\u4f4d\u7f6e0.</li> <li><code>n^t</code>, n\u4e2d\u8fde\u7eed1\u7684\u6700\u5de6\u8fb9\u76840\u7f6e1.</li> <li><code>(n^t)/x)</code>, \u5c06\u8fde\u7eed\u76841\u79fb\u52a8\u5230\u6700\u53f3\u4fa7\u3002</li> <li><code>((n^t)/x)&gt;&gt;2</code>, \u53bb\u6389\u591a\u4f59\u7684\u4e24\u4e2a1.</li> <li><code>ans = t | ((N^t)/x)&gt;&gt;2;</code>, \u62fc\u63a5\u4e24\u90e8\u5206\uff0c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u679c\u3002</li> </ol> <pre><code>// \u6c42\u5927\u4e8eN\u7684\u4e0b\u4e00\u4e2a\u4e0eN\u6709\u76f8\u540c\u4e2a\u65701\uff08\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u7684\u6570\u5b57\nint NextN(int N)\n{\n    int x = N&amp;(-N);\n    int t = N+x;\n    int ans = t | ((N^t)/x)&gt;&gt;2;\n    return ans;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/#_5","title":"\u4f4d\u64cd\u4f5c\u679a\u4e3e\u6240\u6709\u7ec4\u5408\u60c5\u51b5","text":"<p><pre><code>int NextN(int N)\n{\n    int x = N&amp;(-N);\n    int t = N+x;\n    int ans = t | ((N^t)/x)&gt;&gt;2;\n    return ans;\n}\n\nvector&lt;vector&lt;int&gt;&gt; Cnk(vector&lt;int&gt; &amp;v,int n,int k){\n    // \u8f93\u51fa\u6240\u6709\u7684\u7ec4\u5408\u60c5\u51b5Cnk\n    vector&lt;vector&lt;int&gt;&gt; re;\n    int tmp = (1&lt;&lt;k) - 1;\n    while(tmp &lt; pow(2.0,n)-1){\n        int tt = tmp;\n        vector&lt;int&gt; vtmp;\n        int i=0;\n        while(tt &amp;&amp; i&lt;n){\n            if(tt&amp;1){\n                vtmp.push_back(v[i]);\n            }\n            i++;\n            tt = tt&gt;&gt;1;\n        }\n        re.push_back(vtmp);\n        tmp = NextN(tmp);\n    }\n    return re;\n}\n</code></pre> \u53bb\u9664\u91cd\u590d\u5143\u7d20\u7684cnk,\u4f8b\u5982 1\uff0c2\uff0c2\uff0c3\uff0c3\uff0c3\uff0c4</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n#include &lt;cmath&gt;\n#include &lt;map&gt;\n#include &lt;sstream&gt;\nusing namespace std;\n\nint NextN(int N)\n{\n    int x = N&amp;(-N);\n    int t = N+x;\n    int ans = t | ((N^t)/x)&gt;&gt;2;\n    return ans;\n}\nstring int2String(int n)\n{\n    ostringstream stream;\n    stream&lt;&lt;n;  //n\u4e3aint\u7c7b\u578b\n    return stream.str();\n}\nstring toString(vector&lt;int&gt; &amp;v){\n    string re;\n    for(auto s : v){\n        re += int2String(s);\n    }\n    return re;\n}\nmap&lt;string,vector&lt;int&gt;&gt; Cnk(vector&lt;int&gt; &amp;v,int n,int k){\n    // \u8f93\u51fa\u6240\u6709\u7684\u7ec4\u5408\u60c5\u51b5Cnk\n    map&lt;string,vector&lt;int&gt;&gt; re;\n    int tmp = (1&lt;&lt;k) - 1;\n    while(tmp &lt; pow(2.0,n)-1){\n        int tt = tmp;\n        vector&lt;int&gt; vtmp;\n        int i=0;\n        while(tt &amp;&amp; i&lt;n){\n            if(tt&amp;1){\n                vtmp.push_back(v[i]);\n            }\n            i++;\n            tt = tt&gt;&gt;1;\n        }\n        string key = toString(vtmp);\n        re[key] = vtmp;\n        tmp = NextN(tmp);\n    }\n    return re;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/","title":"\u6392\u5e8f","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_2","title":"\u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\u5143\u7d20\uff0c \u901a\u8fc7\u6bd4\u8f83\u5176\u4ed6\u5143\u7d20\u548c\u8be5\u5143\u7d20\u7684\u5927\u5c0f\u79fb\u52a8\u4f4d\u7f6e\uff0c\u6700\u7ec8\u628a\u8be5\u5143\u7d20\u79fb\u52a8\u5230\u6392\u597d\u5e8f\u4e4b\u540e\u5b83\u5e94\u8be5\u5904\u4e8e\u7684\u4f4d\u7f6e\u4e0a\u3002</p> <p>\u5feb\u901f\u6392\u5e8f\u901a\u8fc7\u9012\u5f52\u8c03\u7528\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u505a\u5230 nlogn \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5feb\u901f\u6392\u5e8f\u7684\u5173\u952e\u5c31\u662f\u5b9e\u73b0\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u901a\u5e38\u53eb\u505a <code>partition</code></p> <pre><code>// \u5feb\u901f\u6392\u5e8f\u7684\u4e00\u8d9f\u8fc7\u7a0b\nint partition(int *arr, int left, int right)\n{\n    int base = arr[right]; // \u9009\u62e9\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u57fa\u51c6\u5143\u7d20\n    int i = left - 1;\n    // \u904d\u5386[left, right-1], \u6bcf\u4e00\u4e2a\u90fd\u548c\u57fa\u51c6\u6bd4\u8f83\uff0c\u5982\u679c\u5c0f\u4e8e\u57fa\u51c6\uff0c\u5c31\u4ea4\u6362\n    for (int j = left; j &lt; right; j++) {\n        if (arr[j] &lt;= arr[base]) {\n            i = i + 1;\n            swap(arr, i, j);\n        }\n    }\n    swap(arr, i + 1, right);\n    return i + 1;\n}\n</code></pre> <p>\u5728 partiton \u4e2d\uff0c i \u6307\u5411\u7684\u59cb\u7ec8\u662f\u5c0f\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c i + 1 \u53ef\u80fd\u662f j, \u4e5f\u53ef\u80fd\u662f\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019 i + 1 == j, \u4e00\u65e6\u9047\u5230\u5927\u4e8e\u57fa\u51c6\u7684\u503c\uff0c j++ \u800c i \u4e0d\u52a8\uff0c i \u548c j \u62c9\u5f00\u8ddd\u79bb\uff0c \u4e0b\u4e00\u6b21\u5c0f\u4e8e\u57fa\u51c6\u7684\u5143\u7d20\u51fa\u73b0\u7684\u65f6\u5019\uff0c \u4ea4\u6362\u7684\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e\u57fa\u51c6\u5143\u7d20\u7684\u503c\u548c j.</p> <p>\u5faa\u73af\u7ed3\u675f\u7684\u65f6\u5019\uff0c i \u6307\u5411\u7684\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8ebase\u7684\u503c\uff0c\u6240\u4ee5\u53ea\u8981\u628a i + 1 \u548c base \u4ea4\u6362\uff0c base \u5c31\u653e\u5728\u4e86\u6392\u5e8f\u4e4b\u540e\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002</p> <p>\u8be5\u51fd\u6570\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u57fa\u51c6\u5143\u7d20\u662f\u7b2c\u51e0\u5927(\u5c0f)\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_3","title":"\u5806\u6392\u5e8f","text":"<p>\u5806\u6392\u5e8f\u7684\u539f\u7406\u662f\u5148\u7528\u6240\u6709\u5143\u7d20\u5efa\u5806\uff0c \u7136\u540e\u6bcf\u6b21\u53d6\u5806\u9876\u5143\u7d20\u653e\u5728\u6700\u540e\uff0c\u8c03\u6574\u5806\uff0c \u7136\u540e\u518d\u53d6\u5806\u9876\u5143\u7d20\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u76f4\u5230\u5806\u4e3a\u7a7a\u3002</p> <p>\u56e0\u4e3a\u8c03\u6574\u5806\u53ea\u9700\u8981\u6d88\u8017 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5806\u6392\u5e8f\u5171\u9700\u8981 nlogn \u7684\u65f6\u95f4\u3002</p> <p>\u5806\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0 \u5efa\u7acb\u5806 \u548c \u8c03\u6574\u5806 \u7684\u65b9\u6cd5\u3002</p> <pre><code>// \u8c03\u6574\u5806\u4e2d\u7684\u8282\u70b9 i\uff0c \u4f7f\u5f97\u91cd\u65b0\u6ee1\u8db3\u5927\u9876\u5806\nvoid heapify(int *arr, int size, int i)\n{\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    int large = i;\n    if (left &lt; size &amp;&amp; arr[left] &gt; arr[large]) {\n        large = left;\n    }\n    if (right &lt; size &amp;&amp; arr[right] &gt; arr[large]) {\n        large = right;\n    }\n    // \u5982\u679c\u627e\u5230\u5b50\u8282\u70b9\u4e2d\u6709\u8f83\u5927\u7684\uff0c\u548c\u90a3\u4e2a\u8f83\u5927\u7684\u4ea4\u6362\n    if (large != i) {\n        swap(arr, i, large);\n        heapify(arr, size, large);\n    }\n    return;\n}\n\n// \u5efa\u7acb\u5806\nvoid build_heap(int *arr, int size)\n{\n    // \u6570\u7ec4\u540e\u534a\u90e8\u5206\u662f\u4e8c\u53c9\u6811\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u4e0d\u7528\u8c03\u6574\n    // \u5bf9\u6bcf\u4e00\u4e2a\u5185\u90e8\u8282\u70b9\u8c03\u6574\u4e00\u904d\u5806\uff0c\u4f7f\u5806\u6ee1\u8db3\u6761\u4ef6\n    int middle = size / 2;\n    for (int i = middle; i &gt;= 0; i++) {\n        heapify(arr, size, i);\n    }\n    return;\n}\n\nvoid heap_sort(int *arr, int size)\n{\n    int end = size;\n    build_heap(arr, end);\n    while (end &gt; 0) {\n        // \u5806\u9876\u6700\u5927\u7684\u503c\u653e\u5728\u662f\u6700\u540e\uff0c\u5806\u5143\u7d20\u4e2a\u6570\u51cf\u4e00\n        swap(arr, 0, end - 1);\n        // \u5806\u9876\u5143\u7d20\u6362\u8fc7\uff0c\u8c03\u6574\u5b83\n        heapify(arr, end - 1, 0);\n        end--;\n    }\n    return;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_4","title":"\u5f52\u5e76\u6392\u5e8f","text":"<p>\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5c06\u539f\u6765\u7684\u6570\u7ec4\u4e00\u76f4\u4e8c\u5206\uff0c\u76f4\u5230\u6bcf\u7ec4\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c \u4e00\u4e2a\u5143\u7d20\u80af\u5b9a\u662f\u6709\u5e8f\u7684\uff0c \u5269\u4e0b\u7684\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0\u5f52\u5e76\u7684\u64cd\u4f5c\u3002</p> <p>\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c \u548c\u5408\u5e762\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c \u6216\u8005\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\u662f\u4e00\u6837\u7684\uff0c \u9700\u8981 O(n) \u7684\u590d\u6742\u5ea6\u3002 \u4e8c\u5206\u9700\u8981 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nlogn.</p> <pre><code>// \u4e24\u4e2a\u6307\u9488\u9010\u4e2a\u6bd4\u8f83\u5408\u5e76\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\nvoid merge(int *arr, int begin, int mid, int end)\n{\n    int i = begin, j = mid + 1;\n    int count = end - start + 1;\n    int index = 0;\n    int *tmp_arr = (int*)malloc(sizeof(int) *(end - begin + 1));\n    while (index &lt; count) {\n        if (i &lt;= mid &amp;&amp; j &lt;= end &amp;&amp; arr[i] &gt;= arr[j]) {\n            tmp_arr[index++] = arr[j++];\n        } else if (i &lt;= mid &amp;&amp; j &lt;= end &amp;&amp; arr[i] &lt; arr[j]) {\n            tmp_arr[index++] = arr[i++];\n        }\n    }\n    index = 0;\n    for (int i = begin; i &lt;= end; i++) {\n        arr[i] = tmp_arr[index++];\n    }\n    free(tmp_arr);\n    return;\n}\nvoid merge_sort(int *arr, int begin, int end)\n{\n    if (begin &gt;= end) {\n        return;\n    }\n    int mid = (begin + end) / 2;\n    merge_sort(arr, begin, mid);\n    merge_sort(arr, mid + 1, end);\n    merge(arr, begin, mid, end);\n    return;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_5","title":"\u6392\u5e8f\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/","title":"\u6469\u5c14\u6295\u7968\u6cd5","text":"<p>\u5982\u4f55\u627e\u51fa\u4e00\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6700\u591a\u7684\u6570\u5b57\u5462\uff1f</p> <p>\u6734\u7d20\u7684\u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u5143\u7d20\u8ba1\u6570\uff0c\u7136\u540e\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u6837\u9700\u8981O(n)\u7684\u989d\u5916\u7a7a\u95f4\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u6469\u5c14\u6295\u7968\u6cd5\u5c31\u662f\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\uff0cO(n)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u7684\u7b97\u6cd5\u3002</p> <p>\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1/2\u7684\u6570\u5b57\uff0c \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1/3\u7684\u6570\u5b57\uff0c \u8fd9\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u6469\u5c14\u6295\u7968\u6cd5\u89e3\u51b3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/#_2","title":"\u7b97\u6cd5\u5b9e\u73b0","text":"<p>\u8bbe\u6570\u7ec4\u5143\u7d20\u6709 n \u4e2a\uff0c 0 &lt; m &lt; n, \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n / m \u7684\u6240\u6709\u6570\u5b57\u3002</p> <p>\u6700\u574f\u7684\u60c5\u51b5\uff0c \u6709 m - 1 \u4e2a\u6570\u5b57\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n / m \u6b21\uff0c \u6240\u4ee5\u9700\u8981\u7a7a\u95f4 O(m - 1).</p> <ol> <li>elements[m-1] \u8868\u793a\u5f53\u524d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 m - 1 \u4e2a\u5143\u7d20\uff0c count[m-1] \u8868\u793a\u5176\u51fa\u73b0\u6b21\u6570</li> <li>\u7b2c\u4e00\u904d\u904d\u5386\u6570\u7ec4\uff0c \u5982\u679c nums[i] in elements, \u5219\u5bf9\u5e94\u7684count+1; \u5426\u5219\u5982\u679ccount\u4e2d\u5b58\u57280\uff0c\u5f53\u524d\u5143\u7d20\u4f5c\u4e3a\u65b0\u7684\u5143\u7d20\u8d4b\u503c\u7ed90\u5bf9\u5e94\u7684elements; \u5982\u679c\u90fd\u4e0d\u4e3a0\uff0c coount \u4e2d\u6bcf\u4e2a\u90fd-1\uff0c \u8868\u793a\u6d88\u8017\u4e00\u6b21\u3002</li> <li>\u7b2c\u4e8c\u6b21\u904d\u5386\uff0c \u7edf\u8ba1 elements \u4e2d\u51fa\u73b0\u6b21\u6570\u5927\u4e8e n/m \u7684\u5143\u7d20\uff0c \u8f93\u51fa\u7ed3\u679c</li> </ol> <pre><code>def major(nums: List[int], m: int) -&gt; List[int]:\n    n = len(nums)\n    T = n // m\n\n    elements = [0 for _ in range(m - 1)]\n    counts = [ 0 for _ in range(m - 1)]\n    for num in nums:\n        flag = True\n        for i in range(m - 1):\n            if num == elements[i]:\n                counts[i] += 1\n                Flag = False\n                break\n        # \u5982\u679c\u4e0d\u5728elemnts\u4e2d\n        if flag:\n            for i in range(m - 1):\n                if counts[i] == 0:\n                    elements[i] = num\n                    counts[i] = 1\n                    flag = False\n                    break\n        # \u5982\u679ccounts\u90fd\u4e0d\u4e3a0\n        if flag:\n            for i in range(m - 1):\n                counts[i] -= 1\n\n    counts = [ 0 for _ in range(m - 1)]\n    for num in nums:\n        for i in range(m - 1):\n            if num == elements[i]:\n                counts[i] += 1\n    ans = []\n    for i in range(m - 1):\n        if counts[i] &gt; T:\n            if elements[i] not in ans:\n                ans.append(elements[i])\n    return ans\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8%E6%B3%95/#_3","title":"\u76f8\u5173\u9898\u76ee","text":"leetcode \u96be\u5ea6 169. \u591a\u6570\u5143\u7d20 \u7b80\u5355 229. \u6c42\u4f17\u6570 II \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/","title":"\u6808","text":"<p>\u6808\u662f\u4e00\u79cd\u5b9e\u73b0 \u5148\u8fdb\u540e\u51fa \u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u822c\u7528\u6570\u7ec4\u5c31\u53ef\u5b9e\u73b0\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_2","title":"\u6808\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u4e2d\u7b49 456. 132\u6a21\u5f0f \u4e2d\u7b49 921. \u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0 \u4e2d\u7b49 946. \u9a8c\u8bc1\u6808\u5e8f\u5217 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/","title":"\u7b97\u6cd5\u4e13\u9898_\u6a21\u8fd0\u7b97","text":"<p>\u6a21\u8fd0\u7b97\u662f\u6307\u5bf9\u4e00\u4e2a\u6570\u6c42\u4f59\u6570\u7684\u8fc7\u7a0b\u3002\u6d89\u53ca\u5230\u6bd4\u8f83\u5927\u7684\u6570\u5b57\u65f6\uff0c\u901a\u5e38\u4f1a\u6d89\u53ca\u5230\u53d6\u6a21\u8fd0\u7b97\u3002\u4e86\u89e3\u4e00\u4e9b\u6a21\u8fd0\u7b97\u7684\u6027\u8d28\u662f\u6709\u597d\u5904\u7684\u3002\u6211\u4eec\u628aa \u548c b \u9664\u4ee5 m \u4e4b\u540e\u6240\u5f97\u5230\u7684\u4f59\u6570\u76f8\u7b49\u8bb0\u4f5c\\(a \\equiv b(mod \\space m)\\).</p>","tags":["mod","\u6a21"]},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#_1","title":"\u57fa\u672c\u7684\u6a21\u8fd0\u7b97\u5b9a\u5f8b","text":"<p>\u5982\u679c\\(a \\equiv b(mod \\space m)\\)\u4e14\\(c \\equiv d(mod \\space m)\\), \u90a3\u4e48\u6709 -\\({a+b} \\equiv {c+d} {(mod \\space m)}\\) -\\({a-b} \\equiv {c-d} {(mod \\space m)}\\) -\\({a \\times b} \\equiv {c \\times d} {(mod \\space m)}\\)</p> <p>\\(a \\equiv b(mod \\space m)\\)\u8bf4\u660e\\(a = km + b\\), \u53e6\u5916\uff1a</p> <p>-\\((a+b) \\% c = (a\\%c+b\\%c)\\%c\\) -\\((a-b) \\% c = (a\\%c-b\\%c)\\%c\\) -\\((a \\times b) \\% c = (a\\%c \\times b\\%c)\\%c\\) -\\(a^b\\space\\%c = (a\\%c)^b \\space \\% c\\)</p> <p>\u6700\u540e\u4e00\u6761\u89c4\u5219\u5728\u6c42\u5927\u6570\u7684\u5e42\u7684\u6a21\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff1a</p> \\[ 62^{65} \\% 133     = 62 \\times 62^{64} \\% 133   = 62 \\times (62^2)^{32} \\% 133   = 62 \\times 3844^{32} \\% 133   = 62 \\times (3844 \\% 133)^{32} \\% 133   = 62 \\times 120^{32} \\% 133   = 62 \\times 36^{16} \\% 133   = 62 \\times 99^8 \\% 133   = 62 \\times 92^4 \\% 133   = 62 \\times 85^2 \\% 133   = 62 \\times 43 \\% 133   = 2666 \\% 133   = 6 \\]","tags":["mod","\u6a21"]},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#_2","title":"\u9006\u5143","text":"<p>\u8003\u8651\u5982\u4f55\u6c42\u89e3\\(ax \\equiv b(mod \\space m)\\).\u4e2d\u7684\\(x\\),\u5982\u679c\u662f\u7b49\u5f0f\uff0c\\(ax=b\\),\u90a3\u4e48\u6c42\u89e3\\(x\\),\u975e\u5e38\u5bb9\u6613\uff0c\\(x = a^{-1}*b\\),\u5982\u679ca\u662f\u5b9e\u6570\uff0c\u90a3\u4e48\\(a^{-1} = \\dfrac 1 a\\). \u6240\u4ee5\uff0c\u6c42\u89e3x\u7684\u5173\u952e\u662f\u6c42\u51fa\u5728\u53d6\u6a21\u8fd0\u7b97\u610f\u4e49\u4e0b\u7684a\u7684\u5012\u6570\uff0c\u8fd9\u91cc\u79f0\u4f5c\u9006\u5143\u3002</p> <p>\u5047\u8bbea\u7684\u9006\u5143\u662fx\uff0c\u90a3\u4e48\u6709\\(ax \\equiv 1(mod \\space m)\\), \u5c31\u662f\\(ax=km+1\\),\u8f6c\u6362\u4e00\u4e0b\u5c31\u662f\u6c42\u4f7f\u5f97\\(ax-km=1\\)\u6210\u7acb\u7684\\(x\\),\u5176\u4e2da\uff0cm\u662f\u4e00\u4e2a\u5df2\u77e5\u6570\uff0ck\u662f\u6b63\u6574\u6570\u3002 \u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u66f4\u4e00\u822c\u7684\u95ee\u9898\u7684\u89e3\u6cd5\u3002a,b,x,y,\u90fd\u662f\u6574\u6570\uff0ca,b,\u5df2\u77e5\uff0c\u6c42\\(ax+by=1\\)\u6210\u7acb\u7684x,y.</p> <pre><code>int extgcd(int a,int b,int &amp;x,int &amp;y){\n    int d = a;\n    if( b != 0){\n        d = extgcd(b,a%b,y,x);\n        y = y - (a/b)*x;\n    }else{\n        x =1;\n        y = 0;\n    }\n    return d;\n}\nint main()\n{\n    int a = 4,b=11;\n    int x,y;\n    cout&lt;&lt;extgcd(a,b,x,y)&lt;&lt;endl;\n    cout&lt;&lt;x&lt;&lt;endl;\n    cout&lt;&lt;y&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u8fd9\u6837\u5229\u7528\u8f97\u8f6c\u76f8\u9664\u6cd5\u7684\u6269\u5c55\uff0c\u53ef\u4ee5\u89e3\u6790\u7684\u6c42\u89e3\u51fax\u548cy,\u6bd4\u5148\u786e\u5b9a\u4e00\u4e2a\u6570\u5b57\u518d\u53bb\u6c42\u89e3\u53e6\u5916\u4e00\u4e2a\u6570\u5b57\u8981\u597d\u3002</p> <p>\u4e0b\u9762\u6765\u770b\u6c42\u89e3\u9006\u5143\u7684\u65b9\u6cd5\uff1a</p> <pre><code>int mod_inverse(int a,int m){\n    int x,y;\n    extgcd(a,m,x,y);\n    return (m+x%m)%m;\n}\nint main()\n{\n    cout&lt;&lt;mod_inverse(3,20)&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u4e0a\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u6c42\u89e3\u5f97\u51fa\u4e86\\(3(mod \\space 20)\\)\u7684\u9006\u5143\uff0c \u662f7.</p> <p>\u4ee5\u4e0a\u662f\u5229\u7528\u6269\u5c55\u7684\u8f97\u8f6c\u76f8\u9664\u6cd5\u6c42\u89e3\u9006\u5143\u7684\u8fc7\u7a0b\u3002</p> <p>\u6c42\u9006\u5143\u8fd8\u6709\u5176\u4ed6\u7684\u65b9\u6cd5\u3002</p> <p>\u8d39\u9a6c\u5c0f\u5b9a\u7406</p> <p>\u5982\u679c\\(p\\)\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u7684\u6574\u6570\\(x\\),\u90fd\u6709\\(x^p \\equiv x(mod \\space p)\\), \u968f\u4fbf\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff0c\\(2^3 (mod\\space3) \\equiv 2\\),\\(8^5 (mod\\space5) \\equiv 8\\)</p> <p>\u5982\u679cx\u65e0\u6cd5\u88abp\u6574\u9664\uff0c\u8fd8\u6709\u4e00\u4e2a\u89c4\u5f8b\u6210\u7acb\uff0c\\(x^{p-1} \\equiv 1(mod\\space p)\\),\u5229\u7528\u8fd9\u6761\u6027\u8d28\uff0c\u4e5f\u53ef\u4ee5\u6c42\u4e00\u4e2a\u6570\u7684\u9006\u5143\u3002\u7b49\u5f0f\u4e24\u8fb9\u90fd\u4e58\u4ee5\\(x^{-1}\\),\u5f97\u5230\\(x^{-1} = x^{p-2}(mod \\space p)\\), \u6240\u4ee5\u5728p\u662f\u7d20\u6570\u7684\u65f6\u5019\uff08\u5f88\u591a\u60c5\u51b5\u4e0b\u90fd\u662f\u5982\u6b64\uff09\uff0c\u4e00\u4e2a\u6570\u7684\u9006\u5143\uff0c\u5c31\u7b49\u4e8e\u8fd9\u4e2a\u6570\u7684p-2\u6b21\u65b9(mod p), \u6240\u4ee5\uff0c\u4f7f\u7528\u5feb\u901f\u5e42\u8fd0\u7b97\u5c31\u80fd\u6c42\u51fa\u9006\u5143\u3002</p> <p>\u5728p\u4e0d\u662f\u7d20\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u4e5f\u6709\u7c7b\u4f3c\u7684\u5b9a\u7406\u53ef\u4ee5\u4f7f\u7528\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u505a\u8ba8\u8bba\u4e86\u3002\u56e0\u4e3a\u7a0b\u5e8f\u8bbe\u8ba1\u9898\u4e00\u822c\u60c5\u51b5\u4e0b\u7ed9\u51fa\u7684\u90fd\u4f1a\u662f\u7d20\u6570\u3002</p>","tags":["mod","\u6a21"]},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#abm","title":"a\u7684b\u6b21\u65b9\u6a21m","text":"<pre><code>long long Montgomery(long long a,long long b,long long m)\n{\n    long long r=1;\n\n    a %=m;\n    while(b&gt;1)\n    {\n        if((b&amp;1)!=0)\n            r = (r*a)%m;\n        a = (a*a)%m;\n        b/=2;\n    }\n    return (r*a)%m;\n}\n</code></pre>","tags":["mod","\u6a21"]},{"location":"%E7%AE%97%E6%B3%95/%E6%A8%A1%E8%BF%90%E7%AE%97/#nmod-p-p","title":"n!(mod p) \u548c\u6392\u5217\u7ec4\u5408\u6570\u6a21P","text":"<p>\u5148\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u6c4210\uff01mod 4;</p> <p>10! = 10x9x8x7x6x5x4x3x2x1 mod 4     = 2 x 1 x (2x4) x 3 x 2 x 1 x (1x4) x 3 x 2 x 1 mod p     = 2x1x(3x2x1)x2 x (2x4)x(1x4)     = 2x6x2 x (2x4)x(1x4)     = 6x4x2x4x1x4     = 0</p> <p>\u901a\u8fc7\u4e0a\u9762\u7684\u8ba1\u7b97\u8fc7\u7a0b\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9en!\u91cc\u9762\u7684\u6240\u6709\u6570\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u80fd\u591f\u88abp\u6574\u9664\u7684\uff0c\u8fd9\u7c7b\u8981\u5355\u72ec\u62ff\u51fa\u6765\uff0c\u53e6\u5916\u4e00\u7c7b\u662f\u4e0d\u80fd\u88abp\u6574\u9664\u7684\uff0c\u8fd9\u7c7bmod p\u4e4b\u540e\u5c31\u4f1a\u5448\u73b0\u51fa\u5468\u671f\u6027\uff0c\u6700\u7ec8\u5f62\u6210\\(a^b\\)\u8fd9\u79cd\u5f62\u5f0f\u3002</p> <p>\u4e0b\u9762\u5177\u4f53\u770b\u4e00\u4e0bn! mod p\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>int mod_fact(int n,int p,int &amp;e){\n    //e \u7684\u542b\u4e49\u662fn!\u80fd\u591f\u8fed\u4ee3\u6574\u9664p\u7684\u6b21\u6570\u3002\n    vector&lt;int&gt; fact(p,0);\n    vector&lt;int&gt; nfact(p,1);\n    //\u8ba1\u7b97i\u7684\u9636\u4e58\n    for(int i=1;i&lt;p;i++){\n        nfact[i] *= nfact[i-1]*i;\n    }\n    for(int i=1;i&lt;p;i++){\n        fact[i] = nfact[i] % p;\n    }\n    e = 0;\n    if(n==0) return 1;\n    int res = mod_fact(n/p,p,e);\n    e += n/p;\n    if(n/p % 2 != 0){\n        return res*(p-fact[n%p])%p;\n    }\n    return res*(fact[n%p])%p;\n}\nint main()\n{\n    int e;\n    cout&lt;&lt;mod_fact(5,7,e)&lt;&lt;endl;\n    cout&lt;&lt;e&lt;&lt;endl;\n    return 0;\n}\n</code></pre> <p>\u77e5\u9053\u4e86\u5982\u4f55\u8ba1\u7b97\u9636\u4e58\u7684\u6a21\uff0c\u8ba1\u7b97\u6392\u5217\u548c\u7ec4\u5408\u7ed3\u679c\u7684\u6a21\u4e5f\u5c31\u4e0d\u6210\u95ee\u9898\u4e86\u3002 \u6c42\\(C^k_n = \\dfrac{n!}{k!(n-k)!} (mod\\space p)\\)</p> <pre><code>int mod_comb(int n,int k,int p){\n    if(n&lt;0 || k&lt;0|| n&lt;k) return 0;\n    int e1,e2,e3;\n    int a1 = mod_fact(n,p,e1);\n    int a2 = mod_fact(k,p,e2);\n    int a3 = mod_fact(n-k,p,e3);\n    if(e1 &gt; e2+e3) return 0;\n    return a1* mod_inverse(a2*a3%p,p)%p;\n}\n</code></pre>","tags":["mod","\u6a21"]},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/","title":"\u7b97\u6cd5\u4e13\u9898_\u7d20\u6570\u95ee\u9898","text":"<p>\u53ea\u6709\u4e24\u4e2a\u56e0\u5b50\u7684\u6570\u53eb\u505a\u7d20\u6570\uff0c\u4e5f\u53eb\u8d28\u6570\u3002\u4f8b\u59822\uff0c3\uff0c5\uff0c7\uff0c11....\u7d20\u6570\u7ecf\u5e38\u7528\u5728\u5bc6\u7801\u5b66\u4e2d\uff0c\u6240\u4ee5\u6d89\u53ca\u7d20\u6570\u7684\u8fd0\u7b97\u4e5f\u662f\u4f1a\u7ecf\u5e38\u9047\u5230\u7684\u3002</p>","tags":["\u7d20\u6570","\u8d28\u6570"]},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#_1","title":"\u7d20\u6027\u6d4b\u8bd5","text":"","tags":["\u7d20\u6570","\u8d28\u6570"]},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#_2","title":"\u6d4b\u8bd5\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570","text":"<p>\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570\uff0c\u6211\u4eec\u5c31\u8981\u627e\u5230\u5b83\u6240\u6709\u7684\u56e0\u5b50\uff0c\u770b\u662f\u4e0d\u662f\u53ea\u67091\u548c\u5b83\u672c\u8eab\u3002\u5177\u4f53\u601d\u8def\u662f\u4ece2\u5f00\u59cb\uff0c\u4e00\u76f4\u5230\\(\\sqrt n\\), \u5982\u679c\u90fd\u4e0d\u80fd\u6574\u9664n\uff0c\u90a3\u4e48n\u5c31\u662f\u7d20\u6570\u3002</p> <pre><code>bool isPrime(int n){\n  for(int i=2;i&lt;=sqrt(n);i++){\n    if(n%i==0){\n      return false;\n    }\n  }\n  return true;\n}\n</code></pre>","tags":["\u7d20\u6570","\u8d28\u6570"]},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#n","title":"\u627e\u51fan\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570","text":"<p>\u5982\u679c\u662f\u627e\u51fa\u5f88\u591a\u7d20\u6570\uff0c\u5982\u679c\u4ece1\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u505a\u7d20\u6027\u6d4b\u8bd5\uff0c\u90a3\u4e48\u5f00\u9500\u5c31\u592a\u9ad8\u4e86\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u90fd\u4e0d\u662f\u7d20\u6570\u3002 \u6211\u4eec\u76f4\u52302\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u6240\u67092\u7684\u500d\u6570\uff0c4\uff0c6\uff0c8\u5c31\u90fd\u4e0d\u662f\u7d20\u6570\uff0c\u56e0\u4e3a\u5176\u81f3\u5c11\u542b\u6709\u4e00\u4e2a\u56e0\u5b502. \u540c\u7406\uff0c3\u7684\u6240\u6709\u500d\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u540c\u7406\uff0c5\u7684\u6240\u6709\u500d\u6570\u4e5f\u4e0d\u662f\u7d20\u6570\u3002 \u8fd9\u6837\u8003\u8651\uff0c\u6bcf\u5f53\u6211\u4eec\u786e\u5b9a\u4e00\u4e2a\u7d20\u6570\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u4e00\u5927\u6279\u6570\u4e0d\u662f\u7d20\u6570\uff0c\u8fd9\u4e9b\u80af\u5b9a\u4e0d\u662f\u7d20\u6570\u7684\u6570\u5c31\u4e0d\u7528\u518d\u505a\u7d20\u6027\u6d4b\u8bd5\u4e86\u3002 \u4ee5\u8fd9\u6837\u7684\u601d\u8def\u6c42n\u4ee5\u5185\u7684\u7d20\u6570\u7684\u65b9\u6cd5\u53eb\u505a\u57c3\u6c0f\u7b5b\u6cd5\u3002</p> <pre><code>// n \u4ee5\u5185\u7684\u7d20\u6570\nint sieve(int n,vector&lt;int&gt; &amp;prime){\n    int p=0;\n    // is_prime[0] \u8868\u793a\u6570\u5b570 \u662f\u4e0d\u662f\u7d20\u6570\n    // is_print[1] \u8868\u793a\u6570\u5b571\u662f\u4e0d\u662f\u7d20\u6570\n    // is_print[n] \u8868\u793a\u6570\u5b57n\u662f\u4e0d\u662f\u7d20\u6570\n    vector&lt;bool&gt; is_prime(n+1,true);\n    is_prime[0] = false;  //0 \u4e0d\u662f\u7d20\u6570\uff0c\n    is_prime[1] = false; //1 \u4e0d\u662f\u7d20\u6570\n    for(int i=2;i&lt;=n;i++){\n        // \u521d\u59cb\u7684\u65f6\u5019\uff0c2\u662f\u7d20\u6570\uff0cis_prime[1]\u5bf9\u5e942\n        if(is_prime[i]){\n            prime.push_back(i);\n            p++;\n            for(int j=i*2;j&lt;=n;j += i){\n                is_prime[j] = false;\n            }\n        }\n    }\n    return p;\n}\n</code></pre>","tags":["\u7d20\u6570","\u8d28\u6570"]},{"location":"%E7%AE%97%E6%B3%95/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/#ab","title":"\u627e\u51fa\u533a\u95f4[a,b)\u5185\u7684\u6240\u6709\u7d20\u6570","text":"<p>\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u7ed3\u8bba\uff0c\u53ef\u4ee5\u627e\u51fab\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570\uff0c\u7136\u540e\u53ea\u53d6\u5927\u4e8ea\u7684\u90e8\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5229\u7528\u4e0a\u9762\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u5728\u533a\u95f4[a,b)\u5185\u4f7f\u7528\u57c3\u6c0f\u7b5b\u6cd5\u3002 \u6211\u4eec\u51c6\u5907\u4e24\u4e2a\u533a\u95f4[2,\\(\\sqrt b\\)) \u548c [a,b), \u7136\u540e\u5728\u533a\u95f4[2,\\(\\sqrt b\\))\u7528\u57c3\u6c0f\u7b5b\u6cd5\u9009\u62e9\u7d20\u6570\uff0c\u540c\u65f6\u5728[a,b)\u5220\u9664\u76f8\u5e94\u7684\u500d\u6570\uff0c\u6700\u540e\u5f97\u5230\u7684\u5c31\u662f[a,b)\u533a\u95f4\u5185\u7684\u7d20\u6570\u3002 <pre><code>int segment_sieve(int a,int b,vector&lt;int&gt; &amp;prime){\n    vector&lt;bool&gt; is_prime;\n    //is_prime \u6307\u793a0...sqrt(b)\u5185\u662f\u5426\u662f\u7d20\u6570\n    for(int i=0; i*i &lt; b;i++){\n        is_prime.push_back(true);\n    }\n    // //is_prime_ab \u6307\u793a[a,b])\u5185\u662f\u5426\u662f\u7d20\u6570\n    vector&lt;bool&gt; is_prime_ab(b-a,true);\n    int p=0;\n    for(int i=2;i*i&lt;b;i++){\n        if(is_prime[i]){\n            p++;\n            for(int j=2*i;j*j&lt;b;j += i){\n                is_prime[j] = false;\n            }\n            for(int j=max(2,(a+i-1)/i)*i;j&lt;b;j += i){\n                is_prime_ab[j-a] = false;\n            }\n        }\n    }\n    return p;\n}\n</code></pre></p>","tags":["\u7d20\u6570","\u8d28\u6570"]},{"location":"%E7%AE%97%E6%B3%95/%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/","title":"\u77e9\u9635\u7684\u904d\u5386","text":"<p>\u77e9\u9635\u7684\u5404\u79cd\u904d\u5386\u65b9\u6cd5\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/#_1","title":"\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u4e3b\u5bf9\u89d2\u7ebf)","text":"<pre><code>//\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u4e3b\u5bf9\u89d2\u7ebf)\n\nvector&lt;vector&lt;int&gt;&gt; printMatrix(vector&lt;vector&lt;int&gt;&gt; v){\n    vector&lt;vector&lt;int&gt;&gt; re;\n    int m = v.size(); if(m==0) return re; if(m==1){return v;}\n    int n = v[0].size(); if(n==1) return v;\n\n    int count = m+n-1;\n    int row = 0;\n    int col = n - 1;\n    vector&lt;int&gt; tmp;\n    tmp.push_back(v[row][col]);\n    re.push_back(tmp);\n    int i = row + 1;\n    int j = col -1;\n    while(true){\n        int i1=row;\n        int j1=j;\n        tmp.clear();\n        while(i1&lt;=i &amp;&amp; j1&lt;=col){\n            tmp.push_back(v[i1][j1]);\n            i1++;\n            j1++;\n        }\n        re.push_back(tmp);\n        if(i==m-1){\n            col--;\n        }else{\n            i++;\n        }\n        if(j==0){\n            row++;\n        }else{\n            j--;\n        }\n\n        if(i == m-1 &amp;&amp; j == 0 &amp;&amp; col==0 &amp;&amp; row == m-1){\n            tmp.clear();\n            tmp.push_back(v[row][col]);\n            re.push_back(tmp);\n            break;\n        }\n    }\n    return re;\n}\n</code></pre>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86/#_2","title":"\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u526f\u5bf9\u89d2\u7ebf)","text":"<pre><code>//\u659c\u5bf9\u89d2\u7ebf\u904d\u5386\u6570\u7ec4(\u526f\u5bf9\u89d2\u7ebf)\nvector&lt;vector&lt;int&gt;&gt; printMatrix(vector&lt;vector&lt;int&gt;&gt; v){\n    vector&lt;vector&lt;int&gt;&gt; re;\n    int m = v.size(); if(m==0) return re; if(m==1){return v;}\n    int n = v[0].size(); if(n==1) return v;\n\n    int count = m+n-1;\n    int row = 0;\n    int col = 0;\n    vector&lt;int&gt; tmp;\n    tmp.push_back(v[row][col]);\n    re.push_back(tmp);\n    int i = row + 1;\n    int j = col + 1;\n    while(true){\n        int i1=row;\n        int j1=j;\n        tmp.clear();\n        while(i1&lt;=i &amp;&amp; j1&gt;=col){\n            tmp.push_back(v[i1][j1]);\n            i1++;\n            j1--;\n        }\n        re.push_back(tmp);\n        if(i==m-1){\n            col++;\n        }else{\n            i++;\n        }\n        if(j==n-1){\n            row++;\n        }else{\n            j++;\n        }\n\n        if(i == m-1 &amp;&amp; j == n-1 &amp;&amp; col==n-1 &amp;&amp; row == m-1){\n            tmp.clear();\n            tmp.push_back(v[row][col]);\n            re.push_back(tmp);\n            break;\n        }\n    }\n    return re;\n}\n</code></pre>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","title":"\u7b97\u6cd5\u4e13\u9898_\u8ba1\u7b97\u51e0\u4f55","text":"<p>\u7b97\u6cd5\u9898\u76ee\u5f53\u4e2d\u7ecf\u5e38\u6d89\u53ca\u5230\u4e00\u4e9b\u51e0\u4f55\u9898\u76ee\u3002\u8fd9\u7c7b\u9898\u76ee\u5982\u679c\u4e0d\u4e8b\u5148\u4e86\u89e3\u4e00\u4e9b\u77e5\u8bc6\uff0c\u5f80\u5f80\u611f\u89c9\u5f88\u96be\u6709\u601d\u8def\u3002\u672c\u6587\u603b\u7ed3\u7b97\u6cd5\u4e2d\u5e38\u89c1\u95ee\u9898\u6d89\u53ca\u5230\u7684\u4e3b\u8981\u77e5\u8bc6\u3002</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_1","title":"\u7ebf\u6bb5","text":"<p>\u70b9\u7684\u51f8\u7ec4\u5408</p> <p>\u70b9\\(p_1=(x_1,y_1)\\)\u548c\\(p_2=(x_2,y_2)\\)\u7684\u51f8\u7ec4\u5408\u5b9a\u4e49\u4e3a\uff1a</p> <p>\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u4efb\u610f\u70b9\\(p_3\\)</p> \\[   x_3 = \\alpha x_1 + (1-\\alpha) x_2  \\] \\[   y_3 = \\alpha y_1 + (1-\\alpha) y_2  \\] <p>\u5176\u4e2d\uff0c\\(0 &lt;= \\alpha &lt;= 1\\)</p> <p>\u542b\u4e49\uff0c\\(p_3\\)\u4f4d\u4e8e\u70b9\\(p_1\\)\u548c\\(p_2\\)\u7ec4\u6210\u7684\u7ebf\u6bb5\u5185\uff0c\u5305\u542b\u8fd9\u4e24\u4e2a\u7aef\u70b9\u3002</p> <p>\u6211\u4eec\u7528\\(p_1 p_2\\)\u8868\u793a\u7ebf\u6bb5\uff0c\u7528\\(p_1 \\longrightarrow p_2\\)\u8868\u793a\u5411\u91cf\u6216\u8005\u53eb\u505a\u6709\u5411\u7ebf\u6bb5\u3002</p> <p>\u6211\u4eec\u5148\u6765\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a</p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_2","title":"\u6709\u5411\u7ebf\u6bb5\u7684\u65cb\u8f6c","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5411\u7ebf\u6bb5\\(p_0 \\longrightarrow p_1\\)\u548c\\(p_0 \\longrightarrow p_2\\)\uff0c\u5224\u65ad\\(p_0 \\longrightarrow p_1\\)\u662f\u5426\u5728\\(p_0 \\longrightarrow p_2\\)\u7684\u987a\u65f6\u9488\u65b9\u5411\uff1f</p> <p>\u53c9\u79ef</p> <p>\u5148\u6765\u4e86\u89e3\u4e00\u4e2a\u6982\u5ff5\uff0c\u4e24\u4e2a\u70b9\u7684\u53c9\u79ef\u5c31\u662f\u4e24\u4e2a\u70b9\u7684\u884c\u5217\u5f0f\u7684\u503c\uff1a</p> \\[ p_1 \\times p_2 = det[x_1 x_2 ; y_1 y_2] = x_1y_2-x_2y_1 \\] <p>\u53c9\u79ef\u7684\u51e0\u4f55\u610f\u4e49\u662f \u7531\u70b9(0,0),p1,p2,p1+p2\u7ec4\u6210\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u6709\u5411\u9762\u79ef\u3002</p> <p>\u7ed3\u8bba</p> \\[   a = (p_1-p_0) \\times (p_2-p_0) \\] <p>\u5982\u679ca&gt;0,\u5219\\(p_0 \\longrightarrow p_1\\)\u4f4d\u4e8e \\(p_0 \\longrightarrow p_2\\)\u7684\u987a\u65f6\u9488\u65b9\u5411\uff0c\u5982\u679ca&lt;0,\u5219\u4f4d\u4e8e\u9006\u65f6\u9488\u65b9\u5411\u3002 </p>","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/#_3","title":"\u7ebf\u6bb5\u76f8\u4ea4","text":"","tags":["ACM"]},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E6%B3%95/","title":"\u8d2a\u5fc3\u7b97\u6cd5","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2/","title":"\u9012\u5f52\u641c\u7d22","text":"<p>\u8bb0\u5f55\u4e00\u4e9b\u5178\u578b\u9898\u76ee\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%90%9C%E7%B4%A2/#_2","title":"\u9012\u5f52\u641c\u7d22\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u4e2d\u7b49 39. \u7ec4\u5408\u603b\u548c \u4e2d\u7b49 40. \u7ec4\u5408\u603b\u548c II \u4e2d\u7b49 131. \u5206\u5272\u56de\u6587\u4e32 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%B7%B1%E6%90%9C/","title":"\u9012\u5f52\u641c\u7d22","text":"<p>\u8bb0\u5f55\u4e00\u4e9b\u5178\u578b\u9898\u76ee\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92%E6%B7%B1%E6%90%9C/#_2","title":"\u9012\u5f52\u641c\u7d22\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u4e2d\u7b49 39. \u7ec4\u5408\u603b\u548c \u4e2d\u7b49 40. \u7ec4\u5408\u603b\u548c II \u4e2d\u7b49 131. \u5206\u5272\u56de\u6587\u4e32 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":"<p>\u94fe\u8868\u662f\u4e00\u79cd\u7528\u6307\u9488\u4e32\u8054\u8d77\u6765\u7684\u987a\u5e8f\u7ed3\u6784\uff0c\u4e3b\u8981\u4f18\u70b9\u662f\u589e\u5220\u5feb\uff0c\u4e3b\u8981\u7f3a\u70b9\u662f\u65e0\u6cd5\u5411\u6570\u7ec4\u90a3\u6837\u5feb\u901f\u53d6\u51fa\u67d0\u4e2a\u5143\u7d20\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/#_2","title":"\u94fe\u8868\u76f8\u5173\u7684\u4e60\u9898","text":"LeetCode\u9898\u76ee \u96be\u5ea6 23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u4e2d\u7b49 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u4e2d\u7b49 25. K \u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u56f0\u96be 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II \u4e2d\u7b49 83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u7b80\u5355 138. \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/","title":"\u961f\u5217","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/#_2","title":"\u961f\u5217\u8868\u793a","text":""},{"location":"%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/#_3","title":"\u961f\u5217\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 621. \u4efb\u52a1\u8c03\u5ea6\u5668 \u4e2d\u7b49 767. \u91cd\u6784\u5b57\u7b26\u4e32 \u4e2d\u7b49"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Aho-Corasick%E7%AE%97%E6%B3%95/","title":"Aho-Corasick \u7b97\u6cd5","text":"<p>\u5f53\u6a21\u5f0f\u4e32\u662f\u591a\u4e2a\u7684\u65f6\u5019\uff0c\u4f7f\u7528Aho-Corasick\u7b97\u6cd5\u3002</p> <p>\u53c2\u8003\u6587\u732e\uff1ahttps://www.geeksforgeeks.org/aho-corasick-algorithm-pattern-searching/?ref=rp</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/","title":"Boyer Moore","text":"<p>Boyer Moore \u7b97\u6cd5\u4ece\u6a21\u5f0f\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5339\u914d\uff1b Boyer Moore \u7b97\u6cd5\u9884\u5904\u7406\u6a21\u5f0f\u4e32\uff0c \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219 \u548c \u597d\u540e\u7f00\u89c4\u5219\uff0c\u6bcf\u6b21\u9009\u53d6\u4e24\u4e2a\u89c4\u5219\u4e2d\u5411\u540e\u79fb\u52a8\u8ddd\u79bb\u6700\u5927\u7684\u90a3\u4e2a\u3002 \u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219 \u548c \u597d\u540e\u7f00\u89c4\u5219\u4efb\u610f\u4e00\u4e2a\u4e5f\u53ef\u4ee5\u5b8c\u6210\u7b97\u6cd5\uff0c\u53ea\u662f\u6548\u7387\u53ef\u80fd\u7565\u4f4e\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/#_1","title":"\u574f\u5b57\u7b26\u89c4\u5219","text":"<p>\u8bbe\u6a21\u5f0f\u4e32P\uff0c \u8981\u641c\u7d22\u7684\u4e32\u4e3aS\uff0c \u5bf9\u5176S\u548cP\uff0c\u4eceP\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u79f0\u4e3a\u574f\u5b57\u7b26(\u5728S\u4e2d)\u3002</p> <ol> <li>\u5982\u679c\u574f\u5b57\u7b26\u5728P\u4e2d\uff0c \u79fb\u52a8P\u4f7f\u5f97P\u4e2d\u7684\u574f\u5b57\u7b26\u548cS\u4e2d\u7684\u574f\u5b57\u7b26\u5bf9\u5176\uff1b</li> <li>\u5982\u679c\u574f\u5b57\u7b26\u4e0d\u5728P\u4e2d\uff0c\u79fb\u52a8P\u5230\u574f\u5b57\u7b26\u7684\u4e0b\u4e00\u4f4d\u5f00\u59cb\u6bd4\u8f83\u3002(\u76f4\u63a5\u5411\u540e\u79fb\u52a8\u4e00\u4e2a|P|\u7684\u957f\u5ea6)</li> </ol> <pre><code>MAX_OF_CHARS = 256\n\ndef badCharHeuristic(string, size): \n    ''' \n    \u751f\u6210\u574f\u5b57\u7b26\u89c4\u5219, \u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6ca1\u6709\u51fa\u73b0\u7684\u8bbe\u7f6e\u4e3a -1\n    '''\n    badChar = [-1] * MAX_OF_CHARS \n\n    for i in range(size): \n        badChar[ ord(string[i]) ] = i\n\n    return badChar\n\ndef search(string, pattern): \n    ''' \n    \u53ea\u4f7f\u7528\u574f\u5b57\u7b26\u89c4\u5219\u7684Boyer Moore\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\n    '''\n    m = len(pattern) \n    n = len(string) \n\n    badChars = badCharHeuristic(pattern, m) \n\n    # s is shift of the pattern with respect to text \n    s = 0\n    while s &lt;= n - m: \n        # j \u6307\u5411 s \u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\n        j = m - 1\n        while j &gt;= 0 and pattern[j] == string[s + j]: \n            j -= 1\n\n        # \u5982\u679c j \u5c0f\u4e8e0\uff0c \u8868\u793a\u627e\u5230\u4e86\u4e00\u4e2a\u5339\u914d\uff0c\u8f93\u51fa\u7ed3\u679c\uff0c\u7ee7\u7eed\u67e5\u627e\u4e0b\u4e00\u4e2a\u5339\u914d\n        if j &lt; 0: \n            print(\"Pattern occur at shift = {}\".format(s)) \n\n            # \u5982\u679c s + m \u5c0f\u4e8e n, \u76f4\u63a5\u5bf9\u5176S\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n            if s + m &lt; n:\n                s += m - badChars[ ord(string[s + m]) ]\n            else:\n                s += 1\n        else: \n            # \u627e\u5230\u574f\u5b57\u7b26\uff0c\u76f4\u63a5\u79fb\u52a8\u5230\u574f\u5b57\u7b26\u540e\u9762\n            s += max(1, j - badChars[ ord(string[s + j]) ])\n\ntxt = \"ABAAABCD\"\npat = \"ABC\"\nsearch(txt, pat) \n</code></pre> <p>\u53c2\u8003\u6587\u732e\uff1ahttps://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Boyer%20Moore%E7%AE%97%E6%B3%95/#_2","title":"\u597d\u540e\u7f00\u89c4\u5219","text":"<p>S\u548cP\u5bf9\u5176\u6bd4\u8f83\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ece\u540e\u5411\u524d\u5339\u914d\u7684\u90e8\u5206\u53eb\u505a\u597d\u540e\u7f00\u3002\u4f8b\u5982</p> <pre><code>0123456789\nis simple\n  example\n</code></pre> <p>\u5176\u4e2d <code>mple</code> \u662f\u5339\u914d\u7684\u540e\u7f00\uff0c\u53eb\u505a\u597d\u540e\u7f00\u3002 <code>ple, le, e</code> \u4e5f\u662f\u597d\u540e\u7f00\u3002</p> <p>\u8bbe <code>p</code> \u8868\u793a\u5339\u914d\u7684\u6700\u5927\u7684\u597d\u540e\u7f00\u90e8\u5206\uff0c 1. \u5982\u679c <code>p</code> \u51fa\u73b0\u5728\u6a21\u5f0f\u4e32P\u4e2d\uff0c \u90a3\u4e48\u5c31\u5411\u540e\u79fb\u52a8\u5230\u5bf9\u5176<code>p</code> 2. \u5982\u679c <code>p</code> \u6ca1\u6709\u51fa\u73b0\u5230\u6a21\u5f0f\u4e32P\u4e2d\uff0c \u67e5\u627e <code>p</code> \u7684\u540e\u7f00\u662f\u5426\u662fP\u7684\u524d\u7f00\uff0c\u4e00\u65e6\u627e\u5230\uff0c\u5bf9\u5176\u524d\u7f00\u548c\u540e\u7f00 3. \u5982\u679c <code>p</code> \u7684\u540e\u7f00\u4e5f\u4e0d\u662fP\u7684\u524d\u7f00\uff0c\u76f4\u63a5\u79fb\u52a8|P|\u957f\u5ea6\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b21\u6bd4\u8f83</p> <p>\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a</p> <p><pre><code>0 1 2 3 4 5 6 7 8\nA B A A B A B A C\nC A B A B\n</code></pre> <code>AB</code>\u662f\u5339\u914d\u7684\u597d\u540e\u7f00\uff0c\u51fa\u73b0\u5728P\u4e2d\u76844\u4f4d\u7f6e\uff0c\u5411\u524d\u67e5\u627e\u53ef\u4ee5\u53d1\u73b02\u4f4d\u7f6e\u4e5f\u51fa\u73b0\u4e86<code>AB</code>, \u53ef\u4ee5\u76f4\u63a5\u628a\u4f4d\u7f6e2\u7684<code>AB</code>\u4e0e\u4f4d\u7f6e4\u7684\u5bf9\u5176\u3002</p> <pre><code>0 1 2 3 4 5 6 7 8\nA B A A B A B A C\n    C A B A B\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff1a</p> <pre><code>0 1 2 3 4 5 6 7 8\nA A B A B A B A C\nA B[B A B]\n</code></pre> <p><code>BAB</code> \u662f\u597d\u540e\u7f00\uff0c \u4f46\u662f\u5728P\u4e2d\u5411\u524d\u67e5\u627e\uff0c\u4e0d\u518d\u5305\u542b<code>BAB</code>, \u67e5\u627e <code>BAB</code>\u7684\u540e\u7f00<code>AB</code>, \u53d1\u73b0<code>AB</code> \u662f\u6a21\u5f0f\u4e32P\u7684\u524d\u7f00\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06P\u7684\u524d\u7f00<code>AB</code> \u548c\u597d\u540e\u7f00\u7684\u540e\u7f00<code>AB</code> \u5bf9\u9f50\u3002</p> <pre><code>0 1 2 3 4 5 6 7 8\nA A B A B A B A C\n     [A B]B A B\n</code></pre> <p>\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a</p> <pre><code>0 1 2 3 4 5 6 7 8 9\nA A C A B A B A C D\nC B A[A B]\n</code></pre> <p><code>AB</code>\u662f\u597d\u540e\u7f00\uff0c\u4f46\u662fP\u4e2d\u5411\u524d\u5bfb\u627e\u6ca1\u6709\u627e\u5230<code>AB</code>, <code>AB</code>\u7684\u540e\u7f00 <code>B</code> \u4e5f\u4e0d\u662fP\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u8fd9\u662f\u60c5\u51b53\uff0c\u76f4\u63a5\u79fb\u52a8\u6574\u4e2aP\u5230\u540e\u9762\u3002</p> <pre><code>0 1 2 3 4 5 6 7 8 9\nA A C A B A B A C D\n          C B A A B\n</code></pre> <pre><code># Python3 program for Boyer Moore Algorithm with \n# Good Suffix heuristic to find pattern in \n# given text string \n\n# preprocessing for strong good suffix rule \ndef preprocess_strong_suffix(shift, bpos, pat, m): \n\n    # m is the length of pattern \n    i = m \n    j = m + 1\n    bpos[i] = j \n\n    while i &gt; 0: \n\n        '''if character at position i-1 is \n        not equivalent to character at j-1, \n        then continue searching to right \n        of the pattern for border '''\n        while j &lt;= m and pat[i - 1] != pat[j - 1]: \n\n            ''' the character preceding the occurrence \n            of t in pattern P is different than the \n            mismatching character in P, we stop skipping \n            the occurrences and shift the pattern \n            from i to j '''\n            if shift[j] == 0: \n                shift[j] = j - i \n\n            # Update the position of next border \n            j = bpos[j] \n\n        ''' p[i-1] matched with p[j-1], border is found. \n        store the beginning position of border '''\n        i -= 1\n        j -= 1\n        bpos[i] = j \n\n# Preprocessing for case 2 \ndef preprocess_case2(shift, bpos, pat, m): \n    j = bpos[0] \n    for i in range(m + 1): \n\n        ''' set the border position of the first character \n        of the pattern to all indices in array shift \n        having shift[i] = 0 '''\n        if shift[i] == 0: \n            shift[i] = j \n\n        ''' suffix becomes shorter than bpos[0], \n        use the position of next widest border \n        as value of j '''\n        if i == j: \n            j = bpos[j] \n\n'''Search for a pattern in given text using \nBoyer Moore algorithm with Good suffix rule '''\ndef search(text, pat): \n\n    # s is shift of the pattern with respect to text \n    s = 0\n    m = len(pat) \n    n = len(text) \n\n    bpos = [0] * (m + 1) \n\n    # initialize all occurrence of shift to 0 \n    shift = [0] * (m + 1) \n\n    # do preprocessing \n    preprocess_strong_suffix(shift, bpos, pat, m) \n    preprocess_case2(shift, bpos, pat, m) \n\n    while s &lt;= n - m: \n        j = m - 1\n\n        ''' Keep reducing index j of pattern while characters of \n            pattern and text are matching at this shift s'''\n        while j &gt;= 0 and pat[j] == text[s + j]: \n            j -= 1\n\n        ''' If the pattern is present at the current shift, \n            then index j will become -1 after the above loop '''\n        if j &lt; 0: \n            print(\"pattern occurs at shift = %d\" % s) \n            s += shift[0] \n        else: \n\n            '''pat[i] != pat[s+j] so shift the pattern \n            shift[j+1] times '''\n            s += shift[j + 1] \n\n# Driver Code \nif __name__ == \"__main__\": \n    text = \"ABAAAABAACD\"\n    pat = \"ABA\"\n    search(text, pat) \n\n# This code is contributed by \n# sanjeev2552 \n</code></pre> <p>\u53c2\u8003\u6587\u732e: </p> <ol> <li>https://www.geeksforgeeks.org/boyer-moore-algorithm-good-suffix-heuristic/</li> <li>http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html</li> </ol>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/KMP%E7%AE%97%E6%B3%95/","title":"KMP \u7b97\u6cd5","text":"<p>\u8bbe\u6709\u5b57\u7b26\u4e32T\uff0c\u6a21\u5f0f\u4e32P\uff0c\u8981\u4eceT\u4e2d\u627e\u51faP\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u9010\u4e2a\u6bd4\u8f83T\u548cP\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u76f8\u540c\uff0c\u5c31\u6bd4\u8f83T\u548cP\u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26\uff0c\u4e00\u65e6\u5339\u914d\u5931\u8d25\uff0cT\u540e\u79fb\u4e00\u4e2a\u5b57\u7b26\u91cd\u65b0\u5f00\u59cb\u4e0eP\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6bd4\u8f83\u3002\u4f46\u662f\u8fd9\u6837\u7684\u65b9\u6cd5\u5982\u679c\u9047\u5230\u7279\u522b\"\u5201\u94bb\"\u7684T\u548cP\u7684\u7ec4\u5408\uff0c\u5c31\u4f1a\u6d6a\u8d39\u5f88\u591a\u6bd4\u8f83\u7684\u65f6\u95f4\uff0c\u4f8b\u5982\uff0c\u6bcf\u6b21\u90fd\u662f\u6bd4\u8f83\u5230P\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u624d\u4e0d\u5339\u914d\u3002KMP\u7b97\u6cd5\u5c31\u662f\u4e3a\u4e86\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6bd4\u8f83\uff0c\u4f7f\u5f97\u6bcf\u6b21\u6bd4\u8f83\u4e0d\u6210\u529f\u7684\u65f6\u5019\uff0cP\u53ef\u4ee5\u5411\u540e\u79fb\u52a8\u5c3d\u53ef\u80fd\u8fdc\u7684\u8ddd\u79bb\u3002</p> <p>\u6bcf\u6b21\u5931\u8d25\u540e\u8981\u5411\u540e\u79fb\u52a8\u591a\u5c11\u5462\uff1f\u8fd9\u4e2a\u7531P\u7684next\u6570\u7ec4\u51b3\u5b9a\u3002next\u6570\u7ec4\u662f\u4e00\u4e2a\u4e0eP\u7b49\u957f\uff0c\u53ea\u4e0e\u6a21\u5f0f\u4e32P\u6709\u5173\u7cfb\uff0c\u800c\u4e0eT\u6ca1\u6709\u5173\u7cfb\u7684\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u3002\u5b83\u7684\u503c\u8868\u793a\u5f53\u524d\u8fd9\u4e2a\u5b57\u7b26\u6bd4\u8f83\u5931\u8d25\u540e\uff0c\u6a21\u5f0f\u4e32\u5411\u540e\u79fb\u52a8\u7684\u8ddd\u79bb\u3002</p> <p>next\u6570\u7ec4\u5982\u4f55\u6c42\u89e3\u5462\uff1f P\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684next\u6570\u7ec4\u7684\u503c\uff0c\u7b49\u4e8e\u4eceP\u5f00\u59cb\u5230\u5b83\u6240\u5bf9\u5e94\u7684\u524d\u7f00\u548c\u540e\u7f00\u7684\u5171\u6709\u5143\u7d20\u7684\u957f\u5ea6\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0cP=\"ABCDABD\"</p> <p>\"A\"\u7684\u524d\u7f00\u548c\u540e\u7f00\u90fd\u662f0\uff0c\u5171\u6709\u7684\u957f\u5ea6\u4e5f\u662f0\uff1b</p> <p>\"AB\"\u7684\u524d\u7f00\u662f\"A\",\u540e\u7f00\u662f\"B\",\u5171\u6709\u7684\u957f\u5ea6\u662f0\uff1b</p> <p>\"ABC\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\u540e\u7f00\u662f\"C\",\"BC\",\u5171\u6709\u7684\u957f\u5ea6\u4e3a0\uff1b</p> <p>\"ABCD\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\"ABC\",\u540e\u7f00\u662f\"D\",\"CD\",\"BCD\",\u5171\u6709\u7684\u957f\u5ea6\u4e3a0\uff1b</p> <p>\"ABCDA\"\u7684\u524d\u7f00\u662f\"A\",\"AB\",\"ABC\",\"ABCD\",\u540e\u7f00\u662f\"A\",\"DA\",\"CDA\",\"BCDA\",\u4e8c\u8005\u90fd\u6709A\uff0c\u6240\u6709\u5171\u6709\u7684\u957f\u5ea6\u662f1.</p> <p>\"ABCDAB\" \u5171\u6709\u7684\u957f\u5ea6\u4e3a2</p> <p>\"ABCDABD\" \u5171\u6709\u7684\u957f\u5ea6\u4e3a0.</p> <p>\u6240\u4ee5P\u7684next\u6570\u7ec4\u4e3a[0,0,0,0,1,2,0]. \u53ef\u4ee5\u770b\u5230\uff0c\u6c42\u89e3next\u6570\u7ec4\u7684\u8fc7\u7a0b\u8fd8\u662f\u5f88\u6e05\u6670\u7684\uff0c\u4f46\u662f\u8fd9\u4e2anext\u6570\u7ec4\u5e76\u4e0d\u662f\u771f\u6b63\u5728KMP\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684next\u6570\u7ec4\u3002\u4f46\u662fKMP\u7b97\u6cd5\u4e2d\u4f7f\u7528\u7684next\u6570\u7ec4\u53ef\u4ee5\u53ef\u5bb9\u6613\u7684\u7531\u8fd9\u4e2a\u6570\u7ec4\u751f\u6210\uff0c\u89c4\u5219\u662f\uff1a\u6240\u6709\u7684\u5143\u7d20\u53f3\u79fb\u4e00\u4f4d\u3002\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u4e22\u5f03\u4e0d\u8981\u4e86\uff0c\u6700\u5de6\u8fb9\u8865-1\uff0c\u8fd9\u6837\u65b0\u7684next\u6570\u7ec4\u4e3a[-1,0,0,0,0,1,2].</p> <p>\u76f4\u5230next\u6570\u7ec4\u7684\u503c\uff0cKMP\u7b97\u6cd5\u5176\u5b9e\u5c31\u7b97\u5b9e\u73b0\u4e86\uff0c\u63a5\u4e0b\u6765\u53ea\u9700\u8981\u5728\u6bcf\u6b21\u5339\u914d\u5931\u8d25\u7684\u65f6\u5019\uff0c\u6a21\u5f0f\u4e32\u5411\u53f3\u79fb\u52a8\u7684\u4f4d\u6570\u662f\uff1a \u5931\u914d\u5b57\u7b26\u6240\u5728\u7684\u4f4d\u7f6e-\u5931\u914d\u5b57\u7b26\u5bf9\u5e94\u7684next\u6570\u7ec4\u7684\u503c\u3002</p> <p>\u6c42\u89e3next\u6570\u7ec4\u7684\u4ee3\u7801\uff1a</p> <pre><code>/**\n *  \u6c42\u89e3\u6a21\u5f0f\u4e32\u7684next\u6570\u7ec4\n * @param p\n * @return\n */\nvector&lt;int&gt; GetNext(string p)\n{\n    int pLen = p.size();\n    vector&lt;int&gt; next(pLen,0);\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j &lt; pLen - 1)\n    {\n        //p[k]\u8868\u793a\u524d\u7f00\uff0cp[j]\u8868\u793a\u540e\u7f00\n        if (k == -1 || p[j] == p[k])\n        {\n            ++k;\n            ++j;\n            next[j] = k;\n        }\n        else\n        {\n            k = next[k];\n        }\n    }\n    return next;\n}\n</code></pre> <p>\u6b64\u65b9\u6cd5\u6c42\u89e3next\u6570\u7ec4\u5176\u5b9e\u5e76\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u8fd8\u6709\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u6bd4\u8f83\uff0c\u5177\u4f53\u7684\u5b9e\u4f8b\u53ef\u4ee5\u53c2\u8003http://blog.csdn.net/v_july_v/article/details/7041827, \u4f18\u5316\u540e\u7684next\u6570\u7ec4\u6c42\u89e3\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u4e00\u6b65\u51cf\u5c11\u6bd4\u8f83\u7684\u6b21\u6570\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f1a\u66f4\u4e0d\u5bb9\u6613\u7406\u89e3\u3002</p> <p><pre><code>vector&lt;int&gt; OGetNext(string p)\n{\n    int pLen = p.size();\n    vector&lt;int&gt; next(pLen,0);\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j &lt; pLen - 1)\n    {\n        //p[k]\u8868\u793a\u524d\u7f00\uff0cp[j]\u8868\u793a\u540e\u7f00\n        if (k == -1 || p[j] == p[k])\n        {\n            ++j;\n            ++k;\n            //\u8f83\u4e4b\u524dnext\u6570\u7ec4\u6c42\u6cd5\uff0c\u6539\u52a8\u5728\u4e0b\u97624\u884c\n            if (p[j] != p[k])\n                next[j] = k;   //\u4e4b\u524d\u53ea\u6709\u8fd9\u4e00\u884c\n            else\n                //\u56e0\u4e3a\u4e0d\u80fd\u51fa\u73b0p[j] = p[ next[j ]]\uff0c\u6240\u4ee5\u5f53\u51fa\u73b0\u65f6\u9700\u8981\u7ee7\u7eed\u9012\u5f52\uff0ck = next[k] = next[next[k]]\n                next[j] = next[k];\n        }\n        else\n        {\n            k = next[k];\n        }\n    }\n    return next;\n}\n</code></pre> \u4f7f\u7528next\u6570\u7ec4\u67e5\u627e\u6a21\u5f0f\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5e76\u8fd4\u56de\u7d22\u5f15\u7684\u51fd\u6570\uff0c\u4e0d\u5b58\u5728\u4f1a\u8fd4\u56de-1.</p> <pre><code>int KmpSearch(string &amp;s, string &amp;p)\n{\n    int i = 0;\n    int j = 0;\n    int sLen = s.size();\n    int pLen = p.size();\n    auto next = OGetNext(p);\n    while (i &lt; sLen &amp;&amp; j &lt; pLen)\n    {\n        //\u2460\u5982\u679cj = -1\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373S[i] == P[j]\uff09\uff0c\u90fd\u4ee4i++\uff0cj++\n        if (j == -1 || s[i] == p[j])\n        {\n            i++;\n            j++;\n        }\n        else\n        {\n            //\u2461\u5982\u679cj != -1\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u5339\u914d\u5931\u8d25\uff08\u5373S[i] != P[j]\uff09\uff0c\u5219\u4ee4 i \u4e0d\u53d8\uff0cj = next[j]\n            //next[j]\u5373\u4e3aj\u6240\u5bf9\u5e94\u7684next\u503c\n            j = next[j];\n        }\n    }\n    if (j == pLen)\n        return i - j;\n    else\n        return -1;\n}\n</code></pre> <p>\u4f7f\u7528next\u6570\u7ec4\u6bd4\u8f83\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6a21\u5f0f\u4e32\u5728S\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u7684\u51fd\u6570\u3002</p> <pre><code>int KmpSearch(string &amp;s, string &amp;p)\n{\n    int i = 0;\n    int j = 0;\n    int sLen = s.size();\n    int pLen = p.size();\n    auto next = OGetNext(p);\n    int count = 0;\n    while(i&lt;sLen){\n        while (i &lt; sLen &amp;&amp; j &lt; pLen)\n        {\n            //\u2460\u5982\u679cj = -1\uff0c\u6216\u8005\u5f53\u524d\u5b57\u7b26\u5339\u914d\u6210\u529f\uff08\u5373S[i] == P[j]\uff09\uff0c\u90fd\u4ee4i++\uff0cj++\n            if (j == -1 || s[i] == p[j])\n            {\n                i++;\n                j++;\n            }\n            else\n            {\n                //\u2461\u5982\u679cj != -1\uff0c\u4e14\u5f53\u524d\u5b57\u7b26\u5339\u914d\u5931\u8d25\uff08\u5373S[i] != P[j]\uff09\uff0c\u5219\u4ee4 i \u4e0d\u53d8\uff0cj = next[j]\n                //next[j]\u5373\u4e3aj\u6240\u5bf9\u5e94\u7684next\u503c\n                j = next[j];\n            }\n        }\n        if (j == pLen){\n            count++;\n            j=0;\n        }\n    }\n    return count;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/","title":"Rabin-Karp \u7b97\u6cd5","text":"<p>Rabin Karp\u7b97\u6cd5\u6bd4\u8f83\u6a21\u5f0f\u4e32P \u548c \u5f85\u67e5\u627e\u4e32S \u4e2d\u6bcf\u4e2a\u4e0eP\u957f\u5ea6\u76f8\u540c\u7684\u5b57\u4e32\uff0c \u6bd4\u8f83\u7684\u65f6\u5019\u5148\u8ba1\u7b97\u5176\u54c8\u5e0c\u503c\uff0c\u5728\u6bd4\u8f83\u54c8\u5e0c\u503c\u662f\u5426\u4e00\u81f4\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/#_1","title":"\u54c8\u5e0c\u51fd\u6570","text":"<p>\u56e0\u4e3a\u8981\u8ba1\u7b97\u5f88\u591a\u6b21\u54c8\u5e0c\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u4ece\u5934\u5f00\u59cb\u8ba1\u7b97\uff0c\u590d\u6742\u5ea6\u4f1a\u5f88\u9ad8\uff0c\u6211\u4eec\u5e0c\u671b\u54c8\u5e0c\u51fd\u6570\u53ef\u4ee5\u6839\u636e\u4e0a\u4e00\u6b21\u7684\u7ed3\u679c\u548c\u672c\u6b21\u65b0\u589e\u7684\u5b57\u7b26\u548c\u5220\u9664\u7684\u5b57\u7b26\u5728 O(1) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u5f97\u51fa\uff0c\u8fd9\u6837\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u5b57\u6bcd\uff0c\u54c8\u5e0c\u503c\u90fd\u53ef\u4ee5\u5728O(1) \u7684\u65f6\u95f4\u5185\u5f97\u5230\u3002</p> <p>\u8bbe <code>d</code> \u8868\u793a\u5b57\u7b26\u7684\u79cd\u7c7b\uff0c d = 128 \u6216\u8005 d = 256 \u90fd\u53ef\u4ee5\u3002 \u5982\u679c\u67d0\u4e2a\u5e94\u7528\u573a\u666f\u4e2d\u5b57\u6bcd\u53ea\u6709<code>abcdef</code>, \u90a3\u4e48 <code>d = 6</code>. <code>p</code> \u8868\u793a\u6a21\u5f0f\u4e32P\u8ba1\u7b97\u5f97\u5230\u7684\u54c8\u5e0c\u503c\uff0c \u521d\u59cb\u5316 <code>p = 0</code>.</p> <p>\u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u7ec8\u8f6c\u6362\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u5bb9\u6613\u60f3\u5230\u7684\u529e\u6cd5\u5c31\u662f\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u6362\u6210\u5176\u5bf9\u5e94\u5927\u5c0f\u7684\u6570\u503c\uff0c\u7136\u540e\u504f\u79fb\u4e00\u4e2a\u503c\uff0c\u7d2f\u52a0\u3002 \u4f8b\u5982 <code>abc</code> \u8f6c\u6362\u6210\u6570\u5b57\u53ef\u4ee5\u662f <code>a * 100 + b * 10 + c = 10779</code>,  <code>cba</code> \u8f6c\u6210\u6570\u5b57\u53ef\u4ee5\u662f <code>c * 100 + b * 10 + a = 10977</code>. \u8fd9\u6837\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5bf9\u5e94\u552f\u4e00\u4e00\u4e2a\u6570\u503c\uff0c\u800c\u4e14\u6ed1\u52a8\u7684\u65f6\u5019\u4e0d\u7528\u91cd\u65b0\u8ba1\u7b97\uff0c\u53ea\u9700\u8981\u51cf\u53bb\u6ed1\u51fa\u7684\u5b57\u6bcd\uff0c\u52a0\u5165\u5212\u5165\u7684\u5b57\u6bcd\u5c31\u53ef\u4ee5\u3002 \u4f8b\u5982\uff0c <code>bcd</code> \u8f6c\u6362\u6210\u6570\u5b57\u662f <code>(10779 - a * 100) * 10 + d = 10890</code> \u4e0e\u76f4\u63a5\u8ba1\u7b97 <code>b*100 + c * 10 + d = 10890</code> \u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002</p> <p>\u4e0a\u8ff0\u54c8\u5e0c\u65b9\u6cd5\u5b8c\u5168\u6ee1\u8db3\u8981\u6c42\uff0c\u4f46\u662f\u5f53\u5b57\u7b26\u4e32\u53d8\u957f\u4e4b\u540e\uff0c\u6574\u6570\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u8d85\u8fc7\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u3002 \u6211\u4eec\u4f7f\u7528\u6a21\u8fd0\u7b97\u63a7\u5236\u6700\u7ec8\u5f97\u5230\u7684\u6574\u6570\u8303\u56f4\uff0c\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u5927\u7684\u7d20\u6570\u4f5c\u4e3a\u6a21\u3002\u8bbe\u6a21\u4e3a <code>q = 101</code>.</p> <p>\u6211\u4eec\u4f7f\u7528 <code>d</code> \u4f5c\u4e3a\u57fa\u6570\u4ee3\u66ff\u4e0a\u9762\u63d0\u5230\u7684 10\uff0c\u56e0\u4e3a\u5b57\u6bcd\u7684\u79cd\u7c7b\u53ef\u80fd\u8fdc\u5927\u4e8e10\uff0c\u4f7f\u752810\u53ea\u662f\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u4f7f\u7528 <code>d</code> \u624d\u80fd\u5206\u9694\u5f00\u6bcf\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\u3002</p> <p>\u7efc\u4e0a\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8ba1\u7b97\u6700\u7ec8\u54c8\u5e0c\u503c\u7684\u54c8\u5e0c\u51fd\u6570\u5c31\u662f\uff1a</p> <pre><code>d = 0\nfor i in range(len(pattern)):\n    p = (d * p + pattern[i]) % q\n</code></pre> <p>\u6ed1\u52a8\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u7c7b\u4f3c\u4e0a\u9762\u4ee510\u4e3a\u57fa\u6570\u4e3e\u4f8b\u7684\u65f6\u5019\uff0c\u5148\u51cf\u53bb\u6700\u9ad8\u4f4d\uff0c\u518d \u4e58\u4ee5 <code>d</code>, \u7136\u540e\u52a0\u4e0a\u6ed1\u5165\u7684\u6700\u4f4e\u4f4d\u3002 \u6700\u9ad8\u4f4d\u6570\u503c <code>h = d ^ (M - 1)</code>, \u5176\u4e2d <code>M = len(pattern)</code>.</p> <pre><code>t = 0\nfor i in range(len(pattern)):\n    t = (d * t + text[i]) % q\n\ni = 0\n# \u5411\u540e\u6ed1\u52a8\u4e00\u4e2a\u5b57\u7b26\uff0ctext[i] \u6ed1\u51fa\uff0c text[i + M] \u6ed1\u5165\uff0c \u65b0\u7684\u503c\u4e3a\nt = ( d * (t - ord(text[i]) * h) + ord(text[i+m]) ) % q\n</code></pre> <p>\u56e0\u4e3a\u6700\u7ec8\u7684\u54c8\u5e0c\u503c\u662f\u53d6\u6a21\u4e4b\u540e\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\u53ef\u4ee5\u4fdd\u8bc1\u539f\u5b57\u7b26\u4e32\u80af\u5b9a\u4e0d\u76f8\u7b49\uff0c\u4f46\u662f\u503c\u4e00\u6837\u7684\u65f6\u5019\u4e0d\u80fd\u4fdd\u8bc1\u539f\u5b57\u7b26\u4e32\u4e00\u5b9a\u76f8\u7b49\u3002 \u5f53\u9047\u5230\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u4e24\u4e2a\u4e32\u7684\u65f6\u5019\uff0c\u8fd8\u9700\u8981\u9010\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u770b\u662f\u5426\u76f8\u7b49\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Rabin-Karp%E7%AE%97%E6%B3%95/#_2","title":"\u7b97\u6cd5\u5b9e\u73b0","text":"<pre><code># Following program is the python implementation of \n# Rabin Karp Algorithm given in CLRS book \n\n# d is the number of characters in the input alphabet \nd = 256\n\n# pat -&gt; pattern \n# txt -&gt; text \n# q -&gt; A prime number \n\ndef search(pat, txt, q): \n    M = len(pat) \n    N = len(txt) \n    i = 0\n    j = 0\n    p = 0 # hash value for pattern \n    t = 0 # hash value for txt \n    h = 1\n\n    # The value of h would be \"pow(d, M-1)%q\" \n    for i in xrange(M-1): \n        h = (h*d)%q \n\n    # Calculate the hash value of pattern and first window \n    # of text \n    for i in xrange(M): \n        p = (d*p + ord(pat[i]))%q \n        t = (d*t + ord(txt[i]))%q \n\n    # Slide the pattern over text one by one \n    for i in xrange(N-M+1): \n        # Check the hash values of current window of text and \n        # pattern if the hash values match then only check \n        # for characters on by one \n        if p==t: \n            # Check for characters one by one \n            for j in xrange(M): \n                if txt[i+j] != pat[j]: \n                    break\n\n            j+=1\n            # if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1] \n            if j==M: \n                print \"Pattern found at index \" + str(i) \n\n        # Calculate hash value for next window of text: Remove \n        # leading digit, add trailing digit \n        if i &lt; N-M: \n            t = (d*(t-ord(txt[i])*h) + ord(txt[i+M]))%q \n\n            # We might get negative values of t, converting it to \n            # positive \n            if t &lt; 0: \n                t = t+q \n\n# Driver program to test the above function \ntxt = \"GEEKS FOR GEEKS\"\npat = \"GEEK\"\nq = 101 # A prime number \nsearch(pat,txt,q) \n\n# This code is contributed by Bhavya Jain \n</code></pre> <p>\u53c2\u8003\u6587\u732e\uff1ahttps://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/?ref=rp</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/","title":"Z \u7b97\u6cd5","text":"<p>Z \u7b97\u6cd5\u4e5f\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\uff0c\u548cKMP\u7b97\u6cd5\u4e00\u6837\uff0c\u4e5f\u662f\u9884\u5904\u7406\u6c42\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u5229\u7528\u6c42\u51fa\u7684\u6570\u7ec4\u52a0\u5feb\u79fb\u52a8\u3002 Z \u7b97\u6cd5\u9700\u8981\u9884\u5904\u7406\u6c42\u51faZ\u6570\u7ec4</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#z_1","title":"Z \u6570\u7ec4","text":"<p>Z \u6570\u7ec4\u4e2d\u7684\u5143\u7d20Z[i] \u8868\u793a\u4ece [i...n) \u7684\u5b50\u4e32\u4e2d\u662f [0...n) \u524d\u7f00\u7684\u957f\u5ea6\u3002</p> <pre><code>0 1 2 3 4 5 6\na a b a a c d  &lt;-- text\nx 1 0 2 1 0 0  &lt;-- Z Array\n</code></pre> <ul> <li>i = 1\u65f6\uff0c<code>abaacd</code> \u662f <code>aabaacd</code> \u524d\u7f00\u7684\u957f\u5ea6\u662f <code>a</code>, \u6240\u4ee5 Z[1] = 1</li> <li>i = 2\u65f6\uff0c<code>baacd</code> \u662f <code>aabaacd</code> \u524d\u7f00\u7684\u957f\u5ea6\u662f <code></code>,  \u6240\u4ee5 Z[2] = 0</li> <li>i = 3\u65f6\uff0c<code>aacd</code> \u662f <code>aabaacd</code> \u524d\u7f00\u7684\u957f\u5ea6\u662f <code>aa</code>,  \u6240\u4ee5 Z[3] = 2</li> <li>i = 4\u65f6\uff0c<code>acd</code> \u662f <code>aabaacd</code> \u524d\u7f00\u7684\u957f\u5ea6\u662f <code>a</code>,    \u6240\u4ee5 Z[4] = 1</li> <li>i = 5\u65f6\uff0c<code>cd</code> \u662f <code>aabaacd</code> \u524d\u7f00\u7684\u957f\u5ea6\u662f <code></code>,     \u6240\u4ee5 Z[5] = 0</li> <li>i = 6\u65f6\uff0c<code>d</code> \u662f <code>aabaacd</code> \u524d\u7f00\u7684\u957f\u5ea6\u662f <code></code>,      \u6240\u4ee5 Z[6] = 0</li> </ul> <p>\u5176\u4ed6\u4f8b\u5b50\u5e2e\u52a9\u52a0\u6df1\u7406\u89e3\uff1a</p> <pre><code>str  = \"aaaaaa\"\nZ[]  = {x, 5, 4, 3, 2, 1}\n\nstr = \"aabaacd\"\nZ[] = {x, 1, 0, 2, 1, 0, 0}\n\nstr = \"abababab\"\nZ[] = {x, 0, 6, 0, 4, 0, 2, 0}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#z_2","title":"\u5728\u641c\u7d22\u4e2d\u4f7f\u7528 Z \u6570\u7ec4","text":"<p>\u8bbe\u5f85\u641c\u7d22\u4e32\u4e3a<code>T</code>, \u6a21\u5f0f\u4e32\u4e3a<code>P</code>, <code>$</code>\u4e3a\u5728 <code>T</code> \u548c <code>P</code>\u4e2d\u90fd\u6ca1\u6709\u51fa\u73b0\u7684\u7279\u6b8a\u5b57\u7b26\uff0c \u6784\u9020\u65b0\u7684\u5b57\u7b26\u4e32<code>PT = P$T</code>, \u6c42\u89e3\u51fa<code>PT</code> \u7684 Z Array.</p> <pre><code>P = \"aab\"\nT = \"baabaa\"\n\n0 1 2 3 4 5 6 7 8 9\na a b $ b a a b a a  &lt;-- PT\nx 1 0 0 0 3 1 0 2 1  &lt;-- Z array\n          |\n          |\n          V\n          5  &lt;---------- match index       \n</code></pre> <p>\u5f53\u6c42\u89e3Z Array\u65f6\uff0c \u9047\u5230\u957f\u5ea6\u7b49\u4e8e\u6a21\u5f0f\u4e32<code>P</code>\u957f\u5ea6\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u7ed3\u679c\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#z_3","title":"Z \u6570\u7ec4\u6c42\u89e3\u65b9\u6cd5","text":"<p>\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528\u4e24\u91cd\u5faa\u73af\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u65f6 \\(O(n^2)\\).</p> <pre><code>def getZArray(array):\n    n = len(array)\n    zarray = [0] * n\n    for i in range(1, n):\n        s1 = 0\n        s2 = i\n        same = 0\n        while s2 &lt; n and array[s1] == array[s2]:\n            s1 += 1\n            s2 += 1\n            same += 1\n        zarray[i] = same\n    return zarray\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa Z Array, \u4ed4\u7ec6\u5206\u6790\u7b2c\u4e00\u79cd\u65b9\u6cd5\u5c31\u80fd\u53d1\u73b0\uff0c\u4ece\u524d\u5411\u540e\u8ba1\u7b97\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u8ba1\u7b97\u3002 \u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4[L, R] \u4f7f\u5f97 [L, R] \u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002</p> <ol> <li>\u521d\u59cb\u5316 L = 0, R = 0</li> <li>for i in range(1, n), <ul> <li>2.1 \u5982\u679c i &gt; R, \u5229\u7528\u65b9\u6cd5\u4e00\u4e2d\u7684\u65b9\u6cd5\u8ba1\u7b97\u51fa Z[i], \u540c\u65f6\u8bbe\u7f6eL = i, R = L + Z[i]</li> <li>2.2 \u5982\u679c i &lt;= R, k = i - L, i \u53f3\u8fb9\u7684\u5143\u7d20\u4e2a\u6570\u4e3a R - i + 1, \u5982\u679c Z[k] &lt; R - i + 1, \u8bf4\u660e Z[i] = Z[k], \u56e0\u4e3a[L, R]\u5df2\u7ecf\u662f\u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002   [L...i] == [0...k]</li> <li>2.3 \u5982\u679c  Z[k] &lt; R - i + 1\uff0c \u5229\u7528\u65b9\u6cd5\u4e00\u91cd\u65b0\u8ba1\u7b97Z[i], \u66f4\u65b0L\uff0c R\u3002</li> </ul> </li> </ol> <pre><code>def getZarr(string, z): \n    n = len(string) \n    l, r, k = 0, 0, 0\n    for i in range(1, n): \n        if i &gt; r: \n            l, r = i, i \n            while r &lt; n and string[r - l] == string[r]: \n                r += 1\n            z[i] = r - l \n            r -= 1\n        else: \n            k = i - l \n            if z[k] &lt; r - i + 1: \n                z[i] = z[k] \n            else: \n                l = i \n                while r &lt; n and string[r - l] == string[r]: \n                    r += 1\n                z[i] = r - l \n                r -= 1\n    return z\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/Z%E7%AE%97%E6%B3%95/#_1","title":"\u7b97\u6cd5\u5b9e\u73b0","text":"<pre><code># Python3 program that implements Z algorithm \n# for pattern searching \n\n# Fills Z array for given string str[] \ndef getZarr(string, z): \n    n = len(string) \n\n    # [L,R] make a window which matches \n    # with prefix of s \n    l, r, k = 0, 0, 0\n    for i in range(1, n): \n\n        # if i&gt;R nothing matches so we will calculate. \n        # Z[i] using naive way. \n        if i &gt; r: \n            l, r = i, i \n\n            # R-L = 0 in starting, so it will start \n            # checking from 0'th index. For example, \n            # for \"ababab\" and i = 1, the value of R \n            # remains 0 and Z[i] becomes 0. For string \n            # \"aaaaaa\" and i = 1, Z[i] and R become 5 \n            while r &lt; n and string[r - l] == string[r]: \n                r += 1\n            z[i] = r - l \n            r -= 1\n        else: \n\n            # k = i-L so k corresponds to number which \n            # matches in [L,R] interval. \n            k = i - l \n\n            # if Z[k] is less than remaining interval \n            # then Z[i] will be equal to Z[k]. \n            # For example, str = \"ababab\", i = 3, R = 5 \n            # and L = 2 \n            if z[k] &lt; r - i + 1: \n                z[i] = z[k] \n\n            # For example str = \"aaaaaa\" and i = 2, \n            # R is 5, L is 0 \n            else: \n\n                # else start from R and check manually \n                l = i \n                while r &lt; n and string[r - l] == string[r]: \n                    r += 1\n                z[i] = r - l \n                r -= 1\n\n# prints all occurrences of pattern \n# in text using Z algo \ndef search(text, pattern): \n\n    # Create concatenated string \"P$T\" \n    concat = pattern + \"$\" + text \n    l = len(concat) \n\n    # Construct Z array \n    z = [0] * l \n    getZarr(concat, z) \n\n    # now looping through Z array for matching condition \n    for i in range(l): \n\n        # if Z[i] (matched region) is equal to pattern \n        # length we got the pattern \n        if z[i] == len(pattern): \n            print(\"Pattern found at index\", \n                    i - len(pattern) - 1) \n\n# Driver Code \nif __name__ == \"__main__\": \n    text = \"GEEKS FOR GEEKS\"\n    pattern = \"GEEK\"\n    search(text, pattern) \n\n# This code is conributed by \n# sanjeev2552 \n</code></pre> <p>\u53c2\u8003\u6587\u732e\uff1ahttps://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/?ref=rp</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9C%B4%E7%B4%A0%E7%AE%97%E6%B3%95/","title":"\u6734\u7d20\u7b97\u6cd5","text":"<p>\u6734\u7d20\u7b97\u6cd5\u5c31\u662f\u9010\u4e2a\u5b57\u7b26\u6bd4\u8f83\uff0c\u4e00\u65e6\u9047\u5230\u4e0d\u540c\u7684\u5b57\u7b26\uff0c\u5411\u540e\u6574\u4f53\u6ed1\u52a8\u4e00\u4e2a\u5b57\u7b26\uff0c\u518d\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u6bd4\u8f83\u3002</p> <pre><code>def find(text, pattern):\n    n = len(text)\n    m = len(pattern)\n    for i in range(n - m + 1):\n        find = True\n        for j in range(m):\n            if pattern[j] != text[i + j]:\n                find = False\n                break\n        if find:\n            print(\"{0} occurs at index {1}.\".format(pattern, i))\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/","title":"\u6709\u9650\u81ea\u52a8\u673a","text":"<p>\u6709\u9650\u81ea\u52a8\u673a\u53ef\u4ee5\u8868\u793a\u5bf9\u4efb\u610f\u8f93\u5165\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u6848\u3002 \u6784\u9020\u6a21\u5f0f\u4e32 <code>P</code> \u7684\u6709\u9650\u81ea\u52a8\u673a\u3002 \u5728\u5f85\u67e5\u627e\u4e32 <code>T</code> \u4e0a\u8fd0\u884c\u72b6\u6001\u673a\u3002 \u5982\u679c\u6709\u63a5\u53d7\u7684\u60c5\u51b5\uff0c\u4ee3\u8868\u627e\u5230\u4e00\u4e2a\u89e3\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#_2","title":"\u81ea\u52a8\u673a\u7684\u6784\u9020","text":""},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#_3","title":"\u6734\u7d20\u65b9\u6cd5","text":"<p>\u8bbe <code>m = len(pattern)</code>, \u6a21\u5f0f\u4e32 <code>pattern</code> \u7684\u72b6\u6001\u673a\u5171\u6709 <code>m + 1</code> \u4e2a\u72b6\u6001\u3002 \u6a21\u5f0f\u4e32 <code>pattern</code> \u7684\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u6784\u9020\u65b9\u6cd5\u5982\u4e0b\uff1a</p> <ol> <li> <p><code>0</code> \u8868\u793a\u5f00\u59cb\u72b6\u6001\uff0c <code>m</code> \u8868\u793a\u63a5\u53d7\u72b6\u6001\uff0c 0 ~ m \u5171 m + 1\u4e2a\u72b6\u6001\uff0c \u5176\u4e2d\u7684\u95f4\u9694\u5206\u522b\u662f pattern[i]. \u4f8b\u5982 <code>0 --&gt; 1</code> \u7684\u7bad\u5934\u4e0a\u65b9\u5e94\u8be5\u662f pattern[0], \u8868\u793a\u72b6\u6001<code>0</code>\u9047\u5230\u8f93\u5165 pattern[0] \u7684\u65f6\u5019\u8f6c\u79fb\u5230\u72b6\u6001<code>1</code>, <code>m-1 --&gt; m</code> \u7684\u7bad\u5934\u4e0a\u65b9\u5e94\u8be5\u662f pattern[m-1], \u8868\u793a\u72b6\u6001<code>m-1</code>\u9047\u5230\u8f93\u5165 pattern[m-1] \u7684\u662f\u5076\u8f6c\u79fb\u72b6\u6001\u5230 <code>m</code>.</p> </li> <li> <p>\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u72b6\u6001<code>k</code>\u548c\u4efb\u610f\u4e00\u4e2a\u8f93\u5165\u5b57\u7b26<code>x</code>, \u6784\u9020\u5b57\u7b26\u4e32 <code>s = pattern[0...k-1]x</code>, \u6c42\u89e3s\u6700\u957f\u7684\u771f\u524d\u7f00\u548c\u771f\u540e\u7f00\uff0c \u65e2\u662f\u524d\u7f00\u4e5f\u662f\u540e\u7f00\u7684\u957f\u5ea6 <code>comm_length</code> \u5c31\u662f\u4e0b\u4e00\u4e2a\u5e94\u8be5\u8981\u8f6c\u79fb\u7684\u72b6\u6001\u3002</p> </li> </ol> <p>\u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(m^3) * 256\\).</p> <pre><code>CHARS_MAX = 256 # \u6a21\u5f0f\u4e32\u548c\u67e5\u627e\u4e32\u4e2d\u5b57\u7b26\u7684\u79cd\u7c7b\n\ndef get_next_state(pattern, state, x):\n    \"\"\"\n    state \u72b6\u6001\u9047\u5230\u5b57\u7b26 x \u4e4b\u540e\u5e94\u8be5\u8f6c\u79fb\u5230\u7684\u4e0b\u4e00\u4e2a\u72b6\u6001\n    pattern: string, \u6a21\u5f0f\u4e32\n    state: int, \u72b6\u6001\u7f16\u53f7\n    x: int, \u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u4f8b\u5982'a'\u5bf9\u5e9497\n    \"\"\"\n    m = len(pattern)\n    # \u5bf9\u5e94\u60c5\u51b51\uff0c\u5982\u679c\u6b63\u597d\u662f\u6a21\u5f0f\u4e32\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f4\u63a5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n    if state &lt; m and x == ord(pattern[state]):\n        return state + 1\n    # \u5bf9\u5e94\u60c5\u51b52\n    i = 0\n    for ns in range(state, 0, -1):\n         if ord(pattern[ns-1]) == x: \n            while(i &lt; ns - 1): \n                if pattern[i] != pattern[state-ns+1+i]: \n                    break\n                i+=1\n            if i == ns - 1: \n                return ns \n\ndef computeTF(pattern):\n    \"\"\"\n    \u8f93\u51fapattern\u7684\u72b6\u6001\u673aTF\n    \"\"\"\n    m = len(pattern)\n    TF = [[0 for i in range(CHARS_MAX)] for _ in range(m+1)] \n\n    for state in range(m+1): \n        for x in range(CHARS_MAX): \n            z = get_next_state(pattern, state, x) \n            TF[state][x] = z \n\n    return TF \n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#_4","title":"\u6548\u7387\u66f4\u9ad8\u7684\u65b9\u6cd5","text":"<p>\u5229\u7528KMP\u7b97\u6cd5\u4e2dnext\u6570\u7ec4\u4e2d\u5bfb\u627e\u516c\u5171\u524d\u7f00\u548c\u540e\u7f00\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u6784\u9020\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u8be5\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(m) * 256\\).</p> <pre><code>CHARS_MAX = 256 # \u6a21\u5f0f\u4e32\u548c\u67e5\u627e\u4e32\u4e2d\u5b57\u7b26\u7684\u79cd\u7c7b\ndef computeTF(pattern):\n    m = len(pattern)\n    TF = [[0 for i in range(CHARS_MAX)] for _ in range(m+1)] \n\n    # \u72b6\u60010\u521d\u59cb\u5316\u4e3a\u51680\n    for j in range(CHARS_MAX):\n        TF[0][i] = 0\n\n    # \u72b6\u60010\u9047\u5230pattern[0]\u4e4b\u540e\u8f6c\u79fb\u5230\u72b6\u60011\n    TF[0][ ord(pattern[0]) ] = 1\n\n    lps = 0 # \u8868\u793a\u516c\u5171\u524d\u540e\u7f00\u7684\u957f\u5ea6\n    for i in range(1, m + 1):\n        for j in range(CHARS_MAX):\n            TF[i][j] = TF[lps][j]\n\n        # \u5bf9\u5e94\u60c5\u51b51\uff0c \u76f4\u63a5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001\n        TF[i][ ord(pattern[i]) ] = i + 1\n\n        # \u5bf9\u5e94\u60c5\u51b52\uff0c \u5904\u7406\u5176\u4ed6\u5b57\u7b26\u7684\u72b6\u6001\u8f6c\u79fb\n        if (i &lt; m):\n            lps = TF[lps][ ord(pattern[i]) ]\n\n    return TF\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E8%87%AA%E5%8A%A8%E6%9C%BA/#_5","title":"\u7b97\u6cd5\u5b9e\u73b0","text":"<p>\u5bf9\u4e8e\u4efb\u610f\u7684 <code>pattern</code>, \u6211\u4eec\u90fd\u53ef\u4ee5\u6784\u9020\u5b83\u7684\u6709\u9650\u81ea\u52a8\u673a\uff0c\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u4e8c\u4f4d\u6570\u7ec4\uff0c \u884c\u4ee3\u8868\u72b6\u6001\uff0c \u5217\u4ee3\u8868\u8f93\u5165\u5b57\u7b26\u3002 \u641c\u7d22\u5f85\u67e5\u627e\u4e32 <code>text</code> \u7684\u65f6\u5019\uff0c \u4ece\u72b6\u60010\u5f00\u59cb\uff0c\u4f9d\u6b21\u8bfb\u5165<code>text[i]</code>, \u5982\u679c\u67d0\u6b21\u8bfb\u5165\u8f6c\u79fb\u5230\u4e86\u63a5\u53d7\u72b6\u6001\uff0c\u8bf4\u660e\u5339\u914d\u5230\u4e00\u4e2a\u7ed3\u679c\uff0c\u8bb0\u5f55\u8f93\u51fa\u3002</p> <pre><code># Python program for Finite Automata \n# Pattern searching Algorithm \n\nNO_OF_CHARS = 256\n\ndef getNextState(pat, M, state, x): \n    ''' \n    calculate the next state \n    '''\n\n    # If the character c is same as next character \n    # in pattern, then simply increment state \n\n    if state &lt; M and x == ord(pat[state]): \n        return state+1\n\n    i=0\n    # ns stores the result which is next state \n\n    # ns finally contains the longest prefix \n    # which is also suffix in \"pat[0..state-1]c\" \n\n    # Start from the largest possible value and \n    # stop when you find a prefix which is also suffix \n    for ns in range(state,0,-1): \n        if ord(pat[ns-1]) == x: \n            while(i&lt;ns-1): \n                if pat[i] != pat[state-ns+1+i]: \n                    break\n                i+=1\n            if i == ns-1: \n                return ns \n    return 0\n\ndef computeTF(pat, M): \n    ''' \n    This function builds the TF table which \n    represents Finite Automata for a given pattern \n    '''\n    global NO_OF_CHARS \n\n    TF = [[0 for i in range(NO_OF_CHARS)]\\ \n        for _ in range(M+1)] \n\n    for state in range(M+1): \n        for x in range(NO_OF_CHARS): \n            z = getNextState(pat, M, state, x) \n            TF[state][x] = z \n\n    return TF \n\ndef search(pat, txt): \n    ''' \n    Prints all occurrences of pat in txt \n    '''\n    global NO_OF_CHARS \n    M = len(pat) \n    N = len(txt) \n    TF = computeTF(pat, M)   \n\n    # Process txt over FA. \n    state=0\n    for i in range(N): \n        state = TF[state][ord(txt[i])] \n        if state == M: \n            print(\"Pattern found at index: {}\".\\ \n                format(i-M+1)) \n\n# Driver program to test above function          \ndef main(): \n    txt = \"AABAACAADAABAAABAA\"\n    pat = \"AABA\"\n    search(pat, txt) \n\nif __name__ == '__main__': \n    main() \n\n# This code is contributed by Atul Kumar \n</code></pre> <p>\u53c2\u8003\u6587\u732e\uff1ahttps://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/</p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","title":"\u5f52\u5e76\u6392\u5e8f","text":"<p>\u5f52\u5e76\u6392\u5e8f\u5c31\u662f\u5c06\u539f\u6765\u7684\u6570\u7ec4\u4e00\u76f4\u4e8c\u5206\uff0c\u76f4\u5230\u6bcf\u7ec4\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c \u4e00\u4e2a\u5143\u7d20\u80af\u5b9a\u662f\u6709\u5e8f\u7684\uff0c \u5269\u4e0b\u7684\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u5f52\u5e76\u6392\u5e8f\u7684\u5173\u952e\u662f\u5b9e\u73b0\u5f52\u5e76\u7684\u64cd\u4f5c\u3002</p> <p>\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c \u548c\u5408\u5e762\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c \u6216\u8005\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868\u662f\u4e00\u6837\u7684\uff0c \u9700\u8981 O(n) \u7684\u590d\u6742\u5ea6\u3002 \u4e8c\u5206\u9700\u8981 logn \u7684\u65f6\u95f4\uff0c \u6240\u4ee5\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f nlogn.</p> <p>\u5f52\u5e76\u6392\u5e8f\u662f\u5206\u6cbb\u6cd5\u601d\u60f3\u7684\u5178\u578b\u5e94\u7528\u3002\u5f52\u5e76\u6392\u5e8f\u8981\u5904\u7406\u597d\u4e24\u4ef6\u4e8b\uff0c\u5212\u5206\u548c\u5408\u5e76\u3002\u5212\u5206\u5c31\u662f\u5c06\u5f85\u6392\u5e8f\u5e8f\u5217\u5212\u5206\u6210\u5b50\u5e8f\u5217\u3002\u5408\u5e76\u5c31\u662f\u5982\u4f55\u5c06\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u4e3a\u4e00\u4e2a\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u5f52\u5e76\u7684\u6392\u5e8f\u7684\u601d\u60f3\u662f\uff1a\u9996\u5148\u628a\u539f\u6765\u5e8f\u5217\u5212\u5206\u6210n\u4e2a\u5b50\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5b50\u5e8f\u5217\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5b50\u5e8f\u5217\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u6709\u5e8f\u7684\u3002\u7136\u540e\u5206\u522b\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u4f7f\u5408\u5e76\u4e4b\u540e\u7684\u5e8f\u5217\u4fdd\u6301\u6709\u5e8f\u3002\u8fd9\u6837\uff0c\u4e00\u8d9f\u5f52\u5e76\u4e4b\u540e\u5b50\u5e8f\u5217\u51cf\u5c11\u4e8c\u5206\u4e4b\u4e00\uff0c\u76f4\u5230\u6700\u540e\u5f52\u5e76\u4e3a\u4e00\u4e2a\u5e8f\u5217\u4e3a\u6b62\u3002</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_2","title":"\u5b9e\u73b0\u4ee3\u7801","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#c","title":"C \u5b9e\u73b0","text":"<pre><code>// \u4e24\u4e2a\u6307\u9488\u9010\u4e2a\u6bd4\u8f83\u5408\u5e76\u4e24\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\nvoid merge(int *arr, int begin, int mid, int end)\n{\n    int i = begin, j = mid + 1;\n    int count = end - start + 1;\n    int index = 0;\n    int *tmp_arr = (int*)malloc(sizeof(int) *(end - begin + 1));\n    while (index &lt; count) {\n        if (i &lt;= mid &amp;&amp; j &lt;= end &amp;&amp; arr[i] &gt;= arr[j]) {\n            tmp_arr[index++] = arr[j++];\n        } else if (i &lt;= mid &amp;&amp; j &lt;= end &amp;&amp; arr[i] &lt; arr[j]) {\n            tmp_arr[index++] = arr[i++];\n        }\n    }\n    index = 0;\n    for (int i = begin; i &lt;= end; i++) {\n        arr[i] = tmp_arr[index++];\n    }\n    free(tmp_arr);\n    return;\n}\nvoid merge_sort(int *arr, int begin, int end)\n{\n    if (begin &gt;= end) {\n        return;\n    }\n    int mid = (begin + end) / 2;\n    merge_sort(arr, begin, mid);\n    merge_sort(arr, mid + 1, end);\n    merge(arr, begin, mid, end);\n    return;\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#c_1","title":"C++ \u5b9e\u73b0","text":"<p><pre><code>void print(vector&lt;int&gt; v){\n    for(auto a:v){\n        cout&lt;&lt;a&lt;&lt;\" \";\n    }\n    cout&lt;&lt;\" | \";\n}\n\n//\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4,\u8fd4\u56de\u65b0\u7684\u6709\u5e8f\u7684\u6570\u7ec4\nvector&lt;int&gt; merge(vector&lt;int&gt; &amp;v1,vector&lt;int&gt; &amp;v2){\n    vector&lt;int&gt; re;\n    size_t i=0,j=0;\n    while(i&lt;v1.size() &amp;&amp; j&lt;v2.size()){\n        if(v1[i] &lt;= v2[j]){\n            re.push_back(v1[i]);\n            i++;\n        }else{\n            re.push_back(v2[j]);\n            j++;\n        }\n    }\n    //\u628a\u5269\u4e0b\u7684\u653e\u5728\u6700\u540e\n    for(size_t a = i;a&lt;v1.size();a++){\n        re.push_back(v1[a]);\n    }\n    for(size_t a=j;a&lt;v2.size();a++){\n        re.push_back(v2[a]);\n    }\n    return re;\n}\n\n//\u5f52\u5e76\u6392\u5e8f\u7684\u975e\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; mergeSort2(vector&lt;int&gt; &amp;v){\n    vector&lt;vector&lt;int&gt;&gt; group;\n    // \u4e00\u5f00\u59cb\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u5355\u72ec\u4e3a\u4e00\u7ec4\uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u7684\u5408\u5e76\u76f8\u90bb\u7684\u7ec4\uff0c\u76f4\u5230\u6700\u540e\u53ea\u5269\u4e0b\u4e00\u7ec4\u3002\n    for(int i=0;i&lt;v.size();i++) {\n        group.push_back({v[i]});\n    }\n    int group_end = group.size(); // \u6307\u793a\u7ed3\u679c\uff0c\u6bcf\u6b21\u5f52\u5e76\uff0c\u90fd\u662f\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u7ec4\u6570\u636e\uff0c\u6240\u4ee5group\u7684\u5143\u7d20\u4e2a\u6570\u6bcf\u6b21\u90fd\u51cf\u5c11\u4e00\u534a\uff0c\u4e3a\u4e86\u51cf\u5c11\u5f00\u9500\uff0c\n    //\u6211\u4eec\u6bcf\u6b21\u5408\u5e76\u4e4b\u540e\u7684\u6570\u7ec4\u8fd8\u662f\u653e\u5728\u539f\u6765\u7684\u6570\u7ec4\u4e2d\uff0c\u7528group\u6307\u793a\u6570\u7ec4\u7684\u7ed3\u675f\u3002\n    //\u5f53group_end = 1\u7684\u65f6\u5019\uff0c\u6240\u6709\u7684\u6570\u7ec4\u5df2\u7ecf\u5f52\u5e76\u5230\u4e00\u8d77\u4e86\n    while(group_end &gt; 1){\n        for(size_t b=0;b&lt;group_end;b++){\n            print(group[b]);\n        }\n        cout&lt;&lt;endl;\n\n        int j = 0;\n        while(j+1&lt;group.size()){\n            group[j/2]  = merge(group[j],group[j+1]);\n            j = j + 2;\n        }\n        // \u4e2a\u6570\u662f\u5947\u6570\u7684\u60c5\u51b5\n        if(j == group_end -1 ){\n            group[ceil(group_end / 2.0)-1] = group[group_end-1];\n        }\n        group_end = ceil(group_end / 2.0);\n    }\n    print(group[0]);\n    return group[0];\n}\n\nint main() {\n    vector&lt;int&gt; v = {49,38,65,97,76,13,27};\n    auto a = mergeSort2(v);\n    return 0;\n}\n</code></pre> \u8fd0\u884c\u7ed3\u679c:</p> <pre><code>49  | 38  | 65  | 97  | 76  | 13  | 27  |\n38 49  | 65 97  | 13 76  | 27  |\n38 49 65 97  | 13 27 76  |\n13 27 38 49 65 76 97  |\n</code></pre> <p>\u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0\u65b9\u6cd5 \uff1a</p> <pre><code>//  \u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; mergeSort(vector&lt;int&gt; &amp;v,int start,int end){\n    if(start &gt;= end){\n        return {v[start]};\n    }\n    int mid = (start + end) / 2;\n    auto v1 = mergeSort(v,start,mid); // \u9012\u5f52\u5de6\u534a\u90e8\u5206\u7684\u6392\u5e8f\n    auto v2 = mergeSort(v,mid+1,end); // \u9012\u5f52\u53f3\u534a\u90e8\u5206\u7684\u6392\u5e8f\n    return merge(v1,v2);\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_3","title":"\u5e94\u7528","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_4","title":"\u7edf\u8ba1\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9","text":"<p>\u5f52\u5e76\u6392\u5e8f\u662f\u4e00\u79cd\u7a33\u5b9a\u7684\u6392\u5e8f\uff08\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u65f6\u5019\u662f\u7a33\u5b9a\u7684\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6765\u6c42\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u8fd9\u6837\u7684\u95ee\u9898\u3002</p> <p>\u5f52\u5e76\u6392\u5e8f\u662f\u5c06\u6570\u5217a[l,h]\u5206\u6210\u4e24\u534aa[l,mid]\u548ca[mid+1,h]\u5206\u522b\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f\uff0c\u7136\u540e\u518d\u5c06\u8fd9\u4e24\u534a\u5408\u5e76\u8d77\u6765\u3002 \u5728\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff08\u8bbe<code>l&lt;=i&lt;=mid\uff0cmid+1&lt;=j&lt;=h</code>\uff09\uff0c\u5f53a[i]&lt;=a[j]\u65f6\uff0c\u5e76\u4e0d\u4ea7\u751f\u9006\u5e8f\u6570\uff1b\u5f53a[i]&gt;a[j]\u65f6\uff0c\u5728 \u524d\u534a\u90e8\u5206\u4e2d\u6bd4a[i]\u5927\u7684\u6570\u90fd\u6bd4a[j]\u5927\uff0c\u5c06a[j]\u653e\u5728a[i]\u524d\u9762\u7684\u8bdd\uff0c\u9006\u5e8f\u6570\u8981\u52a0\u4e0a<code>mid-i+1</code>\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5728\u5f52\u5e76 \u6392\u5e8f\u4e2d\u7684\u5408\u5e76\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u9006\u5e8f\u6570.</p> <pre><code>//\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4,\u8fd4\u56de\u65b0\u7684\u6709\u5e8f\u7684\u6570\u7ec4\nvector&lt;int&gt; merge(vector&lt;int&gt; &amp;v1,vector&lt;int&gt; &amp;v2,int &amp;cc){\n    vector&lt;int&gt; re;\n    size_t i=0,j=0;\n    while(i&lt;v1.size() &amp;&amp; j&lt;v2.size()){\n        if(v1[i] &lt;= v2[j]){\n            re.push_back(v1[i]);\n            i++;\n        }else{\n            re.push_back(v2[j]);\n            cc = cc + v1.size() -  i; //\u589e\u52a0\u7edf\u8ba1\u9006\u5e8f\u5bf9\u7684\u529f\u80fd\uff0c\u4ee5\u4f20\u9012\u5f15\u7528\u7684\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\uff0c\u6ce8\u610f\u4f20\u5165\u7684\u53c2\u6570\u7684\u521d\u59cb\u503c\u8981\u4e3a0\uff1b\n            j++;\n        }\n    }\n    //\u628a\u5269\u4e0b\u7684\u653e\u5728\u6700\u540e\n    for(size_t a = i;a&lt;v1.size();a++){\n        re.push_back(v1[a]);\n    }\n    for(size_t a=j;a&lt;v2.size();a++){\n        re.push_back(v2[a]);\n    }\n    return re;\n}\n\n//\u5f52\u5e76\u6392\u5e8f\u7684\u9012\u5f52\u5b9e\u73b0\nvector&lt;int&gt; mergeSort(vector&lt;int&gt; &amp;v,int start,int end,int &amp;cc){\n  if(start &gt;= end){\n      return {v[start]};\n  }\n  int mid = (start + end) / 2;\n  auto v1 = mergeSort(v,start,mid,cc); // \u9012\u5f52\u5de6\u534a\u90e8\u5206\u7684\u6392\u5e8f\n  auto v2 = mergeSort(v,mid+1,end,cc); // \u9012\u5f52\u53f3\u534a\u90e8\u5206\u7684\u6392\u5e8f\n  return merge(v1,v2,cc);\n}\n\n//\u4f7f\u7528\u7684\u4f7f\u7528\u5b9a\u4e49int cc = 0; \u4f20\u5165\u51fd\u6570\u5373\u53ef\u3002\n</code></pre> <p>\u7edf\u8ba1\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u4e0d\u8fc7\u5c31\u590d\u6742\u5ea6\u800c\u8a00\uff0c\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u5df2\u7ecf\u8db3\u591f\u4e86\u3002</p> <p>\u53e6\u5916\u4e00\u79cd\u5f52\u5e76\u6392\u5e8f\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5c3d\u91cf\u5c11\u7684\u5360\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002</p> <pre><code>void merge(vector&lt;int&gt; &amp;v,int s1,int e1, int s2, int e2){\n    vector&lt;int&gt; tmp;\n    int ss1 = s1, ss2 = s2;\n    while(s1&lt;=e1 &amp;&amp; s2 &lt;= e2){\n        if(v[s1] &lt; v[s2]){\n            tmp.push_back(v[s1]);\n            s1++;\n        }\n        if(v[s1] &gt;= v[s2]){\n            tmp.push_back(v[s2]);\n            s2++;\n        }\n    }\n    if(s1 &lt;= e1){\n        tmp.insert(tmp.end(),v.begin() + s1,v.begin() + e1+1);\n    }\n    if(s2 &lt;= e2){\n        tmp.insert(tmp.end(),v.begin() + s2,v.begin() + e2+1);\n    }\n    int t = 0;\n    for(int i=ss1;i&lt;=e1;i++){\n        v[i] = tmp[t];\n        t++;\n    }\n    for(int i = ss2;i&lt;=e2;i++){\n        v[i] = tmp[t];\n        t++;\n    }\n    tmp.clear();\n    return ;\n}\nvoid mergeSort(vector&lt;int&gt; &amp;v,int start,int end){\n    if(start &gt;= end) return;\n    int mid = (start+end) / 2;\n    mergeSort(v,start,mid);\n    mergeSort(v,mid+1,end);\n    merge(v,start,mid,mid+1,end);\n}\n</code></pre> <p>\u7edf\u8ba1\u9006\u5e8f\u5bf9</p> <p>\u5728\u5f52\u5e76\u6392\u5e8f\u5f52\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u662f\u7edf\u8ba1\u9006\u5e8f\u5bf9\u7684\u6700\u597d\u65f6\u673a\u3002\u5047\u8bbe\u4e24\u4e2a\u5f85\u5408\u5e76\u7684\u5e8f\u5217\u4e3a<code>v1</code>,<code>v2</code>, \u6709\u4e24\u4e2a\u6307\u9488<code>s1</code>,<code>s2</code>\u5206\u522b\u6307\u5411<code>v1</code>,<code>v2</code>,\u5f53<code>v1[s1] &gt; v2[s2]</code>\u7684\u65f6\u5019\uff0c<code>(v1.size() - s1)</code>, \u4e5f\u5c31\u662f\u4ece<code>s1</code>\u5230<code>v1</code>\u7684\u7ed3\u5c3e\u7684\u6240\u6709\u5143\u7d20\u90fd\u4f1a\u548c<code>v[s2]</code>\u7ec4\u6210\u9006\u5e8f\u5bf9\u3002</p> <pre><code>void merge(vector&lt;int&gt; &amp;v,int s1,int e1, int s2, int e2, int &amp;cc){\n    vector&lt;int&gt; tmp;\n    int ss1 = s1, ss2 = s2;\n    while(s1&lt;=e1 &amp;&amp; s2 &lt;= e2){\n        if(v[s1] &lt;= v[s2]){\n            tmp.push_back(v[s1]);\n            s1++;\n        }\n        if(v[s1] &gt; v[s2]){\n            tmp.push_back(v[s2]);\n            s2++;\n            cc += e1-s1+1; // \u8bb0\u5f55\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\n        }\n    }\n    if(s1 &lt;= e1){\n        tmp.insert(tmp.end(),v.begin() + s1,v.begin() + e1+1);\n    }\n    if(s2 &lt;= e2){\n        tmp.insert(tmp.end(),v.begin() + s2,v.begin() + e2+1);\n    }\n    int t = 0;\n    for(int i=ss1;i&lt;=e1;i++){\n        v[i] = tmp[t];\n        t++;\n    }\n    for(int i = ss2;i&lt;=e2;i++){\n        v[i] = tmp[t];\n        t++;\n    }\n    tmp.clear();\n    return ;\n}\nvoid mergeSort(vector&lt;int&gt; &amp;v,int start,int end,int &amp;cc){\n    if(start &gt;= end) return ;\n    int mid = (start+end) / 2;\n    mergeSort(v,start,mid,cc);\n    mergeSort(v,mid+1,end,cc);\n    merge(v,start,mid,mid+1,end,cc);\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_5","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570   \u56f0\u96be"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83/","title":"\u6392\u5e8f\u7b97\u6cd5\u6bd4\u8f83","text":"\u6392\u5e8f\u7b97\u6cd5 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u8f85\u52a9\u5185\u5b58 \u662f\u5426\u7a33\u5b9a \u76f4\u63a5\u63d2\u5165\u6392\u5e8f n^2 n^2 O(1) \u662f \u6298\u534a\u63d2\u5165\u6392\u5e8f n^2 n^2 O(1) \u662f \u5e0c\u5c14\u6392\u5e8f NA NA NA \u5426 \u5192\u6ce1\u6392\u5e8f n^2 n^2 O(1) \u662f \u7b80\u5355\u9009\u62e9\u6392\u5e8f n^2 n^2 O(1) \u5426 \u5feb\u901f\u6392\u5e8f nlogn n^2 O(1) \u5426 \u5806\u6392\u5e8f nlogn nlogn O(1) \u5426 \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f nlogn nlogn O(n) \u662f \u57fa\u6570\u6392\u5e8f d*(n + R) d * (n + R) O(R) \u662f \u6876\u6392\u5e8f NA NA NA NA"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/","title":"\u6876\u6392\u5e8f","text":""},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%A1%B6%E6%8E%92%E5%BA%8F/#_2","title":"\u76f8\u5173\u9898\u76ee","text":"LeetCode\u9898\u76ee \u96be\u5ea6 128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 \u56f0\u96be"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Linux \u5e38\u7528\u547d\u4ee4","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#grep","title":"grep","text":"<pre><code>grep regex filename/dirname # \u663e\u793a\u6b63\u5219\u5339\u914d\u5230\u7684\u884c\ngrep -i regex filename/dirname # \u5ffd\u7565\u5927\u5c0f\u5199\ngrep -v regex filename/dirname # \u663e\u793a\u6b63\u5219\u6ca1\u6709\u5339\u914d\u5230\u7684\u884c\ngrep -n regex filename/dirname # \u663e\u793a\u884c\u53f7\ngrep -r regex filename/dirname # \u9012\u5f52\u67e5\u627e\u5b50\u6587\u4ef6\u5939\ngrep -lr regex filename/dirname # \u53ea\u663e\u793a\u5339\u914d\u5185\u5bb9\u7684\u6587\u4ef6\ngrep -Lr regex filename/dirname # \u53ea\u663e\u793a\u6ca1\u6709\u5339\u914d\u5185\u5bb9\u7684\u6587\u4ef6\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#find","title":"find","text":"<pre><code>find dirname -name filename # \u641c\u7d22\u6587\u4ef6\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#sed","title":"sed","text":"<pre><code># sed \u547d\u4ee4\u683c\u5f0f\nsed [option] '{script}' input_file &gt; output_file # \u4fee\u6539\u8f93\u51fa\u5230\u65b0\u7684\u6587\u4ef6\nsed -i [option] '{script}' input_file # \u76f4\u63a5\u5728\u539f\u6587\u4ef6\u4fee\u6539\n\n# \u5220\u9664\nsed 'line_begin,line_end d' filename # \u5220\u9664\u6307\u5b9a\u8303\u56f4\u7684\u884c\nsed '/regex/ d' filename # \u5220\u9664\u6b63\u5219\u5339\u914d\u5230\u7684\u884c\nsed '/regex1/, /regex2/ d' filename # \u5220\u9664\u6b63\u52191\u5339\u914d\u5f00\u5934 \u5230 \u6b63\u52192\u5339\u914d\u7ed3\u5c3e \u8303\u56f4\u5185\u7684\u884c\n\n# \u67e5\u627e\u66ff\u6362\nsed 's/regex1/regex2' filename # regex1\u67e5\u627e\uff0c \u66ff\u6362\u6210regex2\uff0c \u53ea\u66ff\u6362\u7b2c\u4e00\u4e2a\u627e\u5230\u7684\nsed `s/regex1/regex2/number` filename # \u66ff\u6362\u7b2c number \u6b21\u51fa\u73b0\u7684\u5b9e\u4f8b\nsed `s/regex1/regex2/g` filename # \u66ff\u6362\u6240\u6709\u5339\u914d\u5230\u7684\nsed `s/regex1/regex2/p` filename # \u6253\u5370\u539f\u59cb\u884c\u7684\u5185\u5bb9\nsed `s/regex1/regex2/w file` filename # \u5c06\u66ff\u6362\u7684\u7ed3\u679c\u5199\u5165\u6587\u4ef6\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","title":"\u6df7\u5408","text":"<p>grep \u53ea\u80fd\u67e5\u627e\uff0c sed\u53ea\u80fd\u66ff\u6362\uff0c \u7efc\u5408\u4f7f\u7528\u53ef\u4ee5\u5b9e\u73b0\u6279\u91cf\u67e5\u627e\u66ff\u6362\u3002</p> <pre><code># \u6279\u91cf\u66ff\u6362\u67d0\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u91cc\u9762\u7684\u5b57\u7b26\u4e32\nsed -i 's/oldstring/newstring/g' `grep oldstring -rl dirname`\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/SourceInsight%E5%AE%8F/","title":"SouceInsight\u5b8f\u7684\u4f7f\u7528","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/SourceInsight%E5%AE%8F/#beyondcompare","title":"\u8c03\u7528BeyondCompare","text":"<p>\u4f7f\u7528\u5b8f\u6253\u5f00Beyond Compare\u6bd4\u8f83\u6587\u4ef6</p> <pre><code>macro DiffCurrentFile()\n{\n    buf = GetCurrentBuf(); // \u83b7\u5f97\u5f53\u524d\u6587\u6863\u7684\u53e5\u67c4\n    curr_file_path = GetBufName(); // \u83b7\u5f97\u5f53\u524d\u6587\u4ef6\u7684\u8def\u5f84\n    hprj = GetCurrentProj(); // \u83b7\u53d6\u5f53\u524d\u5de5\u7a0b\u5b9e\u4f8b\n    dprj = GetProjDir(); // \u83b7\u53d6\u5f53\u524d\u5de5\u7a0b\u6839\u76ee\u5f55\n\n    // \u622a\u53d6\u5de5\u7a0b\u6587\u4ef6\u5939\u540d\u79f0\n    dname = strmid(dprj, offset, strlen(dprj));\n    // \u66ff\u6362\u5de5\u7a0b\u6587\u4ef6\u5939\u540d\u79f0\u4e3a\u53e6\u5916\u4e00\u4e2a\uff0c\u7136\u540e\u62fc\u63a5\u6210\u5b8c\u6210\u6587\u4ef6\u8def\u5f84\uff0c\u5b9e\u73b0\u4e0e\u5176\u4ed6\u5de5\u7a0b\u4e2d\u76f8\u540c\u8def\u5f84\u4e0b\u76f8\u540c\u6587\u4ef6\u6bd4\u8f83\n    tmp_buf = NewBuf('tmp')\n    AppendBufLine(tmp_buf, cur_file_path);\n    ReplaceInBuf(tmp_buf, \"@dname@\", \"new_dir_name\", 0,1,0,0,0,0);\n    new_file_path = GetBufLine(tmp_buf, 0);\n\n    // \u62fc\u63a5CMD\u547d\u4ee4\n    cmd_line = \"\\\"C:\\Program Files\\\\Beyond Compare 4\\\\BCompare.exe\\\" @new_file_path@ @cur_file_path@\"\n\n    // \u6267\u884cCMD\u547d\u4ee4\n    RunCmdLine(cmd_line, Nil, 0);\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/SourceInsight%E5%AE%8F/#clang-format","title":"\u96c6\u6210clang-format","text":"<p>\u7528 Python \u5199\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u8c03\u7528 clang-format.exe \u683c\u5f0f\u5316\u4ee3\u7801\u3002</p> <pre><code># \u8bfb\u53d6\u8f93\u5165\uff0c\u683c\u5f0f\u5316\u4e4b\u540e\u8f93\u51fa\nimport os\nimport sys\nimport codecs\n\nif __name__ == \"__main__\":\n    if (len(sys.argv) &lt;= 1):\n        sys.exit()\n    selected_file = sys.argv[1]\n    # utf-8 --&gt; gb2312 Windows\u4e0a\u4f7f\u7528\u9700\u8981\u8f6c\u6362\n    with codecs.open(selected_file, 'r', 'utf-8') as fd:\n        content = fd.read()\n    with codecs.open(selected_file, 'w', 'gb2312') as fd:\n        fd.write(content)\n    abs_path = os.path.abspath(__file__)\n    cur_dir = os.path.dirname(abs_path)\n    file = '\"' + selected_file + '\"'\n    clang_path = os.path.join(cur_dir, \"clang-format.exe\")\n    cmd_line = clang_path + \"- style=file {0}\".format(file)\n    output = os.popen(cmd_line)\n    outtext = output.read().strip(\"\\n\")\n    print(outtext)\n</code></pre> <p>Source Insight\u4e2d\u7684\u914d\u7f6e <code>tools --&gt; Custom Commands --&gt; Add</code></p> <pre><code>\u6309\u7167\u5982\u4e0b\u914d\u7f6e\uff1a\nRun: python clang-format.py %s\nDir: clang-format.py\u7684\u7edd\u5bf9\u8def\u5f84\nPaste Output: OK\nSave File First: OK\nWait Until Done: OK\n</code></pre> <p><code>Menu --&gt; Insert</code> \u6dfb\u52a0\u5230\u83dc\u5355\u4e2d</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/SourceInsight%E5%AE%8F/#_1","title":"\u514b\u9686\u5de5\u7a0b","text":"<p>\u57fa\u4e8e\u5f53\u524d\u5de5\u7a0b\u514b\u9686\u4e00\u4e2a\u65b0\u5de5\u7a0b\uff0c\u4ec5\u5de5\u7a0b\u540d\u79f0\u4e0d\u540c</p> <pre><code>function string_replace(string, a, b)\n{\n    hbuf = NewBuf(\"tmp\");\n    if (hbuf == hNil) {\n        Msg(\"open file fail.\");\n        return;\n    }\n    AppendBufLine(hbuf, string);\n    sel = SearchInBuf(hbuf, a, 0,0,1,0,0);\n    part1 = strtrunc(string, sel.ichFisrt);\n    part2 = strmid(string, sel.ichLim, strlen(string));\n\n    new_string = cat(part1, b);\n    new_string = cat(new_string, part2);\n    closeBuf(hbuf);\n\n    return new_string;\n}\n\nmacro create_project()\n{\n    curr_proj = \"xxxx\";\n    prj_name = ask(\"input new project name:\");\n    hprj = NewProj(prj_name);\n    if (hprj == hNil) {\n        Msg(\"create new project fail.\");\n        return;\n    }\n\n    folder_name = ask(\"input folder name:\");\n    curr_hprj = GetCurrentProj();\n    curr_dir = GetProjDir();\n    file_count = GetProjFileCount(curr_hprj);\n    file_index = 0;\n    while (file_index &lt; file_count) {\n        filename = GetProjFileName(curr_hprj, file_index);\n        abs_path = cat(curr_dir, \"\\\\\");\n        file_name = cat(abs_path, filename);\n        file_name = string_repalce(file_name, curr_proj, folder_name);\n        AddFileToProj(hprj, filename);\n        file_index = file_index + 1;\n    }\n\n    SyncProj(hprj);\n    CloseProj(hprj);\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/SourceInsight%E5%AE%8F/#_2","title":"\u83b7\u5f97\u7b26\u53f7\u8868","text":"<p>\u53ef\u4ee5\u5229\u7528\u5b8f\u8f93\u51fa\u6574\u4e2a\u5de5\u7a0b\u7684\u51fd\u6570\uff0c \u51fd\u6570\u58f0\u660e\uff0c \u5168\u5c40\u53d8\u91cf\u7b49\u3002</p> <pre><code>function GetFileSymbol(file_path, hout)\n{\n    hbuf = OpenBuf(file_path);\n    symbol_max = GetBufSymCount(hbuf);\n    synbol_index = 0;\n    while (symbol_index &lt; symbol_max) {\n        symbol_record = GetBufSymLocation(hbuf, symbol_index);\n        symbol_index = symbol_index + 1;\n        // \u8bb0\u5f55\u51fd\u6570\u5b9e\u73b0\u540d\u79f0\n        if (symbol_record.Type == \"Function\") {\n            AppendBufLine(hout, file_path # \"function:\" # symbol_record.Symbol);\n        }\n        // \u8bb0\u5f55\u51fd\u6570\u58f0\u660e\u540d\u79f0\n        if (symbol_record.Type == \"Function Prototype\") {\n            AppendBufLine(hout, file_path # \"function Prototype:\" # symbol_record.Symbol);\n        }\n        // \u8bb0\u5f55\u5168\u5c40\u53d8\u91cf\u540d\u79f0\n        if (symbol_record.Type == \"Variable\") {\n            AppendBufLine(hout, file_path # \"Variable:\" # symbol_record.Symbol);\n        }\n    }\n}\n\nmacro GetProjSymbols()\n{\n    // \u6253\u5f00\u4fdd\u5b58\u6587\u4ef6\u5217\u8868\u7684\u6587\u4ef6\uff0c\u6587\u4ef6\u5217\u8868\u53ef\u4ee5\u4f7f\u7528SourceInsight\u5bfc\u51fa\n    files = OpenBuf(\"d:\\\\out.csv\");\n    if (files == hNil) {\n        return;\n    }\n\n    hout = NewBuf(\"d:\\\\out.csv\");\n    line_max = GetBufLine(files);\n    index = 0;\n    while (index &lt; line_max) {\n        file_path = GetBufLine(files, index);\n        GetFileSymbol(file_path, hout);\n        index = index + 1;\n    }\n    SaveBuf(hout);\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/","title":"C++ \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>C++\u6709\u5173\u7684\u6982\u5ff5\u548c\u5e38\u7528\u7684\u4ee3\u7801\u3002\u4e3b\u8981\u5305\u62ec\u5185\u5b58\u6a21\u578b(\u5806\u5185\u5b58\uff0c\u6808\u5185\u5b58)\uff0c\u865a\u51fd\u6570\uff0c\u865a\u8868\uff0cconst \u7684\u7528\u6cd5\uff0cinclude\uff0csizeof, \u6784\u9020\u51fd\u6570\u7b49\u5185\u5bb9\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_1","title":"\u57fa\u7840\u6982\u5ff5","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#include","title":"include (\u6587\u4ef6\u5305\u542b)","text":"<p><code>include &lt;&gt;</code> \u548c <code>include \"\"</code> \u6709\u4ec0\u4e48\u533a\u522b\uff1f</p> <p><code>&lt;&gt;</code>\u548c<code>\"\"</code>\u7684\u533a\u522b\u662f\u7cfb\u7edf\u5728\u641c\u7d22\u5934\u6587\u4ef6\u7684\u65f6\u5019\u987a\u5e8f\u4e0d\u540c\uff0c<code>&lt;&gt;</code>\u5728\u641c\u7d22\u7684\u65f6\u5019\u9996\u5148\u4ece\u7cfb\u7edf\u76ee\u5f55\u5f00\u59cb\u641c\u7d22\uff0c\u7136\u540e\u641c\u7d22path\u73af\u5883\u53d8\u91cf\u4e0b\u9762\uff0c\u4e0d\u641c\u7d22\u5f53\u524d\u7684\u76ee\u5f55\uff1b <code>\"\"</code>\u9996\u5148\u641c\u7d22\u5f53\u524d\u76ee\u5f55\uff0c\u7136\u540e\u641c\u7d22\u7cfb\u7edf\u548cpath\u76ee\u5f55\uff0c\u6240\u4ee5\u81ea\u5df1\u5199\u7684\u6587\u4ef6\u7528\u53cc\u5f15\u53f7\uff0c\u7cfb\u7edf\u81ea\u5e26\u7684\u5e93\u7528<code>&lt;&gt;</code>,\u4e3b\u8981\u662f\u4e3a\u4e86\u641c\u7d22\u5feb\u3002</p> <p>\u5982\u4f55\u907f\u514d\u5934\u6587\u4ef6\u88ab\u91cd\u590d\u5305\u542b</p> <p>\u6309\u7167\u5982\u4e0b\u7684\u683c\u5f0f\u4e66\u5199\u5934\u6587\u4ef6\uff1a</p> <pre><code>#ifndef _HEADERNAME_H\n#define _HEADERNAME_H\n\n...//(\u5934\u6587\u4ef6\u5185\u5bb9)\n\n#endif\n</code></pre> <p>\u8fd9\u6837\u5934\u6587\u4ef6\u5728\u7b2c\u4e00\u6b21\u88ab\u5305\u542b\u7684\u65f6\u5019\uff0c_HEADERNAME_H \u6ca1\u6709\u88ab\u5b9a\u4e49\uff0c\u6267\u884c\u5b9a\u4e49_HEADERNAME_H\u7684\u52a8\u4f5c\u5e76\u5305\u542b\u5934\u6587\u4ef6\u7684\u5185\u5bb9\uff0c \u7b2c\u4e8c\u6b21\u5305\u542b\u7684\u65f6\u5019\uff0c_HEADERNAME_H \u5df2\u7ecf\u88ab\u5b9a\u4e49\uff0c\u5c31\u4e0d\u4f1a\u5305\u542b\u540e\u9762\u7684\u5185\u5bb9\uff1b<code>_HEADERNAME_H</code>\u662f\u81ea\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u9700\u8981\u4e3a\u6bcf\u4e00\u4e2a\u5934\u6587\u4ef6\u8d77\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u540d\u79f0\uff0c\u8fd9\u6837\u624d\u80fd\u8fbe\u5230\u6548\u679c\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#const","title":"\u5e38\u91cf(const)","text":"<p>\u5e38\u91cf\u7684\u5b9a\u4e49\u65b9\u5f0f\u548c\u5f02\u540c\uff1f</p> <p>\u6709\u4e24\u79cd\u5b9a\u4e49\u65b9\u5f0f\uff1a <code>define PI 3.14</code> \u548c <code>const double PI = 3.14</code>.</p> <p><code>define</code> \u5b9a\u4e49\u7684\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u4e4b\u524d\u7684\u9884\u5904\u7406\u9636\u6bb5\u6267\u884c\u7684\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u5c31\u662f\u628a\u4ee3\u7801\u4e2d\u6240\u6709\u51fa\u73b0<code>PI</code>\u7684\u5730\u65b9\u66ff\u6362\u6210<code>3.14</code>,\u4e0d\u6267\u884c\u8bed\u6cd5\u548c\u7c7b\u578b\u7684\u68c0\u67e5\u3002 <code>const</code>\u5b9a\u4e49\u7684\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5904\u7406\u7684\uff0c\u6709\u7c7b\u578b\u7684\u68c0\u67e5\u548c\u8bed\u6cd5\u7684\u68c0\u67e5\uff0c\u66f4\u5b89\u5168\u3002 \u5982\u679c\u4f7f\u7528<code>define</code>\u5b9a\u4e49\u590d\u6742\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u62ec\u53f7\u7684\u4f7f\u7528\u3002</p> <p>\u9876\u5c42const\u548c\u5e95\u5c42const</p> <p><code>const</code>\u65e2\u53ef\u4ee5\u4fee\u9970\u666e\u901a\u7684\u53d8\u91cf(\u6574\u5f62\uff0c\u5b57\u7b26\u4e32\u7b49)\u4e5f\u53ef\u4ee5\u4fee\u9970\u6307\u9488\uff0c\u5047\u8bbe\u4e00\u4e2a\u6307\u9488<code>p</code>\u6307\u5411\u4e00\u4e2a\u53d8\u91cf<code>a</code>, \u5982\u679c\u6307\u9488\u662f\u5e38\u91cf(<code>p</code>\u4e2d\u5b58\u50a8\u7684\u5730\u5740\u4e0d\u80fd\u6539\u53d8) \u53eb\u505a\u9876\u5c42const, \u5982\u679c<code>a</code>\u662f\u5e38\u91cf(<code>a</code>\u4e2d\u5b58\u50a8\u7684\u6570\u503c\u4e0d\u80fd\u6539\u53d8)\uff0c\u53eb\u505a\u5e95\u5c42const.</p> <p>\u9876\u5c42const\u7684\u5b9a\u4e49\uff1a <code>int *const p = &amp;a;</code>  p \u7684\u503c\u4e0d\u80fd\u6539\u53d8\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7p\u6539\u53d8\u5b83\u6307\u5411\u7684a\u7684\u503c\uff1b \u5e95\u5c42const\u7684\u5b9a\u4e49\uff1a <code>const int *p = &amp;a;</code>  p \u7684\u503c\u53ef\u4ee5\u6539\u53d8\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7p\u6539\u53d8\u5b83\u6307\u5411\u7684a\u7684\u503c\u3002</p> <p>\u65e2\u662f\u9876\u5c42\u4e5f\u662f\u5e95\u5c42\uff1a<code>const int *const p = &amp;a;</code> p\u7684\u503c\u4e0d\u80fd\u6539\u53d8\uff0c\u4e5f\u4e0d\u80fd\u901a\u8fc7p\u6539\u53d8a\u7684\u503c\uff1b</p> <p>\u5e38\u91cf\u8868\u8fbe\u5f0f</p> <p>\u503c\u4e0d\u4f1a\u6539\u53d8\u5e76\u4e14\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u53ef\u4ee5\u786e\u5b9a\u503c\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528<code>constexpr</code>\u58f0\u660e\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u4f1a\u81ea\u5df1\u5224\u65ad\u8868\u8fbe\u5f0f\u662f\u5426\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u4f1a\u62a5\u9519\u3002<code>constexpr int m = 20 + 90;</code></p> <p><code>constexpr</code> \u8fd8\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u91cf\u51fd\u6570\uff0c\u8981\u4fdd\u8bc1\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u80fd\u5f97\u5230\u7ed3\u679c\u3002<code>constexpr int getIntSize(){return 4;}</code>\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u786e\u5b9a\u5176\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u8be5\u51fd\u6570\u53ef\u4ee5\u7528\u6765\u521d\u59cb\u5316\u5e38\u91cf\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u4e00\u5b9a\u52a0\u4e86constexpr\u7684\u51fd\u6570\u5c31\u4e00\u5b9a\u8fd4\u56de\u5e38\u91cf\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u975e\u5e38\u91cf\uff0c\u5982\u679c\u7528\u8fd4\u56de\u975e\u5e38\u91cf\u7684<code>constexpr</code>\u51fd\u6570\u521d\u59cb\u5316\u5e38\u91cf\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_2","title":"\u865a\u51fd\u6570","text":"<p>\u5bf9\u4e8e\u975e \u865a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff0c\u4f8b\u5982\u51fd\u6570\u7684\u91cd\u8f7d\uff0c\u901a\u8fc7\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u4e2a\u6570\u5c31\u53ef\u4ee5\u786e\u5b9a\u8c03\u7528\u54ea\u4e00\u4e2a\uff1b \u5bf9\u4e8e\u865a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u76f4\u5230\u8fd0\u884c\u7684\u65f6\u5019\u624d\u80fd\u786e\u5b9a\u5e94\u8be5\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u57fa\u7c7b\u7684\u5f15\u7528\u8c03\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u662f\u65e0\u6cd5\u786e\u5b9a\u5230\u5e95\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\u7684\uff0c\u9700\u8981\u7b49\u5230\u8fd0\u884c\u65f6\uff0c\u4e86\u89e3\u57fa\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u5177\u4f53\u7ed1\u5b9a\u5230\u4e86\u54ea\u4e00\u4e2a\u5b50\u7c7b\u4e0a\uff0c\u624d\u80fd\u786e\u5b9a\u4e0b\u6765\uff08\u8c03\u7528\u8be5\u5b50\u7c7b\u81ea\u5df1\u5b9e\u73b0\u7684\u51fd\u6570\u7248\u672c).</p> <ol> <li>\u865a\u51fd\u6570 \u4e0d\u4ee3\u8868 \u4e0d\u88ab\u5b9e\u73b0\uff0c \u7eaf\u865a\u51fd\u6570\u624d\u662f\u4e0d\u88ab\u5b9e\u73b0\u7684\u51fd\u6570\uff1b</li> <li>\u865a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5141\u8bb8\u7528\u57fa\u7c7b\u7684\u6307\u9488\u8c03\u7528\u5b50\u7c7b\u7684\u8fd9\u4e2a\u51fd\u6570\uff1b\uff08\u5728\u57fa\u7c7b\u4e2d\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\uff0c\u5b50\u7c7b\u4e2d\u4e0d\u7528\u5e26virtual\uff09</li> <li>\u7eaf\u865a\u51fd\u6570\u7684\u76ee\u7684\u662f\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\uff0c\u89c4\u5b9a\u6240\u6709\u7ee7\u627f\u8be5\u7c7b\u7684\u7684\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\uff1b</li> <li>\u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u662f\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u5b9e\u4f8b\u5316\uff0c\u4e0d\u80fd\u521b\u5efa\u7c7b\u7684\u5b9e\u4f8b\u3002</li> </ol> <p>\u865a\u6790\u6784\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5728\u9500\u6bc1\u5bf9\u8c61\u7684\u65f6\u5019\u9996\u5148\u9500\u6bc1\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7684\u5b50\u7c7b\u5bf9\u8c61\u7684\u5b9e\u4f8b\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u5b50\u7c7b\u4e0d\u5b9a\u4e49\u7a0b\u865a\u6790\u6784\u51fd\u6570\uff0c\u5219\u4e0d\u4f1a\u6267\u884c\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u5bb9\u6613\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_3","title":"\u5806\u5185\u5b58\u548c\u6808\u5185\u5b58","text":"<p>http://www.cnblogs.com/yyxt/archive/2015/02/02/4268304.html</p> <p><code>char a[] = \"1234\";</code> \u662f\u5b58\u50a8\u5728\u6808\u4e0a\u7684\uff1b</p> <p><code>char *a = \"1234\";</code> \u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\uff1b</p> <p>\u6808\u5185\u5b58\u8bbf\u95ee\u7684\u901f\u5ea6\u5feb\u4e8e\u5806\u5185\u5b58\uff0c\u56e0\u4e3a\u5806\u5185\u5b58\u7684\u6307\u9488\u4e5f\u662f\u5b58\u653e\u5728\u6808\u4e0a\u7684\uff0c\u9700\u8981\u5148\u8bbf\u95ee\u6808\uff0c\u7136\u540e\u53bb\u5806\u4e0a\u8bbf\u95ee\uff0c\u5bf9\u7684\u5730\u5740\u4e5f\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u8fd9\u5bfc\u81f4\u8bbf\u95ee\u7684\u901f\u5ea6\u4e0b\u964d\u3002</p> <p>new malloc</p> <p><code>new</code> \u548c <code>malloc</code> \u5f00\u8f9f\u7684\u5185\u5b58\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684\uff0c\u9700\u8981\u81ea\u5df1\u53bb\u91ca\u653e\u5185\u5b58\uff0c\u5426\u5219\u53ea\u6709\u5728\u7a0b\u5e8f\u7ed3\u675f\u4e4b\u540e\u624d\u6709\u53ef\u80fd\u88ab\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536\u3002 <code>delete</code> \u548c <code>free</code> \u662f\u7528\u6765\u91ca\u653e\u5185\u5b58\u7684\uff0cdelete \u6216\u8c03\u7528\u88ab\u91ca\u653e\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u5b89\u5168\u7684\u91ca\u653e\u5185\u5b58\uff0c<code>free</code> \u76f4\u63a5\u91ca\u653e\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_4","title":"\u9759\u6001\u94fe\u63a5\u548c\u52a8\u6001\u8fde\u63a5","text":"<p>\u6e90\u6587\u4ef6--&gt;\u9884\u7f16\u8bd1--&gt;\u7f16\u8bd1--&gt;\u6c47\u7f16--&gt; \u94fe\u63a5 --&gt;\u53ef\u6267\u884c\u7a0b\u5e8f</p> <p>\u5982\u679c\u5728\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u5c06\u6e90\u6587\u4ef6\u4e2d\u7528\u5230\u7684\u5e93\u51fd\u6570\u4e0e\u6c47\u7f16\u751f\u6210\u7684\u6587\u4ef6\u5408\u5e76\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4e4b\u540e\u7684\u7a0b\u5e8f\u4ec5\u9700\u8981\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5373\u53ef\u8fd0\u884c\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u53eb\u505a\u9759\u6001\u94fe\u63a5\uff1b \u7f3a\u70b9\u662f\u6587\u4ef6\u53ef\u80fd\u592a\u5927\uff0c\u6bd5\u7adf\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u4e5f\u4f1a\u5305\u542b\u5f88\u591a\u7684\u5934\u6587\u4ef6\u3002</p> <p>\u5982\u679c\u5728\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u4e0d\u628a\u6e90\u6587\u4ef6\u4e2d\u7528\u5230\u7684\u5e93\u5408\u5e76\u5728\u4e00\u8d77\uff0c\u800c\u662f\u5355\u72ec\u7f16\u8bd1\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u7528\u5230\u7684\u5730\u65b9\u5728\u53bb\u5bfb\u627e\u8be5\u5e93\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a\u52a8\u6001\u94fe\u63a5\uff0c\u52a8\u6001\u8fde\u63a5\u53ef\u4ee5\u6709\u6548\u7684\u907f\u514d\u91cd\u590d\uff0c\u4f46\u662f\u53ef\u79fb\u690d\u6027\u5c31\u53d7\u5230\u9650\u5236\uff0c\u7ecf\u5e38\u9047\u5230\u7684\u8fd0\u884c\u67d0\u4e2a\u7a0b\u5e8f\u7684\u65f6\u5019XX\u627e\u4e0d\u5230\u7684\u9519\u8bef\u5c31\u662f\u52a8\u6001\u94fe\u63a5\u5e93\u9700\u8981\u7684\u6587\u4ef6\u4e22\u5931\u540e\u8005\u6ca1\u6709\u5728\u6b63\u786e\u7684\u8def\u5f84\u4e0a\u5bfc\u81f4\u7684\u3002</p> <p>\u53c2\u8003\u6587\u7ae0\uff1ahttp://www.cnblogs.com/52php/p/5681711.html</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_5","title":"\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_6","title":"\u5b57\u7b26\u4e32\u57fa\u672c\u64cd\u4f5c","text":"<pre><code>#include &lt;string&gt;\n\n// \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\ns.push_back('a');\n// \u672b\u5c3e\u8ffd\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\ns.append(\"aaa\");\n// \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\n\n//\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32\n\n//\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u5b57\u7b26\n\n//\u4efb\u610f\u4f4d\u7f6e\u5220\u9664\u5b57\u7b26\u4e32\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#set","title":"\u81ea\u5b9a\u4e49set\u7684\u6bd4\u8f83\u51fd\u6570","text":"<p>\u5b58\u5165set\u7684\u5143\u7d20\u9ed8\u8ba4\u662f\u6709\u5e8f\u7684\uff0c\u4f46\u662f\u9ed8\u8ba4\u7684\u6bd4\u8f83\u53ef\u80fd\u4e0d\u80fd\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\uff0c\u8fd9\u4e2a\u65f6\u5019 \u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u6bd4\u8f83\u7684\u51fd\u6570\u3002 set\u7684\u6392\u5e8f\u662f\u4f7f\u7528\u7ea2\u9ed1\u6811\u7684\u7ed3\u6784\uff0c\u63d2\u5165\u5220\u9664\u548c\u53d6\u51fa\u6700\u5c0f\u7684 \u5143\u7d20\u90fd\u6bd4\u8f83\u9ad8\u6548\u3002</p> <pre><code>struct NumBit{\n    int num;\n    NumBit(int n) : num(n) {}\n    bool operator&lt;(const struct NumBit &amp; right)const   //\u91cd\u8f7d&lt;\u8fd0\u7b97\u7b26\n    {\n        vector&lt;int&gt; vtmp1;\n        int n = this-&gt;num;\n        int b = 0;\n        while(n){\n            b = n % 10;\n            vtmp1.insert(vtmp1.begin(),b);\n            n /= 10;\n        }\n        vector&lt;int&gt; vtmp2;\n        int n2 = right.num;\n        int b2 = 0;\n        while(n2){\n            b2 = n2 % 10;\n            vtmp2.insert(vtmp2.begin(),b2);\n            n2 /= 10;\n        }\n        int i = 0;\n        int j = 0;\n        int ilen = vtmp1.size();\n        int jlen = vtmp2.size();\n        while( i&lt;ilen || j&lt;jlen ){\n            if(i&lt;ilen &amp;&amp; j&lt;jlen &amp;&amp; vtmp1[i] &gt; vtmp2[j]){\n                return false;\n            }else if(i&lt;ilen &amp;&amp; j&lt;jlen &amp;&amp; vtmp1[i] &lt; vtmp2[j]){\n                return true;\n            }else if(i&lt;ilen &amp;&amp; j&lt;jlen &amp;&amp; vtmp1[i] == vtmp2[j]){\n                i++;\n                j++;\n            }else if(i==ilen){\n                if(vtmp2[j] &gt; vtmp2[0]) return true;\n                else if(vtmp2[j] &lt; vtmp2[0]) return false;\n                else if(j == jlen){\n                    return false;\n                }else{\n                    j++;\n                }\n            }else if(j==jlen){\n                if(vtmp1[i] &gt; vtmp1[0]) return false;\n                else if(vtmp1[i] &lt; vtmp1[0]) return  true;\n                else if(i == ilen){\n                    return true;\n                }else{\n                    i++;\n                }\n            }else{\n                break;\n            }\n        }\n        return false;\n    }\n};\n</code></pre> <p>\u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u4f5c\u4e3aset\u7684\u7c7b\u578b</p> <pre><code>multiset&lt;NumBit&gt; s; //\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_7","title":"\u8f93\u5165\u8f93\u51fa\u91cd\u5b9a\u5411","text":"<p>\u6709\u7684\u7b97\u6cd5\u9898\u662f\u4ece\u63a5\u6536\u7684\u662f\u4ece\u63a7\u5236\u53f0\u7684\u8f93\u5165\uff0c\u800c\u4e14\u8f93\u5165\u8fd8\u5f88\u591a\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6bcf\u6b21\u8c03\u8bd5\u90fd\u4ece\u63a7\u5236\u53f0\u4e00\u6b21\u4e00\u6b21\u7684\u8f93\u5165\u6d4b\u8bd5\u6570\u636e\uff0c\u5c31\u4f1a\u5f88\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8981\u8f93\u5165\u7684\u6570\u636e\u4fdd\u5b58\u5728\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u8f93\u5165\u91cd\u5b9a\u5411<code>freopen</code>\u628a\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230\u8be5\u6587\u4ef6\u3002\u4ee5\u8f93\u5165\u4e00\u4e2am\u884cn\u5217\u7684\u77e9\u9635\u6765\u8bf4\uff0c\u9996\u5148\u628a\u8f93\u5165\u6570\u636e\u5b58\u50a8\u5728\u6587\u672c\u6587\u4ef6<code>d:/A.in</code>\u4e2d\u3002 <pre><code>4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n</code></pre> \u7136\u540e\u6267\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a <pre><code>    freopen(\"d:\\\\A.in\",\"r\",stdin);// \u8f93\u5165\u91cd\u5b9a\u5411\n    int m,n;\n    cin&gt;&gt;m&gt;&gt;n;\n    vector&lt;vector&lt;int&gt;&gt; v(m,vector&lt;int&gt;(n));\n    //\u8bfb\u53d6\u6570\u636e\n    for(int i=0;i&lt;m;i++){\n        for(int j=0;j&lt;n;j++){\n            cin&gt;&gt;v[i][j];\n        }\n    }\n    //\u8f93\u51fa\u8bfb\u53d6\u7684\u6570\u636e\u95e8\u8fd9\u91cc\u8f93\u51fa\u5230\u63a7\u5236\u53f0\n    for(int i=0;i&lt;m;i++){\n        for(int j=0;j&lt;n;j++){\n            cout&lt;&lt;v[i][j]&lt;&lt;\" \";\n        }\n        cout&lt;&lt;endl;\n    }\n</code></pre> \u540c\u6837\uff0c\u8f93\u51fa\u4e5f\u53ef\u4ee5\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u5f53\u6709\u5927\u91cf\u7684\u8f93\u51fa\u6216\u8005\u9700\u8981\u4fdd\u5b58\u8f93\u51fa\u7ed3\u679c\u7684\u65f6\u5019\uff0c\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u65b9\u6cd5\u3002\u53ea\u9700\u8981\u5728\u8f93\u51fa\u4e4b\u524d\u52a0\u4e0a\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8f93\u51fa\u5c31\u4f1a\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fd0\u884c\u7a0b\u5e8f\uff0c\u63a7\u5236\u53f0\u5c31\u770b\u4e0d\u5230\u8f93\u51fa\u4e86\u3002 <pre><code>freopen(\"d:\\\\A.out\",\"w\",stdout);\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_8","title":"\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa","text":"<p>C++\u5b9a\u4e49\u4e86\u4e00\u4e9b\u64cd\u7eb5\u7b26\u6765\u63a7\u5236\u8f93\u51fa\u6d41\u7684\u72b6\u6001\uff0cendl\u5c31\u662f\u4e00\u4e2a\u5e38\u7528\u7684\u64cd\u7eb5\u7b26\u3002</p> <p>\u63a7\u5236\u5e03\u5c14\u503c\u7684\u683c\u5f0f</p> <p><code>boolalpha</code>\u4f7f\u5f97\u5e03\u5c14\u503c\u8f93\u51fa<code>true</code> or <code>false</code>; <code>noboolalpha</code>\u4f7f\u5f97\u8f93\u51fa\u53d8\u56de\u9ed8\u8ba4\u7684<code>0</code> or <code>1</code>. <pre><code>cout&lt;&lt;\"default: \"&lt;&lt;true&lt;&lt;\" \"&lt;&lt;false&lt;&lt;endl;\ncout&lt;&lt;boolalpha&lt;&lt;\"boolalpha: \"&lt;&lt;true&lt;&lt;\" \"&lt;&lt;false&lt;&lt;noboolalpha&lt;&lt;endl;\n</code></pre></p> <p>\u63a7\u5236\u6574\u6570\u7684\u8f93\u51fa\u8fdb\u5236</p> <ul> <li>\u516b\u8fdb\u5236\uff1a <code>oct</code></li> <li>\u5341\u516d\u8fdb\u5236\uff1a <code>hex</code></li> <li>\u5341\u8fdb\u5236\uff1a <code>dec</code></li> </ul> <p>\u63a7\u5236\u56fa\u5b9a\u5c0f\u6570\u70b9\u4f4d\u6570 <pre><code>#include &lt;iomanip&gt;\n\ncout.precision(6);\ncout.setf(ios::fixed);\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_9","title":"\u8bfb\u53d6\u6570\u91cf\u4e0d\u5b9a\u7684\u82e5\u5e72\u4e2a\u6574\u6570","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n/**\n * \u8bfb\u53d6\u4e00\u884c\u6574\u6570\uff0c\u8fd4\u56de\u6570\u7ec4\n * @param s\n * @return\n */\nvector&lt;int&gt; getInt(string &amp;s)\n{\n    getline(cin,s);\n    istringstream iss(s);\n    vector&lt;int&gt; v;\n    int num;\n    while(iss &gt;&gt; num){\n        v.push_back(num);\n    }\n    return v;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_10","title":"\u6570\u636e\u7684\u8868\u793a\u8303\u56f4","text":"<p>\u4ee5\u4e0b\u5185\u5bb9\u6765\u6e90\u4e8e<code>C++ Premier \u7b2c\u4e94\u7248</code></p> <p>\u6574\u578b</p> <p>\u5305\u62ec\u6574\u6570\uff0c\u5b57\u7b26\u578b\uff0c\u548c\u5e03\u5c14\u7c7b\u578b\uff1b\u8fd9\u7c7b\u6570\u636e\u5728\u8ba1\u7b97\u673a\u7684\u5185\u90e8\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d0\u548c1\u76f4\u63a5\u4fdd\u5b58\u7684\u3002</p> <pre><code>// \u83b7\u5f97\u6574\u5f62\u7c7b\u578b\u7684\u8868\u793a\u8303\u56f4\uff0c climits\n    cout&lt;&lt;\"char: \"&lt;&lt;CHAR_MIN&lt;&lt;\" to \"&lt;&lt;CHAR_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"unsinged char: \"&lt;&lt;0&lt;&lt;\" to \"&lt;&lt;UCHAR_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"int8: \"&lt;&lt;INT8_MIN&lt;&lt;\" to \"&lt;&lt;INT8_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"unsinged int8: \"&lt;&lt;0&lt;&lt;\" to \"&lt;&lt;UINT8_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"int16: \"&lt;&lt;INT16_MIN&lt;&lt;\" to \"&lt;&lt;INT16_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"unsigned int16: \"&lt;&lt;0&lt;&lt;\" to \"&lt;&lt;UINT16_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"int32: \"&lt;&lt;INT32_MIN&lt;&lt;\" to \"&lt;&lt;INT32_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"unsigned int32: \"&lt;&lt;0&lt;&lt;\" to \"&lt;&lt;UINT32_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"int64: \"&lt;&lt;INT64_MIN&lt;&lt;\" to \"&lt;&lt;INT64_MAX&lt;&lt;endl;\n    cout&lt;&lt;\"unsigned int64: \"&lt;&lt;0&lt;&lt;\" to \"&lt;&lt;UINT64_MAX&lt;&lt;endl;\n    cout&lt;&lt;endl;\n</code></pre> <p>\u6d6e\u70b9\u578b</p> <p>\u5728\u8ba1\u7b97\u673a\u5185\u90e8\uff0c\u8fd9\u79cd\u7c7b\u578b\u662f\u628a\u4fdd\u5b58\u6570\u636e\u7684\u7a7a\u95f4\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5b58\u50a8\u5c0f\u6570\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u5b58\u50a8\u6307\u6570\u90e8\u5206\uff0c\u6570\u7684\u5b9e\u9645\u5927\u5c0f\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u51fa\u6765\u7684\u3002 \u6d6e\u70b9\u7c7b\u578b\u7531\u56db\u90e8\u5206\u7ec4\u6210\uff1a - sign : \u7b26\u53f7\uff0c\u6b63 \u6216 \u8d1f - base(radix) : \u57fa\u6570(2,8,10,16) - significand : \u5c3e\u6570 - exponent \uff1a \u6307\u6570</p> <p>\u6d6e\u70b9\u7c7b\u578b\u7684\u5927\u5c0f\u53ef\u4ee5\u901a\u8fc7\u5305\u542b<code>cfloat</code>\u67e5\u770b\u3002</p> <pre><code>//\u83b7\u5f97\u6d6e\u70b9\u7c7b\u578b\u7684\u8868\u793a\u8303\u56f4  cfloat\n   cout&lt;&lt;\"float range: \"&lt;&lt;FLT_MIN&lt;&lt;\" to \"&lt;&lt;FLT_MAX&lt;&lt;endl;\n   cout&lt;&lt;\"float significand: \"&lt;&lt;FLT_MANT_DIG&lt;&lt;endl;\n   cout&lt;&lt;\"float exponent: \"&lt;&lt;FLT_MIN_EXP &lt;&lt;\" to \"&lt;&lt;FLT_MAX_EXP&lt;&lt;endl;\n\n   cout&lt;&lt;\"double range: \"&lt;&lt;DBL_MIN&lt;&lt;\" to \"&lt;&lt;DBL_MAX&lt;&lt;endl;\n   cout&lt;&lt;\"double significant: \"&lt;&lt;DBL_MANT_DIG &lt;&lt;endl;\n   cout&lt;&lt;\"double exponent: \"&lt;&lt;DBL_MIN_EXP &lt;&lt;\" to \"&lt;&lt;DBL_MAX_EXP&lt;&lt;endl;\n\n   cout&lt;&lt;\"long double range: \"&lt;&lt;LDBL_MIN&lt;&lt;\" to \"&lt;&lt;LDBL_MAX&lt;&lt;endl;\n   cout&lt;&lt;\"long double significant: \"&lt;&lt;LDBL_MANT_DIG&lt;&lt;endl;\n   cout&lt;&lt;\"long double exponent\"&lt;&lt;LDBL_MIN_EXP&lt;&lt;\" to \"&lt;&lt;LDBL_MAX_EXP&lt;&lt;endl;\n\n   cout&lt;&lt;\"base: \"&lt;&lt;FLT_RADIX&lt;&lt;endl;\n   cout&lt;&lt;endl;\n</code></pre> <p>\u83b7\u5f97\u7c7b\u578b\u6240\u5360\u7528\u7684\u5b57\u8282\u6570\u76ee</p> <pre><code>// \u83b7\u5f97\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u5360\u7684\u5b57\u8282\u6570\n    cout&lt;&lt;\"bool: \"&lt;&lt;sizeof(bool)&lt;&lt;endl;\n    cout&lt;&lt;\"char: \"&lt;&lt;sizeof(char)&lt;&lt;endl;\n    cout&lt;&lt;\"short: \"&lt;&lt;sizeof(short)&lt;&lt;endl;\n    cout&lt;&lt;\"int: \"&lt;&lt;sizeof(int)&lt;&lt;endl;\n    cout&lt;&lt;\"long: \"&lt;&lt;sizeof(long)&lt;&lt;endl;\n    cout&lt;&lt;\"long long : \"&lt;&lt;sizeof(long long)&lt;&lt;endl;\n    cout&lt;&lt;\"float: \"&lt;&lt;sizeof(float)&lt;&lt;endl;\n    cout&lt;&lt;\"long double: \"&lt;&lt;sizeof(long double)&lt;&lt;endl;\n    cout&lt;&lt;endl;\n</code></pre> <p>\u7c7b\u578b\u7684\u4f7f\u7528\u51c6\u5219</p> <ul> <li>\u660e\u786e\u77e5\u9053\u4e0d\u53ef\u80fd\u4e3a\u8d1f\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u6570\u3002</li> <li>\u6574\u6570\u8fd0\u7b97\u4e00\u822c\u4f7f\u7528<code>int</code>, \u9700\u8981\u5927\u6570\u7684\u65f6\u5019\u8003\u8651<code>long long</code>.\u9700\u8981\u5c0f\u6574\u6570\u7684\u65f6\u5019\u8003\u8651<code>signed char</code> or <code>unsigned char</code></li> <li>\u6d6e\u70b9\u8fd0\u7b97\u7528<code>double</code></li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_11","title":"\u6682\u505c\u548c\u8ba1\u65f6","text":"<p>\u6682\u505c</p> <p>\u5982\u679c\u60f3\u8981\u8ba9\u7a0b\u5e8f\u6682\u505c\u51e0\u79d2\u7ee7\u7eed\u6267\u884c\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a</p> <pre><code># include &lt;windows.h&gt;\nSleep(2000);  // \u6682\u505c2s, \u53c2\u6570\u7684\u5355\u4f4d\u662f\u6beb\u79d2\n</code></pre> <p>\u8ba1\u7b97\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u95f4</p> <p>\u6709\u7684\u65f6\u5019\u53ef\u80fd\u8981\u770b\u67d0\u6bb5\u7a0b\u5e8f\u8fd0\u884c\u9700\u8981\u591a\u5c11\u65f6\u95f4\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a</p> <ul> <li>\u79d2\u7ea7\u8ba1\u65f6</li> </ul> <pre><code>#include &lt;ctime&gt;\nauto start_time = time(nullptr);\n//Sleep(3000);\n// ... \u4ee3\u7801\u5757\nauto end_time = time(nullptr);\ncout&lt;&lt;end_time - start_time&lt;&lt;endl;\n// \u8f93\u51fa\u7684\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u79d2\u6570\u3002\n</code></pre> <ul> <li>\u6beb\u79d2\u7ea7\u8ba1\u65f6</li> </ul> <pre><code>// \u83b7\u53d6\u6beb\u79d2\u7ea7\u522b\u7684\u65f6\u95f4\u5dee\nauto start_time = clock();\n//Sleep(3000);\nauto end_time = clock();\ncout&lt;&lt;end_time - start_time&lt;&lt;endl;\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_12","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_13","title":"\u6808","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_14","title":"\u961f\u5217","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_15","title":"\u5806","text":"<p>\u5b9a\u4e49\u5c0f\u9876\u5806\uff1a<code>priority_queue&lt;ListNode*,vector&lt;ListNode*&gt;,bigger&gt; minHeap;</code></p> <p>\u5806\u4e2d\u6dfb\u52a0\u5143\u7d20\uff1a<code>minHeap.push()</code></p> <p>\u5806\u9876\u5143\u7d20: <code>minHeap.top() //\u4e0d\u4f1a\u5220\u9664\u5806\u9876\u5143\u7d20</code> </p> <p>\u5806\u4e2d\u5220\u9664\u5143\u7d20\uff1a<code>minHeap.pop() //\u53ea\u5220\u9664\uff0c\u4e0d\u8fd4\u56de</code></p> <p>\u5806\u662f\u5426\u4e3a\u7a7a\uff1a<code>minHeap.empty()</code></p> <p>\u5efa\u7acb\u6700\u5927\u5806</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\nusing namespace std;\n// v \u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\nmake_heap(v.begin(),v.end());\n// \u6216\u8005\u4f7f\u7528\nmake_heap(v.begin(),v.end(),less&lt;int&gt;());\n</code></pre> <p>\u5efa\u7acb\u6700\u5c0f\u5806</p> <pre><code>make_heap(v.begin(),v.end(),greater&lt;int&gt;());\n</code></pre> <p>make_heap()\u65b9\u6cd5\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5176\u5b9e\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u7684\u5b9e\u4f8b\uff0c\u8868\u793a\u4f60\u600e\u6837\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u3002\u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0<code>less</code>\u65b9\u6cd5\u3002</p> <pre><code>// \u5927\u6839\u5806\nbool mless(const int &amp;a,const int &amp;b){\n    return a &lt;= b;\n}\nmake_heap(v.begin(),v.end(),mless);\n\n//\u5c0f\u6839\u5806\nbool mgreater(const int &amp;a,const int &amp;b){\n    return a &gt;= b;\n}\nmake_heap(v.begin(),v.end(),mgreater);\n</code></pre> <p>\u5f53\u5806\u4e2d\u5b58\u653e\u7684\u6570\u636e\u4e0d\u662f\u7b80\u5355\u7684\u6570\u5b57\uff0c\u800c\u662f\u590d\u6742\u7684\u7ed3\u6784\u4f53\u6216\u8005\u7c7b\u6570\u636e\u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u5c31\u5341\u5206\u6709\u7528\u4e86\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4f9d\u636e\u7c7b\u4e2d\u54ea\u4e2a\u5b57\u6bb5\u751f\u6210\u5806\u3002</p> <p>\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff1a</p> <p><pre><code>struct bigger {\n    bool operator()(ListNode* l1, ListNode* l2) {\n        return l1-&gt;val &gt; l2-&gt;val;\n    }\n};\n</code></pre> <pre><code>// \u5f39\u51fa\u5927\u6839\u5806\u7684\u9876\u90e8\u5143\u7d20\uff0c\u91cd\u6392\u5806\uff0c\u6ce8\u610f\u8fd9\u4e2a\u65f6\u5019\u9876\u90e8\u5143\u7d20\u6ca1\u6709\u5220\u9664\uff0c\u653e\u5728\u4e86\u6570\u7ec4\u7684\u6700\u540e\npop_heap(v.begin(),v.end(),less&lt;int&gt;())\n\n// \u5f39\u51fa\u5c0f\u6839\u5806\u7684\u9876\u90e8\u5143\u7d20\npop_heap(v.begin(),v.end(),greater&lt;int&gt;())\n\n// \u628a[v.begin(), v.end()-2] \u4f5c\u4e3a\u5927\u6839\u5806\uff0cv.end()-1, \u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u63d2\u5165\u5143\u7d20\u63d2\u5165\u5230\u5927\u6839\u5806\u4e2d\uff0c\u91cd\u65b0\u8c03\u6574\u597d\u987a\u5e8f\npush_heap(v.begin(),v.end(),less&lt;int&gt;())\n\n// \u63d2\u5165\u5c0f\u6839\u5806\npush_heap(v.begin(),v.end(),less&lt;int&gt;())\n</code></pre></p> <p>\u4f18\u5148\u961f\u5217 <code>priority_queue&lt;Type, Container, Functional&gt;</code> \u5b9e\u73b0\u4e86\u4f18\u5148\u961f\u5217\u7684\u7ed3\u6784\u548c\u76f8\u5e94\u7684\u64cd\u4f5c\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u4ed6\u6765\u5b9e\u73b0\u5927\u6839\u5806\uff0c\u5c0f\u6839\u5806\uff0c\u4f18\u5148\u961f\u5217\u7b49\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u5927\u6839\u5806</p> <pre><code>priority_queue&lt;int&gt; q;\n// \u6216\u8005\u4f7f\u7528\u5b8c\u6574\u7684\u58f0\u660e\u5f62\u5f0f\npriority_queue&lt;int,vector&lt;int&gt; less&lt;int&gt;()&gt; q;\n\n// \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u5927\u9876\u5806\nvector&lt;int&gt; v = {5,4,10,14,7,9,3,2,8,30};\nfor (int i = 0; i &lt; v.size(); ++i) {\n    q.push(v[i]);\n}\n\n// \u5f39\u51fa\u6700\u5927\u5143\u7d20\nq.pop()\n</code></pre> <p>\u5c0f\u6839\u5806</p> <pre><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q;\n\n// \u4ece\u65e0\u5e8f\u6570\u7ec4\u5efa\u7acb\u5c0f\u9876\u5806\nvector&lt;int&gt; v = {5,4,10,14,7,9,3,2,8,30};\nfor (int i = 0; i &lt; v.size(); ++i) {\n    q.push(v[i]);\n}\n\n// \u5f39\u51fa\u6700\u5927\u5143\u7d20\nq.pop()\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_16","title":"\u54c8\u5e0c\u8868","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c%2B%2B/#_17","title":"\u6392\u5e8f","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/","title":"C \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>\u8bb0\u5f55\u7528C\u8bed\u8a00\u5237 leetcode \u9898\u5fc5\u987b\u8981\u4e86\u89e3\u7684C\u8bed\u8a00\u76f8\u5173\u529f\u80fd</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#include","title":"include","text":"<pre><code>// bool, true, false\n#include &lt;stdbool.h&gt;\n\n// UT_hash_handle, HASH_XXX\n#include &lt;uthash.h&gt;\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_1","title":"\u56db\u820d\u4e94\u5165","text":"<pre><code>// \u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\nfloat number = 1.2768;\nnumber = (int)(100 * number + 0.5) / 100.0\nprintf(\"%.2f\", number);\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_2","title":"\u8f93\u5165\u8f93\u51fa","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_3","title":"\u8bfb\u53d6","text":"<ul> <li><code>char c = getchar();</code> : \u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26</li> <li><code>gets(string);</code> : \u8bfb\u53d6\u4e00\u884c\u5b57\u7b26</li> <li>\u8bfb\u53d6\u82e5\u5e72\u884c\uff1a</li> </ul> <p>\u5f53\u6ca1\u6709\u6307\u5b9a\u8f93\u5165\u662f\u591a\u5c11\u884c\uff0c \u4ee5\u7ed3\u675f\u5feb\u6377\u952e\u7ed3\u675f\u8f93\u5165\u7684\u65f6\u5019\uff0c\u6309\u7167\u4e0b\u9762\u65b9\u5f0f\u8bfb\u53d6</p> <pre><code>while (scanf(\"%d\", &amp;n) != EOF) {\n    printf(\"%d \", n);\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_4","title":"\u91cd\u5b9a\u5411","text":"<pre><code>freopen(\"input.txt\", stdin); // \u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\nfreopen(\"output.txt\", stdout); // \u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\n\nfclose(stdin);\nfclose(stdout);\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_5","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#uthash","title":"\u54c8\u5e0c\u8868(uthash)","text":"<p>C \u8bed\u8a00\u7f3a\u4e4f\u5185\u7f6e\u6570\u636e\u7ed3\u6784\u7684\u652f\u6301\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4f18\u79c0\u7684\u54c8\u5e0c\u5e93 uthash, \u5b83\u662f\u7528\u5b8f\u5b9e\u73b0\u7684\uff0c\u4f7f\u7528\u7684\u65f6\u5019\u53ea\u9700\u8981\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\u5373\u53ef\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#key","title":"\u6574\u6570\u4e3akey","text":"<pre><code>HASH_FIND_INT(HashMap, &amp;number, currMap); // \u5224\u65ad\u662f\u5426\u5b58\u5728\nif (currMap == NULL) {\n    currMap = new_map_element;\n    HASH_ADD_INT(HashMap, key_name, currMap); // \u52a0\u5165\u54c8\u5e0c\u8868\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#key_1","title":"\u5b57\u7b26\u4e32\u4e3akey","text":"<pre><code>HASH_FIND_STR(HashMap, &amp;number, currMap); // \u5224\u65ad\u662f\u5426\u5b58\u5728\nif (currMap == NULL) {\n    currMap = new_map_element;\n    HASH_ADD_STR(HashMap, key_name, currMap); // \u52a0\u5165\u54c8\u5e0c\u8868\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#key_2","title":"\u5355\u5b57\u7b26\u4e3akey","text":"<pre><code>HASH_FIND(hh, HashMap, &amp;c, sizeof(char), currMap); // \u5224\u65ad\u662f\u5426\u5b58\u5728\nif (currMap == NULL) {\n    currMap = new_map_element;\n    HASH_ADD(hh, HashMap, key_name, sizeof(char), currMap); // \u52a0\u5165\u54c8\u5e0c\u8868\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#key_3","title":"\u5b57\u7b26\u6307\u9488\u4e3akey","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_6","title":"\u5927\u5c0f","text":"<pre><code>size = HASH_COUNT(HashMap);\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_7","title":"\u904d\u5386\u548c\u5220\u9664","text":"<pre><code>HASH_ITER(hh, HashMap, currMap, tmpMap) {\n    free(currMao);\n    HASH_DEL(currMap);\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_8","title":"\u6392\u5e8f","text":"<pre><code>HASH_SORT(HashMap, compare_function);\nint compare_fucntion(HashMap *a, HashMap *b) {\n    return a-&gt;value - b-&gt;value;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/c/#_9","title":"\u4e8c\u7ef4\u54c8\u5e0c\u8868","text":"<p>dic['A']['B'] = 1, \u5b9e\u73b0\u8fd9\u6837\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u5185\u627e\u5230\u3002</p> <p>\u7528\u5355\u4e2a\u5b57\u6bcd\u8868\u793a\u884c\u53f7\u548c\u5217\u53f7\u7684\u4e8c\u7ef4\u77e9\u9635</p> <pre><code>typedef struct B{\n    char col;\n    int value;\n    UT_hash_handle hh;\n}B;\n\ntypedef struct A{\n    char row;\n    B *cols;\n    UT_hash_handle hh;\n}A;\n\nA *matrix = NULL;\nA *currMatrix = NULL;\nB *cols = NULL;\nB *currCols = NULL;\n\nHASH_FIND(hh, matrix, &amp;c, sizeof(char), currMatrix);\nif (currMatrix == NULL) {\n    currMatrix-&gt;row = row;\n    currMatrix-&gt;cols = NULL;\n    HASH_ADD(hh, matrix, row, currMatrix);\n} else {\n    HASH_FIND(hh, currMatrix-&gt;cols, &amp;c, currCols);\n    if (currCols == NULL) {\n        currCols = new_element;\n        HASH_ADD(hh, currMatrix-&gt;cols, col, currCols);\n    }\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/","title":"GDB\u8c03\u8bd5\u6280\u5de7","text":"<p>vscode \u4e2d\u4f7f\u7528gdb \u547d\u4ee4\u9700\u8981\u52a0 <code>-exec</code>, \u4e0d\u52a0\u9ed8\u8ba4\u6253\u5370\u53d8\u91cf\u7684\u503c\uff0c \u65e0\u6cd5\u6267\u884cGDB\u547d\u4ee4.</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_1","title":"\u5e38\u7528\u547d\u4ee4","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_2","title":"\u8bbe\u7f6e\u65ad\u70b9","text":"<p>\u8fd0\u884c\u5230\u5177\u4f53\u4f4d\u7f6e\u7684\u65f6\u5019\u505c\u4f4f\u3002</p> <ul> <li><code>break filename:line_number</code></li> <li><code>break filename:function_name</code></li> <li><code>break xxxxx if xxxx</code> : \u6761\u4ef6\u65ad\u70b9</li> <li><code>info break</code> : \u663e\u793a\u65ad\u70b9</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_3","title":"\u8bbe\u7f6e\u89c2\u5bdf\u70b9","text":"<p>\u5f53\u67d0\u4e2a\u53d8\u91cf\u7684\u503c\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u505c\u4f4f\u3002</p> <ul> <li><code>watch expr</code> : \u4e00\u65e6\u53d1\u751f\u53d8\u5316</li> <li><code>rwatch expr</code> : \u4e00\u65e6\u88ab\u8bfb\u53d6</li> <li><code>awatch expr</code> : \u4e00\u65e6\u88ab\u8bfb\u53d6\u6216\u8005\u5199\u5165</li> <li><code>info watchpoints</code> : \u663e\u793a\u89c2\u5bdf\u70b9</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_4","title":"\u67e5\u770b\u53d8\u91cf","text":"<ul> <li><code>p var_name</code></li> <li><code>p *arr@arr_len</code></li> <li><code>info args</code> : \u663e\u793a\u51fd\u6570\u53c2\u6570\u503c</li> <li><code>info locals</code> : \u663e\u793a\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u7684\u503c</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_5","title":"\u67e5\u770b\u5185\u5b58","text":"<ul> <li><code>bt(backtrace)</code> : \u6253\u5370\u51fd\u6570\u8c03\u7528\u6808</li> <li><code>info f(frame)</code> : \u663e\u793a\u5f53\u524d\u5904\u4e8e\u54ea\u5c42\u51fd\u6570\uff0c\u9ed8\u8ba4\u6700\u9876\u5c42</li> <li><code>up</code> : \u5411\u4e0a\u79fb\u52a8\u4e00\u5c42</li> <li><code>down</code> : \u5411\u4e0b\u79fb\u52a8\u4e00\u5c42</li> <li><code>frame n</code> : \u5207\u6362\u5230n\u5c42</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_6","title":"\u67e5\u770b\u6e90\u7801","text":"<ul> <li><code>l(list)</code> : \u5217\u51fa\u5f53\u524d\u884c\u540e\u9762\u7684\u4ee3\u7801</li> <li><code>list -</code> : \u663e\u793a\u5f53\u524d\u884c\u524d\u9762\u7684\u4ee3\u7801</li> <li><code>list line_number</code> : \u663e\u793a line_number \u9644\u8fd1\u7684\u4ee3\u7801</li> <li><code>list line_begin,line_end</code></li> <li><code>list function_name</code></li> <li><code>list filename:function_name</code></li> <li><code>search &lt;regexp&gt;</code> : \u663e\u793a\u540e\u9762\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4ee3\u7801</li> <li><code>forward search &lt;regexp&gt;</code> : \u663e\u793a\u524d\u9762\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4ee3\u7801</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_7","title":"\u63a7\u5236\u6267\u884c\u6d41\u7a0b","text":"<ul> <li><code>si(stepi)</code> : \u5355\u6b65\u6267\u884c(\u6c47\u7f16\u4ee3\u7801)</li> <li><code>ni(nexti)</code> : \u5355\u6b65\u6267\u884c(\u6c47\u7f16\u4ee3\u7801)</li> <li><code>step</code> : \u8fdb\u5165\u5230\u51fd\u6570\u5185\u90e8</li> <li><code>n(next)</code> : \u6267\u884c\u4e00\u884c\uff0c\u4e0d\u8fdb\u5165\u51fd\u6570</li> <li><code>u(until)</code> : \u6267\u884c\u5b8c\u5faa\u73af\u4f53</li> <li><code>finish</code> : \u6267\u884c\u5b8c\u672c\u51fd\u6570</li> <li><code>c(continue)</code> : \u7ee7\u7eed\u6267\u884c</li> <li><code>r(run)</code> : \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/gdb%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/#_8","title":"\u5176\u4ed6","text":"<p>GDB \u6253\u5370\u591a\u7ef4\u6570\u7ec4\u4e0d\u6613\uff0c \u53ef\u4ee5\u81ea\u5df1\u5199\u6253\u5370\u51fd\u6570\uff0c\u7136\u540e\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u8c03\u7528\u51fd\u6570\u3002</p> <ul> <li><code>call function_name(para1, para2)</code> : \u8c03\u7528\u51fd\u6570</li> <li><code>shell &lt;command&gt;</code> : \u6267\u884c shell \u547d\u4ee4</li> </ul>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/","title":"leetcode \u5e38\u7528\u51fd\u6570","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#x","title":"\u5224\u65adx\u662f\u5426\u662f\u7d20\u6570","text":"<pre><code>// \u5224\u65adx\u662f\u5426\u662f\u7d20\u6570\nbool isPrime(int x){\n    int xx = (int)sqrt((double)x);\n    for(int i=2;i&lt;=xx;i++){\n        if( x % i == 0) return false;\n    }\n    return true;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#n235","title":"\u627e\u51fan\u4ee5\u5185\uff0c2\uff0c3\uff0c5\u6574\u9664\u7684\u6240\u6709\u6570\u5b57","text":"<pre><code>// \u8fd4\u56de\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15\nint minThree(vector&lt;int&gt; v, int &amp;index){\n    if(v.size()!=3) return -1;\n    int minValue = v[0];\n    index = 0;\n    if(minValue &gt; v[1]){\n        minValue = v[1];\n        index = 1;\n    }\n    if(minValue &gt; v[2]){\n        minValue = v[2];\n        index = 2;\n    }\n    return minValue;\n}\n// \u627e\u51fan\u4ee5\u5185\u6240\u6709\u80fd\u88ab2\uff0c3\uff0c5\u5176\u4e2d\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u6574\u9664\u7684\u6570\u5b57\nvector&lt;int&gt; getNumbers(int x){\n    vector&lt;int&gt; results={1};\n    vector&lt;int&gt; index235 = {1,1,1};\n    int index = 0;\n    int minValue = minThree({2*index235[0],3*index235[1],5*index235[2]},index);\n    while(minValue&lt;=x){\n        if(minValue != results[results.size()-1]){\n            results.push_back(minValue);\n        }\n        index235[index]++;\n        minValue = minThree({2*index235[0],3*index235[1],5*index235[2]},index);\n    }\n    return results;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#15002351","title":"\u627e\u51fa\u7b2c1500\u4e2a\u53ea\u5305\u542b2\u62163\u62165\u4e3a\u56e0\u5b50\u7684\u6570\u5b57(\u4ece1\u5f00\u59cb)","text":"<pre><code>// \u8fd4\u56de\u4e09\u4e2a\u6570\u5b57\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5c0f\u503c\u7684\u7d22\u5f15\nint minThree(vector&lt;int&gt; v, int &amp;index){\n    if(v.size()!=3) return -1;\n    int minValue = v[0];\n    index = 0;\n    if(minValue &gt; v[1]){\n        minValue = v[1];\n        index = 1;\n    }\n    if(minValue &gt; v[2]){\n        minValue = v[2];\n        index = 2;\n    }\n    return minValue;\n}\n// \u627e\u5230\u7b2cK\u4e2a\u6570\u5b57\uff08\u4ece1\u5f00\u59cb\uff09\nint getNumbers(int k){\n    vector&lt;int&gt; index235 = {1,1,1};\n    int index = 0;\n\n    int tmp = 1;\n    int count = 1;\n    int minValue = 1;\n    while(count &lt; k){\n        minValue = minThree({2*index235[0],3*index235[1],5*index235[2]},index);\n        if(minValue != tmp){\n            count++;\n            tmp = minValue;\n        }\n        index235[index]++;\n    }\n    return minValue;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#n","title":"\u5c0f\u4e8e\u7b49\u4e8en\u7684\u6240\u6709\u7d20\u6570","text":"<pre><code>// \u627e\u51fax\u4ee5\u5185\u7684\u6240\u6709\u7d20\u6570\nvector&lt;int&gt; getPrimes(int x){\n    vector&lt;int&gt; Primes;\n    // \u521d\u59cb\u5316 0 - x \u90fd\u662f\u7d20\u6570\n    vector&lt;bool&gt; isPrime(x+1,true);\n    isPrime[0] = false; // 0 \u4e0d\u662f\u7d20\u6570\n    isPrime[1] = false; // 1 \u4e0d\u662f\u7d20\u6570\n    for(int i=2;i&lt;=x;i++){\n        // \u5982\u679ci\u662f\u7d20\u6570\uff0c\u628a\u6240\u6709i\u7684\u500d\u6570\u8bbe\u7f6e\u6210\u4e0d\u662f\u7d20\u6570\n        if(isPrime[i]){\n            Primes.push_back(i);\n            for(int j=i*2;j&lt;=x;j=j+i){\n                isPrime[j] = false;\n            }\n        }\n    }\n    return Primes;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_1","title":"\u6700\u5927\u516c\u7ea6\u6570","text":"<pre><code>// \u6700\u5927\u516c\u7ea6\u6570\nint getY(int x,int y){\n    int tmp = 0;\n\n    while(y){\n        tmp = y;\n        y = x % y;\n        x = tmp;\n    }\n    return x;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_2","title":"\u6574\u6570\u8f6c\u6362\u6210\u5b57\u7b26\u4e32","text":"<pre><code>#include &lt;sstream&gt;\n#include &lt;string&gt;\nstring Int_to_String(int n)\n{\n    ostringstream stream;\n    stream&lt;&lt;n;  //n\u4e3aint\u7c7b\u578b\n    return stream.str();\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#k","title":"\u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236\u4e4b\u540e\u6570\u4f4d\u4e4b\u548c","text":"<pre><code>// 10\u8fdb\u5236\u6570\u5b57 \u8f6c\u6362\u6210K\u8fdb\u5236\u4e4b\u540e\u5404\u4e2a\u6570\u4f4d\u7684\u6570\u5b57\u4e4b\u548c\nint getSum(int n,int k){\n    int sum = 0;\n    while(n){\n        sum += n % k;\n        n = n / k;\n    }\n    return sum;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#k_1","title":"\u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210K\u8fdb\u5236","text":"<pre><code>deque&lt;int&gt; Kin(int n,int k){\n    deque&lt;int&gt; result;\n    while(n/k != 0){\n        result.push_front(n%k);\n        n = n / k;\n    }\n    result.push_front(n);\n    return result;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#k_2","title":"K\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u6210\u5341\u8fdb\u5236","text":"<pre><code>/**\n * \u5c06K\u8fdb\u5236\u7684deque\u8f6c\u6362\u621010\u8fdb\u5236\n * @param v\n * @return\n */\nint Kinverse(deque&lt;int&gt; v,int k){\n    int s = 0;\n    int i = 0;\n    while(!v.empty()){\n        s += v.back() * std::pow(float(k),i);\n        ++i;\n    }\n    return s;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_3","title":"\u5feb\u901f\u5e42\u548c\u77e9\u9635\u5feb\u901f\u5e42","text":"<p>\u6574\u6570\u7684\u5feb\u901f\u5e42</p> <p>\u6c42\\(a^b\\)\u4e00\u822c\u7684\u505a\u6cd5\u662f\u7528\u4e00\u4e2a\u5faa\u73af\uff0c\u5c06a\u7d2f\u4e58b\u6b21\uff0c\u8fd9\u6837\u9700\u8981\u505ab\u6b21\u4e58\u6cd5\u3002\u5feb\u901f\u5e42\u7684\u601d\u60f3\u662f\u5229\u7528\u4e86\\(a^(b1+b2) = a^b1 + a^b2\\)\u7684\u601d\u60f3\uff0c\u628ab\u8868\u793a\u6210\u4e8c\u8fdb\u5236\uff0c\u7136\u540e\u62c6\u5206\u5f00\uff0c\u5206\u522b\u6c42\u5e42\uff0c\u518d\u6c42\u548c\u3002\u4e3e\u4f8b\u6765\u8bf4\uff1a</p> <p>\u5047\u8bbe\u8981\u6c42\\(5^{12}\\),\u4f20\u7edf\u7684\u65b9\u6cd5\u662f12\u4e2a5\u76f8\u4e58\uff0c\u8981\u505a12\u6b21\u4e58\u6cd5\u8fd0\u7b97\u3002\u5feb\u901f\u5e42\u7684\u601d\u60f3\u662f\u628a12\u8868\u793a\u6210\u4e8c\u8fdb\u5236\uff0c<code>1100</code> =\\(2^2+2^3\\), $$ 5^{12} = 5^{(2^2+2^3)} = 5^{2^2} * 5^{2^3} $$ 2\u7684\u5e42\u7684\u8ba1\u7b97\u53ef\u4ee5\u7531\u5341\u5206\u8fc5\u901f\u7684\u79fb\u4f4d\u8ba1\u7b97\u5f97\u5230\uff0c\u6240\u6709\u539f\u6765\u9700\u898112\u4e2a\u4e58\u6cd5\u8fd0\u7b97\u624d\u80fd\u89e3\u51b3\u7684\u8ba1\u7b97\u95ee\u9898\uff0c\u73b0\u5728\u7f16\u7a0b\u4e86\u53ea\u9700\u8981\u4e09\u6b21\u8ba1\u7b97\u8282\u80fd\u89e3\u51b3\u3002</p> <p><pre><code>int quickPow(int a,int b){\n    int ans=1,base=a;\n    while(b!=0){\n        if(b&amp;1!=0)\n        \u3000\u3000ans*=base;\n        base*=base;\n        b&gt;&gt;=1;\n\u3000 }\n    return ans;\n}\n</code></pre> \u6309\u7167\u4e0a\u9762\u7684\u4ee3\u7801\u8ba1\u7b97\u51fa\u6765\u7684\u5b9e\u9645\u4e0a\u662f\\(5^{2^2} * 5^{2^3}\\), \u56e0\u4e3a\u6211\u4eec\u7528\u7684\u662f\u53f3\u79fb\uff0c\u6bcf\u6b21\u90fd\u53ea\u5224\u65ad\u672b\u5c3e\u7684\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u662f1\uff0c\u5c31\u4e58\u5165\u5f53\u524d\u7684\u7ed3\u679c\u3002\u6bcf\u6b21\u5faa\u73af\uff08\u4e0d\u7ba1\u662f\u4e0d\u662f1\uff09\uff0cbase\u90fd\u8981\u7ffb\u500d\uff0c\u56e0\u4e3a\u662f\u4e8c\u8fdb\u5236\uff0c\u6bcf\u79fb\u52a8\u4e00\u4f4d\u5c31\u610f\u5473\u7740\u4e58\u4ee52.</p> <p>\u53e6\u5916\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u662f\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u6570\u636e\u7684\u8303\u56f4\uff0c\u5982\u679cint\u7684\u8303\u56f4\u4e0d\u591f\uff0c\u53ef\u4ee5\u4f7f\u7528long long\u7c7b\u578b\u3002</p> <p>\u77e9\u9635\u7684\u5feb\u901f\u5e42</p> <ul> <li>\u77e9\u9635\u4e58\u6cd5 \u4e00\u4e2a\\(m*n\\)\u7684\u77e9\u9635  \u4e58\u4ee5 \u4e00\u4e2a\\(n*p\\)\u7684\u77e9\u9635\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\\(m*p\\)\u7684\u77e9\u9635\u3002\u77e9\u9635\u76f8\u4e58\u7684\u89c4\u5219\u662f\uff1a\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u4e58\u4ee5\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u5217\uff0c\u5bf9\u5e94\u7684\u5143\u7d20\u76f8\u4e58\u518d\u76f8\u52a0\uff0c\u4f5c\u4e3a\u65b0\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u3002\u6734\u7d20\u7684\u77e9\u9635\u4e58\u6cd5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>typedef vector&lt;vector&lt;int&gt;&gt; matrix;\nmatrix MatricMul(matrix A,matrix B){\n    int m = A.size();\n    int n1 = A[0].size();\n    int n2 = B.size();\n    int p = B[0].size();\n    if(n1 != n2) {cout&lt;&lt;\"no cheng of the two matrix.\"&lt;&lt;endl;return matrix();}\n    int n = n1 = n2;\n    matrix C(m,vector&lt;int&gt;(p,0));\n    for(int i=0;i&lt;m;i++){\n        for(int j=0;j&lt;p;j++){\n            for(int k=0;k&lt;n;k++){\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n    return C;\n}\n\nint main(){\n    matrix A = {{1,2,3},{4,5,6}};\n    matrix B = {{1,2},{3,4},{5,6}};\n    matrix C = MatricMul(A,B);\n    return 0;\n}\n</code></pre></li> </ul> <p>-\\(A^n\\)\u5feb\u901f\u6c42\u77e9\u9635\u7684n\u6b21\u5e42\uff0c\u6ce8\u610f\u8fd9\u91ccA\u53ea\u80fd\u662f\u65b9\u9635 \u77e9\u9635\u7684\u5feb\u901f\u5e42\u548c\u6574\u6570\u7684\u5feb\u901f\u5e42\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u91cd\u8f7d\u4e00\u4e0b*\u8fd9\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4f7f\u5f97\u4e24\u4fa7\u662f\u77e9\u9635\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u7684\u662f\u77e9\u9635\u4e58\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u51fd\u6570<code>MatricMul</code>: <pre><code>matrix quickPowMatrix(matrix A,int n){\n    matrix base = A;\n    // \u521d\u59cb\u5316\u6210\u5355\u4f4d\u77e9\u9635\n    int len = A.size();\n    matrix ans(len,vector&lt;int&gt;(len,0));\n    for(int i=0;i&lt;A.size();i++){\n        ans[i][i] = 1;\n    }\n    while(n!=0){\n        if(n&amp;1!=0)\n            ans = MatricMul(ans,base);\n        base = MatricMul(base,base);\n        n&gt;&gt;=1;\n    }\n    return ans;\n}\n</code></pre></p> <p>\u5feb\u901f\u5e42\u901a\u5e38\u7528\u6765\u6c42\u5f88\u5927\u7684\u6570\uff0c\u8fd9\u4e2a\u65f6\u5019\u867d\u7136\u5c31\u7b97\u901f\u5ea6\u5728\u53ef\u4ee5\u63a5\u53d7\u7684\u8303\u56f4\u5185\uff0c\u4f46\u662f\u6570\u636e\u7684\u8303\u56f4\u65e9\u5df2\u7ecf\u8d85\u8fc7\u4e86\u80fd\u591f\u8868\u793a\u8303\u56f4\uff0c\u901a\u5e38\u7684\u65b9\u6cd5\u5c31\u662fmod\u6bcf\u4e2a\u5927\u6570\uff0c\u5f97\u5230\u4e00\u4e2a\u8f83\u5c0f\u7684\u7ed3\u679c\u3002</p> <p>\u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u7684\u5f00\u9500\uff08\u8ba1\u7b97\u5c0f\u6570\u7684\u4e58\u6cd5\u8981\u6bd4\u8ba1\u7b97\u5927\u6570\u7684\u4e58\u6cd5\u5f00\u9500\u5c0f\uff09\uff0c\u901a\u5e38\u5229\u7528\u6a21\u8fd0\u7b97\u7684\u6cd5\u5219\uff1a</p> \\[ (a+b) mod c = (a mod c + b mod c) mod c ; \\] \\[ (a*b) mod c = (a mod c * b mod c) mod c ; \\] <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6bcf\u4e00\u6b21\u8ba1\u7b97\u4e4b\u540e\u5c31\u53d6\u6a21\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u8303\u56f4\u4e0d\u6ea2\u51fa\uff0c\u8fd8\u80fd\u4fdd\u8bc1\u6bd4\u8f83\u5feb\u7684\u8ba1\u7b97\u901f\u5ea6\u3002</p> <p>\u4f7f\u7528C++\u7684\u6a21\u7248\u6280\u672f\u7f16\u5199\u901a\u7528\u7684\u5feb\u901f\u5e42\u6a21\u7248 <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long LL;\n\ntemplate&lt;class T, int MAXN, T MOD=-1&gt;\nclass Matrix {\npublic:\n    T m[MAXN][MAXN];\n    Matrix(){}\n    // \u5982\u679cMOD\u4e0d\u662f-1\uff0c\u628anum\u53d6\u6a21\n    void init(T num[MAXN][MAXN]){\n        for(int i = 0 ; i &lt; MAXN ; i++)\n        {\n            for(int j = 0 ; j &lt; MAXN ; j++)\n            {\n                m[i][j] = num[i][j];\n                if (MOD!=-1)\n                    m[i][j] %= MOD;\n            }\n        }\n    }\n    //\u77e9\u9635\u4e58\u6cd5\u7684\u5b9e\u73b0\n    friend Matrix operator*(const Matrix &amp;m1 ,const Matrix &amp;m2)\n    {\n        int i, j, k;\n        Matrix ret;\n        memset(ret.m, 0, sizeof(ret.m));\n        for (i = 0; i &lt; MAXN; i++) {\n            for (j = 0; j &lt; MAXN; j++)\n                if ( m1.m[i][j] )\n                {\n                    for(k = 0 ; k &lt; MAXN ; k++){\n                        ret.m[i][k] += m1.m[i][j] * m2.m[j][k];\n                        if (MOD!=-1) ret.m[i][k] %= MOD;\n                    }\n                }\n        }\n        return ret;\n    }\n    // \u77e9\u9635\u52a0\u6cd5\u7684\u5b9e\u73b0\n    friend Matrix operator+(const Matrix &amp;m1 ,const Matrix &amp;m2) {\n        int i, j;\n        Matrix ret;\n        for (i = 0; i &lt; MAXN; i++) {\n            for (j = 0; j &lt; MAXN; j++) {\n                ret.m[i][j] = 0;\n                ret.m[i][j] = m1.m[i][j]+m2.m[i][j];\n                if (MOD!=-1)\n                    ret.m[i][j] %= MOD;\n            }\n        }\n        return ret;\n    }\n    //\u77e9\u9635\u5feb\u901f\u5e42\u7684\u5b9e\u73b0\n    friend Matrix operator^(const Matrix &amp;_M , LL nx){\n        Matrix ret,M(_M);\n        //ret \u521d\u59cb\u5316\u6210\u5355\u4f4d\u77e9\u9635\n        for(int i = 0 ; i &lt; MAXN ; i++){\n            for(int j = 0 ; j &lt; MAXN ; j++){\n                if(i == j)\n                    ret.m[i][j] = 1;\n                else ret.m[i][j] = 0;\n            }\n        }\n        while(nx){\n            if(nx &amp; 1)\n                ret = ret * M;\n            nx = nx &gt;&gt; 1;\n            M = M * M;\n        }\n        return ret;\n    }\n};\n\nint main(){\n    int C[2][2] = {{1,2},{3,4}};\n    Matrix&lt;int,2,1000&gt; mm;\n    mm.init(C);\n    auto add = mm + mm;\n    auto cheng = mm * mm;\n    auto mi = mm ^ 2 ;\n    return 0;\n}\n</code></pre></p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_4","title":"\u5305\u542b\u4e00\u5207\u7684\u5934\u6587\u4ef6","text":"<p><pre><code>#include &lt;bits/stdc++.h&gt;\n</code></pre> \u4e00\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u6240\u6709\u5e38\u7528\u7684\u5934\u6587\u4ef6\uff0c\u4f60\u6240\u6709\u4f7f\u7528\u7684\u51fd\u6570\u4e0d\u518d\u9700\u8981\u5f15\u5165\u76f8\u5e94\u7684\u5934\u6587\u4ef6\u3002\u8be5\u5934\u6587\u4ef6\u5728ACM\u7ade\u8d5b\u4e2d\u7ecf\u5e38\u88ab\u4f7f\u7528\uff0c\u53ef\u4ee5\u51cf\u5c11\u4f60\u5305\u542b\u9700\u8981\u7684\u5934\u6587\u4ef6\u9700\u8981\u7684\u65f6\u95f4\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u5934\u6587\u4ef6\u5e76\u4e0d\u662f\u6807\u51c6\u7684\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u80fd\u6709\u7684\u7f16\u8bd1\u5668\u4e0d\u652f\u6301\u5b83\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_5","title":"\u8fd4\u56de\u4e00\u4e2a\u65e0\u5e8f\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u7684\u4e0b\u6807\uff0c\u4e0d\u52a8\u539f\u6765\u7684\u6570\u7ec4","text":"<p>\u4f8b\u5982 a = [3,5,2,4,1] , \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u5e94\u8be5\u662f[1,2,3,4,5], \u539f\u6765\u5728a\u4e2d\u7684\u4e0b\u6807\u662f[4,2,0,3,1],\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u8f93\u5165a\uff0c\u8fd4\u56de[4,2,0,3,1] <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nvector&lt;int&gt; getOrderIndex(vector&lt;int&gt; &amp;a){\n    vector&lt;int&gt; order(a.size(),0);\n    for(int i=0;i&lt;a.size();i++){\n        order[i] = i;\n    }\n    sort(order.begin(), order.begin() + a.size(), [a](const int&amp; x, const int&amp; y)-&gt;bool { return a[x] &lt; a[y];});\n    return order;\n}\n</code></pre> order\u4e2d\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_6","title":"\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570","text":"<pre><code>/**\n * \u7528\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\n * @param s \n * @return \n */\nvector&lt;int&gt; string2int(string &amp;s){\n    istringstream in(s);\n    vector&lt;int&gt; v;\n    int num;\n    while(in &gt;&gt; num){\n        v.push_back(num);\n    }\n    return v;\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/leetcode/#_7","title":"\u8f93\u5165\u6302","text":"<p>\u5f53\u7eaf\u6570\u5b57\u7684\u8f93\u5165\u89c4\u6a21\u8d85\u8fc7\\(10^6\\)\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8f93\u5165\u6302\uff0c\u6bd4\u7cfb\u7edf\u81ea\u5e26\u7684cin\u5feb\u5f88\u591a\u3002</p> <pre><code>inline void q_read(int &amp;num)\n{\n    char ch; int f = 1;\n    while(true)\n    {\n        ch = getchar();\n        if(ch == '-') f = -1;\n        if(isdigit(ch))\n        {\n            num = ch - '0';\n            break;\n        }\n    }\n    while(ch = getchar(), isdigit(ch)) num = num*10+ch-'0';\n    num *= f;\n}\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u5728\u5f00\u59cb\u7684\u65f6\u5019\u52a0\u5165 <code>ios::sync_with_stdio(false);</code>, \u5b83\u7684\u4f5c\u7528\u662f\u53bb\u6389cin\u989d\u5916\u7684\u68c0\u67e5\u5f00\u9500\uff0c\u8fbe\u5230\u548cscanf\u76f8\u4f3c\u7684\u8f93\u5165\u6548\u7387\uff1b</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mkdocs/","title":"mkdocs","text":"<p>\u4f7f\u7528mkdocs\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2\u7cfb\u7edf\uff0c\u5b9e\u73b0\u77e5\u8bc6\u7ba1\u7406\u3002 \u5b9e\u73b0\u7684\u529f\u80fd\uff1a 1. \u6839\u636e\u6587\u4ef6\u5939\u7ed3\u6784\u81ea\u52a8\u751f\u6210\u591a\u7ea7\u76ee\u5f55(\u6bcf\u4e2a\u6587\u4ef6\u4e00\u4e2a\u6807\u9898\uff0c\u663e\u793a\u5728\u5de6\u4fa7) 2. \u6839\u636e\u6587\u7ae0\u5185\u5bb9\u81ea\u52a8\u751f\u6210\u6587\u7ae0\u76ee\u5f55(\u663e\u793a\u5728\u53f3\u4fa7) 3. \u5ffd\u7565\u7a0b\u5e8f\u6e90\u4ee3\u7801\u6587\u4ef6(\u6587\u4ef6\u5939\u8fd8\u662f\u53ef\u4ee5\u4f7f\u7528\u7684vscode\u5de5\u7a0b) 4. \u81ea\u52a8\u5bfc\u51fa\u6240\u6709md\u6587\u4ef6\u4e3a\u4e00\u4e2aPDF\u6587\u6863\uff0c\u5e26\u76ee\u5f55\u3002 5. github\u6258\u7ba1\u6e90\u7801\uff0c travis\u81ea\u52a8\u6784\u5efa\uff0c\u5728\u7ebf\u7f16\u8f91</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mkdocs/#_1","title":"\u5b89\u88c5","text":"<ol> <li>\u5b89\u88c5python, pip</li> <li>pip install mkdocs</li> </ol>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mkdocs/#_2","title":"\u4f7f\u7528","text":"<p>\u521b\u5efa\u914d\u7f6e\u6587\u4ef6 mkdocs.yml</p> <pre><code>site_name: FEIFEI\u7684\u4e2a\u4eba\u535a\u5ba2\nrepo_name: FF1204/leetcode\nrepo_url: https://github.com/FF1204/leetcode\nmarkdown_extensions:\n  - markdown.extensions.admonition\n  - pymdownx.tabbed\n  - codehilite:\n      guess_lang: false\n      linenums: true\n  - markdown.extensions.toc:\n      permalink: true\ntheme: \n    name: material \n    language: zh\n    palette:\n        primary: teal\n        accent: indigo\nplugins:\n  - search\n  - add-number:\n        strict_mode: False\n        order: 1\n        excludes:\n            - sql/\n            - command/rsync\n        includes:\n            - sql/MySQL\n  - awesome-pages\n  - mkpdfs\n  - exclude\n</code></pre> <p>\u5b89\u88c5\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u5230\u7684 material \u4e3b\u9898\uff0cadd-number\uff0cawesome-pages\uff0cmkpdfs\uff0c exclude\u63d2\u4ef6</p> <p>\u5728\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u76ee\u5f55\u4e2d\u8fd0\u884c mkdocs serve, \u542f\u52a8\u672c\u5730\u670d\u52a1\u5668\uff0c\u5c31\u53ef\u4ee5\u5728localhost:8000 \u770b\u5230\u7f51\u7ad9\u6548\u679c\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mkdocs/#_3","title":"\u81ea\u52a8\u90e8\u7f72","text":"<p>\u628a .travis.yml \u6dfb\u52a0\u5230\u535a\u5ba2\u6839\u76ee\u5f55\uff0c\u5728travis\u7f51\u7ad9\u4e0a\u521b\u5efa\u9879\u76ee\u5e76\u5173\u8054github\u4ed3\u5e93\u3002</p> <pre><code>dist: bionic\nlanguage: python\npython:\n-  3.7\ninstall:\n  - sudo apt-get install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info\n  - pip install mkdocs\n  - pip install mkdocs-material\n  - pip install mkdocs-awesome-pages-plugin\n  # mkpdfs-mkdocs \u5b58\u5728BUG\u6682\u672a\u4fee\u590d\uff0c\u4f7f\u7528\u81ea\u5df1\u4fee\u590d\u4e4b\u540e\u7684\u7248\u672c\n  #- pip3 install mkpdfs-mkdocs\n  - pip install -e git+https://github.com/FF1204/mkpdfs-mkdocs-plugin.git#egg=mkpdfs-mkdocs-plugin\n  - pip3 install mkdocs-add-number-plugin\nscript:\n  - mkdocs build --clean\nafter_success:  |\n  if [ -n \"$GITHUB_API_KEY\" ]; then\n    cd \"$TRAVIS_BUILD_DIR\"\n    cd site\n    git init\n    git add .\n    git -c user.name=$GITHUB_NAME -c user.email=$GITHUB_EMAIL commit -m \"Auto Deployment\"\n    git push -f -q https://$GITHUB_NAME:$GITHUB_API_KEY@github.com/FF1204/leetcode.git master:gh-pages\n    cd \"$TRAVIS_BUILD_DIR\"\n  fi\n</code></pre> <p>\u5176\u4e2d\uff0c <code>GITHUB_NAME</code>\uff0c <code>GITHUB_EMAIL</code>\uff0c <code>GITHUB_API_KEY</code>\u662f\u5728travis\u7f51\u7ad9\u5bf9\u5e94\u9879\u76ee\u4e2d\u586b\u5199\u7684\u81ea\u5df1\u7684gihub\u5bc6\u94a5\u3002<code>TRAVIS_BUILD_DIR</code>\u662ftravis\u5185\u7f6e\u7684\u53d8\u91cf\uff0c\u8868\u793a\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u8def\u5f84\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/mkdocs/#table","title":"\u4e3a table \u589e\u52a0\u67e5\u627e\u548c\u8fc7\u6ee4\u529f\u80fd","text":"<p>\u5728 <code>mkdocs.yml</code> \u6587\u4ef6\u4e2d\u589e\u52a0\u914d\u7f6e</p> <pre><code>theme: \n    name: material \n    language: zh\n    custom_dir: theme\n</code></pre> <p>\u4e3a\u4e3b\u9898\u81ea\u5b9a\u81ea\u5b9a\u4e49\u7684\u76ee\u5f55\uff0c \u8be5\u76ee\u5f55\u4e0e <code>docs</code> \u540c\u7ea7\u3002\u521b\u5efa\u8be5\u76ee\u5f55\uff0c \u5e76\u521b\u5efa\u4e0e\u4e3b\u9898 <code>material</code> \u76f8\u540c\u7684\u76ee\u5f55\u5c42\u7ea7\u7ed3\u6784\u3002 \u65b0\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u4f1a\u81ea\u52a8\u8986\u76d6\u6389\u539f\u6765\u4e3b\u9898\u4e2d\u7684\u540c\u540d\u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e0d\u6539\u53d8\u539f\u6765\u4e3b\u9898\u7684\u60c5\u51b5\u4e0bDIY\u4e3b\u9898\u3002</p> <p><code>theme</code> \u6587\u4ef6\u5939\u7ed3\u6784</p> <pre><code>theme\n    - assets\n        - stylesheets # \u653e\u7f6e\u989d\u5916\u7684\u6837\u5f0f\u8868\n        - javascripts # \u653e\u7f6e\u989d\u5916\u7684 JS \u5e93\n        - images  # \u653e\u7f6e\u989d\u5916\u7684\u56fe\u7247\u8d44\u6e90\n    - main.html # \u4f1a\u8986\u76d6\u539f\u6765\u4e3b\u9898\u4e2d\u7684 main.html\n</code></pre> <p><code>main.html</code> \u53ef\u4ee5\u65b0\u589e\u6837\u5f0f\u8868\uff0cJS\u5e93\u548c JS \u51fd\u6570\u3002</p> <pre><code>{% extends \"base.html\" %}\n\n{% block libs %}\n    {{ super() }}\n    &lt;script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/bootstrap-table@1.16.0/dist/extensions/filter-control/bootstrap-table-filter-control.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/bootstrap-table@1.16.0/dist/extensions/multiple-sort/bootstrap-table-multiple-sort.js\"&gt;&lt;/script&gt;\n{% endblock %}\n\n{% block styles %}\n    {{ super() }}\n    &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;link href=\"https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.css\" rel=\"stylesheet\"&gt;\n{% endblock %}\n\n{% block scripts %}\n    {{ super() }}\n    &lt;script&gt;\n        (function() {\n            var table_element = $('div.table_filter_start').nextUntil('div.table_filter_end', 'table');\n            table_element.attr('id', 'table_filter');\n            table_element.attr('data-filter-control', 'false');\n            table_element.attr('data-search', 'true');\n            table_element.addClass('table-sm');\n\n            var th_element = $('#table_filter thead th');\n            var count = th_element.length;\n            for (var i = 0; i &lt; count; i++) {\n                var th = $(\"#table_filter thead th:eq(\" + i + \")\");\n                th.attr('data-field','data' + i);\n            }\n            th_element.attr('data-filter-control', 'input');\n            th_element.attr('data-sortable', 'true');\n          })();\n    &lt;/script&gt;\n    &lt;script&gt;\n      $(function() {\n        $('#table_filter').bootstrapTable()\n      })\n    &lt;/script&gt;\n{% endblock%}\n</code></pre> <p>\u6211\u4eec\u901a\u8fc7 libs \u5f15\u5165\u9700\u8981\u7528\u5230\u7684 JS \u5e93\uff0c \u901a\u8fc7 styles \u5f15\u5165\u9700\u8981\u7528\u5230\u7684\u6837\u5f0f\u8868\uff0c \u901a\u8fc7 scripts \u5b9a\u4e49\u8981\u6267\u884c\u7684 JS \u51fd\u6570\uff0c\u5176\u4e2d <code>{{ super() }}</code> \u7684\u542b\u4e49\u662f\u7ee7\u627f\u7236\u4eb2\u6a21\u677f\u4e2d\u539f\u6765\u5c31\u5305\u542b\u7684\u4e1c\u897f\u3002</p> <p>\u6211\u4eec\u901a\u8fc7 JS \u811a\u672c\u5b9e\u73b0\u67e5\u627e <code>div.table_filter_start</code> \u548c <code>div.table_filter_end</code> \u5305\u542b\u7684\u8868\u683c\uff0c \u52a8\u6001\u6dfb\u52a0\u8868\u683c\u7684\u5c5e\u6027\u4f7f\u5b83\u652f\u6301\u641c\u7d22\u548c\u6392\u5e8f\u3002</p> <p>\u5728\u4e66\u5199markdown\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u7ed9\u8fd9\u4e2a\u8868\u683c\u6dfb\u52a0\u67e5\u627e\u548c\u6392\u5e8f\u7684\u529f\u80fd\uff0c\u53ea\u9700\u8981\u5728\u9996\u5c3e\u7528 <code>div</code> \u5305\u88f9\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>&lt;div class=\"table_filter_start\"&gt;&lt;/div&gt;\n\n| title1 | title2 | title3 |\n| ------ | ------ | ------ |\n| item1  | item2  | item3  |\n| item4  | item5  | item6  |\n\n&lt;div class=\"table_filter_end\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/","title":"Python \u8bed\u8a00\u57fa\u7840\u77e5\u8bc6","text":"<p>\u8bb0\u5f55\u7528 python \u5237 leetcode \u5fc5\u987b\u4e86\u89e3\u7684\u7279\u6027\uff0c\u4e3b\u8981\u662f\u6570\u636e\u7ed3\u6784\u7684\u8868\u793a\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_1","title":"\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#import","title":"import","text":"<p>\u8bb0\u5f55\u5404\u79cd\u9700\u8981\u5305\u542b\u7684\u5e93</p> <pre><code># \u540e\u7f6e\u8fd4\u56de\u7c7b\u578b List\nfrom typing import List\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#string","title":"string","text":"<pre><code>import regex as re\n\nstring = \"abcd\"\n\nstring.ltrsip()\nstring.rstrip()\nstring.strip() # \u53bb\u6389\u884c\u9996\uff0c \u884c\u5c3e\uff0c \u884c\u9996\u548c\u884c\u5c3e\u7684\u7a7a\u683c\uff0c\u53ef\u4f20\u5165\u5176\u4ed6\u5b57\u7b26\n\n# \u67e5\u627e\u66ff\u6362\n\nstring.find(\"substring\") # \u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e \u6216\u8005 -1\n[m.start() for m in re.finditer(\"test\", \"test test test\")] # \u8fd4\u56detest\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e\n[m.start() for m in re.finditer(\"(?=tt)\", \"tttttt\")] # \u8fd4\u56de\u6240\u6709\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u91cd\u53e0\u5339\u914d\nstring.count(\"substring\") # \u51fa\u73b0\u7684\u6b21\u6570\nstring.replace(\"astring\", \"bstring\") # a \u66ff\u6362\u6210 b\nstring[:start+1] + new_string + string[end:] # [start, end]\u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210new_string\n\n# \u5206\u5272\u62fc\u63a5\nstring.split(\"seperator\", count) # \u6309\u7167seperator\u5206\u5272string, \u6700\u591a\u5206\u5272count\u6b21\n\"seperator\".join(list[str]) # \u4f7f\u7528seperator\u62fc\u63a5list\u4e2d\u7684\u6bcf\u4e2astr\n\n# \u5927\u5199\u5c0f\u5199\nstring.isupper()\nstring.islower()\nstring.upper()\nstring.lower()\nstirng.title() # \u9996\u5b57\u6bcd\u5927\u5199\n\n# \u8f93\u51fa\u62fc\u63a5\n\"%s, %s\" % (string1, string2)\n\"{0},{1}\".format(string1, string2)\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#list","title":"list","text":"<pre><code># create\nlist1 = []\nlist2 = [0] * n\nlist3 = [0 for i in range(n)]\nlist4 = [[0] *m for i in range(n)] # n\u884cm\u5217\n\n# \u63d2\u5165\u5220\u9664\nlist1.append(element)\nlist1.extend(list2)\nlist1.insert(index, element)\nelement = list1.pop()\nelement = list1.pop(index)\ndel list1[index]\nlist1.remove(element)\nnew_list = list(set(a) - set(b)) # \u5220\u9664a\u4e2d\u5728b\u4e2d\u51fa\u73b0\u8fc7\u7684\u503c\n\n# \u904d\u5386\nfor elemnt in list1:\n    print(element)\nfor i in range(len(list1)):\n    print(list1[i])\nfor i, element in enumerate(list1):\n    print(element)\nfor element in reversed(list1): # \u5012\u5e8f\u8f93\u51fa\n    print(element)\n\n# \u4ee5\u4e0a\u904d\u5386\u90fd\u4e0d\u80fd\u4fee\u6539\u503c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\ni = 0\nwhile i &lt; len(list1):\n    print(list1[i])\n    i += 1\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#dict","title":"dict","text":"<pre><code># \u521b\u5efa\ndic = {}\ndic = {key1:value1, key2:value2}\n\n# \u589e\u5220\u6539\u67e5\nif key not in dic:\n    dic[key] = value\nif key in dic:\n    del dic[key]\nvalue = dic.pop(key, default_value)\n\n# \u904d\u5386\nfor key in dic:\n    print(key, dic[key])\nfor key, value in dic.iterms():\n    print(key, value)\nfor key in dic.keys():\n    print(key)\nfor value in dic.values():\n    print(value)\n\n# \u6709\u5e8f\u5b57\u5178\nfrom collection import OrderedDict\nodic = OrderedDict()\nodic[key1] = 1\nodic[key2] = 2\nodic[key3] = 3\n\nfirst_element = odic.popitem(last=False) # \u5f97\u5230key1\nlist(odic.items())[index] # \u6839\u636e\u7d22\u5f15\u83b7\u53d6\u5b57\u5178\u4e2d\u7684\u5143\u7d20\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#set","title":"set","text":"<p>\u5185\u90e8\u4f7f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0</p> <pre><code>set1 = set([1,1,2,3])\nset2 = {1,2,3}\n\nset1.add(element)\n\nset3 = set1.union(set2) # set1 + set2\nset3 = set1.intersecton(set2) # set1 &amp; set2\nset3 = set1.difference(set2) # set1 - set2\n\nset1.clear()\nif key in set1:\n    print(key)\n\n# \u56fa\u5b9a\u5927\u5c0f\u7684set\nfix_set = frozenset([1,2,3])\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_2","title":"\u9664\u6cd5\u8fd0\u7b97","text":"<pre><code>c = int(a / b) # \u5b9e\u73b0\u4e0eC\u8bed\u8a00\u4e00\u81f4\u7684\u6574\u6570\u9664\u6cd5\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_3","title":"\u8def\u5f84\u64cd\u4f5c","text":"<pre><code>os.path.isfile(path) # \u662f\u5426\u662f\u6587\u4ef6\nos.path.isdir(path) # \u662f\u5426\u662f\u76ee\u5f55\nos.path.basename(path) # \u8fd4\u56de\u6587\u4ef6\u540d\nos.path.dirname(path) # \u8fd4\u56de\u6587\u4ef6\u6240\u5728\u6587\u4ef6\u5939\nos.path.abspath(__file__) # \u8fd4\u56de\u5f53\u524d\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\nos.path.exists(path) # \u8def\u5f84\u662f\u5426\u5b58\u5728\nos.path.join(path, dirname) # \u62fc\u63a5\u8def\u5f84\nos.path.splittext(path) # \u5206\u5272\u6210\u8def\u5f84 + \u6587\u4ef6\u6269\u5c55\u540d\n\nos.listdir(path) # \u5217\u51fa\u8def\u5f84\u4e0b\u6587\u4ef6\u548c\u6587\u4ef6\u5939\nos.chdir(path) # \u6539\u53d8\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4f4dpath\nos.mkdir(path) # \u65b0\u5efa\u8def\u5f84\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u62a5\u9519\nos.remove(path) # \u5220\u9664\u6587\u4ef6\uff0cpath\u662f\u6587\u4ef6\u5939\u4f1a\u62a5\u9519\nos.removedirs(path) # \u9012\u5f52\u5220\u9664\u7a7a\u76ee\u5f55\uff0c\u5982\u679c\u4efb\u610f\u76ee\u5f55\u975e\u7a7a\u4f1a\u62a5\u9519\nos.rmdir(path) # \u5220\u9664path\u76ee\u5f55\uff0c\u5982\u679cpath\u975e\u7a7a\u4f1a\u62a5\u9519\nos.rename(olename, newname) # \u91cd\u547d\u540d\u6587\u4ef6\n\n# \u904d\u5386\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\u8fdb\u5165\u5b50\u6587\u4ef6\u5939\n# curdir:\u5f53\u524d\u6587\u4ef6\u5939 dirs:\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\u5939\uff0c files:\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u6240\u6709\u6587\u4ef6\n# True: \u4ece\u9876\u5c42\u5f00\u59cb\u8f93\u51fa False: \u4ece\u5e95\u5c42\u5f00\u59cb\u8f93\u51fa\nfile_list = []\nfor curdir, dirs, files in os.walk(root_path, True):\n    for file in files:\n        file_list.append(os.path.join(curdir, file))\n\n# \u83b7\u5f97\u6700\u65b0\u751f\u6210\u7684\u6587\u4ef6\nlists = os.listdir(root_path)\nlists.sort(key=lambda fn:os.path.getmtime(root_path+'/'+fn))\n# lists[-1] \u5c31\u662f\u6700\u65b0\u7684\u6587\u4ef6\n\n# \u590d\u5236\u6587\u4ef6\u5939 src_path \u590d\u5236\u5230 dst_path\nimport shutil\nif os.path.exist(dst_path):\n    shutil.rmtree(dst_path)\nos.mkdir(dst_path)\nshutil.copytree(src_path)\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_4","title":"\u4e2d\u6587\u7f16\u7801","text":"<pre><code># utf8 --&gt; gb2312\nimport codecs\nwith open(file, 'r', 'utf-8') as fd:\n    text = fd.read()\nwith open(file, 'w', 'gb2312') as fd:\n    fd.write(text)\n\nunicode(string).encode(\"gb2312\")\nu\"\u4e2d\u6587\".encode(\"gb2312\") # \u8f6c\u6362\u7f16\u7801\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_5","title":"\u8f93\u51fa","text":"<pre><code># print\u4e0d\u5e26\u6362\u884c\nprint(),\n\n# \u663e\u793a\u4e8c\u8fdb\u5236\nnum = 0b1011\nprint(b(num))\n\n# \u5e26\u989c\u8272\u7684\u6253\u5370\nprint(\"\\033[1;35m This color is pick.\\033[0m\")\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#shell","title":"\u8c03\u7528\u7cfb\u7edfshell","text":"<pre><code>import os\n\nret = os.system(cmd) # ret &gt;&gt; 8 == 0 \u8bf4\u660e\u6267\u884c\u6210\u529f\uff0c \u4e0d\u4f1a\u518d\u6807\u51c6\u8f93\u51fa\u6253\u5370\u5185\u5bb9\noutput = os.popen(cmd) # \u547d\u4ee4\u8f93\u51fa\u4f1a\u8fd4\u56de\u5230output\u548c\u6807\u51c6\u8f93\u51fa\u4e2d\n\n# \u5c4f\u853d\u6267\u884c\u7684\u547d\u4ee4\u518d\u6807\u51c6\u8f93\u51fa\u4e2d\u7684\u8f93\u51fa\nimport subprocess\nnull_dev = open(os.devnull, 'w')\np = subprocess.Popen(cmd, stdout=null_dev, stderr=null_dev)\nret = subprocess.Popen.poll(p)\nif ret == None: # \u547d\u4ee4\u672a\u6267\u884c\u5b8c\u6210\nif ret == number: # \u547d\u4ee4\u6267\u884c\u5b8c\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_6","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":"<pre><code>import re\n\nregex_pattern = \"\"\npattern = re.compile(regex_pattern)\n\nmatchObj = re.match(regex_pattern, string) # \u4ecestring\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5339\u914d\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u4e0d\u5339\u914d\uff0c\u8fd4\u56deNone\nmatchObj2 = re.search(regex_pattern, string) # \u4ecestring\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u5339\u914d\u5230\u4e0d\u7ee7\u7eed\u5411\u4e0b\u67e5\u627e\nmatchOnj3 = pattern.search(string, pos='', endpos='') # \u4ecestring\u7684pos\u5f00\u59cb\u5230endpos\u7ed3\u675f\uff0c\u67e5\u627e\u5339\u914d\u7684\u6a21\u5f0f\u4e00\u6b21\nlists = re.findall(regex_pattern, string) # \u4ecestring\u4e2d\u67e5\u627e\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u8fd4\u56de\u6240\u6709\u5339\u914d\u7684\u9009\u9879\u4e3a\u4e00\u4e2alist\nnew_string = re.sub(regex_pattern, replace_pattern, string) # \u6b63\u5219\u67e5\u627e\u66ff\u6362\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684\u65b0\u4e32\n(new_stirng, count) = re.subn(regex_pattern, replace_pattern, string) # \u591a\u8fd4\u56de\u4e00\u4e2a\u66ff\u6362\u6b21\u6570\n\nmatchObj == None # \u672a\u5339\u914d\u5230\nmatchObj.group(n) #\u5339\u914d\u5230\u7684\u5185\u5bb9, \u9ed8\u8ba4\u662f0\uff0c\u6574\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5927\u4e8e0\uff0c\u5c31\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u4e2dn\u7ec4\u5339\u914d\u5230\u7684\u5185\u5bb9\nmatchObj.start(n), matchObj.end(n) # \u7b2cn\u7ec4\u5339\u914d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u7d22\u5f15\n\n## \u6b63\u5219\u8bed\u6cd5\n(pattern) # \u5206\u7ec4\u4e14\u6355\u83b7\uff0c \u4f7f\u7528`\\n`\u5f15\u7528\n(?:pattern) # \u5206\u7ec4\u4e0d\u6355\u83b7\n(?P&lt;name&gt;pattern) # \u5206\u7ec4\u6355\u83b7\u5e76\u547d\u540d\uff0c\u4f7f\u7528`\\g&lt;name&gt;` \u5f15\u7528\n(?=pattern) # \u5339\u914d\u540e\u9762\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4f46\u662f\u4e0d\u6d88\u8d39(\u5339\u914d\u5230\u7684\u5185\u5bb9\u91cc\u9762\u6ca1\u6709pattern\u5339\u914d\u5230\u7684\u90e8\u5206)\n(?!pattern) # \u5339\u914d\u540e\u9762\u4e0d\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39\n(?&lt;=pattern) # \u5339\u914d\u524d\u9762\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39\n(?&lt;!pattern) # \u5339\u914d\u524d\u9762\u4e0d\u6ee1\u8db3pattern\u6a21\u5f0f\u7684\uff0c\u4e0d\u6d88\u8d39\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_7","title":"\u65f6\u95f4\u548c\u65e5\u671f","text":"<pre><code>import time\nimport datetime\n\nnow = datetime.datetime.now() # \u5f53\u524d\u65f6\u95f4\nstart = time.clock()\nend = time.clock() # end - start \u662f\u7ecf\u8fc7\u7684\u65f6\u95f4\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#json","title":"JSON","text":"<pre><code>import json\n\nObj = json.loads(json_text, object_paris_hook=OrderDict) # \u6587\u672c\u8f6c\u6210\u7ed3\u6784\njson_text = json.dumps(Obj)  # \u7ed3\u6784\u8f6c\u6362\u6210\u6587\u672c\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#sqlite","title":"SQLITE","text":"<pre><code>import sqlite3\nform sqlite3 import Error\n\nconn = create_connection(db_file) # \u4eceDB\u6587\u4ef6\u6253\u5f00\u6570\u636e\u5e93\ncurrent = conn.cursor()\ncurrent.execute(\"select * from table_name\")\nrows = current.fetchall()  # \u83b7\u5f97\u6267\u884cSQL\u8bed\u53e5\u7684\u7ed3\u679c\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_8","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_9","title":"\u5806","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#heapq","title":"heapq","text":"<pre><code>import heapq\n\nheap = heapq.heapify([1,2,3,4,5,6]) # \u521b\u5efa\u5806\nheapq.heappush(heap, element)\ntop = heapq.heappop(heap)\nlist1 = heapq.nlargest(k, heap, key=func) # \u8fd4\u56de\u524dK\u5927\nlist2 = heapq.nsmallest(k, heap, key=func) # \u8fd4\u56de\u524dK\u5c0f\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#queue","title":"queue","text":"<p>\u5f15\u5165\u5305\uff1a <code>from queue import PriorityQueue</code></p> <p>\u5b9a\u4e49\uff1a<code>minHeap = PriorityQueue()  # \u9ed8\u8ba4\u5efa\u7acb\u5c0f\u9876\u5806</code></p> <p>\u5224\u7a7a: <code>minHeap.empty()</code></p> <p>\u6dfb\u52a0\u5143\u7d20\uff1a<code>minHeap.put((key,value))</code> \u4e0d\u80fd\u4f20\u5165\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u4f20\u5165\u5143\u7ec4\uff0c\u6839\u636ekey\u7684\u503c\u5efa\u7acb\u5c0f\u9876\u5806</p> <p>\u5806\u9876\u5143\u7d20\uff1a<code>minHeap.get()</code> \u53d6\u5f97\u5e76\u5220\u9664\uff0c\u4e0eC++\u4e2d\u7684top()\u4e0d\u540c</p> <p>\u6ce8\u610f\uff1a\u4f20\u5165\u5143\u7ec4\u7684\u65f6\u5019\u5982\u679ckey\u76f8\u540c, \u4f1a\u8fdb\u4e00\u6b65\u6bd4\u8f83value, \u5982\u679cvalue\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u800c\u4e14\u6ca1\u6709\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u4f1a\u62a5\u9519\uff0c\u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f\u3002</p> <p>\u5927\u90e8\u5206\u4f7f\u7528\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u5165\u5143\u7ec4<code>(key, data)</code>\u63a7\u5236\u5806\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c \u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u8981\u6c42\uff0c\u53ef\u4ee5\u5728\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u578b\u4e0a\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_10","title":"\u5e38\u7528\u5e93","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#diff","title":"diff","text":"<pre><code>import difflib\n# \u83b7\u53d6string1, string2\u7684\u76f8\u4f3c\u5ea6\uff0c1\u8bf4\u660e\u5b8c\u5168\u76f8\u540c\ndeltas = difflib.SequenceMatcher(None, string1, string2).quick_ratio()\n\n# \u6bd4\u8f83\u76ee\u5f55\u548c\u6587\u4ef6\nimport filecmp\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_11","title":"\u5e8f\u5217\u5316","text":"<pre><code>import pickle\n\npickle.dump(Obj, file_path) # \u7ed3\u6784\u5b58\u5165\u6587\u4ef6\nObj = pickle.load(file_path) # \u4ece\u6587\u4ef6\u6062\u590d\u7ed3\u6784\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#_12","title":"\u8f93\u5165","text":"<pre><code># \u5904\u7406\u8f93\u5165\u9009\u9879\nimport getopt\n\n# cli\nimport click\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#python_1","title":"Python \u5e93","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#numpy","title":"numpy","text":"<pre><code>import numpy as np\n\na1 = np.array([1,2,3])\na2 = np.array([(1,2,3), (4,5,6)])\na3 = np.array([[1,2,3], [4,5,6]])\n\nnp.zeros((n, m, k)) # n \u884c m \u5217 k \u5c42\nnp.ones((n, m, k))\nnp.empty((n , m, k)) # \u4e0d\u521d\u59cb\u5316\uff0c\u4f7f\u7528\u5185\u5b58\u539f\u6765\u7684\u503c\n\nnp.arrange([start, end, step]) # \u521b\u5efa\u8303\u56f4[start, end], \u6b65\u957f\u662fstep\u7684\u4e00\u7ef4\u6570\u7ec4\nnp.linespace([start, end, count]) # \u521b\u5efa\u8303\u56f4\u4ece[start, end], \u603b\u6570\u91cf\u4e3acount\u7684\u4e00\u7ef4\u6570\u7ec4\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#pandas","title":"pandas","text":"<p>\u53ef\u4ee5\u7406\u89e3\u4e3a\u7535\u5b50\u8868\u683c, \u63d0\u4f9b\u4e86\u7c7b\u4f3cSQL\u8bed\u53e5\u7684\u5f3a\u5927\u64cd\u4f5c\u80fd\u529b\u3002</p> <pre><code>import pandas as pd\n\n#Series \u4e00\u7ef4\u6570\u636e\ns = pd.Series(data=5, index=['a', 'b', 'c']) # \u521b\u5efa\u4e00\u7ef4\u5e26\u540d\u5b57\u7684\u6570\u7ec4 [5,5,5] \u5217\u540d\u79f0\u4e3a a, b, c\ns = pd.Series(data=[1,2,3], index = ['a', 'b', 'c']) #\u521b\u5efa\u4e00\u7ef4\u5e26\u540d\u5b57\u7684\u6570\u7ec4 [1, 2, 3] \u5217\u540d\u79f0\u4e3a a, b, c\ns = pd.Series({\"a\":1, \"b\":2, \"c\":3}) # key \u4f5c\u4e3a\u5217\u540d\u79f0\uff0c \u503c\u4f5c\u4e3a\u5217\u7684\u503c\ns = pd.Series(data=dict, index=[]) # key \u5982\u679c\u5728index\u4e2d\uff0c\u52a0\u5165\uff0c\u5982\u679c\u4e0d\u5728\uff0c\u52a0\u5165\u8bbe\u7f6e\u503c\u4e3aNan\n\n# DataFrame \u4e8c\u4f4d\u6570\u636e\ndf = pd.DataFrame() # \u7a7a\ndf = read_csv(file, names=[]) # \u4eceCSV\u6587\u4ef6\u521b\u5efa\uff0c names\u4e3a\u6bcf\u4e00\u5217\u7684\u540d\u79f0\ndf = DataFrame(data, index=[], columns=[]) # data\u662f\u4e8c\u7ef4\u6570\u636e\uff0c index\u4e3a\u884c\u547d\u540d\uff0c columns\u4e3a\u5217\u547d\u540d\n\ndf['col_name'], df[['col1_name', 'col2_name']] # \u9009\u62e9\u67d0\u4e9b\u5217\ndf.loc['row_name'], df.iloc[row_index], df[row_begin_index : row_end_index], df[bool_vector] # \u9009\u62e9\u67d0\u4e9b\u5217\n\ndel df['row_name'], del df.loc['row_name'] # \u5220\u9664\u67d0\u4e9b\u884c\uff0c \u5220\u9664\u67d0\u4e9b\u5217\n\ngroups = df.groupby('col_name') # \u6309\u7167\u5217 col_name \u5206\u7ec4\ndf.sort_values('col_name') # \u6309\u7167\u67d0\u4e00\u5217\u6392\u5e8f\n\nrows_unique = pd.unique(df['col_name']) # \u83b7\u5f97\u67d0\u5217\u7684\u6240\u6709\u53ef\u80fd\u53d6\u503c\nnew_df = df[df['col_name'] == 'value'] # \u8fc7\u6ee4\u51fa\u5217\u503c\u4e3avalue\u7684\u6240\u6709\u884c\n\n# \u904d\u5386\u6bcf\u4e00\u884c\nfor row_num, row_content in df.iterrows():\n    print(row_num, row_content)\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#graphviz","title":"graphviz","text":"<p>\u4e00\u4e2a\u7528\u6765\u7ed8\u5236 .dot \u683c\u5f0f\u6587\u4ef6\u7684Python\u5305\u3002</p> <pre><code># pip install graphviz\nfrom graphviz import Graph, Digraph\n\n# \u652f\u6301\u7684\u8f93\u51fa\u683c\u5f0f pdf, svg, png\ndot = Digraph(comment=\"desciption\", filename='filename', format='pdf')\ndot.attr('node', shape='box') # \u4e3anode\u8bbe\u7f6e\u5f62\u72b6\ndot.attr(rankdir='LR', size='10,10') # \u8bbe\u7f6e\u56fe\u5f62\u5e03\u5c40\u4e3a\u4ece\u5de6\u5230\u53f3\uff0c10X10\n\ndot.node('name1', 'description1')\ndot.node('name1', 'description1')\ndot.node('name1', 'description1') # \u8bbe\u7f6e\u8282\u70b9\u540d\u79f0\n\ndot.edge('name1', 'name2') # \u8bbe\u7f6e\u8fb9\n\nprint(dot.source) # \u8f93\u51fa\u751f\u6210\u7684.dot\u683c\u5f0f\u6587\u4ef6\ndot.view() # \u67e5\u770b\u751f\u6210\u7684\u56fe\u7247\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/#pyton","title":"\u53d1\u5e03Pyton\u5e93","text":"<p>Pypi \u662f\u4e00\u4e2a\u53d1\u5e03\u7684\u5e73\u53f0\uff0c \u53d1\u5e03\u81ea\u5df1\u5199\u7684Python\u5e93\u4e4b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528pip install name \u5b89\u88c5\uff0c\u8fd8\u53ef\u4ee5\u5728pypi\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u81ea\u5df1\u7684\u5e93\u7684\u8bf4\u660e\u3002</p> <ol> <li>\u6ce8\u518c\u8d26\u53f7\u5e76\u767b\u9646</li> </ol> <p>https://pypi.org</p> <ol> <li>\u51c6\u5907\u6587\u4ef6</li> </ol> <p>\u53bb\u4efb\u610f\u4e00\u4e2a\u5df2\u7ecf\u53d1\u5e03\u7684\u5305\u7684 github \u5305\u4e3b\u9875\u4e0a\uff0c \u628a\u5bf9\u5e94\u7684\u6587\u4ef6\u62f7\u8d1d\u4e0b\u6765\u4fee\u6539\u6210\u81ea\u5df1\u7684\u5185\u5bb9\u3002</p> <p>setup.py\uff0c README.md\uff0c LICENSE \u4e09\u8005\u662f\u5fc5\u987b\u7684\u3002</p> <ol> <li> <p>\u6253\u5305 \u5728 setup.py \u540c\u7ea7\u4e0b\u6267\u884c <code>python setup.py bdist_wheel --universal</code></p> </li> <li> <p>\u4e0a\u4f20</p> </li> </ol> <p><code>twine upload dist/*</code>, \u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e4b\u540e\u4e0a\u4f20\u6210\u529f\u3002 \u53ef\u4ee5\u6253\u5f00\u7ed9\u51fa\u7684\u9875\u9762\u770b\u770b\u6548\u679c\u3002</p> <p>https://pypi.org/project/mkdocs-render-otherfile-plugin/</p> <ol> <li>\u5b89\u88c5\u9a8c\u8bc1</li> </ol> <p>pip install package-name</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/","title":"VS Code \u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883","text":"<p>VS Code \u662f\u4f7f\u7528\u8bed\u8a00\u670d\u52a1\u5668\u5b9e\u73b0\u7684\u7f16\u8bd1\u8c03\u8bd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u914d\u7f6e\u591a\u79cd\u7f16\u8bd1\u8c03\u8bd5\u73af\u5883\u3002 \u6839\u636e\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u7f16\u8bd1\u8c03\u8bd5\u547d\u4ee4\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5728\u4e00\u4e2a\u7f16\u8f91\u5668\u4e2d\u7f16\u5199\u5404\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u975e\u5e38\u65b9\u4fbf\u3002</p>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#python","title":"Python \u73af\u5883\u914d\u7f6e","text":"<p><code>launch.json</code> \u4e2d\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e</p> <pre><code>{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: \u5f53\u524d\u6587\u4ef6\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\", // ${file} \u662f\u5185\u7f6e\u53d8\u91cf\uff0c\u89e3\u6790\u6210\u5f53\u524d\u6587\u4ef6\u8def\u5f84\n            \"console\": \"integratedTerminal\"\n        }\n    ]\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#c-c","title":"C, C++ \u73af\u5883\u914d\u7f6e","text":""},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#windows-wsl","title":"Windows \u4e0b\u4f7f\u7528 WSL \u7f16\u8bd1\u548c\u8c03\u8bd5","text":"<p><code>task.json</code> \u4e2d\u914d\u7f6e</p> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"windows\": {\n        \"options\": {\n            \"shell\": {\n                \"executable\": \"c:\\\\windows\\\\System32\\\\bash.exe\",\n                \"args\": [\"-c\"]\n            }\n        }\n    },\n    \"tasks\": [\n        {\n            \"label\": \"build\",\n            \"type\": \"shell\",\n            \"command\": \"g++\",\n            \"args\": [\n                \"-g\",\n                \"-I\",\n                \"/usr/include/c++/8\",\n                \"-o\",\n                \"/mnt/d/FF120/workspace/leetcode/tmp/${fileBasename}.out\",\n                \"/mnt/d/FF120/workspace/leetcode/docs/leetcode/${fileBasenameNoExtension}/${fileBasename}\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"problemMatcher\": []\n        }\n    ]\n}\n</code></pre> <p><code>launch.json</code> \u4e2d\u914d\u7f6e</p> <pre><code>{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"GDB: \u5f53\u524d\u6587\u4ef6\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"/mnt/d/FF120/workspace/leetcode/tmp/${fileBasename}.out\",\n            \"args\": [\"-fThreading\"],\n            \"stopAtEntry\": true,\n            \"cwd\": \"/mnt/d/FF120/workspace/leetcode/\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"windows\": {\n                \"MIMode\": \"gdb\",\n                \"miDebuggerPath\": \"/usr/bin/gdb\",\n                \"setupCommands\": [\n                    {\n                        \"description\": \"Enable pretty-printing for gdb\",\n                        \"text\": \"-enable-pretty-printing\",\n                        \"ignoreFailures\": true\n                    }\n                ]\n            },\n            \"pipeTransport\": {\n                \"pipeCwd\": \"\",\n                \"pipeProgram\": \"c:\\\\windows\\\\System32\\\\bash.exe\",\n                \"pipeArgs\": [\"-c\"],\n                \"debuggerPath\": \"/usr/bin/gdb\"\n            },\n            \"sourceFileMap\": {\n                \"/mnt/d\": \"d://\",\n                \"/usr\": \"C:\\\\Users\\\\FF120\\\\AppData\\\\Local\\\\Packages\\\\KaliLinux.54290C8133FEE_ey8k8hqnwqnmg\\\\LocalState\\\\rootfs\\\\usr\\\\\"\n            },\n            \"preLaunchTask\" : \"build\"\n        }\n    ]\n}\n</code></pre> <p><code>c_cpp_properties.json</code> \u4e2d\u914d\u7f6e, \u7528\u6765\u652f\u6301\u667a\u80fd\u63d0\u793a\u548c\u8df3\u8f6c\u5230\u5934\u6587\u4ef6</p> <pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"compilerPath\": \"/usr/bin/g++\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"gcc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n</code></pre>"},{"location":"%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/vscode%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%A7%8D%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/#windowsclient-wsl-vs-code-server","title":"Windows\u4e0b\u53ea\u8fd0\u884cclient, WSL \u4e0b\u5b89\u88c5VS Code Server\u7f16\u8bd1\u548c\u8c03\u8bd5","text":"<p><code>task.json</code> \u4e2d\u914d\u7f6e</p> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n      {\n        \"type\": \"shell\",\n        \"label\": \"g++ build active file\",\n        \"command\": \"/usr/bin/g++\",\n        \"args\": [\"-g\", \"${file}\", \"-o\", \"${file}.o\"],\n        \"options\": {\n          \"cwd\": \"/usr/bin\"\n        },\n        \"problemMatcher\": [\"$gcc\"],\n        \"group\": {\n          \"kind\": \"build\",\n          \"isDefault\": true\n        }\n      }\n    ]\n}\n</code></pre> <p><code>launch.json</code> \u4e2d\u914d\u7f6e</p> <pre><code>{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"g++ build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${file}.o\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n              {\n                \"description\": \"Enable pretty-printing for gdb\",\n                \"text\": \"-enable-pretty-printing\",\n                \"ignoreFailures\": true\n              }\n            ],\n            \"preLaunchTask\": \"g++ build active file\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n          }\n    ]\n}\n</code></pre> <p><code>c_cpp_properties.json</code> \u4e2d\u914d\u7f6e</p> <pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"Win32\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [\n                \"_DEBUG\",\n                \"UNICODE\",\n                \"_UNICODE\"\n            ],\n            \"compilerPath\": \"/usr/bin/g++\",\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"gcc-x64\"\n        }\n    ],\n    \"version\": 4\n}\n</code></pre>"}]}